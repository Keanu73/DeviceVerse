{
	"id": "eb37e9249c0ee38239bcf908dd7321eb",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"PhoneMarketplace.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract PhoneMarketplace is ReentrancyGuard {\n    // Using native WND token on Westend\n    uint256 public constant CHAIN_ID = 420420421;\n    string public constant RPC_URL =\n        \"https://westend-asset-hub-eth-rpc.polkadot.io\";\n    string public constant EXPLORER_URL = \"https://assethub-westend.subscan.io\";\n    string public constant SYMBOL = \"WND\";\n\n    struct Phone {\n        address seller;\n        string manufacturer;\n        string modelName;\n        string modelCode;\n        string imei;\n        uint256 price;\n        bool isSold;\n        bool isVerified;\n        bool isDispatched;\n        bool isReceived;\n        address buyer;\n    }\n\n    Phone[] public phones;\n    mapping(address => uint256[]) public userPhones;\n\n    event PhoneListed(\n        uint256 indexed phoneId,\n        address indexed seller,\n        uint256 price\n    );\n    event PhoneSold(\n        uint256 indexed phoneId,\n        address indexed seller,\n        address indexed buyer,\n        uint256 price\n    );\n    event PhoneVerified(uint256 indexed phoneId, address indexed verifier);\n    event PhoneDispatched(uint256 indexed phoneId, address indexed seller);\n    event PhoneReceived(uint256 indexed phoneId, address indexed buyer);\n\n    constructor() {\n        require(\n            block.chainid == CHAIN_ID,\n            \"PhoneMarketplace: unsupported chain\"\n        );\n    }\n\n    function listPhone(\n        string memory manufacturer,\n        string memory modelName,\n        string memory modelCode,\n        string memory imei,\n        uint256 price\n    ) external returns (uint256) {\n        uint256 phoneId = phones.length;\n        phones.push(\n            Phone({\n                seller: msg.sender,\n                manufacturer: manufacturer,\n                modelName: modelName,\n                modelCode: modelCode,\n                imei: imei,\n                price: price,\n                isSold: false,\n                isVerified: false,\n                isDispatched: false,\n                isReceived: false,\n                buyer: address(0)\n            })\n        );\n        userPhones[msg.sender].push(phoneId);\n        emit PhoneListed(phoneId, msg.sender, price);\n        return phoneId;\n    }\n\n    function buyPhone(uint256 phoneId) external payable nonReentrant {\n        require(phoneId < phones.length, \"Phone does not exist\");\n        Phone storage phone = phones[phoneId];\n        require(!phone.isSold, \"Phone already sold\");\n        require(phone.seller != msg.sender, \"Cannot buy your own phone\");\n        require(msg.value == phone.price, \"Incorrect payment\");\n\n        phone.isSold = true;\n        phone.buyer = msg.sender;\n        emit PhoneSold(phoneId, phone.seller, msg.sender, phone.price);\n    }\n\n    function dispatchPhone(uint256 phoneId) external {\n        require(phoneId < phones.length, \"Phone does not exist\");\n        Phone storage phone = phones[phoneId];\n        require(phone.seller == msg.sender, \"Only seller can dispatch\");\n        require(phone.isSold, \"Phone not sold yet\");\n        require(!phone.isDispatched, \"Phone already dispatched\");\n\n        phone.isDispatched = true;\n        emit PhoneDispatched(phoneId, msg.sender);\n    }\n\n    function confirmReceived(uint256 phoneId) external {\n        require(phoneId < phones.length, \"Phone does not exist\");\n        Phone storage phone = phones[phoneId];\n        require(phone.buyer == msg.sender, \"Only buyer can confirm\");\n        require(phone.isSold, \"Phone not sold yet\");\n        require(phone.isDispatched, \"Phone not dispatched yet\");\n        require(!phone.isReceived, \"Already confirmed\");\n\n        phone.isReceived = true;\n        emit PhoneReceived(phoneId, msg.sender);\n\n        // Transfer native WND from escrow to seller\n        payable(phone.seller).transfer(phone.price);\n    }\n\n    function verifyPhone(\n        uint256 phoneId,\n        string memory imei\n    ) external returns (bool) {\n        require(phoneId < phones.length, \"Phone does not exist\");\n        Phone storage phone = phones[phoneId];\n        require(!phone.isVerified, \"Phone already verified\");\n        require(\n            keccak256(abi.encodePacked(phone.imei)) ==\n                keccak256(abi.encodePacked(imei)),\n            \"IMEI mismatch\"\n        );\n\n        phone.isVerified = true;\n        emit PhoneVerified(phoneId, msg.sender);\n        return true;\n    }\n\n    function getPhone(\n        uint256 phoneId\n    )\n        external\n        view\n        returns (\n            address seller,\n            string memory manufacturer,\n            string memory modelName,\n            string memory modelCode,\n            string memory imei,\n            uint256 price,\n            bool isSold,\n            bool isVerified,\n            bool isDispatched,\n            bool isReceived,\n            address buyer\n        )\n    {\n        require(phoneId < phones.length, \"Phone does not exist\");\n        Phone storage phone = phones[phoneId];\n        return (\n            phone.seller,\n            phone.manufacturer,\n            phone.modelName,\n            phone.modelCode,\n            phone.imei,\n            phone.price,\n            phone.isSold,\n            phone.isVerified,\n            phone.isDispatched,\n            phone.isReceived,\n            phone.buyer\n        );\n    }\n\n    function getPhoneCount() external view returns (uint256) {\n        return phones.length;\n    }\n\n    function getMyPhones() external view returns (uint256[] memory) {\n        return userPhones[msg.sender];\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [
						{
							"inputs": [],
							"name": "ReentrancyGuardReentrantCall",
							"type": "error"
						}
					],
					"metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]}},\"version\":1}",
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"errors": {
							"ReentrancyGuardReentrantCall()": [
								{
									"details": "Unauthorized reentrant call."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 10,
								"contract": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {}
					},
					"irOptimized": ""
				}
			},
			"PhoneMarketplace.sol": {
				"PhoneMarketplace": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ReentrancyGuardReentrantCall",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "phoneId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "seller",
									"type": "address"
								}
							],
							"name": "PhoneDispatched",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "phoneId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "seller",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								}
							],
							"name": "PhoneListed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "phoneId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "buyer",
									"type": "address"
								}
							],
							"name": "PhoneReceived",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "phoneId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "seller",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "buyer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								}
							],
							"name": "PhoneSold",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "phoneId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "verifier",
									"type": "address"
								}
							],
							"name": "PhoneVerified",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "CHAIN_ID",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "EXPLORER_URL",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "RPC_URL",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "SYMBOL",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "phoneId",
									"type": "uint256"
								}
							],
							"name": "buyPhone",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "phoneId",
									"type": "uint256"
								}
							],
							"name": "confirmReceived",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "phoneId",
									"type": "uint256"
								}
							],
							"name": "dispatchPhone",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getMyPhones",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "phoneId",
									"type": "uint256"
								}
							],
							"name": "getPhone",
							"outputs": [
								{
									"internalType": "address",
									"name": "seller",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "manufacturer",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "modelName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "modelCode",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "imei",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "isSold",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "isVerified",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "isDispatched",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "isReceived",
									"type": "bool"
								},
								{
									"internalType": "address",
									"name": "buyer",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPhoneCount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "manufacturer",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "modelName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "modelCode",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "imei",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								}
							],
							"name": "listPhone",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "phones",
							"outputs": [
								{
									"internalType": "address",
									"name": "seller",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "manufacturer",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "modelName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "modelCode",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "imei",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "isSold",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "isVerified",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "isDispatched",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "isReceived",
									"type": "bool"
								},
								{
									"internalType": "address",
									"name": "buyer",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "userPhones",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "phoneId",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "imei",
									"type": "string"
								}
							],
							"name": "verifyPhone",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phoneId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"PhoneDispatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phoneId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PhoneListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phoneId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"PhoneReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phoneId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PhoneSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phoneId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"PhoneVerified\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXPLORER_URL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RPC_URL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phoneId\",\"type\":\"uint256\"}],\"name\":\"buyPhone\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phoneId\",\"type\":\"uint256\"}],\"name\":\"confirmReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phoneId\",\"type\":\"uint256\"}],\"name\":\"dispatchPhone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyPhones\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phoneId\",\"type\":\"uint256\"}],\"name\":\"getPhone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"manufacturer\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"modelName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"modelCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imei\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDispatched\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isReceived\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPhoneCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"manufacturer\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"modelName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"modelCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imei\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listPhone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phones\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"manufacturer\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"modelName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"modelCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imei\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDispatched\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isReceived\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPhones\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phoneId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imei\",\"type\":\"string\"}],\"name\":\"verifyPhone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"PhoneMarketplace.sol\":\"PhoneMarketplace\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]},\"PhoneMarketplace.sol\":{\"keccak256\":\"0xbc4987ea2b3752d7182d668b973f9535dae79243007e549a75d73b19557f447f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7e4bd22e226bf6ab8292675fb0d4c082ded7a024189d1ab0f648ac9803168fe\",\"dweb:/ipfs/QmWoBy6BtpPwBDDj9dfRBy7gFwqUbQjQBv9EQoW8r8ZaCk\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"errors": {
							"ReentrancyGuardReentrantCall()": [
								{
									"details": "Unauthorized reentrant call."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 10,
								"contract": "PhoneMarketplace.sol:PhoneMarketplace",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 112,
								"contract": "PhoneMarketplace.sol:PhoneMarketplace",
								"label": "phones",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_struct(Phone)108_storage)dyn_storage"
							},
							{
								"astId": 117,
								"contract": "PhoneMarketplace.sol:PhoneMarketplace",
								"label": "userPhones",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_struct(Phone)108_storage)dyn_storage": {
								"base": "t_struct(Phone)108_storage",
								"encoding": "dynamic_array",
								"label": "struct PhoneMarketplace.Phone[]",
								"numberOfBytes": "32"
							},
							"t_array(t_uint256)dyn_storage": {
								"base": "t_uint256",
								"encoding": "dynamic_array",
								"label": "uint256[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256[])",
								"numberOfBytes": "32",
								"value": "t_array(t_uint256)dyn_storage"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Phone)108_storage": {
								"encoding": "inplace",
								"label": "struct PhoneMarketplace.Phone",
								"members": [
									{
										"astId": 87,
										"contract": "PhoneMarketplace.sol:PhoneMarketplace",
										"label": "seller",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 89,
										"contract": "PhoneMarketplace.sol:PhoneMarketplace",
										"label": "manufacturer",
										"offset": 0,
										"slot": "1",
										"type": "t_string_storage"
									},
									{
										"astId": 91,
										"contract": "PhoneMarketplace.sol:PhoneMarketplace",
										"label": "modelName",
										"offset": 0,
										"slot": "2",
										"type": "t_string_storage"
									},
									{
										"astId": 93,
										"contract": "PhoneMarketplace.sol:PhoneMarketplace",
										"label": "modelCode",
										"offset": 0,
										"slot": "3",
										"type": "t_string_storage"
									},
									{
										"astId": 95,
										"contract": "PhoneMarketplace.sol:PhoneMarketplace",
										"label": "imei",
										"offset": 0,
										"slot": "4",
										"type": "t_string_storage"
									},
									{
										"astId": 97,
										"contract": "PhoneMarketplace.sol:PhoneMarketplace",
										"label": "price",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 99,
										"contract": "PhoneMarketplace.sol:PhoneMarketplace",
										"label": "isSold",
										"offset": 0,
										"slot": "6",
										"type": "t_bool"
									},
									{
										"astId": 101,
										"contract": "PhoneMarketplace.sol:PhoneMarketplace",
										"label": "isVerified",
										"offset": 1,
										"slot": "6",
										"type": "t_bool"
									},
									{
										"astId": 103,
										"contract": "PhoneMarketplace.sol:PhoneMarketplace",
										"label": "isDispatched",
										"offset": 2,
										"slot": "6",
										"type": "t_bool"
									},
									{
										"astId": 105,
										"contract": "PhoneMarketplace.sol:PhoneMarketplace",
										"label": "isReceived",
										"offset": 3,
										"slot": "6",
										"type": "t_bool"
									},
									{
										"astId": 107,
										"contract": "PhoneMarketplace.sol:PhoneMarketplace",
										"label": "buyer",
										"offset": 4,
										"slot": "6",
										"type": "t_address"
									}
								],
								"numberOfBytes": "224"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 160/65712 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 28588\n// Code size = 91370 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x200a0]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x200a0] = a1\n    42: a1 = 0x200b0\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x200b0\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 1)\n    64: jump @22 if a0 == a1\n      : @9 (gas: 9)\n    67: a3 = a1 << 0x20\n    70: a3 = a3 >> 0x20\n    73: a4 = a0 << 0x20\n    76: a4 = a4 >> 0x20\n    79: a4 = a4 + a2\n    82: a3 = a3 - a4\n    85: a4 = a2 << 0x1\n    88: a4 = -a4\n    90: jump @15 if a4 >=u a3\n      : @10 (gas: 1)\n    93: jump @19 if a0 >=u a1\n      : @11 (gas: 1)\n    96: jump @22 if a2 == 0\n      : @12 (gas: 3)\n    99: a2 = a2 + a0\n   102: a3 = a0\n   104: fallthrough\n      : @13 (gas: 6)\n   105: a4 = u8 [a1]\n   107: a1 = a1 + 0x1\n   110: a5 = a3 + 0x1\n   113: u8 [a3] = a4\n   115: a3 = a5\n   117: jump @13 if a5 != a2\n      : @14 (gas: 1)\n   120: jump @22\n      : @15 (gas: 1)\n   122: jump @22 if a2 == 0\n      : @16 (gas: 3)\n   125: a2 = a2 + a0\n   128: a3 = a0\n   130: fallthrough\n      : @17 (gas: 6)\n   131: a4 = u8 [a1]\n   133: a1 = a1 + 0x1\n   136: a5 = a3 + 0x1\n   139: u8 [a3] = a4\n   141: a3 = a5\n   143: jump @17 if a5 != a2\n      : @18 (gas: 1)\n   146: jump @22\n      : @19 (gas: 1)\n   148: jump @22 if a2 == 0\n      : @20 (gas: 2)\n   151: i32 a3 = a2 + 0xffffffffffffffff\n   154: fallthrough\n      : @21 (gas: 7)\n   155: a4 = a1 + a3\n   158: a4 = u8 [a4]\n   160: a2 = a2 + 0xffffffffffffffff\n   163: a5 = a0 + a3\n   166: u8 [a5] = a4\n   168: i32 a3 = a3 + 0xffffffffffffffff\n   171: jump @21 if a2 != 0\n      : @22 (gas: 1)\n   174: ret\n      : @23 (gas: 13)\n   176: sp = sp + 0xffffffffffffffd8\n   179: u64 [sp + 0x20] = ra\n   182: u64 [sp + 0x18] = s0\n   185: u64 [sp + 0x10] = s1\n   188: a2 = u64 [a1]\n   190: u64 [sp + 0x8] = a2\n   193: a2 = u64 [a1 + 0x8]\n   196: u64 [sp] = a2\n   198: s0 = u64 [a1 + 0x10]\n   201: s1 = u64 [a1 + 0x18]\n   204: i32 a0 = a0 + 0\n   206: a1 = 0x20\n   209: ra = 2, jump @0\n      : @24 [@dyn 1] (gas: 71)\n   214: a1 = reverse s1\n   216: a2 = reverse s0\n   218: a3 = u64 [sp]\n   220: a3 = reverse a3\n   222: a4 = u64 [sp + 0x8]\n   225: a4 = reverse a4\n   227: u8 [a0 + 0x18] = a4\n   230: u8 [a0 + 0x10] = a3\n   233: u8 [a0 + 0x8] = a2\n   236: u8 [a0] = a1\n   238: a5 = a4 >> 0x38\n   241: u8 [a0 + 0x1f] = a5\n   244: a5 = a4 >> 0x30\n   247: u8 [a0 + 0x1e] = a5\n   250: a5 = a4 >> 0x28\n   253: u8 [a0 + 0x1d] = a5\n   256: a5 = a4 >> 0x20\n   259: u8 [a0 + 0x1c] = a5\n   262: a5 = a4 >> 0x18\n   265: u8 [a0 + 0x1b] = a5\n   268: a5 = a4 >> 0x10\n   271: u8 [a0 + 0x1a] = a5\n   274: a4 = a4 >> 0x8\n   277: u8 [a0 + 0x19] = a4\n   280: a4 = a3 >> 0x38\n   283: u8 [a0 + 0x17] = a4\n   286: a4 = a3 >> 0x30\n   289: u8 [a0 + 0x16] = a4\n   292: a4 = a3 >> 0x28\n   295: u8 [a0 + 0x15] = a4\n   298: a4 = a3 >> 0x20\n   301: u8 [a0 + 0x14] = a4\n   304: a4 = a3 >> 0x18\n   307: u8 [a0 + 0x13] = a4\n   310: a4 = a3 >> 0x10\n   313: u8 [a0 + 0x12] = a4\n   316: a3 = a3 >> 0x8\n   319: u8 [a0 + 0x11] = a3\n   322: a3 = a2 >> 0x38\n   325: u8 [a0 + 0xf] = a3\n   328: a3 = a2 >> 0x30\n   331: u8 [a0 + 0xe] = a3\n   334: a3 = a2 >> 0x28\n   337: u8 [a0 + 0xd] = a3\n   340: a3 = a2 >> 0x20\n   343: u8 [a0 + 0xc] = a3\n   346: a3 = a2 >> 0x18\n   349: u8 [a0 + 0xb] = a3\n   352: a3 = a2 >> 0x10\n   355: u8 [a0 + 0xa] = a3\n   358: a2 = a2 >> 0x8\n   361: u8 [a0 + 0x9] = a2\n   364: a2 = a1 >> 0x38\n   367: u8 [a0 + 0x7] = a2\n   370: a2 = a1 >> 0x30\n   373: u8 [a0 + 0x6] = a2\n   376: a2 = a1 >> 0x28\n   379: u8 [a0 + 0x5] = a2\n   382: a2 = a1 >> 0x20\n   385: u8 [a0 + 0x4] = a2\n   388: a2 = a1 >> 0x18\n   391: u8 [a0 + 0x3] = a2\n   394: a2 = a1 >> 0x10\n   397: u8 [a0 + 0x2] = a2\n   400: a1 = a1 >> 0x8\n   403: u8 [a0 + 0x1] = a1\n   406: ra = u64 [sp + 0x20]\n   409: s0 = u64 [sp + 0x18]\n   412: s1 = u64 [sp + 0x10]\n   415: sp = sp + 0x28\n   418: ret\n      : @25 (gas: 6)\n   420: sp = sp + 0xfffffffffffffff0\n   423: u64 [sp + 0x8] = ra\n   426: u64 [sp] = s0\n   428: s0 = a0 & 0x1\n   431: ecalli 3 // 'call_data_size'\n   433: fallthrough\n      : @26 (gas: 2)\n   434: u32 [0x200a4] = a0\n   439: jump @28 if s0 == 0\n      : @27 (gas: 1)\n   442: ra = 4, jump @29\n      : @28 [@dyn 2] (gas: 1)\n   446: ra = 6, jump @44\n      : @29 [@dyn 3] (gas: 9)\n   451: sp = sp + 0xffffffffffffffc0\n   454: u64 [sp + 0x38] = ra\n   457: u64 [sp + 0x30] = s0\n   460: u64 [sp + 0x28] = s1\n   463: s0 = sp + 0x40\n   466: sp = sp & 0xffffffffffffffe0\n   469: a0 = 0x40\n   472: a1 = 0x20\n   475: ra = 8, jump @0\n      : @30 [@dyn 4] (gas: 39)\n   480: u8 [a0 + 31] = 0x80\n   485: u8 [a0 + 30] = 0\n   488: u8 [a0 + 29] = 0\n   491: u8 [a0 + 28] = 0\n   494: u8 [a0 + 27] = 0\n   497: u8 [a0 + 26] = 0\n   500: u8 [a0 + 25] = 0\n   503: u8 [a0 + 24] = 0\n   506: u8 [a0 + 23] = 0\n   509: u8 [a0 + 22] = 0\n   512: u8 [a0 + 21] = 0\n   515: u8 [a0 + 20] = 0\n   518: u8 [a0 + 19] = 0\n   521: u8 [a0 + 18] = 0\n   524: u8 [a0 + 17] = 0\n   527: u8 [a0 + 16] = 0\n   530: u8 [a0 + 15] = 0\n   533: u8 [a0 + 14] = 0\n   536: u8 [a0 + 13] = 0\n   539: u8 [a0 + 12] = 0\n   542: u8 [a0 + 11] = 0\n   545: u8 [a0 + 10] = 0\n   548: u8 [a0 + 9] = 0\n   551: u8 [a0 + 8] = 0\n   554: u8 [a0 + 7] = 0\n   557: u8 [a0 + 6] = 0\n   560: u8 [a0 + 5] = 0\n   563: u8 [a0 + 4] = 0\n   566: u8 [a0 + 3] = 0\n   569: u8 [a0 + 2] = 0\n   572: u8 [a0 + 1] = 0\n   575: u8 [a0 + 0] = 0\n   577: u64 [sp + 24] = 0\n   580: u64 [sp + 0] = 0\n   582: u64 [sp + 8] = 0\n   585: u64 [sp + 16] = 0\n   588: i32 a0 = sp + 0\n   590: ecalli 14 // 'value_transferred'\n   592: fallthrough\n      : @31 (gas: 8)\n   593: a0 = u64 [sp + 0x10]\n   596: a1 = u64 [sp + 0x18]\n   599: a2 = u64 [sp + 0x8]\n   602: a3 = u64 [sp]\n   604: a1 = a1 | a2\n   607: a0 = a0 | a3\n   610: a0 = a0 | a1\n   613: jump @36 if a0 != 0\n      : @32 (gas: 39)\n   617: ra = 0xa\n   620: sp = sp + 0xffffffffffffff00\n   624: u64 [sp + 0xf8] = ra\n   628: u64 [sp + 0xf0] = s0\n   632: u64 [sp + 0xe8] = s1\n   636: s0 = sp + 0x100\n   640: sp = sp & 0xffffffffffffffe0\n   643: u64 [sp + 184] = 0\n   647: u64 [sp + 176] = 0\n   651: u64 [sp + 168] = 0\n   655: u64 [sp + 160] = 0\n   659: u64 [sp + 216] = 0\n   663: u64 [sp + 208] = 0\n   667: u64 [sp + 200] = 0\n   671: u64 [sp + 192] = 0\n   675: u32 [sp + 128] = 0x20\n   680: i32 a1 = sp + 0xa0\n   684: i32 a3 = sp + 0xc0\n   688: i32 a4 = sp + 0x80\n   692: a2 = 0xffffffffffffffff\n   695: a0 = 0\n   697: ecalli 7 // 'get_storage'\n   699: u64 [sp + 184] = 0\n   703: u64 [sp + 176] = 0\n   707: u64 [sp + 168] = 0\n   711: u64 [sp + 160] = 0\n   715: u64 [sp + 216] = 0\n   719: u64 [sp + 208] = 0\n   723: u64 [sp + 200] = 0\n   727: u64 [sp + 192] = 0x1\n   732: i32 a1 = sp + 0xa0\n   736: i32 a3 = sp + 0xc0\n   740: a2 = 0xffffffffffffffff\n   743: a4 = 0x20\n   746: a0 = 0\n   748: ecalli 13 // 'set_storage'\n   750: i32 a0 = sp + 0x60\n   753: ecalli 5 // 'chain_id'\n   755: jump @93\n      : @33 [@dyn 5] (gas: 3)\n   758: a0 = 0x40\n   761: a1 = 0x20\n   764: ra = 12, jump @0\n      : @34 [@dyn 6] (gas: 100)\n   769: a1 = u8 [a0 + 0x11]\n   772: a2 = u8 [a0 + 0x10]\n   775: a3 = u8 [a0 + 0x12]\n   778: a4 = u8 [a0 + 0x13]\n   781: a1 = a1 << 0x8\n   784: a1 = a1 | a2\n   787: a3 = a3 << 0x10\n   790: a4 = a4 << 0x18\n   793: a3 = a3 | a4\n   796: a1 = a1 | a3\n   799: a2 = u8 [a0 + 0x15]\n   802: a3 = u8 [a0 + 0x14]\n   805: a4 = u8 [a0 + 0x16]\n   808: a5 = u8 [a0 + 0x17]\n   811: a2 = a2 << 0x8\n   814: a2 = a2 | a3\n   817: a4 = a4 << 0x10\n   820: a5 = a5 << 0x18\n   823: a4 = a4 | a5\n   826: a2 = a2 | a4\n   829: a2 = a2 << 0x20\n   832: t0 = a2 | a1\n   835: a2 = u8 [a0 + 0x1]\n   838: a3 = u8 [a0]\n   840: a4 = u8 [a0 + 0x2]\n   843: a5 = u8 [a0 + 0x3]\n   846: a2 = a2 << 0x8\n   849: a2 = a2 | a3\n   852: a4 = a4 << 0x10\n   855: a5 = a5 << 0x18\n   858: a4 = a4 | a5\n   861: a2 = a2 | a4\n   864: a3 = u8 [a0 + 0x5]\n   867: a4 = u8 [a0 + 0x4]\n   870: a5 = u8 [a0 + 0x6]\n   873: s1 = u8 [a0 + 0x7]\n   876: a3 = a3 << 0x8\n   879: a3 = a3 | a4\n   882: a5 = a5 << 0x10\n   885: s1 = s1 << 0x18\n   888: a5 = a5 | s1\n   891: a3 = a3 | a5\n   894: a3 = a3 << 0x20\n   897: a2 = a2 | a3\n   900: a3 = u8 [a0 + 0x19]\n   903: a4 = u8 [a0 + 0x18]\n   906: a5 = u8 [a0 + 0x1a]\n   909: s1 = u8 [a0 + 0x1b]\n   912: a3 = a3 << 0x8\n   915: a3 = a3 | a4\n   918: a5 = a5 << 0x10\n   921: s1 = s1 << 0x18\n   924: a5 = a5 | s1\n   927: a3 = a3 | a5\n   930: a4 = u8 [a0 + 0x1d]\n   933: a5 = u8 [a0 + 0x1c]\n   936: s1 = u8 [a0 + 0x1e]\n   939: a1 = u8 [a0 + 0x1f]\n   942: a4 = a4 << 0x8\n   945: a4 = a4 | a5\n   948: s1 = s1 << 0x10\n   951: a1 = a1 << 0x18\n   954: a1 = a1 | s1\n   957: a1 = a1 | a4\n   960: a1 = a1 << 0x20\n   963: a3 = a3 | a1\n   966: a1 = u8 [a0 + 0x9]\n   969: a4 = u8 [a0 + 0x8]\n   972: a5 = u8 [a0 + 0xa]\n   975: s1 = u8 [a0 + 0xb]\n   978: a1 = a1 << 0x8\n   981: a1 = a1 | a4\n   984: a5 = a5 << 0x10\n   987: s1 = s1 << 0x18\n   990: a5 = a5 | s1\n   993: a1 = a1 | a5\n   996: a4 = u8 [a0 + 0xd]\n   999: a5 = u8 [a0 + 0xc]\n  1002: s1 = u8 [a0 + 0xe]\n  1005: a0 = u8 [a0 + 0xf]\n  1008: a4 = a4 << 0x8\n  1011: a4 = a4 | a5\n  1014: s1 = s1 << 0x10\n  1017: a0 = a0 << 0x18\n  1020: a0 = a0 | s1\n  1023: a0 = a0 | a4\n  1026: a0 = a0 << 0x20\n  1029: a0 = a0 | a1\n  1032: a0 = reverse a0\n  1034: s1 = reverse a3\n  1036: a1 = reverse a2\n  1038: a2 = reverse t0\n  1040: a1 = a1 | a2\n  1043: a2 = s1 | a0\n  1046: a2 = a2 | a1\n  1049: a2 = a2 >> 0x20\n  1052: a0 = a0 | a1\n  1055: a0 = a0 << 0x20\n  1058: a0 = a0 | a2\n  1061: jump @38 if a0 == 0\n      : @35 (gas: 1)\n  1064: trap\n      : @36 (gas: 3)\n  1065: a0 = 0\n  1067: a1 = 0\n  1069: ra = 14, jump @0\n      : @37 [@dyn 7] (gas: 5)\n  1074: i32 a1 = a0 + 0\n  1076: a0 = 0x1\n  1079: a2 = 0\n  1081: ecalli 11 // 'seal_return'\n  1083: fallthrough\n      : @38 (gas: 4)\n  1084: i32 s1 = s1 + 0\n  1086: a0 = s1\n  1088: a1 = 0\n  1090: ra = 16, jump @0\n      : @39 [@dyn 8] (gas: 5)\n  1095: i32 a0 = a0 + 0\n  1097: a1 = 0\n  1099: a2 = 0\n  1101: ecalli 1 // 'call_data_copy'\n  1103: fallthrough\n      : @40 (gas: 2)\n  1104: a1 = i32 [0x200a8]\n  1109: jump @42 if a1 == 0\n      : @41 (gas: 4)\n  1112: a0 = 0x300b0\n  1117: i32 a0 = a0 + 0\n  1119: ecalli 12 // 'set_immutable_data'\n  1121: fallthrough\n      : @42 (gas: 3)\n  1122: a0 = s1\n  1124: a1 = 0\n  1126: ra = 18, jump @0\n      : @43 [@dyn 9] (gas: 6)\n  1131: i32 a1 = a0 + 0\n  1133: a0 = 0\n  1135: a2 = 0\n  1137: ra = 0x14\n  1140: ecalli 11 // 'seal_return'\n  1142: fallthrough\n      : @44 [@dyn 10] (gas: 8)\n  1143: sp = sp + 0xffffffffffffffc0\n  1146: u64 [sp + 0x38] = ra\n  1149: u64 [sp + 0x30] = s0\n  1152: s0 = sp + 0x40\n  1155: sp = sp & 0xffffffffffffffe0\n  1158: a0 = 0x40\n  1161: a1 = 0x20\n  1164: ra = 22, jump @0\n      : @45 [@dyn 11] (gas: 34)\n  1169: u8 [a0 + 31] = 0x80\n  1174: u8 [a0 + 30] = 0\n  1177: u8 [a0 + 29] = 0\n  1180: u8 [a0 + 28] = 0\n  1183: u8 [a0 + 27] = 0\n  1186: u8 [a0 + 26] = 0\n  1189: u8 [a0 + 25] = 0\n  1192: u8 [a0 + 24] = 0\n  1195: u8 [a0 + 23] = 0\n  1198: u8 [a0 + 22] = 0\n  1201: u8 [a0 + 21] = 0\n  1204: u8 [a0 + 20] = 0\n  1207: u8 [a0 + 19] = 0\n  1210: u8 [a0 + 18] = 0\n  1213: u8 [a0 + 17] = 0\n  1216: u8 [a0 + 16] = 0\n  1219: u8 [a0 + 15] = 0\n  1222: u8 [a0 + 14] = 0\n  1225: u8 [a0 + 13] = 0\n  1228: u8 [a0 + 12] = 0\n  1231: u8 [a0 + 11] = 0\n  1234: u8 [a0 + 10] = 0\n  1237: u8 [a0 + 9] = 0\n  1240: u8 [a0 + 8] = 0\n  1243: u8 [a0 + 7] = 0\n  1246: u8 [a0 + 3] = 0\n  1249: u8 [a0 + 2] = 0\n  1252: u8 [a0 + 1] = 0\n  1255: u8 [a0 + 0] = 0\n  1257: a1 = i32 [0x200a4]\n  1262: u8 [a0 + 6] = 0\n  1265: u8 [a0 + 5] = 0\n  1268: u8 [a0 + 4] = 0\n  1271: jump @72 if a1 <u 4\n      : @46 (gas: 4)\n  1276: i32 a0 = sp + 0\n  1278: a1 = 0\n  1280: ecalli 2 // 'call_data_load'\n  1282: fallthrough\n      : @47 (gas: 2)\n  1283: a0 = i32 [sp + 0x1c]\n  1286: jump @53 if a0 >s 4151283063\n      : @48 (gas: 1)\n  1293: jump @58 if a0 <=s 3133973225\n      : @49 (gas: 2)\n  1300: a1 = 0xffffffffbfa7f000\n  1306: jump @66 if a0 >s 3215453890\n      : @50 (gas: 1)\n  1314: jump @73 if a0 == 3133973226\n      : @51 (gas: 1)\n  1322: jump @72 if a0 != 3186503735\n      : @52 (gas: 1)\n  1330: ra = 24, jump @412\n      : @53 [@dyn 12] (gas: 1)\n  1335: jump @62 if a0 <=s 286968122\n      : @54 (gas: 2)\n  1343: a1 = 0x2e7d4000\n  1349: jump @69 if a0 >s 779961524\n      : @55 (gas: 1)\n  1357: jump @74 if a0 == 286968123\n      : @56 (gas: 1)\n  1365: jump @72 if a0 != 668648301\n      : @57 (gas: 13)\n  1373: ra = 0x1a\n  1376: sp = sp + 0xffffffffffffff80\n  1379: u64 [sp + 0x78] = ra\n  1382: u64 [sp + 0x70] = s0\n  1385: s0 = sp + 0x80\n  1389: sp = sp & 0xffffffffffffffe0\n  1392: u64 [sp + 56] = 0\n  1395: u64 [sp + 48] = 0\n  1398: u64 [sp + 40] = 0\n  1401: u64 [sp + 32] = 0\n  1404: i32 a0 = sp + 0x20\n  1407: ecalli 14 // 'value_transferred'\n  1409: jump @264\n      : @58 [@dyn 13] (gas: 1)\n  1412: jump @77 if a0 == 2246178000\n      : @59 (gas: 1)\n  1420: jump @79 if a0 == 2578758815\n      : @60 (gas: 1)\n  1428: jump @72 if a0 != 2937162083\n      : @61 (gas: 14)\n  1436: ra = 0x1c\n  1439: sp = sp + 0xfffffffffffffea0\n  1443: u64 [sp + 0x158] = ra\n  1447: u64 [sp + 0x150] = s0\n  1451: u64 [sp + 0x148] = s1\n  1455: s0 = sp + 0x160\n  1459: sp = sp & 0xffffffffffffffe0\n  1462: u64 [sp + 248] = 0\n  1466: u64 [sp + 240] = 0\n  1470: u64 [sp + 232] = 0\n  1474: u64 [sp + 224] = 0\n  1478: i32 a0 = sp + 0xe0\n  1482: ecalli 14 // 'value_transferred'\n  1484: jump @387\n      : @62 [@dyn 14] (gas: 1)\n  1487: jump @78 if a0 == 4151283064\n      : @63 (gas: 1)\n  1495: jump @80 if a0 == 4166204560\n      : @64 (gas: 1)\n  1503: jump @72 if a0 != 89008946\n      : @65 (gas: 14)\n  1510: ra = 0x1e\n  1513: sp = sp + 0xfffffffffffffdc0\n  1517: u64 [sp + 0x238] = ra\n  1521: u64 [sp + 0x230] = s0\n  1525: u64 [sp + 0x228] = s1\n  1529: s0 = sp + 0x240\n  1533: sp = sp & 0xffffffffffffffe0\n  1536: u64 [sp + 536] = 0\n  1540: u64 [sp + 528] = 0\n  1544: u64 [sp + 520] = 0\n  1548: u64 [sp + 512] = 0\n  1552: i32 a0 = sp + 0x200\n  1556: ecalli 14 // 'value_transferred'\n  1558: jump @193\n      : @66 [@dyn 15] (gas: 2)\n  1561: i32 a1 = a1 + 0xfffffffffffffec3\n  1565: jump @75 if a0 == a1\n      : @67 (gas: 1)\n  1568: jump @72 if a0 != 4084401747\n      : @68 (gas: 1)\n  1575: ra = 32, jump @534\n      : @69 [@dyn 16] (gas: 2)\n  1581: i32 a1 = a1 + 0x4b5\n  1585: jump @76 if a0 == a1\n      : @70 (gas: 1)\n  1588: jump @72 if a0 != 1630721929\n      : @71 (gas: 1)\n  1595: ra = 34, jump @315\n      : @72 [@dyn 17] (gas: 7)\n  1600: ra = 0x24\n  1603: sp = sp + 0xfffffffffffffff8\n  1606: u64 [sp] = ra\n  1608: a0 = 0\n  1610: a1 = 0\n  1612: ra = 0x4a\n  1615: jump @0\n      : @73 [@dyn 18] (gas: 1)\n  1618: ra = 38, jump @402\n      : @74 [@dyn 19] (gas: 14)\n  1623: ra = 0x28\n  1626: sp = sp + 0xfffffffffffffec0\n  1630: u64 [sp + 0x138] = ra\n  1634: u64 [sp + 0x130] = s0\n  1638: u64 [sp + 0x128] = s1\n  1642: s0 = sp + 0x140\n  1646: sp = sp & 0xffffffffffffffe0\n  1649: u64 [sp + 280] = 0\n  1653: u64 [sp + 272] = 0\n  1657: u64 [sp + 264] = 0\n  1661: u64 [sp + 256] = 0\n  1665: i32 a0 = sp + 0x100\n  1669: ecalli 14 // 'value_transferred'\n  1671: jump @238\n      : @75 [@dyn 20] (gas: 1)\n  1674: ra = 42, jump @465\n      : @76 [@dyn 21] (gas: 14)\n  1679: ra = 0x2c\n  1682: sp = sp + 0xfffffffffffffac0\n  1686: u64 [sp + 0x538] = ra\n  1690: u64 [sp + 0x530] = s0\n  1694: u64 [sp + 0x528] = s1\n  1698: s0 = sp + 0x540\n  1702: sp = sp & 0xffffffffffffffe0\n  1705: u64 [sp + 1272] = 0\n  1709: u64 [sp + 1264] = 0\n  1713: u64 [sp + 1256] = 0\n  1717: u64 [sp + 1248] = 0\n  1721: i32 a0 = sp + 0x4e0\n  1725: ecalli 14 // 'value_transferred'\n  1727: jump @303\n      : @77 [@dyn 22] (gas: 14)\n  1730: ra = 0x2e\n  1733: sp = sp + 0xffffffffffffffc0\n  1736: u64 [sp + 0x38] = ra\n  1739: u64 [sp + 0x30] = s0\n  1742: u64 [sp + 0x28] = s1\n  1745: s0 = sp + 0x40\n  1748: sp = sp & 0xffffffffffffffe0\n  1751: u64 [sp + 24] = 0\n  1754: u64 [sp + 16] = 0\n  1757: u64 [sp + 8] = 0\n  1760: u64 [sp + 0] = 0\n  1762: i32 a0 = sp + 0\n  1764: ecalli 14 // 'value_transferred'\n  1766: jump @327\n      : @78 [@dyn 23] (gas: 14)\n  1769: ra = 0x30\n  1772: sp = sp + 0xfffffffffffffec0\n  1776: u64 [sp + 0x138] = ra\n  1780: u64 [sp + 0x130] = s0\n  1784: u64 [sp + 0x128] = s1\n  1788: s0 = sp + 0x140\n  1792: sp = sp & 0xffffffffffffffe0\n  1795: u64 [sp + 280] = 0\n  1799: u64 [sp + 272] = 0\n  1803: u64 [sp + 264] = 0\n  1807: u64 [sp + 256] = 0\n  1811: i32 a0 = sp + 0x100\n  1815: ecalli 14 // 'value_transferred'\n  1817: jump @551\n      : @79 [@dyn 24] (gas: 14)\n  1821: ra = 0x32\n  1824: sp = sp + 0xfffffffffffffee0\n  1828: u64 [sp + 0x118] = ra\n  1832: u64 [sp + 0x110] = s0\n  1836: u64 [sp + 0x108] = s1\n  1840: s0 = sp + 0x120\n  1844: sp = sp & 0xffffffffffffffe0\n  1847: u64 [sp + 248] = 0\n  1851: u64 [sp + 240] = 0\n  1855: u64 [sp + 232] = 0\n  1859: u64 [sp + 224] = 0\n  1863: i32 a0 = sp + 0xe0\n  1867: ecalli 14 // 'value_transferred'\n  1869: jump @355\n      : @80 [@dyn 25] (gas: 14)\n  1872: ra = 0x34\n  1875: sp = sp + 0xfffffffffffffec0\n  1879: u64 [sp + 0x138] = ra\n  1883: u64 [sp + 0x130] = s0\n  1887: u64 [sp + 0x128] = s1\n  1891: s0 = sp + 0x140\n  1895: sp = sp & 0xffffffffffffffe0\n  1898: u64 [sp + 280] = 0\n  1902: u64 [sp + 272] = 0\n  1906: u64 [sp + 264] = 0\n  1910: u64 [sp + 256] = 0\n  1914: i32 a0 = sp + 0x100\n  1918: ecalli 14 // 'value_transferred'\n  1920: jump @574\n      : @81 [@dyn 26] (gas: 7)\n  1924: sp = sp + 0xfffffffffffffff0\n  1927: u64 [sp + 0x8] = ra\n  1930: u64 [sp] = s0\n  1932: s0 = a0\n  1934: a0 = 0x40\n  1937: a1 = 0x20\n  1940: ra = 54, jump @0\n      : @82 [@dyn 27] (gas: 100)\n  1945: a1 = u8 [a0 + 0x1]\n  1948: a2 = u8 [a0]\n  1950: a3 = u8 [a0 + 0x2]\n  1953: a4 = u8 [a0 + 0x3]\n  1956: a1 = a1 << 0x8\n  1959: a1 = a1 | a2\n  1962: a3 = a3 << 0x10\n  1965: a4 = a4 << 0x18\n  1968: a3 = a3 | a4\n  1971: a1 = a1 | a3\n  1974: a2 = u8 [a0 + 0x5]\n  1977: a3 = u8 [a0 + 0x4]\n  1980: a4 = u8 [a0 + 0x6]\n  1983: a5 = u8 [a0 + 0x7]\n  1986: a2 = a2 << 0x8\n  1989: a2 = a2 | a3\n  1992: a4 = a4 << 0x10\n  1995: a5 = a5 << 0x18\n  1998: a4 = a4 | a5\n  2001: a2 = a2 | a4\n  2004: a2 = a2 << 0x20\n  2007: t0 = a2 | a1\n  2010: a2 = u8 [a0 + 0x9]\n  2013: a3 = u8 [a0 + 0x8]\n  2016: a4 = u8 [a0 + 0xa]\n  2019: a5 = u8 [a0 + 0xb]\n  2022: a2 = a2 << 0x8\n  2025: a2 = a2 | a3\n  2028: a4 = a4 << 0x10\n  2031: a5 = a5 << 0x18\n  2034: a4 = a4 | a5\n  2037: a2 = a2 | a4\n  2040: a3 = u8 [a0 + 0xd]\n  2043: a4 = u8 [a0 + 0xc]\n  2046: a5 = u8 [a0 + 0xe]\n  2049: a1 = u8 [a0 + 0xf]\n  2052: a3 = a3 << 0x8\n  2055: a3 = a3 | a4\n  2058: a5 = a5 << 0x10\n  2061: a1 = a1 << 0x18\n  2064: a1 = a1 | a5\n  2067: a1 = a1 | a3\n  2070: a1 = a1 << 0x20\n  2073: t1 = a1 | a2\n  2076: a1 = u8 [a0 + 0x11]\n  2079: a3 = u8 [a0 + 0x10]\n  2082: a4 = u8 [a0 + 0x12]\n  2085: a5 = u8 [a0 + 0x13]\n  2088: a1 = a1 << 0x8\n  2091: a1 = a1 | a3\n  2094: a4 = a4 << 0x10\n  2097: a5 = a5 << 0x18\n  2100: a4 = a4 | a5\n  2103: a1 = a1 | a4\n  2106: a3 = u8 [a0 + 0x15]\n  2109: a4 = u8 [a0 + 0x14]\n  2112: a5 = u8 [a0 + 0x16]\n  2115: a2 = u8 [a0 + 0x17]\n  2118: a3 = a3 << 0x8\n  2121: a3 = a3 | a4\n  2124: a5 = a5 << 0x10\n  2127: a2 = a2 << 0x18\n  2130: a2 = a2 | a5\n  2133: a2 = a2 | a3\n  2136: a2 = a2 << 0x20\n  2139: a3 = a2 | a1\n  2142: a1 = u8 [a0 + 0x19]\n  2145: a2 = u8 [a0 + 0x18]\n  2148: a4 = u8 [a0 + 0x1a]\n  2151: a5 = u8 [a0 + 0x1b]\n  2154: a1 = a1 << 0x8\n  2157: a1 = a1 | a2\n  2160: a4 = a4 << 0x10\n  2163: a5 = a5 << 0x18\n  2166: a4 = a4 | a5\n  2169: a1 = a1 | a4\n  2172: a2 = u8 [a0 + 0x1d]\n  2175: a4 = u8 [a0 + 0x1c]\n  2178: a5 = u8 [a0 + 0x1e]\n  2181: a0 = u8 [a0 + 0x1f]\n  2184: a2 = a2 << 0x8\n  2187: a2 = a2 | a4\n  2190: a5 = a5 << 0x10\n  2193: a0 = a0 << 0x18\n  2196: a0 = a0 | a5\n  2199: a0 = a0 | a2\n  2202: a0 = a0 << 0x20\n  2205: a0 = a0 | a1\n  2208: a0 = reverse a0\n  2210: a1 = reverse a3\n  2212: a2 = reverse t1\n  2214: a3 = reverse t0\n  2216: u64 [s0 + 0x18] = a3\n  2219: u64 [s0 + 0x10] = a2\n  2222: u64 [s0 + 0x8] = a1\n  2225: u64 [s0] = a0\n  2227: ra = u64 [sp + 0x8]\n  2230: s0 = u64 [sp]\n  2232: sp = sp + 0x10\n  2235: ret\n      : @83 (gas: 17)\n  2237: sp = sp + 0xffffffffffffffa0\n  2240: u64 [sp + 0x58] = ra\n  2243: u64 [sp + 0x50] = s0\n  2246: u64 [sp + 0x48] = s1\n  2249: a3 = u64 [a1 + 0x18]\n  2252: a4 = u64 [a1 + 0x10]\n  2255: a5 = u64 [a1 + 0x8]\n  2258: s1 = u64 [a1]\n  2260: a1 = a5 | a3\n  2263: a2 = s1 | a4\n  2266: a2 = a2 | a1\n  2269: a2 = a2 >> 0x20\n  2272: a1 = a1 | a4\n  2275: a1 = a1 << 0x20\n  2278: a1 = a1 | a2\n  2281: u64 [sp + 0x20] = a0\n  2284: jump @92 if a1 != 0\n      : @84 (gas: 19)\n  2288: a0 = s1 + 0x20\n  2291: u64 [sp + 0x40] = a0\n  2294: a0 = a0 <u s1\n  2297: a1 = a5 + a0\n  2300: u64 [sp + 0x38] = a1\n  2303: u64 [sp + 0x8] = a5\n  2306: s0 = a1 <u a5\n  2309: s0 = a0 if a0 == 0\n  2312: s0 = s0 + a4\n  2315: u64 [sp + 0x10] = a4\n  2318: a0 = s0 <u a4\n  2321: u64 [sp + 0x18] = a3\n  2324: a0 = a0 + a3\n  2327: u64 [sp + 0x30] = a0\n  2330: u64 [sp] = s1\n  2332: i32 a0 = s1 + 0\n  2334: a1 = 0x20\n  2337: s1 = 0x20\n  2340: ra = 56, jump @0\n      : @85 [@dyn 28] (gas: 43)\n  2345: u8 [a0 + 0x1f] = s1\n  2348: a1 = u64 [sp + 0x40]\n  2351: a1 = a1 | s0\n  2354: a2 = u64 [sp + 0x38]\n  2357: a3 = u64 [sp + 0x30]\n  2360: a2 = a2 | a3\n  2363: a1 = a1 | a2\n  2366: a1 = a1 >> 0x20\n  2369: a2 = a2 | s0\n  2372: a2 = a2 << 0x20\n  2375: a1 = a1 | a2\n  2378: u8 [a0 + 30] = 0\n  2381: u8 [a0 + 29] = 0\n  2384: u8 [a0 + 28] = 0\n  2387: u8 [a0 + 27] = 0\n  2390: u8 [a0 + 26] = 0\n  2393: u8 [a0 + 25] = 0\n  2396: u8 [a0 + 24] = 0\n  2399: u8 [a0 + 23] = 0\n  2402: u8 [a0 + 22] = 0\n  2405: u8 [a0 + 21] = 0\n  2408: u8 [a0 + 20] = 0\n  2411: u8 [a0 + 19] = 0\n  2414: u8 [a0 + 18] = 0\n  2417: u8 [a0 + 17] = 0\n  2420: u8 [a0 + 16] = 0\n  2423: u8 [a0 + 15] = 0\n  2426: u8 [a0 + 14] = 0\n  2429: u8 [a0 + 13] = 0\n  2432: u8 [a0 + 12] = 0\n  2435: u8 [a0 + 11] = 0\n  2438: u8 [a0 + 10] = 0\n  2441: u8 [a0 + 9] = 0\n  2444: u8 [a0 + 8] = 0\n  2447: u8 [a0 + 7] = 0\n  2450: u8 [a0 + 6] = 0\n  2453: u8 [a0 + 5] = 0\n  2456: u8 [a0 + 4] = 0\n  2459: u8 [a0 + 3] = 0\n  2462: u8 [a0 + 2] = 0\n  2465: u8 [a0 + 1] = 0\n  2468: u8 [a0 + 0] = 0\n  2470: jump @92 if a1 != 0\n      : @86 (gas: 6)\n  2474: s1 = s0\n  2476: s0 = u64 [sp + 0x40]\n  2479: i32 a0 = s0 + 0\n  2481: a1 = 0x20\n  2484: u64 [sp + 0x28] = a0\n  2487: ra = 58, jump @0\n      : @87 [@dyn 29] (gas: 42)\n  2492: u8 [a0 + 31] = 0x23\n  2496: u8 [a0 + 30] = 0\n  2499: u8 [a0 + 29] = 0\n  2502: u8 [a0 + 28] = 0\n  2505: u8 [a0 + 27] = 0\n  2508: u8 [a0 + 26] = 0\n  2511: u8 [a0 + 25] = 0\n  2514: u8 [a0 + 24] = 0\n  2517: u8 [a0 + 23] = 0\n  2520: u8 [a0 + 22] = 0\n  2523: u8 [a0 + 21] = 0\n  2526: u8 [a0 + 20] = 0\n  2529: u8 [a0 + 19] = 0\n  2532: u8 [a0 + 18] = 0\n  2535: u8 [a0 + 17] = 0\n  2538: u8 [a0 + 16] = 0\n  2541: u8 [a0 + 15] = 0\n  2544: u8 [a0 + 14] = 0\n  2547: u8 [a0 + 13] = 0\n  2550: u8 [a0 + 12] = 0\n  2553: u8 [a0 + 11] = 0\n  2556: u8 [a0 + 10] = 0\n  2559: u8 [a0 + 9] = 0\n  2562: u8 [a0 + 8] = 0\n  2565: u8 [a0 + 7] = 0\n  2568: u8 [a0 + 6] = 0\n  2571: u8 [a0 + 5] = 0\n  2574: u8 [a0 + 4] = 0\n  2577: u8 [a0 + 3] = 0\n  2580: u8 [a0 + 2] = 0\n  2583: u8 [a0 + 1] = 0\n  2586: a1 = u64 [sp + 0x30]\n  2589: a2 = s1 | a1\n  2592: s1 = 0x100000000\n  2602: a1 = 0xffffffe0\n  2612: a1 = s0 <u a1\n  2615: s0 = a2\n  2617: a2 = u64 [sp + 0x38]\n  2620: a1 = 0 if a2 != 0\n  2622: a1 = 0 if s0 != 0\n  2624: u8 [a0 + 0] = 0\n  2626: jump @92 if a1 == 0\n      : @88 (gas: 4)\n  2630: a0 = u64 [sp + 0x28]\n  2633: i32 a0 = a0 + 0x20\n  2636: a1 = 0x20\n  2639: ra = 60, jump @0\n      : @89 [@dyn 30] (gas: 41)\n  2644: u8 [a0 + 28] = 0x64\n  2648: u8 [a0 + 20] = 0x73\n  2652: u8 [a0 + 21] = 0x75\n  2656: u8 [a0 + 18] = 0x75\n  2660: u8 [a0 + 29] = 0x20\n  2664: u8 [a0 + 17] = 0x20\n  2668: u8 [a0 + 16] = 0x3a\n  2672: u8 [a0 + 30] = 0x63\n  2676: u8 [a0 + 14] = 0x63\n  2680: u8 [a0 + 12] = 0x6c\n  2684: u8 [a0 + 23] = 0x70\n  2688: u8 [a0 + 22] = 0x70\n  2692: u8 [a0 + 11] = 0x70\n  2696: u8 [a0 + 26] = 0x74\n  2700: u8 [a0 + 10] = 0x74\n  2704: u8 [a0 + 8] = 0x6b\n  2708: u8 [a0 + 25] = 0x72\n  2712: u8 [a0 + 7] = 0x72\n  2716: u8 [a0 + 5] = 0x4d\n  2720: u8 [a0 + 27] = 0x65\n  2724: u8 [a0 + 15] = 0x65\n  2728: u8 [a0 + 9] = 0x65\n  2732: u8 [a0 + 4] = 0x65\n  2736: u8 [a0 + 24] = 0x6f\n  2740: u8 [a0 + 2] = 0x6f\n  2744: u8 [a0 + 31] = 0x68\n  2748: u8 [a0 + 1] = 0x68\n  2752: u8 [a0 + 0] = 0x50\n  2755: a1 = s1 + 0xffffffffffffffc0\n  2758: a2 = u64 [sp + 0x40]\n  2761: a1 = a2 <u a1\n  2764: a2 = u64 [sp + 0x38]\n  2767: a1 = 0 if a2 != 0\n  2769: s1 = 0x6e\n  2772: u8 [a0 + 0x13] = s1\n  2775: a1 = 0 if s0 != 0\n  2777: s0 = 0x61\n  2780: u8 [a0 + 0xd] = s0\n  2783: u8 [a0 + 0x6] = s0\n  2786: u8 [a0 + 0x3] = s1\n  2789: jump @92 if a1 == 0\n      : @90 (gas: 4)\n  2793: a0 = u64 [sp + 0x28]\n  2796: i32 a0 = a0 + 0x40\n  2799: a1 = 0x20\n  2802: ra = 62, jump @0\n      : @91 [@dyn 31] (gas: 54)\n  2807: u8 [a0 + 31] = 0\n  2810: u8 [a0 + 30] = 0\n  2813: u8 [a0 + 29] = 0\n  2816: u8 [a0 + 28] = 0\n  2819: u8 [a0 + 27] = 0\n  2822: u8 [a0 + 26] = 0\n  2825: u8 [a0 + 25] = 0\n  2828: u8 [a0 + 24] = 0\n  2831: u8 [a0 + 23] = 0\n  2834: u8 [a0 + 22] = 0\n  2837: u8 [a0 + 21] = 0\n  2840: u8 [a0 + 20] = 0\n  2843: u8 [a0 + 19] = 0\n  2846: u8 [a0 + 18] = 0\n  2849: u8 [a0 + 17] = 0\n  2852: u8 [a0 + 16] = 0\n  2855: u8 [a0 + 15] = 0\n  2858: u8 [a0 + 14] = 0\n  2861: u8 [a0 + 13] = 0\n  2864: u8 [a0 + 12] = 0\n  2867: u8 [a0 + 11] = 0\n  2870: u8 [a0 + 10] = 0\n  2873: u8 [a0 + 9] = 0\n  2876: u8 [a0 + 8] = 0\n  2879: u8 [a0 + 7] = 0\n  2882: u8 [a0 + 6] = 0\n  2885: u8 [a0 + 5] = 0\n  2888: u8 [a0 + 4] = 0\n  2891: u8 [a0 + 3] = 0\n  2894: u8 [a0 + 0x2] = s1\n  2897: u8 [a0 + 1] = 0x69\n  2901: u8 [a0] = s0\n  2903: a1 = u64 [sp]\n  2905: a0 = a1 + 0x80\n  2909: a1 = a0 <u a1\n  2912: a3 = u64 [sp + 0x8]\n  2915: a2 = a3 + a1\n  2918: a3 = a2 <u a3\n  2921: a3 = a1 if a1 == 0\n  2924: a1 = u64 [sp + 0x10]\n  2927: a3 = a3 + a1\n  2930: a1 = a3 <u a1\n  2933: a4 = u64 [sp + 0x18]\n  2936: a1 = a1 + a4\n  2939: a4 = u64 [sp + 0x20]\n  2942: u64 [a4] = a0\n  2944: u64 [a4 + 0x8] = a2\n  2947: u64 [a4 + 0x10] = a3\n  2950: u64 [a4 + 0x18] = a1\n  2953: ra = u64 [sp + 0x58]\n  2956: s0 = u64 [sp + 0x50]\n  2959: s1 = u64 [sp + 0x48]\n  2962: sp = sp + 0x60\n  2965: ret\n      : @92 (gas: 1)\n  2967: trap\n      : @93 (gas: 9)\n  2968: a0 = u64 [sp + 0x78]\n  2971: a1 = u64 [sp + 0x68]\n  2974: a2 = u64 [sp + 0x70]\n  2977: a3 = u64 [sp + 0x60]\n  2980: a0 = a0 | a1\n  2983: a1 = a3 ^ 0x190f1b45\n  2989: a1 = a1 | a2\n  2992: a0 = a0 | a1\n  2995: jump @95 if a0 != 0\n      : @94 (gas: 6)\n  2998: sp = s0 + 0xffffffffffffff00\n  3002: ra = u64 [sp + 0xf8]\n  3006: s0 = u64 [sp + 0xf0]\n  3010: s1 = u64 [sp + 0xe8]\n  3014: sp = sp + 0x100\n  3018: ret\n      : @95 (gas: 3)\n  3020: a0 = 0x40\n  3023: a1 = 0x20\n  3026: ra = 64, jump @0\n      : @96 [@dyn 32] (gas: 103)\n  3031: a1 = u8 [a0 + 0x11]\n  3034: a2 = u8 [a0 + 0x10]\n  3037: a3 = u8 [a0 + 0x12]\n  3040: a4 = u8 [a0 + 0x13]\n  3043: a1 = a1 << 0x8\n  3046: a1 = a1 | a2\n  3049: a3 = a3 << 0x10\n  3052: a4 = a4 << 0x18\n  3055: a3 = a3 | a4\n  3058: a1 = a1 | a3\n  3061: a2 = u8 [a0 + 0x15]\n  3064: a3 = u8 [a0 + 0x14]\n  3067: a4 = u8 [a0 + 0x16]\n  3070: a5 = u8 [a0 + 0x17]\n  3073: a2 = a2 << 0x8\n  3076: a2 = a2 | a3\n  3079: a4 = a4 << 0x10\n  3082: a5 = a5 << 0x18\n  3085: a4 = a4 | a5\n  3088: a2 = a2 | a4\n  3091: a2 = a2 << 0x20\n  3094: t0 = a2 | a1\n  3097: a2 = u8 [a0 + 0x1]\n  3100: a3 = u8 [a0]\n  3102: a4 = u8 [a0 + 0x2]\n  3105: a5 = u8 [a0 + 0x3]\n  3108: a2 = a2 << 0x8\n  3111: a2 = a2 | a3\n  3114: a4 = a4 << 0x10\n  3117: a5 = a5 << 0x18\n  3120: a4 = a4 | a5\n  3123: a2 = a2 | a4\n  3126: a3 = u8 [a0 + 0x5]\n  3129: a4 = u8 [a0 + 0x4]\n  3132: a5 = u8 [a0 + 0x6]\n  3135: s1 = u8 [a0 + 0x7]\n  3138: a3 = a3 << 0x8\n  3141: a3 = a3 | a4\n  3144: a5 = a5 << 0x10\n  3147: s1 = s1 << 0x18\n  3150: a5 = a5 | s1\n  3153: a3 = a3 | a5\n  3156: a3 = a3 << 0x20\n  3159: a2 = a2 | a3\n  3162: a3 = u8 [a0 + 0x19]\n  3165: a4 = u8 [a0 + 0x18]\n  3168: a5 = u8 [a0 + 0x1a]\n  3171: s1 = u8 [a0 + 0x1b]\n  3174: a3 = a3 << 0x8\n  3177: a3 = a3 | a4\n  3180: a5 = a5 << 0x10\n  3183: s1 = s1 << 0x18\n  3186: a5 = a5 | s1\n  3189: a3 = a3 | a5\n  3192: a4 = u8 [a0 + 0x1d]\n  3195: a5 = u8 [a0 + 0x1c]\n  3198: s1 = u8 [a0 + 0x1e]\n  3201: a1 = u8 [a0 + 0x1f]\n  3204: a4 = a4 << 0x8\n  3207: a4 = a4 | a5\n  3210: s1 = s1 << 0x10\n  3213: a1 = a1 << 0x18\n  3216: a1 = a1 | s1\n  3219: a1 = a1 | a4\n  3222: a1 = a1 << 0x20\n  3225: a3 = a3 | a1\n  3228: a1 = u8 [a0 + 0x9]\n  3231: a4 = u8 [a0 + 0x8]\n  3234: a5 = u8 [a0 + 0xa]\n  3237: s1 = u8 [a0 + 0xb]\n  3240: a1 = a1 << 0x8\n  3243: a1 = a1 | a4\n  3246: a5 = a5 << 0x10\n  3249: s1 = s1 << 0x18\n  3252: a5 = a5 | s1\n  3255: a1 = a1 | a5\n  3258: a4 = u8 [a0 + 0xd]\n  3261: a5 = u8 [a0 + 0xc]\n  3264: s1 = u8 [a0 + 0xe]\n  3267: a0 = u8 [a0 + 0xf]\n  3270: a4 = a4 << 0x8\n  3273: a4 = a4 | a5\n  3276: s1 = s1 << 0x10\n  3279: a0 = a0 << 0x18\n  3282: a0 = a0 | s1\n  3285: a0 = a0 | a4\n  3288: a0 = a0 << 0x20\n  3291: a0 = a0 | a1\n  3294: s1 = reverse a0\n  3296: a1 = reverse a3\n  3298: a2 = reverse a2\n  3300: a0 = reverse t0\n  3302: u64 [sp + 0x18] = a0\n  3305: u64 [sp + 0x10] = a2\n  3308: a0 = a0 | a2\n  3311: a2 = a1\n  3313: a1 = a1 | s1\n  3316: a1 = a1 | a0\n  3319: a1 = a1 >> 0x20\n  3322: a0 = a0 | s1\n  3325: a0 = a0 << 0x20\n  3328: a0 = a0 | a1\n  3331: jump @100 if a0 != 0\n      : @97 (gas: 5)\n  3335: u64 [sp + 0x8] = a2\n  3338: i32 a0 = a2 + 0\n  3340: a1 = 0x20\n  3343: u64 [sp] = a0\n  3345: ra = 66, jump @0\n      : @98 [@dyn 33] (gas: 50)\n  3350: u8 [a0 + 31] = 0\n  3353: u8 [a0 + 30] = 0\n  3356: u8 [a0 + 29] = 0\n  3359: u8 [a0 + 28] = 0\n  3362: u8 [a0 + 27] = 0\n  3365: u8 [a0 + 26] = 0\n  3368: u8 [a0 + 25] = 0\n  3371: u8 [a0 + 24] = 0\n  3374: u8 [a0 + 23] = 0\n  3377: u8 [a0 + 22] = 0\n  3380: u8 [a0 + 21] = 0\n  3383: u8 [a0 + 20] = 0\n  3386: u8 [a0 + 19] = 0\n  3389: u8 [a0 + 18] = 0\n  3392: u8 [a0 + 17] = 0\n  3395: u8 [a0 + 16] = 0\n  3398: u8 [a0 + 15] = 0\n  3401: u8 [a0 + 14] = 0\n  3404: u8 [a0 + 13] = 0\n  3407: u8 [a0 + 12] = 0\n  3410: u8 [a0 + 11] = 0\n  3413: u8 [a0 + 10] = 0\n  3416: u8 [a0 + 9] = 0\n  3419: u8 [a0 + 8] = 0\n  3422: u8 [a0 + 7] = 0\n  3425: u8 [a0 + 6] = 0\n  3428: u8 [a0 + 5] = 0\n  3431: u8 [a0 + 4] = 0\n  3434: u8 [a0 + 3] = 0xa0\n  3439: u8 [a0 + 2] = 0x79\n  3443: u8 [a0 + 1] = 0xc3\n  3448: u8 [a0 + 0] = 0x8\n  3451: a1 = u64 [sp + 0x8]\n  3454: a0 = a1 + 0x4\n  3457: a1 = a0 <u a1\n  3460: a3 = u64 [sp + 0x18]\n  3463: a2 = a3 + a1\n  3466: a3 = a2 <u a3\n  3469: a3 = a1 if a1 == 0\n  3472: a3 = a3 + s1\n  3475: a1 = a3 <u s1\n  3478: a4 = u64 [sp + 0x10]\n  3481: a4 = a4 + a1\n  3484: u64 [sp + 0x28] = a2\n  3487: u64 [sp + 0x20] = a0\n  3490: u64 [sp + 0x30] = a3\n  3493: a0 = sp + 0x40\n  3496: a1 = sp + 0x20\n  3499: u64 [sp + 0x38] = a4\n  3502: ra = 68, jump @83\n      : @99 [@dyn 34] (gas: 30)\n  3507: a0 = u64 [sp + 0x48]\n  3510: t0 = u64 [sp + 0x58]\n  3513: t1 = u64 [sp + 0x40]\n  3516: a3 = u64 [sp + 0x50]\n  3519: a1 = u64 [sp + 0x18]\n  3522: a4 = a0 ^ a1\n  3525: a5 = a0 <u a1\n  3528: t2 = a1\n  3530: a2 = u64 [sp + 0x8]\n  3533: a1 = t1 <u a2\n  3536: a5 = a1 if a4 == 0\n  3539: a4 = a3 - s1\n  3542: a3 = a3 <u s1\n  3545: s1 = u64 [sp + 0x10]\n  3548: s1 = t0 - s1\n  3551: s1 = s1 - a3\n  3554: a3 = a4 <u a5\n  3557: s1 = s1 - a3\n  3560: a4 = a4 - a5\n  3563: a0 = a0 - t2\n  3566: a1 = a0 - a1\n  3569: a0 = t1 - a2\n  3572: a1 = a1 | s1\n  3575: a2 = a0 | a4\n  3578: a2 = a2 | a1\n  3581: a1 = a1 | a4\n  3584: a2 = a2 >> 0x20\n  3587: a1 = a1 << 0x20\n  3590: a1 = a1 | a2\n  3593: jump @101 if a1 == 0\n      : @100 (gas: 1)\n  3596: trap\n      : @101 (gas: 4)\n  3597: i32 s1 = a0 + 0\n  3599: a0 = u64 [sp]\n  3601: a1 = s1\n  3603: ra = 70, jump @0\n      : @102 [@dyn 35] (gas: 6)\n  3608: i32 a1 = a0 + 0\n  3610: a0 = 0x1\n  3613: a2 = s1\n  3615: ra = 0x48\n  3618: ecalli 11 // 'seal_return'\n  3620: fallthrough\n      : @103 [@dyn 36] (gas: 9)\n  3621: a2 = u64 [a1 + 0x18]\n  3624: a3 = u64 [a1 + 0x10]\n  3627: a4 = u64 [a1 + 0x8]\n  3630: a1 = u64 [a1]\n  3632: u64 [a0 + 0x18] = a2\n  3635: u64 [a0 + 0x10] = a3\n  3638: u64 [a0 + 0x8] = a4\n  3641: u64 [a0] = a1\n  3643: ret\n      : @104 [@dyn 37] (gas: 6)\n  3645: i32 a1 = a0 + 0\n  3647: a0 = 0x1\n  3650: a2 = 0\n  3652: ra = 0x4c\n  3655: ecalli 11 // 'seal_return'\n  3657: fallthrough\n      : @105 [@dyn 38] (gas: 18)\n  3658: a2 = u64 [a1]\n  3660: t0 = u64 [a1 + 0x18]\n  3663: a4 = u64 [a1 + 0x8]\n  3666: a1 = u64 [a1 + 0x10]\n  3669: a5 = a2 + 0x1f\n  3672: a2 = a5 <u a2\n  3675: a3 = a4 + a2\n  3678: a4 = a3 <u a4\n  3681: a4 = a2 if a2 == 0\n  3684: a4 = a4 + a1\n  3687: a1 = a4 <u a1\n  3690: a1 = a1 + t0\n  3693: a5 = a5 & 0xffffffffffffffe0\n  3696: u64 [a0] = a5\n  3698: u64 [a0 + 0x8] = a3\n  3701: u64 [a0 + 0x10] = a4\n  3704: u64 [a0 + 0x18] = a1\n  3707: ret\n      : @106 (gas: 18)\n  3709: sp = sp + 0xffffffffffffff60\n  3713: u64 [sp + 0x98] = ra\n  3717: u64 [sp + 0x90] = s0\n  3721: u64 [sp + 0x88] = s1\n  3725: s0 = sp + 0xa0\n  3729: sp = sp & 0xfffffffffffffff0\n  3732: a2 = u64 [a1 + 0x18]\n  3735: u64 [sp + 0x30] = a2\n  3738: a2 = u64 [a1 + 0x10]\n  3741: u64 [sp + 0x28] = a2\n  3744: a2 = u64 [a1 + 0x8]\n  3747: u64 [sp + 0x20] = a2\n  3750: a1 = u64 [a1]\n  3752: u64 [sp + 0x18] = a1\n  3755: u64 [sp + 0x38] = a0\n  3758: a0 = 0x40\n  3761: a1 = 0x20\n  3764: ra = 78, jump @0\n      : @107 [@dyn 39] (gas: 130)\n  3769: a1 = u8 [a0 + 0x19]\n  3772: a2 = u8 [a0 + 0x18]\n  3775: a3 = u8 [a0 + 0x1a]\n  3778: a4 = u8 [a0 + 0x1b]\n  3781: a1 = a1 << 0x8\n  3784: a1 = a1 | a2\n  3787: a3 = a3 << 0x10\n  3790: a4 = a4 << 0x18\n  3793: a3 = a3 | a4\n  3796: a1 = a1 | a3\n  3799: a2 = u8 [a0 + 0x1d]\n  3802: a3 = u8 [a0 + 0x1c]\n  3805: a4 = u8 [a0 + 0x1e]\n  3808: a5 = u8 [a0 + 0x1f]\n  3811: a2 = a2 << 0x8\n  3814: a2 = a2 | a3\n  3817: a4 = a4 << 0x10\n  3820: a5 = a5 << 0x18\n  3823: a4 = a4 | a5\n  3826: a2 = a2 | a4\n  3829: a2 = a2 << 0x20\n  3832: t0 = a2 | a1\n  3835: a2 = u8 [a0 + 0x11]\n  3838: a3 = u8 [a0 + 0x10]\n  3841: a4 = u8 [a0 + 0x12]\n  3844: a5 = u8 [a0 + 0x13]\n  3847: a2 = a2 << 0x8\n  3850: a2 = a2 | a3\n  3853: a4 = a4 << 0x10\n  3856: a5 = a5 << 0x18\n  3859: a4 = a4 | a5\n  3862: a2 = a2 | a4\n  3865: a3 = u8 [a0 + 0x15]\n  3868: a4 = u8 [a0 + 0x14]\n  3871: a5 = u8 [a0 + 0x16]\n  3874: s1 = u8 [a0 + 0x17]\n  3877: a3 = a3 << 0x8\n  3880: a3 = a3 | a4\n  3883: a5 = a5 << 0x10\n  3886: s1 = s1 << 0x18\n  3889: a5 = a5 | s1\n  3892: a3 = a3 | a5\n  3895: a3 = a3 << 0x20\n  3898: a2 = a2 | a3\n  3901: a3 = u8 [a0 + 0x9]\n  3904: a4 = u8 [a0 + 0x8]\n  3907: a5 = u8 [a0 + 0xa]\n  3910: s1 = u8 [a0 + 0xb]\n  3913: a3 = a3 << 0x8\n  3916: a3 = a3 | a4\n  3919: a5 = a5 << 0x10\n  3922: s1 = s1 << 0x18\n  3925: a5 = a5 | s1\n  3928: a3 = a3 | a5\n  3931: a4 = u8 [a0 + 0xd]\n  3934: a5 = u8 [a0 + 0xc]\n  3937: s1 = u8 [a0 + 0xe]\n  3940: a1 = u8 [a0 + 0xf]\n  3943: a4 = a4 << 0x8\n  3946: a4 = a4 | a5\n  3949: s1 = s1 << 0x10\n  3952: a1 = a1 << 0x18\n  3955: a1 = a1 | s1\n  3958: a1 = a1 | a4\n  3961: a1 = a1 << 0x20\n  3964: a3 = a3 | a1\n  3967: a1 = u8 [a0 + 0x1]\n  3970: a4 = u8 [a0]\n  3972: a5 = u8 [a0 + 0x2]\n  3975: s1 = u8 [a0 + 0x3]\n  3978: a1 = a1 << 0x8\n  3981: a1 = a1 | a4\n  3984: a5 = a5 << 0x10\n  3987: s1 = s1 << 0x18\n  3990: a5 = a5 | s1\n  3993: a1 = a1 | a5\n  3996: a4 = u8 [a0 + 0x5]\n  3999: a5 = u8 [a0 + 0x4]\n  4002: s1 = u8 [a0 + 0x6]\n  4005: a0 = u8 [a0 + 0x7]\n  4008: a4 = a4 << 0x8\n  4011: a4 = a4 | a5\n  4014: s1 = s1 << 0x10\n  4017: a0 = a0 << 0x18\n  4020: a0 = a0 | s1\n  4023: a0 = a0 | a4\n  4026: a0 = a0 << 0x20\n  4029: a0 = a0 | a1\n  4032: t1 = reverse a0\n  4034: t2 = reverse a3\n  4036: s1 = reverse a2\n  4038: a5 = reverse t0\n  4040: a1 = u64 [sp + 0x18]\n  4043: a0 = a1 + 0x1f\n  4046: a1 = a0 <u a1\n  4049: a3 = u64 [sp + 0x20]\n  4052: a2 = a3 + a1\n  4055: a3 = a2 <u a3\n  4058: a3 = a1 if a1 == 0\n  4061: a1 = u64 [sp + 0x28]\n  4064: a3 = a3 + a1\n  4067: a1 = a3 <u a1\n  4070: a4 = u64 [sp + 0x30]\n  4073: a1 = a1 + a4\n  4076: a0 = a0 & 0xffffffffffffffe0\n  4079: a0 = a0 + a5\n  4082: u64 [sp + 0x28] = a5\n  4085: u64 [sp + 0x10] = a0\n  4088: a4 = a0 <u a5\n  4091: a2 = a2 + s1\n  4094: a5 = a2 + a4\n  4097: a2 = a5 ^ s1\n  4100: u64 [sp + 0x30] = s1\n  4103: a0 = a5 <u s1\n  4106: a0 = a4 if a2 == 0\n  4109: a3 = a3 + t2\n  4112: a4 = a3 + a0\n  4115: s1 = a4 <u a3\n  4118: a2 = a3 <u t2\n  4121: a1 = a1 + t1\n  4124: a1 = a1 + a2\n  4127: s1 = s1 + a1\n  4130: a1 = a4 >u 0\n  4132: a2 = s1 >u 0\n  4134: a2 = a1 if s1 == 0\n  4137: a1 = a4 | s1\n  4140: u64 [sp + 0x8] = a5\n  4143: a3 = a5 >u 0\n  4145: a3 = a2 if a1 != 0\n  4148: jump @111 if a3 != 0\n      : @108 (gas: 8)\n  4152: a1 = a4 <u t2\n  4155: a2 = s1 ^ t1\n  4158: a3 = s1 <u t1\n  4161: a3 = a1 if a2 == 0\n  4164: a1 = a4 ^ t2\n  4167: a1 = a1 | a2\n  4170: a0 = a3 if a1 != 0\n  4173: jump @111 if a0 != 0\n      : @109 (gas: 6)\n  4177: a0 = 0x40\n  4180: a1 = 0x20\n  4183: u64 [sp + 0x20] = t2\n  4186: u64 [sp + 0x18] = t1\n  4189: u64 [sp] = a4\n  4191: ra = 80, jump @0\n      : @110 [@dyn 40] (gas: 82)\n  4196: a1 = reverse s1\n  4198: a2 = u64 [sp]\n  4200: a2 = reverse a2\n  4202: a3 = u64 [sp + 0x8]\n  4205: a3 = reverse a3\n  4207: a4 = u64 [sp + 0x10]\n  4210: a4 = reverse a4\n  4212: u8 [a0 + 0x18] = a4\n  4215: a5 = a4 >> 0x38\n  4218: u8 [a0 + 0x1f] = a5\n  4221: a5 = a4 >> 0x30\n  4224: u8 [a0 + 0x1e] = a5\n  4227: a5 = a4 >> 0x28\n  4230: u8 [a0 + 0x1d] = a5\n  4233: a5 = a4 >> 0x20\n  4236: u8 [a0 + 0x1c] = a5\n  4239: a5 = a4 >> 0x18\n  4242: u8 [a0 + 0x1b] = a5\n  4245: a5 = a4 >> 0x10\n  4248: u8 [a0 + 0x1a] = a5\n  4251: a4 = a4 >> 0x8\n  4254: u8 [a0 + 0x19] = a4\n  4257: u8 [a0 + 0x10] = a3\n  4260: a4 = a3 >> 0x38\n  4263: u8 [a0 + 0x17] = a4\n  4266: a4 = a3 >> 0x30\n  4269: u8 [a0 + 0x16] = a4\n  4272: a4 = a3 >> 0x28\n  4275: u8 [a0 + 0x15] = a4\n  4278: a4 = a3 >> 0x20\n  4281: u8 [a0 + 0x14] = a4\n  4284: a4 = a3 >> 0x18\n  4287: u8 [a0 + 0x13] = a4\n  4290: a4 = a3 >> 0x10\n  4293: u8 [a0 + 0x12] = a4\n  4296: a3 = a3 >> 0x8\n  4299: u8 [a0 + 0x11] = a3\n  4302: u8 [a0 + 0x8] = a2\n  4305: a3 = a2 >> 0x38\n  4308: u8 [a0 + 0xf] = a3\n  4311: a3 = a2 >> 0x30\n  4314: u8 [a0 + 0xe] = a3\n  4317: a3 = a2 >> 0x28\n  4320: u8 [a0 + 0xd] = a3\n  4323: a3 = a2 >> 0x20\n  4326: u8 [a0 + 0xc] = a3\n  4329: a3 = a2 >> 0x18\n  4332: u8 [a0 + 0xb] = a3\n  4335: a3 = a2 >> 0x10\n  4338: u8 [a0 + 0xa] = a3\n  4341: a2 = a2 >> 0x8\n  4344: u8 [a0 + 0x9] = a2\n  4347: u8 [a0] = a1\n  4349: a2 = a1 >> 0x38\n  4352: u8 [a0 + 0x7] = a2\n  4355: a2 = a1 >> 0x30\n  4358: u8 [a0 + 0x6] = a2\n  4361: a2 = a1 >> 0x28\n  4364: u8 [a0 + 0x5] = a2\n  4367: a2 = a1 >> 0x20\n  4370: u8 [a0 + 0x4] = a2\n  4373: a2 = a1 >> 0x18\n  4376: u8 [a0 + 0x3] = a2\n  4379: a2 = a1 >> 0x10\n  4382: u8 [a0 + 0x2] = a2\n  4385: a1 = a1 >> 0x8\n  4388: u8 [a0 + 0x1] = a1\n  4391: a0 = u64 [sp + 0x38]\n  4394: a1 = u64 [sp + 0x28]\n  4397: u64 [a0] = a1\n  4399: a1 = u64 [sp + 0x18]\n  4402: u64 [a0 + 0x18] = a1\n  4405: a1 = u64 [sp + 0x30]\n  4408: u64 [a0 + 0x8] = a1\n  4411: a1 = u64 [sp + 0x20]\n  4414: u64 [a0 + 0x10] = a1\n  4417: sp = s0 + 0xffffffffffffff60\n  4421: ra = u64 [sp + 0x98]\n  4425: s0 = u64 [sp + 0x90]\n  4429: s1 = u64 [sp + 0x88]\n  4433: sp = sp + 0xa0\n  4437: ret\n      : @111 (gas: 8)\n  4439: u64 [sp + 112] = 0\n  4442: u64 [sp + 104] = 0\n  4445: u64 [sp + 96] = 0\n  4448: a0 = 0x4e487b7100000000\n  4458: a1 = sp + 0x60\n  4461: u64 [sp + 0x78] = a0\n  4464: a0 = 0\n  4466: ra = 82, jump @23\n      : @112 [@dyn 41] (gas: 7)\n  4471: u64 [sp + 88] = 0\n  4474: u64 [sp + 80] = 0\n  4477: u64 [sp + 64] = 0x41\n  4481: a0 = 0x4\n  4484: a1 = sp + 0x40\n  4487: u64 [sp + 72] = 0\n  4490: ra = 84, jump @23\n      : @113 [@dyn 42] (gas: 3)\n  4495: a1 = 0x24\n  4498: a0 = 0\n  4500: ra = 86, jump @0\n      : @114 [@dyn 43] (gas: 6)\n  4505: i32 a1 = a0 + 0\n  4507: a0 = 0x1\n  4510: a2 = 0x24\n  4513: ra = 0x58\n  4516: ecalli 11 // 'seal_return'\n  4518: fallthrough\n      : @115 [@dyn 44] (gas: 7)\n  4519: a3 = u64 [a1 + 0x18]\n  4522: a4 = u64 [a1 + 0x10]\n  4525: a2 = u64 [a1 + 0x8]\n  4528: a3 = a3 | a4\n  4531: a4 = a2 <u 0x1\n  4534: a4 = 0 if a3 != 0\n  4536: jump @117 if a4 == 0\n      : @116 (gas: 16)\n  4539: a1 = u64 [a1]\n  4541: a3 = a1 + 0x1f\n  4544: a1 = a3 <u a1\n  4547: a1 = a1 + a2\n  4550: a1 = a1 & 0x1\n  4553: a3 = a3 & 0xffffffffffffffe0\n  4556: a2 = a3 + 0x20\n  4559: a3 = a2 <u a3\n  4562: a4 = a1 + a3\n  4565: a1 = a4 <u a1\n  4568: a1 = a3 if a3 == 0\n  4571: u64 [a0 + 24] = 0\n  4574: u64 [a0] = a2\n  4576: u64 [a0 + 0x8] = a4\n  4579: u64 [a0 + 0x10] = a1\n  4582: ret\n      : @117 (gas: 13)\n  4584: sp = sp + 0xffffffffffffffb0\n  4587: u64 [sp + 0x48] = ra\n  4590: u64 [sp + 0x40] = s0\n  4593: s0 = sp + 0x50\n  4596: sp = sp & 0xfffffffffffffff0\n  4599: u64 [sp + 48] = 0\n  4602: u64 [sp + 40] = 0\n  4605: u64 [sp + 32] = 0\n  4608: a0 = 0x4e487b7100000000\n  4618: a1 = sp + 0x20\n  4621: u64 [sp + 0x38] = a0\n  4624: a0 = 0\n  4626: ra = 90, jump @23\n      : @118 [@dyn 45] (gas: 7)\n  4631: u64 [sp + 24] = 0\n  4634: u64 [sp + 16] = 0\n  4637: u64 [sp + 0] = 0x41\n  4640: a0 = 0x4\n  4643: a1 = sp\n  4645: u64 [sp + 8] = 0\n  4648: ra = 92, jump @23\n      : @119 [@dyn 46] (gas: 3)\n  4653: a1 = 0x24\n  4656: a0 = 0\n  4658: ra = 94, jump @0\n      : @120 [@dyn 47] (gas: 6)\n  4663: i32 a1 = a0 + 0\n  4665: a0 = 0x1\n  4668: a2 = 0x24\n  4671: ra = 0x60\n  4674: ecalli 11 // 'seal_return'\n  4676: fallthrough\n      : @121 [@dyn 48] (gas: 16)\n  4677: sp = sp + 0xffffffffffffffa8\n  4680: u64 [sp + 0x50] = ra\n  4683: u64 [sp + 0x48] = s0\n  4686: u64 [sp + 0x40] = s1\n  4689: a3 = u64 [a0 + 0x10]\n  4692: a4 = u64 [a0 + 0x18]\n  4695: a5 = u64 [a0 + 0x8]\n  4698: a0 = u64 [a0]\n  4700: a4 = a4 | a5\n  4703: a5 = a0 | a3\n  4706: a5 = a5 | a4\n  4709: a5 = a5 >> 0x20\n  4712: a3 = a3 | a4\n  4715: a3 = a3 << 0x20\n  4718: a3 = a3 | a5\n  4721: jump @129 if a3 != 0\n      : @122 (gas: 12)\n  4725: a4 = u64 [a2 + 0x18]\n  4728: a5 = u64 [a2 + 0x10]\n  4731: s0 = u64 [a2]\n  4733: s1 = u64 [a2 + 0x8]\n  4736: a2 = s0 | a5\n  4739: a3 = s1 | a4\n  4742: a2 = a2 | a3\n  4745: a2 = a2 >> 0x20\n  4748: a3 = a3 | a5\n  4751: a3 = a3 << 0x20\n  4754: a2 = a2 | a3\n  4757: jump @129 if a2 != 0\n      : @123 (gas: 18)\n  4761: u64 [sp + 0x28] = s1\n  4764: u64 [sp + 0x30] = a5\n  4767: u64 [sp + 0x38] = a4\n  4770: a2 = u64 [a1 + 0x18]\n  4773: a3 = u64 [a1 + 0x10]\n  4776: a5 = u64 [a1]\n  4778: a4 = u64 [a1 + 0x8]\n  4781: a1 = a5 | a3\n  4784: u64 [sp + 0x20] = a2\n  4787: u64 [sp + 0x10] = a4\n  4790: a2 = a2 | a4\n  4793: a1 = a1 | a2\n  4796: a1 = a1 >> 0x20\n  4799: u64 [sp + 0x18] = a3\n  4802: a2 = a2 | a3\n  4805: a2 = a2 << 0x20\n  4808: a1 = a1 | a2\n  4811: jump @129 if a1 != 0\n      : @124 (gas: 7)\n  4815: i32 a0 = a0 + 0\n  4817: u64 [sp + 0x8] = a0\n  4820: i32 a0 = a5 + 0\n  4822: i32 s1 = s0 + 0\n  4824: a1 = s1\n  4826: u64 [sp] = a5\n  4828: ra = 98, jump @0\n      : @125 [@dyn 49] (gas: 5)\n  4833: i32 a0 = a0 + 0\n  4835: a1 = s1\n  4837: a2 = u64 [sp + 0x8]\n  4840: ecalli 1 // 'call_data_copy'\n  4842: fallthrough\n      : @126 (gas: 29)\n  4843: a0 = u64 [sp]\n  4845: a0 = a0 + s0\n  4848: a1 = a0 <u s0\n  4851: a4 = u64 [sp + 0x28]\n  4854: a2 = u64 [sp + 0x10]\n  4857: a2 = a2 + a4\n  4860: a2 = a2 + a1\n  4863: a3 = a2 ^ a4\n  4866: a4 = a2 <u a4\n  4869: a4 = a1 if a3 == 0\n  4872: a5 = u64 [sp + 0x30]\n  4875: a1 = u64 [sp + 0x18]\n  4878: a1 = a1 + a5\n  4881: a4 = a4 + a1\n  4884: a3 = a4 <u a1\n  4887: a1 = a1 <u a5\n  4890: a5 = u64 [sp + 0x38]\n  4893: s1 = u64 [sp + 0x20]\n  4896: a5 = a5 + s1\n  4899: a1 = a1 + a5\n  4902: a1 = a1 + a3\n  4905: a3 = a0 | a4\n  4908: a1 = a1 | a2\n  4911: a3 = a3 | a1\n  4914: a3 = a3 >> 0x20\n  4917: a1 = a1 | a4\n  4920: a1 = a1 << 0x20\n  4923: a1 = a1 | a3\n  4926: jump @129 if a1 != 0\n      : @127 (gas: 3)\n  4929: i32 a0 = a0 + 0\n  4931: a1 = 0x20\n  4934: ra = 100, jump @0\n      : @128 [@dyn 50] (gas: 37)\n  4939: u8 [a0 + 31] = 0\n  4942: u8 [a0 + 30] = 0\n  4945: u8 [a0 + 29] = 0\n  4948: u8 [a0 + 28] = 0\n  4951: u8 [a0 + 27] = 0\n  4954: u8 [a0 + 26] = 0\n  4957: u8 [a0 + 25] = 0\n  4960: u8 [a0 + 24] = 0\n  4963: u8 [a0 + 23] = 0\n  4966: u8 [a0 + 22] = 0\n  4969: u8 [a0 + 21] = 0\n  4972: u8 [a0 + 20] = 0\n  4975: u8 [a0 + 19] = 0\n  4978: u8 [a0 + 18] = 0\n  4981: u8 [a0 + 17] = 0\n  4984: u8 [a0 + 16] = 0\n  4987: u8 [a0 + 15] = 0\n  4990: u8 [a0 + 14] = 0\n  4993: u8 [a0 + 13] = 0\n  4996: u8 [a0 + 12] = 0\n  4999: u8 [a0 + 11] = 0\n  5002: u8 [a0 + 10] = 0\n  5005: u8 [a0 + 9] = 0\n  5008: u8 [a0 + 8] = 0\n  5011: u8 [a0 + 7] = 0\n  5014: u8 [a0 + 6] = 0\n  5017: u8 [a0 + 5] = 0\n  5020: u8 [a0 + 4] = 0\n  5023: u8 [a0 + 3] = 0\n  5026: u8 [a0 + 2] = 0\n  5029: u8 [a0 + 1] = 0\n  5032: u8 [a0 + 0] = 0\n  5034: ra = u64 [sp + 0x50]\n  5037: s0 = u64 [sp + 0x48]\n  5040: s1 = u64 [sp + 0x40]\n  5043: sp = sp + 0x58\n  5046: ret\n      : @129 (gas: 1)\n  5048: trap\n      : @130 (gas: 16)\n  5049: sp = sp + 0xfffffffffffffee0\n  5053: u64 [sp + 0x118] = ra\n  5057: u64 [sp + 0x110] = s0\n  5061: u64 [sp + 0x108] = s1\n  5065: s0 = sp + 0x120\n  5069: sp = sp & 0xfffffffffffffff0\n  5072: a4 = u64 [a2 + 0x18]\n  5075: a5 = u64 [a2 + 0x10]\n  5078: s1 = u64 [a2 + 0x8]\n  5081: u64 [sp + 0x50] = a4\n  5084: u64 [sp + 0x48] = a5\n  5087: a4 = a4 | a5\n  5090: a5 = s1 <u 0x1\n  5093: a5 = 0 if a4 != 0\n  5095: u64 [sp] = a0\n  5097: jump @144 if a5 == 0\n      : @131 (gas: 35)\n  5101: a0 = u64 [a3 + 0x18]\n  5104: u64 [sp + 0x18] = a0\n  5107: a0 = u64 [a3 + 0x10]\n  5110: u64 [sp + 0x20] = a0\n  5113: a0 = u64 [a3 + 0x8]\n  5116: u64 [sp + 0x8] = a0\n  5119: a0 = u64 [a3]\n  5121: u64 [sp + 0x10] = a0\n  5124: a2 = u64 [a2]\n  5126: a0 = u64 [a1 + 0x18]\n  5129: u64 [sp + 0x70] = a0\n  5132: a0 = u64 [a1 + 0x10]\n  5135: u64 [sp + 0x78] = a0\n  5138: a0 = u64 [a1 + 0x8]\n  5141: u64 [sp + 0x68] = a0\n  5144: a0 = u64 [a1]\n  5146: u64 [sp + 0x60] = a0\n  5149: a0 = a2 + 0x1f\n  5152: u64 [sp + 0x40] = a2\n  5155: a1 = a0 <u a2\n  5158: a1 = a1 + s1\n  5161: a1 = a1 & 0x1\n  5164: a0 = a0 & 0xffffffffffffffe0\n  5167: a2 = a0 + 0x20\n  5170: a0 = a2 <u a0\n  5173: a3 = a1 + a0\n  5176: a4 = a3 <u a1\n  5179: a4 = a0 if a0 == 0\n  5182: u64 [sp + 216] = 0\n  5186: u64 [sp + 0xc0] = a2\n  5190: u64 [sp + 0xc8] = a3\n  5194: a0 = sp + 0xe0\n  5198: a1 = sp + 0xc0\n  5202: u64 [sp + 0xd0] = a4\n  5206: ra = 102, jump @106\n      : @132 [@dyn 51] (gas: 15)\n  5211: a0 = u64 [sp + 0xf8]\n  5215: a2 = u64 [sp + 0xf0]\n  5219: a1 = u64 [sp + 0xe8]\n  5223: a3 = u64 [sp + 0xe0]\n  5227: u64 [sp + 0x58] = a0\n  5230: u64 [sp + 0x30] = a1\n  5233: a0 = a0 | a1\n  5236: a1 = a3 | a2\n  5239: a1 = a1 | a0\n  5242: a1 = a1 >> 0x20\n  5245: u64 [sp + 0x38] = a2\n  5248: a0 = a0 | a2\n  5251: a0 = a0 << 0x20\n  5254: a0 = a0 | a1\n  5257: jump @143 if a0 != 0\n      : @133 (gas: 4)\n  5261: u64 [sp + 0x28] = a3\n  5264: i32 a0 = a3 + 0\n  5266: a1 = 0x20\n  5269: ra = 104, jump @0\n      : @134 [@dyn 52] (gas: 102)\n  5274: t2 = u64 [sp + 0x40]\n  5277: a1 = u64 [sp + 0x60]\n  5280: a1 = a1 + t2\n  5283: a3 = a1 <u t2\n  5286: a2 = u64 [sp + 0x68]\n  5289: a2 = a2 + s1\n  5292: a4 = a2 + a3\n  5295: a5 = a4 ^ s1\n  5298: a2 = a4 <u s1\n  5301: a2 = a3 if a5 == 0\n  5304: a5 = u64 [sp + 0x8]\n  5307: a3 = a4 ^ a5\n  5310: a4 = a5 <u a4\n  5313: a5 = u64 [sp + 0x10]\n  5316: a1 = a5 <u a1\n  5319: ra = u64 [sp + 0x48]\n  5322: a5 = u64 [sp + 0x78]\n  5325: a5 = a5 + ra\n  5328: a1 = a4 if a3 != 0\n  5331: a3 = a5 <u ra\n  5334: t1 = u64 [sp + 0x50]\n  5337: a4 = u64 [sp + 0x70]\n  5340: a4 = a4 + t1\n  5343: a3 = a3 + a4\n  5346: a2 = a2 + a5\n  5349: a4 = a2 <u a5\n  5352: a3 = a3 + a4\n  5355: a5 = u64 [sp + 0x18]\n  5358: a4 = a3 ^ a5\n  5361: a3 = a5 <u a3\n  5364: t0 = u64 [sp + 0x20]\n  5367: a5 = t0 <u a2\n  5370: a3 = a5 if a4 == 0\n  5373: a2 = a2 ^ t0\n  5376: a2 = a2 | a4\n  5379: a1 = a3 if a2 != 0\n  5382: a2 = reverse t2\n  5384: a3 = a2 >> 0x38\n  5387: u8 [a0 + 0x1f] = a3\n  5390: a3 = a2 >> 0x30\n  5393: u8 [a0 + 0x1e] = a3\n  5396: a3 = a2 >> 0x28\n  5399: u8 [a0 + 0x1d] = a3\n  5402: a3 = a2 >> 0x20\n  5405: u8 [a0 + 0x1c] = a3\n  5408: a3 = a2 >> 0x18\n  5411: u8 [a0 + 0x1b] = a3\n  5414: a3 = a2 >> 0x10\n  5417: u8 [a0 + 0x1a] = a3\n  5420: a3 = a2 >> 0x8\n  5423: u8 [a0 + 0x19] = a3\n  5426: a3 = reverse s1\n  5428: u8 [a0 + 0x18] = a2\n  5431: a2 = a3 >> 0x38\n  5434: u8 [a0 + 0x17] = a2\n  5437: a2 = a3 >> 0x30\n  5440: u8 [a0 + 0x16] = a2\n  5443: a2 = a3 >> 0x28\n  5446: u8 [a0 + 0x15] = a2\n  5449: a2 = a3 >> 0x20\n  5452: u8 [a0 + 0x14] = a2\n  5455: a2 = a3 >> 0x18\n  5458: u8 [a0 + 0x13] = a2\n  5461: a2 = a3 >> 0x10\n  5464: u8 [a0 + 0x12] = a2\n  5467: a2 = reverse ra\n  5469: u8 [a0 + 0x10] = a3\n  5472: a3 = a3 >> 0x8\n  5475: u8 [a0 + 0x11] = a3\n  5478: a3 = a2 >> 0x38\n  5481: u8 [a0 + 0xf] = a3\n  5484: a3 = a2 >> 0x30\n  5487: u8 [a0 + 0xe] = a3\n  5490: a3 = a2 >> 0x28\n  5493: u8 [a0 + 0xd] = a3\n  5496: a3 = a2 >> 0x20\n  5499: u8 [a0 + 0xc] = a3\n  5502: a3 = a2 >> 0x18\n  5505: u8 [a0 + 0xb] = a3\n  5508: a3 = a2 >> 0x10\n  5511: u8 [a0 + 0xa] = a3\n  5514: a3 = reverse t1\n  5516: u8 [a0 + 0x8] = a2\n  5519: a2 = a2 >> 0x8\n  5522: u8 [a0 + 0x9] = a2\n  5525: a2 = a3 >> 0x38\n  5528: u8 [a0 + 0x7] = a2\n  5531: a2 = a3 >> 0x30\n  5534: u8 [a0 + 0x6] = a2\n  5537: a2 = a3 >> 0x28\n  5540: u8 [a0 + 0x5] = a2\n  5543: a2 = a3 >> 0x20\n  5546: u8 [a0 + 0x4] = a2\n  5549: a2 = a3 >> 0x18\n  5552: u8 [a0 + 0x3] = a2\n  5555: a2 = a3 >> 0x10\n  5558: u8 [a0 + 0x2] = a2\n  5561: u8 [a0] = a3\n  5563: a3 = a3 >> 0x8\n  5566: u8 [a0 + 0x1] = a3\n  5569: t0 = u64 [sp + 0x60]\n  5572: jump @148 if a1 != 0\n      : @135 (gas: 12)\n  5576: a2 = u64 [sp + 0x78]\n  5579: a0 = t0 | a2\n  5582: a1 = u64 [sp + 0x70]\n  5585: a3 = u64 [sp + 0x68]\n  5588: a1 = a1 | a3\n  5591: a0 = a0 | a1\n  5594: a0 = a0 >> 0x20\n  5597: a1 = a1 | a2\n  5600: a1 = a1 << 0x20\n  5603: a0 = a0 | a1\n  5606: a3 = u64 [sp + 0x58]\n  5609: jump @143 if a0 != 0\n      : @136 (gas: 11)\n  5613: a0 = t2 | ra\n  5616: a1 = s1 | t1\n  5619: a0 = a0 | a1\n  5622: a0 = a0 >> 0x20\n  5625: a1 = a1 | ra\n  5628: a1 = a1 << 0x20\n  5631: a0 = a0 | a1\n  5634: a2 = u64 [sp + 0x38]\n  5637: a4 = u64 [sp + 0x30]\n  5640: a5 = u64 [sp + 0x28]\n  5643: jump @143 if a0 != 0\n      : @137 (gas: 7)\n  5647: u64 [sp + 0x78] = s1\n  5650: a0 = a2 | a3\n  5653: a1 = 0xffffffe0\n  5663: a1 = a5 <u a1\n  5666: a1 = 0 if a4 != 0\n  5668: a1 = 0 if a0 != 0\n  5670: jump @143 if a1 == 0\n      : @138 (gas: 16)\n  5674: s1 = a5 + 0x20\n  5677: a0 = s1 <u a5\n  5680: a1 = a4 + a0\n  5683: u64 [sp + 0x20] = a1\n  5686: a1 = a1 <u a4\n  5689: a1 = a0 if a0 == 0\n  5692: a1 = a1 + a2\n  5695: u64 [sp + 0x68] = a1\n  5698: a0 = a1 <u a2\n  5701: u64 [sp + 0x70] = a0\n  5704: i32 t0 = t0 + 0\n  5706: u64 [sp + 0x60] = t0\n  5709: i32 a0 = s1 + 0\n  5711: i32 a1 = t2 + 0\n  5713: u64 [sp + 0x18] = a1\n  5716: ra = 106, jump @0\n      : @139 [@dyn 53] (gas: 5)\n  5721: i32 a0 = a0 + 0\n  5723: a1 = u64 [sp + 0x18]\n  5726: a2 = u64 [sp + 0x60]\n  5729: ecalli 1 // 'call_data_copy'\n  5731: fallthrough\n      : @140 (gas: 31)\n  5732: a0 = u64 [sp + 0x40]\n  5735: a0 = a0 + s1\n  5738: a1 = a0 <u s1\n  5741: a2 = u64 [sp + 0x78]\n  5744: a4 = u64 [sp + 0x20]\n  5747: a2 = a2 + a4\n  5750: a2 = a2 + a1\n  5753: a3 = a2 ^ a4\n  5756: a4 = a2 <u a4\n  5759: a4 = a1 if a3 == 0\n  5762: a1 = u64 [sp + 0x48]\n  5765: a3 = u64 [sp + 0x68]\n  5768: a1 = a1 + a3\n  5771: a4 = a4 + a1\n  5774: t0 = a4 <u a1\n  5777: a1 = a1 <u a3\n  5780: a5 = u64 [sp + 0x50]\n  5783: s1 = u64 [sp + 0x58]\n  5786: a5 = a5 + s1\n  5789: a3 = u64 [sp + 0x70]\n  5792: a5 = a5 + a3\n  5795: a1 = a1 + a5\n  5798: a1 = a1 + t0\n  5801: a3 = a0 | a4\n  5804: a1 = a1 | a2\n  5807: a3 = a3 | a1\n  5810: a3 = a3 >> 0x20\n  5813: a1 = a1 | a4\n  5816: a1 = a1 << 0x20\n  5819: a1 = a1 | a3\n  5822: jump @143 if a1 != 0\n      : @141 (gas: 3)\n  5826: i32 a0 = a0 + 0\n  5828: a1 = 0x20\n  5831: ra = 108, jump @0\n      : @142 [@dyn 54] (gas: 46)\n  5836: u8 [a0 + 31] = 0\n  5839: u8 [a0 + 30] = 0\n  5842: u8 [a0 + 29] = 0\n  5845: u8 [a0 + 28] = 0\n  5848: u8 [a0 + 27] = 0\n  5851: u8 [a0 + 26] = 0\n  5854: u8 [a0 + 25] = 0\n  5857: u8 [a0 + 24] = 0\n  5860: u8 [a0 + 23] = 0\n  5863: u8 [a0 + 22] = 0\n  5866: u8 [a0 + 21] = 0\n  5869: u8 [a0 + 20] = 0\n  5872: u8 [a0 + 19] = 0\n  5875: u8 [a0 + 18] = 0\n  5878: u8 [a0 + 17] = 0\n  5881: u8 [a0 + 16] = 0\n  5884: u8 [a0 + 15] = 0\n  5887: u8 [a0 + 14] = 0\n  5890: u8 [a0 + 13] = 0\n  5893: u8 [a0 + 12] = 0\n  5896: u8 [a0 + 11] = 0\n  5899: u8 [a0 + 10] = 0\n  5902: u8 [a0 + 9] = 0\n  5905: u8 [a0 + 8] = 0\n  5908: u8 [a0 + 7] = 0\n  5911: u8 [a0 + 6] = 0\n  5914: u8 [a0 + 5] = 0\n  5917: u8 [a0 + 4] = 0\n  5920: u8 [a0 + 3] = 0\n  5923: u8 [a0 + 2] = 0\n  5926: u8 [a0 + 1] = 0\n  5929: u8 [a0 + 0] = 0\n  5931: a0 = u64 [sp]\n  5933: a1 = u64 [sp + 0x28]\n  5936: u64 [a0] = a1\n  5938: u64 [a0 + 0x18] = s1\n  5941: a1 = u64 [sp + 0x30]\n  5944: u64 [a0 + 0x8] = a1\n  5947: a1 = u64 [sp + 0x38]\n  5950: u64 [a0 + 0x10] = a1\n  5953: sp = s0 + 0xfffffffffffffee0\n  5957: ra = u64 [sp + 0x118]\n  5961: s0 = u64 [sp + 0x110]\n  5965: s1 = u64 [sp + 0x108]\n  5969: sp = sp + 0x120\n  5973: ret\n      : @143 (gas: 1)\n  5975: trap\n      : @144 (gas: 8)\n  5976: u64 [sp + 176] = 0\n  5980: u64 [sp + 168] = 0\n  5984: u64 [sp + 160] = 0\n  5988: a0 = 0x4e487b7100000000\n  5998: a1 = sp + 0xa0\n  6002: u64 [sp + 0xb8] = a0\n  6006: a0 = 0\n  6008: ra = 110, jump @23\n      : @145 [@dyn 55] (gas: 7)\n  6013: u64 [sp + 152] = 0\n  6017: u64 [sp + 144] = 0\n  6021: u64 [sp + 128] = 0x41\n  6026: a0 = 0x4\n  6029: a1 = sp + 0x80\n  6033: u64 [sp + 136] = 0\n  6037: ra = 112, jump @23\n      : @146 [@dyn 56] (gas: 3)\n  6042: a1 = 0x24\n  6045: a0 = 0\n  6047: ra = 114, jump @0\n      : @147 [@dyn 57] (gas: 5)\n  6052: i32 a1 = a0 + 0\n  6054: a0 = 0x1\n  6057: a2 = 0x24\n  6060: ecalli 11 // 'seal_return'\n  6062: fallthrough\n      : @148 (gas: 3)\n  6063: a0 = 0\n  6065: a1 = 0\n  6067: ra = 116, jump @0\n      : @149 [@dyn 58] (gas: 6)\n  6072: i32 a1 = a0 + 0\n  6074: a0 = 0x1\n  6077: a2 = 0\n  6079: ra = 0x76\n  6082: ecalli 11 // 'seal_return'\n  6084: fallthrough\n      : @150 [@dyn 59] (gas: 38)\n  6085: sp = sp + 0xffffffffffffff00\n  6089: u64 [sp + 0xf8] = ra\n  6093: u64 [sp + 0xf0] = s0\n  6097: u64 [sp + 0xe8] = s1\n  6101: s0 = sp + 0x100\n  6105: sp = sp & 0xffffffffffffffe0\n  6108: ra = u64 [a1]\n  6110: a4 = u64 [a2 + 0x8]\n  6113: t2 = u64 [a1 + 0x8]\n  6116: s1 = u64 [a2]\n  6118: a3 = ra + 0x1f\n  6121: t1 = a3 <u ra\n  6124: a5 = t2 + t1\n  6127: u64 [sp + 0x20] = s1\n  6130: a3 = a3 <u s1\n  6133: s1 = a5 ^ a4\n  6136: u64 [sp + 0x28] = a4\n  6139: a4 = a5 <u a4\n  6142: a4 = a3 if s1 == 0\n  6145: t0 = u64 [a1 + 0x10]\n  6148: u64 [sp + 0x38] = t2\n  6151: a3 = a5 <u t2\n  6154: a3 = t1 if t1 == 0\n  6157: t1 = u64 [a2 + 0x18]\n  6160: a5 = u64 [a1 + 0x18]\n  6163: s1 = u64 [a2 + 0x10]\n  6166: a3 = a3 + t0\n  6169: a1 = a3 <u t0\n  6172: u64 [sp + 0x30] = a5\n  6175: a1 = a1 + a5\n  6178: a2 = a1 ^ t1\n  6181: a1 = a1 <s t1\n  6184: a5 = a3 <u s1\n  6187: a1 = a5 if a2 == 0\n  6190: a3 = a3 ^ s1\n  6193: a2 = a2 | a3\n  6196: a4 = a1 if a2 != 0\n  6199: jump @155 if a4 == 0\n      : @151 (gas: 14)\n  6203: t2 = t0\n  6205: u64 [sp + 0x8] = s1\n  6208: u64 [sp + 0x10] = t1\n  6211: u64 [sp + 0x18] = a0\n  6214: a0 = ra | t2\n  6217: a1 = u64 [sp + 0x38]\n  6220: a2 = u64 [sp + 0x30]\n  6223: a1 = a1 | a2\n  6226: a0 = a0 | a1\n  6229: a0 = a0 >> 0x20\n  6232: a1 = a1 | t2\n  6235: a1 = a1 << 0x20\n  6238: a0 = a0 | a1\n  6241: jump @154 if a0 != 0\n      : @152 (gas: 41)\n  6245: s1 = t2\n  6247: i32 a1 = ra + 0\n  6249: i32 a0 = sp + 0xc0\n  6253: u64 [sp] = ra\n  6255: ecalli 2 // 'call_data_load'\n  6257: t0 = u64 [sp + 0xc0]\n  6261: t1 = u64 [sp + 0xc8]\n  6265: a2 = u64 [sp + 0xd0]\n  6269: a3 = u64 [sp + 0xd8]\n  6273: a0 = u64 [sp]\n  6275: a4 = a0 + 0x20\n  6278: a5 = a4 <u a0\n  6281: a1 = u64 [sp + 0x38]\n  6284: a0 = a1 + a5\n  6287: a1 = a0 <u a1\n  6290: a1 = a5 if a5 == 0\n  6293: a1 = a1 + s1\n  6296: a5 = a1 <u s1\n  6299: s1 = u64 [sp + 0x30]\n  6302: a5 = a5 + s1\n  6305: s1 = u64 [sp + 0x10]\n  6308: u64 [sp + 0x58] = s1\n  6311: s1 = u64 [sp + 0x8]\n  6314: u64 [sp + 0x50] = s1\n  6317: s1 = u64 [sp + 0x28]\n  6320: u64 [sp + 0x48] = s1\n  6323: s1 = u64 [sp + 0x20]\n  6326: u64 [sp + 0x40] = s1\n  6329: u64 [sp + 0x78] = a3\n  6332: u64 [sp + 0x70] = a2\n  6335: u64 [sp + 0x68] = t1\n  6338: u64 [sp + 0x60] = t0\n  6341: u64 [sp + 0x88] = a0\n  6345: u64 [sp + 0x80] = a4\n  6349: u64 [sp + 0x90] = a1\n  6353: a0 = sp + 0xa0\n  6357: a1 = sp + 0x80\n  6361: a2 = sp + 0x60\n  6364: a3 = sp + 0x40\n  6367: u64 [sp + 0x98] = a5\n  6371: ra = 120, jump @130\n      : @153 [@dyn 60] (gas: 15)\n  6376: a0 = u64 [sp + 0xb0]\n  6380: a1 = u64 [sp + 0xb8]\n  6384: a2 = u64 [sp + 0xa0]\n  6388: a3 = u64 [sp + 0xa8]\n  6392: a4 = u64 [sp + 0x18]\n  6395: u64 [a4 + 0x10] = a0\n  6398: u64 [a4 + 0x18] = a1\n  6401: u64 [a4] = a2\n  6403: u64 [a4 + 0x8] = a3\n  6406: sp = s0 + 0xffffffffffffff00\n  6410: ra = u64 [sp + 0xf8]\n  6414: s0 = u64 [sp + 0xf0]\n  6418: s1 = u64 [sp + 0xe8]\n  6422: sp = sp + 0x100\n  6426: ret\n      : @154 (gas: 1)\n  6428: trap\n      : @155 (gas: 3)\n  6429: a0 = 0\n  6431: a1 = 0\n  6433: ra = 122, jump @0\n      : @156 [@dyn 61] (gas: 6)\n  6438: i32 a1 = a0 + 0\n  6440: a0 = 0x1\n  6443: a2 = 0\n  6445: ra = 0x7c\n  6448: ecalli 11 // 'seal_return'\n  6450: fallthrough\n      : @157 [@dyn 62] (gas: 9)\n  6451: a2 = u64 [a1 + 0x18]\n  6454: a3 = u64 [a1 + 0x10]\n  6457: a4 = u64 [a1 + 0x8]\n  6460: a1 = u64 [a1]\n  6462: u64 [a0 + 0x18] = a2\n  6465: u64 [a0 + 0x10] = a3\n  6468: u64 [a0 + 0x8] = a4\n  6471: u64 [a0] = a1\n  6473: ret\n      : @158 (gas: 42)\n  6475: sp = sp + 0xfffffffffffffc80\n  6479: u64 [sp + 0x378] = ra\n  6483: u64 [sp + 0x370] = s0\n  6487: u64 [sp + 0x368] = s1\n  6491: s0 = sp + 0x380\n  6495: sp = sp & 0xffffffffffffffe0\n  6498: s1 = u64 [a2 + 0x8]\n  6501: t0 = u64 [a1 + 0x8]\n  6504: a5 = u64 [a2]\n  6506: t1 = u64 [a1]\n  6508: ra = u64 [a2 + 0x10]\n  6511: a4 = s1 ^ t0\n  6514: a3 = s1 <u t0\n  6517: t2 = a5 <u t1\n  6520: a3 = t2 if a4 == 0\n  6523: u64 [sp + 0xb8] = s1\n  6527: a4 = s1 - t0\n  6530: a4 = a4 - t2\n  6533: u64 [sp + 0xb0] = a5\n  6537: a5 = a5 - t1\n  6540: a5 = a5 <u 0xa0\n  6544: a5 = a5 ^ 0x1\n  6547: t2 = u64 [a1 + 0x10]\n  6550: s1 = a4 >u 0\n  6552: a5 = s1 if a4 != 0\n  6555: a4 = u64 [a2 + 0x18]\n  6558: s1 = u64 [a1 + 0x18]\n  6561: a1 = ra - t2\n  6564: a2 = a1 - a3\n  6567: a1 = a1 <u a3\n  6570: u64 [sp + 0xa8] = ra\n  6574: a3 = ra <u t2\n  6577: u64 [sp + 0xa0] = a4\n  6581: a4 = a4 - s1\n  6584: a4 = a4 - a3\n  6587: a4 = a4 - a1\n  6590: a1 = a4 >s 0\n  6592: a3 = a2 >u 0\n  6594: a3 = a1 if a4 != 0\n  6597: a2 = a2 | a4\n  6600: a5 = a3 if a2 != 0\n  6603: jump @186 if a5 == 0\n      : @159 (gas: 11)\n  6607: u64 [sp + 0x50] = a0\n  6610: a0 = t1 | t2\n  6613: u64 [sp + 0x88] = s1\n  6617: a1 = t0 | s1\n  6620: a0 = a0 | a1\n  6623: a0 = a0 >> 0x20\n  6626: u64 [sp + 0x90] = t2\n  6630: a1 = a1 | t2\n  6633: a1 = a1 << 0x20\n  6636: a0 = a0 | a1\n  6639: jump @185 if a0 != 0\n      : @160 (gas: 7)\n  6643: s1 = t0\n  6645: i32 a1 = t1 + 0\n  6647: i32 a0 = sp + 0x2c0\n  6651: u64 [sp + 0x78] = a1\n  6654: u64 [sp + 0x98] = t1\n  6658: ecalli 2 // 'call_data_load'\n  6660: fallthrough\n      : @161 (gas: 7)\n  6661: a0 = u64 [sp + 0x2d8]\n  6665: a1 = u64 [sp + 0x2d0]\n  6669: a2 = u64 [sp + 0x2c8]\n  6673: a3 = a1 | a0\n  6676: a4 = a2 <u 0x1\n  6679: a4 = 0 if a3 != 0\n  6681: jump @186 if a4 == 0\n      : @162 (gas: 43)\n  6685: a3 = u64 [sp + 0x2c0]\n  6689: t0 = u64 [sp + 0x98]\n  6693: t0 = t0 + a3\n  6696: a3 = t0 <u a3\n  6699: u64 [sp + 0x80] = s1\n  6703: a4 = a2 + s1\n  6706: t1 = a4 + a3\n  6709: a4 = t1 ^ a2\n  6712: s1 = t1 <u a2\n  6715: s1 = a3 if a4 == 0\n  6718: a2 = u64 [sp + 0x90]\n  6722: a2 = a2 + a1\n  6725: s1 = s1 + a2\n  6728: a3 = s1 <u a2\n  6731: a1 = a2 <u a1\n  6734: a2 = u64 [sp + 0x88]\n  6738: a0 = a0 + a2\n  6741: a0 = a0 + a1\n  6744: ra = a0 + a3\n  6747: a0 = t0 + 0x1f\n  6750: a1 = a0 <u t0\n  6753: a2 = t1 + a1\n  6756: a3 = a2 <u t1\n  6759: a3 = a1 if a1 == 0\n  6762: t2 = s1 + a3\n  6765: a1 = t2 <u s1\n  6768: a1 = a1 + ra\n  6771: a5 = u64 [sp + 0xb8]\n  6775: a4 = a2 ^ a5\n  6778: a2 = a2 <u a5\n  6781: a5 = u64 [sp + 0xb0]\n  6785: a0 = a0 <u a5\n  6788: a0 = a2 if a4 != 0\n  6791: a5 = u64 [sp + 0xa8]\n  6795: a2 = t2 <u a5\n  6798: a4 = u64 [sp + 0xa0]\n  6802: a3 = a1 ^ a4\n  6805: a1 = a1 <s a4\n  6808: a1 = a2 if a3 == 0\n  6811: a2 = t2 ^ a5\n  6814: a2 = a2 | a3\n  6817: a0 = a1 if a2 != 0\n  6820: jump @187 if a0 == 0\n      : @163 (gas: 11)\n  6824: a0 = t0 | s1\n  6827: u64 [sp + 0x70] = t1\n  6830: u64 [sp + 0x60] = ra\n  6833: a1 = t1 | ra\n  6836: a0 = a0 | a1\n  6839: a0 = a0 >> 0x20\n  6842: u64 [sp + 0x68] = s1\n  6845: a1 = a1 | s1\n  6848: a1 = a1 << 0x20\n  6851: a0 = a0 | a1\n  6854: jump @185 if a0 != 0\n      : @164 (gas: 40)\n  6858: i32 a1 = t0 + 0\n  6860: i32 a0 = sp + 0x340\n  6864: s1 = t0\n  6866: ecalli 2 // 'call_data_load'\n  6868: t0 = u64 [sp + 0x340]\n  6872: t1 = u64 [sp + 0x348]\n  6876: a2 = u64 [sp + 0x350]\n  6880: a3 = u64 [sp + 0x358]\n  6884: a4 = s1 + 0x20\n  6887: a5 = a4 <u s1\n  6890: a1 = u64 [sp + 0x70]\n  6893: a0 = a1 + a5\n  6896: a1 = a0 <u a1\n  6899: a1 = a5 if a5 == 0\n  6902: a5 = u64 [sp + 0x68]\n  6905: a1 = a1 + a5\n  6908: a5 = a1 <u a5\n  6911: s1 = u64 [sp + 0x60]\n  6914: a5 = a5 + s1\n  6917: s1 = u64 [sp + 0xa0]\n  6921: u64 [sp + 0x258] = s1\n  6925: s1 = u64 [sp + 0xa8]\n  6929: u64 [sp + 0x250] = s1\n  6933: s1 = u64 [sp + 0xb8]\n  6937: u64 [sp + 0x248] = s1\n  6941: s1 = u64 [sp + 0xb0]\n  6945: u64 [sp + 0x240] = s1\n  6949: u64 [sp + 0x278] = a3\n  6953: u64 [sp + 0x270] = a2\n  6957: u64 [sp + 0x268] = t1\n  6961: u64 [sp + 0x260] = t0\n  6965: u64 [sp + 0x288] = a0\n  6969: u64 [sp + 0x280] = a4\n  6973: u64 [sp + 0x290] = a1\n  6977: a0 = sp + 0x2a0\n  6981: a1 = sp + 0x280\n  6985: a2 = sp + 0x260\n  6989: a3 = sp + 0x240\n  6993: u64 [sp + 0x298] = a5\n  6997: ra = 126, jump @130\n      : @165 [@dyn 63] (gas: 11)\n  7002: a0 = u64 [sp + 0x90]\n  7006: a1 = u64 [sp + 0x88]\n  7010: a2 = a0 | a1\n  7013: a0 = 0xffffffe0\n  7023: a1 = u64 [sp + 0x98]\n  7027: a0 = a1 <u a0\n  7030: s1 = u64 [sp + 0x80]\n  7034: a0 = 0 if s1 != 0\n  7036: u64 [sp + 0x70] = a2\n  7039: a0 = 0 if a2 != 0\n  7041: jump @185 if a0 == 0\n      : @166 (gas: 13)\n  7045: a0 = u64 [sp + 0x2b8]\n  7049: u64 [sp + 0x30] = a0\n  7052: a0 = u64 [sp + 0x2b0]\n  7056: u64 [sp + 0x38] = a0\n  7059: a0 = u64 [sp + 0x2a8]\n  7063: u64 [sp + 0x40] = a0\n  7066: a0 = u64 [sp + 0x2a0]\n  7070: u64 [sp + 0x48] = a0\n  7073: a0 = u64 [sp + 0x78]\n  7076: i32 a1 = a0 + 0x20\n  7079: i32 a0 = sp + 0x2e0\n  7083: ecalli 2 // 'call_data_load'\n  7085: fallthrough\n      : @167 (gas: 7)\n  7086: a0 = u64 [sp + 0x2f8]\n  7090: a1 = u64 [sp + 0x2f0]\n  7094: a2 = u64 [sp + 0x2e8]\n  7098: a3 = a1 | a0\n  7101: a4 = a2 <u 0x1\n  7104: a4 = 0 if a3 != 0\n  7106: jump @186 if a4 == 0\n      : @168 (gas: 42)\n  7110: a3 = u64 [sp + 0x2e0]\n  7114: a4 = u64 [sp + 0x98]\n  7118: t0 = a3 + a4\n  7121: a3 = t0 <u a3\n  7124: a4 = a2 + s1\n  7127: t1 = a4 + a3\n  7130: a4 = t1 ^ a2\n  7133: s1 = t1 <u a2\n  7136: s1 = a3 if a4 == 0\n  7139: a2 = u64 [sp + 0x90]\n  7143: a2 = a2 + a1\n  7146: s1 = s1 + a2\n  7149: a3 = s1 <u a2\n  7152: a1 = a2 <u a1\n  7155: a2 = u64 [sp + 0x88]\n  7159: a0 = a0 + a2\n  7162: a0 = a0 + a1\n  7165: ra = a0 + a3\n  7168: a0 = t0 + 0x1f\n  7171: a1 = a0 <u t0\n  7174: a2 = t1 + a1\n  7177: a3 = a2 <u t1\n  7180: a3 = a1 if a1 == 0\n  7183: t2 = s1 + a3\n  7186: a1 = t2 <u s1\n  7189: a1 = a1 + ra\n  7192: a5 = u64 [sp + 0xb8]\n  7196: a4 = a2 ^ a5\n  7199: a2 = a2 <u a5\n  7202: a5 = u64 [sp + 0xb0]\n  7206: a0 = a0 <u a5\n  7209: a0 = a2 if a4 != 0\n  7212: a5 = u64 [sp + 0xa8]\n  7216: a2 = t2 <u a5\n  7219: a4 = u64 [sp + 0xa0]\n  7223: a3 = a1 ^ a4\n  7226: a1 = a1 <u a4\n  7229: a1 = a2 if a3 == 0\n  7232: a2 = t2 ^ a5\n  7235: a2 = a2 | a3\n  7238: a0 = a1 if a2 != 0\n  7241: jump @187 if a0 == 0\n      : @169 (gas: 11)\n  7245: a0 = t0 | s1\n  7248: u64 [sp + 0x68] = t1\n  7251: u64 [sp + 0x58] = ra\n  7254: a1 = t1 | ra\n  7257: a0 = a0 | a1\n  7260: a0 = a0 >> 0x20\n  7263: u64 [sp + 0x60] = s1\n  7266: a1 = a1 | s1\n  7269: a1 = a1 << 0x20\n  7272: a0 = a0 | a1\n  7275: jump @185 if a0 != 0\n      : @170 (gas: 40)\n  7279: i32 a1 = t0 + 0\n  7281: i32 a0 = sp + 0x340\n  7285: s1 = t0\n  7287: ecalli 2 // 'call_data_load'\n  7289: t0 = u64 [sp + 0x340]\n  7293: t1 = u64 [sp + 0x348]\n  7297: a2 = u64 [sp + 0x350]\n  7301: a3 = u64 [sp + 0x358]\n  7305: a4 = s1 + 0x20\n  7308: a5 = a4 <u s1\n  7311: a1 = u64 [sp + 0x68]\n  7314: a0 = a1 + a5\n  7317: a1 = a0 <u a1\n  7320: a1 = a5 if a5 == 0\n  7323: a5 = u64 [sp + 0x60]\n  7326: a1 = a1 + a5\n  7329: a5 = a1 <u a5\n  7332: s1 = u64 [sp + 0x58]\n  7335: a5 = a5 + s1\n  7338: s1 = u64 [sp + 0xa0]\n  7342: u64 [sp + 0x1d8] = s1\n  7346: s1 = u64 [sp + 0xa8]\n  7350: u64 [sp + 0x1d0] = s1\n  7354: s1 = u64 [sp + 0xb8]\n  7358: u64 [sp + 0x1c8] = s1\n  7362: s1 = u64 [sp + 0xb0]\n  7366: u64 [sp + 0x1c0] = s1\n  7370: u64 [sp + 0x1f8] = a3\n  7374: u64 [sp + 0x1f0] = a2\n  7378: u64 [sp + 0x1e8] = t1\n  7382: u64 [sp + 0x1e0] = t0\n  7386: u64 [sp + 0x208] = a0\n  7390: u64 [sp + 0x200] = a4\n  7394: u64 [sp + 0x210] = a1\n  7398: a0 = sp + 0x220\n  7402: a1 = sp + 0x200\n  7406: a2 = sp + 0x1e0\n  7410: a3 = sp + 0x1c0\n  7414: u64 [sp + 0x218] = a5\n  7418: ra = 128, jump @130\n      : @171 [@dyn 64] (gas: 8)\n  7424: a0 = 0xffffffc0\n  7434: a1 = u64 [sp + 0x98]\n  7438: a0 = a1 <u a0\n  7441: s1 = u64 [sp + 0x80]\n  7445: a0 = 0 if s1 != 0\n  7447: a1 = u64 [sp + 0x70]\n  7450: a0 = 0 if a1 != 0\n  7452: jump @185 if a0 == 0\n      : @172 (gas: 13)\n  7456: a0 = u64 [sp + 0x238]\n  7460: u64 [sp + 0x10] = a0\n  7463: a0 = u64 [sp + 0x230]\n  7467: u64 [sp + 0x18] = a0\n  7470: a0 = u64 [sp + 0x228]\n  7474: u64 [sp + 0x20] = a0\n  7477: a0 = u64 [sp + 0x220]\n  7481: u64 [sp + 0x28] = a0\n  7484: a0 = u64 [sp + 0x78]\n  7487: i32 a1 = a0 + 0x40\n  7490: i32 a0 = sp + 0x300\n  7494: ecalli 2 // 'call_data_load'\n  7496: fallthrough\n      : @173 (gas: 7)\n  7497: a0 = u64 [sp + 0x318]\n  7501: a1 = u64 [sp + 0x310]\n  7505: a2 = u64 [sp + 0x308]\n  7509: a3 = a1 | a0\n  7512: a4 = a2 <u 0x1\n  7515: a4 = 0 if a3 != 0\n  7517: jump @186 if a4 == 0\n      : @174 (gas: 42)\n  7521: a3 = u64 [sp + 0x300]\n  7525: a4 = u64 [sp + 0x98]\n  7529: t0 = a3 + a4\n  7532: a3 = t0 <u a3\n  7535: a4 = a2 + s1\n  7538: t1 = a4 + a3\n  7541: a4 = t1 ^ a2\n  7544: s1 = t1 <u a2\n  7547: s1 = a3 if a4 == 0\n  7550: a2 = u64 [sp + 0x90]\n  7554: a2 = a2 + a1\n  7557: s1 = s1 + a2\n  7560: a3 = s1 <u a2\n  7563: a1 = a2 <u a1\n  7566: a2 = u64 [sp + 0x88]\n  7570: a0 = a0 + a2\n  7573: a0 = a0 + a1\n  7576: ra = a0 + a3\n  7579: a0 = t0 + 0x1f\n  7582: a1 = a0 <u t0\n  7585: a2 = t1 + a1\n  7588: a3 = a2 <u t1\n  7591: a3 = a1 if a1 == 0\n  7594: t2 = s1 + a3\n  7597: a1 = t2 <u s1\n  7600: a1 = a1 + ra\n  7603: a5 = u64 [sp + 0xb8]\n  7607: a4 = a2 ^ a5\n  7610: a2 = a2 <u a5\n  7613: a5 = u64 [sp + 0xb0]\n  7617: a0 = a0 <u a5\n  7620: a0 = a2 if a4 != 0\n  7623: a5 = u64 [sp + 0xa8]\n  7627: a2 = t2 <u a5\n  7630: a4 = u64 [sp + 0xa0]\n  7634: a3 = a1 ^ a4\n  7637: a1 = a1 <u a4\n  7640: a1 = a2 if a3 == 0\n  7643: a2 = t2 ^ a5\n  7646: a2 = a2 | a3\n  7649: a0 = a1 if a2 != 0\n  7652: jump @187 if a0 == 0\n      : @175 (gas: 11)\n  7656: a0 = t0 | s1\n  7659: u64 [sp + 0x68] = t1\n  7662: u64 [sp + 0x58] = ra\n  7665: a1 = t1 | ra\n  7668: a0 = a0 | a1\n  7671: a0 = a0 >> 0x20\n  7674: u64 [sp + 0x60] = s1\n  7677: a1 = a1 | s1\n  7680: a1 = a1 << 0x20\n  7683: a0 = a0 | a1\n  7686: jump @185 if a0 != 0\n      : @176 (gas: 40)\n  7690: i32 a1 = t0 + 0\n  7692: i32 a0 = sp + 0x340\n  7696: s1 = t0\n  7698: ecalli 2 // 'call_data_load'\n  7700: t0 = u64 [sp + 0x340]\n  7704: t1 = u64 [sp + 0x348]\n  7708: a2 = u64 [sp + 0x350]\n  7712: a3 = u64 [sp + 0x358]\n  7716: a4 = s1 + 0x20\n  7719: a5 = a4 <u s1\n  7722: a1 = u64 [sp + 0x68]\n  7725: a0 = a1 + a5\n  7728: a1 = a0 <u a1\n  7731: a1 = a5 if a5 == 0\n  7734: a5 = u64 [sp + 0x60]\n  7737: a1 = a1 + a5\n  7740: a5 = a1 <u a5\n  7743: s1 = u64 [sp + 0x58]\n  7746: a5 = a5 + s1\n  7749: s1 = u64 [sp + 0xa0]\n  7753: u64 [sp + 0x158] = s1\n  7757: s1 = u64 [sp + 0xa8]\n  7761: u64 [sp + 0x150] = s1\n  7765: s1 = u64 [sp + 0xb8]\n  7769: u64 [sp + 0x148] = s1\n  7773: s1 = u64 [sp + 0xb0]\n  7777: u64 [sp + 0x140] = s1\n  7781: u64 [sp + 0x178] = a3\n  7785: u64 [sp + 0x170] = a2\n  7789: u64 [sp + 0x168] = t1\n  7793: u64 [sp + 0x160] = t0\n  7797: u64 [sp + 0x188] = a0\n  7801: u64 [sp + 0x180] = a4\n  7805: u64 [sp + 0x190] = a1\n  7809: a0 = sp + 0x1a0\n  7813: a1 = sp + 0x180\n  7817: a2 = sp + 0x160\n  7821: a3 = sp + 0x140\n  7825: u64 [sp + 0x198] = a5\n  7829: ra = 130, jump @130\n      : @177 [@dyn 65] (gas: 8)\n  7835: a0 = 0xffffffa0\n  7845: a1 = u64 [sp + 0x98]\n  7849: a0 = a1 <u a0\n  7852: s1 = u64 [sp + 0x80]\n  7856: a0 = 0 if s1 != 0\n  7858: a1 = u64 [sp + 0x70]\n  7861: a0 = 0 if a1 != 0\n  7863: jump @185 if a0 == 0\n      : @178 (gas: 13)\n  7867: a0 = u64 [sp + 0x1b8]\n  7871: u64 [sp] = a0\n  7873: a0 = u64 [sp + 0x1b0]\n  7877: u64 [sp + 0x8] = a0\n  7880: a0 = u64 [sp + 0x1a8]\n  7884: u64 [sp + 0x58] = a0\n  7887: a0 = u64 [sp + 0x1a0]\n  7891: u64 [sp + 0x60] = a0\n  7894: a0 = u64 [sp + 0x78]\n  7897: i32 a1 = a0 + 0x60\n  7900: i32 a0 = sp + 0x320\n  7904: ecalli 2 // 'call_data_load'\n  7906: fallthrough\n      : @179 (gas: 7)\n  7907: a0 = u64 [sp + 0x338]\n  7911: a1 = u64 [sp + 0x330]\n  7915: a2 = u64 [sp + 0x328]\n  7919: a3 = a1 | a0\n  7922: a4 = a2 <u 0x1\n  7925: a4 = 0 if a3 != 0\n  7927: jump @186 if a4 == 0\n      : @180 (gas: 42)\n  7931: a3 = u64 [sp + 0x320]\n  7935: a4 = u64 [sp + 0x98]\n  7939: t0 = a3 + a4\n  7942: a3 = t0 <u a3\n  7945: a4 = a2 + s1\n  7948: t1 = a4 + a3\n  7951: a4 = t1 ^ a2\n  7954: s1 = t1 <u a2\n  7957: s1 = a3 if a4 == 0\n  7960: a2 = u64 [sp + 0x90]\n  7964: a2 = a2 + a1\n  7967: s1 = s1 + a2\n  7970: a3 = s1 <u a2\n  7973: a1 = a2 <u a1\n  7976: a2 = u64 [sp + 0x88]\n  7980: a0 = a0 + a2\n  7983: a0 = a0 + a1\n  7986: ra = a0 + a3\n  7989: a0 = t0 + 0x1f\n  7992: a1 = a0 <u t0\n  7995: a2 = t1 + a1\n  7998: a3 = a2 <u t1\n  8001: a3 = a1 if a1 == 0\n  8004: t2 = s1 + a3\n  8007: a1 = t2 <u s1\n  8010: a1 = a1 + ra\n  8013: a5 = u64 [sp + 0xb8]\n  8017: a4 = a2 ^ a5\n  8020: a2 = a2 <u a5\n  8023: a5 = u64 [sp + 0xb0]\n  8027: a0 = a0 <u a5\n  8030: a0 = a2 if a4 != 0\n  8033: a5 = u64 [sp + 0xa8]\n  8037: a2 = t2 <u a5\n  8040: a4 = u64 [sp + 0xa0]\n  8044: a3 = a1 ^ a4\n  8047: a1 = a1 <u a4\n  8050: a1 = a2 if a3 == 0\n  8053: a2 = t2 ^ a5\n  8056: a2 = a2 | a3\n  8059: a0 = a1 if a2 != 0\n  8062: jump @187 if a0 == 0\n      : @181 (gas: 11)\n  8066: a0 = t0 | s1\n  8069: u64 [sp + 0x90] = t1\n  8073: u64 [sp + 0x68] = ra\n  8076: a1 = t1 | ra\n  8079: a0 = a0 | a1\n  8082: a0 = a0 >> 0x20\n  8085: u64 [sp + 0x88] = s1\n  8089: a1 = a1 | s1\n  8092: a1 = a1 << 0x20\n  8095: a0 = a0 | a1\n  8098: jump @185 if a0 != 0\n      : @182 (gas: 40)\n  8102: i32 a1 = t0 + 0\n  8104: i32 a0 = sp + 0x340\n  8108: s1 = t0\n  8110: ecalli 2 // 'call_data_load'\n  8112: t0 = u64 [sp + 0x340]\n  8116: t1 = u64 [sp + 0x348]\n  8120: a2 = u64 [sp + 0x350]\n  8124: a3 = u64 [sp + 0x358]\n  8128: a4 = s1 + 0x20\n  8131: a5 = a4 <u s1\n  8134: a1 = u64 [sp + 0x90]\n  8138: a0 = a1 + a5\n  8141: a1 = a0 <u a1\n  8144: a1 = a5 if a5 == 0\n  8147: a5 = u64 [sp + 0x88]\n  8151: a1 = a1 + a5\n  8154: a5 = a1 <u a5\n  8157: s1 = u64 [sp + 0x68]\n  8160: a5 = a5 + s1\n  8163: s1 = u64 [sp + 0xa0]\n  8167: u64 [sp + 0xd8] = s1\n  8171: s1 = u64 [sp + 0xa8]\n  8175: u64 [sp + 0xd0] = s1\n  8179: s1 = u64 [sp + 0xb8]\n  8183: u64 [sp + 0xc8] = s1\n  8187: s1 = u64 [sp + 0xb0]\n  8191: u64 [sp + 0xc0] = s1\n  8195: u64 [sp + 0xf8] = a3\n  8199: u64 [sp + 0xf0] = a2\n  8203: u64 [sp + 0xe8] = t1\n  8207: u64 [sp + 0xe0] = t0\n  8211: u64 [sp + 0x108] = a0\n  8215: u64 [sp + 0x100] = a4\n  8219: u64 [sp + 0x110] = a1\n  8223: a0 = sp + 0x120\n  8227: a1 = sp + 0x100\n  8231: a2 = sp + 0xe0\n  8235: a3 = sp + 0xc0\n  8239: u64 [sp + 0x118] = a5\n  8243: ra = 132, jump @130\n      : @183 [@dyn 66] (gas: 8)\n  8249: a0 = 0xffffff80\n  8259: a1 = u64 [sp + 0x98]\n  8263: a0 = a1 <u a0\n  8266: a1 = u64 [sp + 0x80]\n  8270: a0 = 0 if a1 != 0\n  8272: a1 = u64 [sp + 0x70]\n  8275: a0 = 0 if a1 != 0\n  8277: jump @185 if a0 == 0\n      : @184 (gas: 57)\n  8281: s1 = u64 [sp + 0x138]\n  8285: a0 = u64 [sp + 0x130]\n  8289: u64 [sp + 0xa8] = a0\n  8293: a0 = u64 [sp + 0x128]\n  8297: u64 [sp + 0xb0] = a0\n  8301: a0 = u64 [sp + 0x120]\n  8305: u64 [sp + 0xb8] = a0\n  8309: a0 = u64 [sp + 0x78]\n  8312: i32 a1 = a0 + 0x80\n  8316: i32 a0 = sp + 0x340\n  8320: ecalli 2 // 'call_data_load'\n  8322: a0 = u64 [sp + 0x358]\n  8326: a1 = u64 [sp + 0x350]\n  8330: a2 = u64 [sp + 0x348]\n  8334: a3 = u64 [sp + 0x340]\n  8338: a4 = u64 [sp + 0x50]\n  8341: u64 [a4 + 0x98] = a0\n  8345: u64 [a4 + 0x90] = a1\n  8349: u64 [a4 + 0x88] = a2\n  8353: u64 [a4 + 0x80] = a3\n  8357: u64 [a4 + 0x78] = s1\n  8360: a0 = u64 [sp + 0xa8]\n  8364: u64 [a4 + 0x70] = a0\n  8367: a0 = u64 [sp + 0xb0]\n  8371: u64 [a4 + 0x68] = a0\n  8374: a0 = u64 [sp + 0xb8]\n  8378: u64 [a4 + 0x60] = a0\n  8381: a0 = u64 [sp]\n  8383: u64 [a4 + 0x58] = a0\n  8386: a0 = u64 [sp + 0x8]\n  8389: u64 [a4 + 0x50] = a0\n  8392: a0 = u64 [sp + 0x58]\n  8395: u64 [a4 + 0x48] = a0\n  8398: a0 = u64 [sp + 0x60]\n  8401: u64 [a4 + 0x40] = a0\n  8404: a0 = u64 [sp + 0x10]\n  8407: u64 [a4 + 0x38] = a0\n  8410: a0 = u64 [sp + 0x18]\n  8413: u64 [a4 + 0x30] = a0\n  8416: a0 = u64 [sp + 0x20]\n  8419: u64 [a4 + 0x28] = a0\n  8422: a0 = u64 [sp + 0x28]\n  8425: u64 [a4 + 0x20] = a0\n  8428: a0 = u64 [sp + 0x30]\n  8431: u64 [a4 + 0x18] = a0\n  8434: a0 = u64 [sp + 0x38]\n  8437: u64 [a4 + 0x10] = a0\n  8440: a0 = u64 [sp + 0x40]\n  8443: u64 [a4 + 0x8] = a0\n  8446: a0 = u64 [sp + 0x48]\n  8449: u64 [a4] = a0\n  8451: sp = s0 + 0xfffffffffffffc80\n  8455: ra = u64 [sp + 0x378]\n  8459: s0 = u64 [sp + 0x370]\n  8463: s1 = u64 [sp + 0x368]\n  8467: sp = sp + 0x380\n  8471: ret\n      : @185 (gas: 1)\n  8473: trap\n      : @186 (gas: 4)\n  8474: a0 = 0\n  8476: a1 = 0\n  8478: ra = 0x86\n  8482: jump @0\n      : @187 (gas: 2)\n  8485: a1 = 0\n  8487: ra = 134, jump @0\n      : @188 [@dyn 67] (gas: 6)\n  8493: i32 a1 = a0 + 0\n  8495: a0 = 0x1\n  8498: a2 = 0\n  8500: ra = 0x88\n  8504: ecalli 11 // 'seal_return'\n  8506: fallthrough\n      : @189 [@dyn 68] (gas: 17)\n  8507: sp = sp + 0xffffffffffffffa8\n  8510: u64 [sp + 0x50] = ra\n  8513: u64 [sp + 0x48] = s0\n  8516: u64 [sp + 0x40] = s1\n  8519: a3 = u64 [a1 + 0x10]\n  8522: s1 = u64 [a1 + 0x18]\n  8525: a5 = u64 [a1 + 0x8]\n  8528: s0 = u64 [a1]\n  8530: a4 = a5 | s1\n  8533: a1 = s0 | a3\n  8536: a1 = a1 | a4\n  8539: a1 = a1 >> 0x20\n  8542: a4 = a4 | a3\n  8545: a4 = a4 << 0x20\n  8548: a1 = a1 | a4\n  8551: u64 [sp + 0x38] = a0\n  8554: jump @192 if a1 != 0\n      : @190 (gas: 22)\n  8558: a0 = u64 [a2 + 0x18]\n  8561: u64 [sp] = a0\n  8563: a0 = u64 [a2 + 0x10]\n  8566: u64 [sp + 0x8] = a0\n  8569: a0 = u64 [a2 + 0x8]\n  8572: u64 [sp + 0x10] = a0\n  8575: a0 = u64 [a2]\n  8577: u64 [sp + 0x18] = a0\n  8580: a0 = s0 + 0x20\n  8583: u64 [sp + 0x30] = a0\n  8586: a0 = a0 <u s0\n  8589: a1 = a5 + a0\n  8592: u64 [sp + 0x28] = a1\n  8595: a1 = a1 <u a5\n  8598: a1 = a0 if a0 == 0\n  8601: a1 = a1 + a3\n  8604: u64 [sp + 0x20] = a1\n  8607: a0 = a1 <u a3\n  8610: s1 = s1 + a0\n  8613: i32 a0 = s0 + 0\n  8615: a1 = 0x20\n  8618: ra = 138, jump @0\n      : @191 [@dyn 69] (gas: 81)\n  8624: a1 = u64 [sp]\n  8626: a1 = reverse a1\n  8628: a2 = u64 [sp + 0x8]\n  8631: a2 = reverse a2\n  8633: a3 = u64 [sp + 0x10]\n  8636: a3 = reverse a3\n  8638: a4 = u64 [sp + 0x18]\n  8641: a4 = reverse a4\n  8643: a5 = a4 >> 0x38\n  8646: u8 [a0 + 0x1f] = a5\n  8649: a5 = a4 >> 0x30\n  8652: u8 [a0 + 0x1e] = a5\n  8655: a5 = a4 >> 0x28\n  8658: u8 [a0 + 0x1d] = a5\n  8661: a5 = a4 >> 0x20\n  8664: u8 [a0 + 0x1c] = a5\n  8667: a5 = a4 >> 0x18\n  8670: u8 [a0 + 0x1b] = a5\n  8673: a5 = a4 >> 0x10\n  8676: u8 [a0 + 0x1a] = a5\n  8679: a5 = a4 >> 0x8\n  8682: u8 [a0 + 0x19] = a5\n  8685: u8 [a0 + 0x18] = a4\n  8688: u8 [a0 + 0x10] = a3\n  8691: a4 = a3 >> 0x38\n  8694: u8 [a0 + 0x17] = a4\n  8697: a4 = a3 >> 0x30\n  8700: u8 [a0 + 0x16] = a4\n  8703: a4 = a3 >> 0x28\n  8706: u8 [a0 + 0x15] = a4\n  8709: a4 = a3 >> 0x20\n  8712: u8 [a0 + 0x14] = a4\n  8715: a4 = a3 >> 0x18\n  8718: u8 [a0 + 0x13] = a4\n  8721: a4 = a3 >> 0x10\n  8724: u8 [a0 + 0x12] = a4\n  8727: a3 = a3 >> 0x8\n  8730: u8 [a0 + 0x11] = a3\n  8733: u8 [a0 + 0x8] = a2\n  8736: a3 = a2 >> 0x38\n  8739: u8 [a0 + 0xf] = a3\n  8742: a3 = a2 >> 0x30\n  8745: u8 [a0 + 0xe] = a3\n  8748: a3 = a2 >> 0x28\n  8751: u8 [a0 + 0xd] = a3\n  8754: a3 = a2 >> 0x20\n  8757: u8 [a0 + 0xc] = a3\n  8760: a3 = a2 >> 0x18\n  8763: u8 [a0 + 0xb] = a3\n  8766: a3 = a2 >> 0x10\n  8769: u8 [a0 + 0xa] = a3\n  8772: a2 = a2 >> 0x8\n  8775: u8 [a0 + 0x9] = a2\n  8778: u8 [a0] = a1\n  8780: a2 = a1 >> 0x38\n  8783: u8 [a0 + 0x7] = a2\n  8786: a2 = a1 >> 0x30\n  8789: u8 [a0 + 0x6] = a2\n  8792: a2 = a1 >> 0x28\n  8795: u8 [a0 + 0x5] = a2\n  8798: a2 = a1 >> 0x20\n  8801: u8 [a0 + 0x4] = a2\n  8804: a2 = a1 >> 0x18\n  8807: u8 [a0 + 0x3] = a2\n  8810: a2 = a1 >> 0x10\n  8813: u8 [a0 + 0x2] = a2\n  8816: a1 = a1 >> 0x8\n  8819: u8 [a0 + 0x1] = a1\n  8822: a0 = u64 [sp + 0x38]\n  8825: a1 = u64 [sp + 0x30]\n  8828: u64 [a0] = a1\n  8830: a1 = u64 [sp + 0x28]\n  8833: u64 [a0 + 0x8] = a1\n  8836: a1 = u64 [sp + 0x20]\n  8839: u64 [a0 + 0x10] = a1\n  8842: u64 [a0 + 0x18] = s1\n  8845: ra = u64 [sp + 0x50]\n  8848: s0 = u64 [sp + 0x48]\n  8851: s1 = u64 [sp + 0x40]\n  8854: sp = sp + 0x58\n  8857: ret\n      : @192 (gas: 1)\n  8859: trap\n      : @193 (gas: 8)\n  8860: a0 = u64 [sp + 0x210]\n  8864: a1 = u64 [sp + 0x218]\n  8868: a2 = u64 [sp + 0x208]\n  8872: a3 = u64 [sp + 0x200]\n  8876: a1 = a1 | a2\n  8879: a0 = a0 | a3\n  8882: a0 = a0 | a1\n  8885: jump @199 if a0 != 0\n      : @194 (gas: 13)\n  8889: a0 = u32 [0x200a4]\n  8894: u64 [sp + 312] = 0\n  8898: u64 [sp + 304] = 0\n  8902: u64 [sp + 296] = 0\n  8906: u64 [sp + 0x120] = a0\n  8910: u64 [sp + 344] = 0\n  8914: u64 [sp + 336] = 0\n  8918: u64 [sp + 320] = 0x4\n  8923: a0 = sp + 0x160\n  8927: a1 = sp + 0x140\n  8931: a2 = sp + 0x120\n  8935: u64 [sp + 328] = 0\n  8939: ra = 140, jump @158\n      : @195 [@dyn 70] (gas: 65)\n  8945: a0 = u64 [sp + 0x160]\n  8949: u64 [sp + 0x58] = a0\n  8952: a0 = u64 [sp + 0x168]\n  8956: u64 [sp + 0x50] = a0\n  8959: a0 = u64 [sp + 0x170]\n  8963: u64 [sp + 0x48] = a0\n  8966: a0 = u64 [sp + 0x178]\n  8970: u64 [sp + 0x40] = a0\n  8973: a0 = u64 [sp + 0x180]\n  8977: u64 [sp + 0x38] = a0\n  8980: a0 = u64 [sp + 0x188]\n  8984: u64 [sp + 0x30] = a0\n  8987: a0 = u64 [sp + 0x190]\n  8991: u64 [sp + 0x28] = a0\n  8994: a0 = u64 [sp + 0x198]\n  8998: u64 [sp + 0x20] = a0\n  9001: a0 = u64 [sp + 0x1a0]\n  9005: u64 [sp + 0x18] = a0\n  9008: ra = u64 [sp + 0x1a8]\n  9012: s1 = u64 [sp + 0x1b0]\n  9016: t2 = u64 [sp + 0x1b8]\n  9020: t1 = u64 [sp + 0x1c0]\n  9024: t0 = u64 [sp + 0x1c8]\n  9028: a5 = u64 [sp + 0x1d0]\n  9032: a4 = u64 [sp + 0x1d8]\n  9036: a3 = u64 [sp + 0x1e0]\n  9040: a2 = u64 [sp + 0x1e8]\n  9044: a1 = u64 [sp + 0x1f0]\n  9048: a0 = u64 [sp + 0x1f8]\n  9052: u64 [sp + 0x78] = a0\n  9055: u64 [sp + 0x70] = a1\n  9058: u64 [sp + 0x68] = a2\n  9061: u64 [sp + 0x60] = a3\n  9064: u64 [sp + 0x98] = a4\n  9068: u64 [sp + 0x90] = a5\n  9072: u64 [sp + 0x88] = t0\n  9076: u64 [sp + 0x80] = t1\n  9080: u64 [sp + 0xb8] = t2\n  9084: u64 [sp + 0xb0] = s1\n  9088: u64 [sp + 0xa8] = ra\n  9092: a0 = u64 [sp + 0x18]\n  9095: u64 [sp + 0xa0] = a0\n  9099: a0 = u64 [sp + 0x20]\n  9102: u64 [sp + 0xd8] = a0\n  9106: a0 = u64 [sp + 0x28]\n  9109: u64 [sp + 0xd0] = a0\n  9113: a0 = u64 [sp + 0x30]\n  9116: u64 [sp + 0xc8] = a0\n  9120: a0 = u64 [sp + 0x38]\n  9123: u64 [sp + 0xc0] = a0\n  9127: a0 = u64 [sp + 0x40]\n  9130: u64 [sp + 0xf8] = a0\n  9134: a0 = u64 [sp + 0x48]\n  9137: u64 [sp + 0xf0] = a0\n  9141: a0 = u64 [sp + 0x50]\n  9144: u64 [sp + 0xe8] = a0\n  9148: a0 = sp + 0x100\n  9152: a1 = sp + 0xe0\n  9156: a2 = sp + 0xc0\n  9160: a3 = sp + 0xa0\n  9164: a4 = sp + 0x80\n  9168: a5 = sp + 0x60\n  9171: s1 = u64 [sp + 0x58]\n  9174: u64 [sp + 0xe0] = s1\n  9178: ra = 142, jump @697\n      : @196 [@dyn 71] (gas: 11)\n  9185: a0 = u64 [sp + 0x118]\n  9189: u64 [sp + 0x40] = a0\n  9192: a0 = u64 [sp + 0x110]\n  9196: u64 [sp + 0x48] = a0\n  9199: a0 = u64 [sp + 0x108]\n  9203: u64 [sp + 0x50] = a0\n  9206: a0 = u64 [sp + 0x100]\n  9210: u64 [sp + 0x58] = a0\n  9213: a0 = 0x40\n  9216: a1 = 0x20\n  9219: ra = 144, jump @0\n      : @197 [@dyn 72] (gas: 100)\n  9225: a1 = u8 [a0 + 0x11]\n  9228: a2 = u8 [a0 + 0x10]\n  9231: a3 = u8 [a0 + 0x12]\n  9234: a4 = u8 [a0 + 0x13]\n  9237: a1 = a1 << 0x8\n  9240: a1 = a1 | a2\n  9243: a3 = a3 << 0x10\n  9246: a4 = a4 << 0x18\n  9249: a3 = a3 | a4\n  9252: a1 = a1 | a3\n  9255: a2 = u8 [a0 + 0x15]\n  9258: a3 = u8 [a0 + 0x14]\n  9261: a4 = u8 [a0 + 0x16]\n  9264: a5 = u8 [a0 + 0x17]\n  9267: a2 = a2 << 0x8\n  9270: a2 = a2 | a3\n  9273: a4 = a4 << 0x10\n  9276: a5 = a5 << 0x18\n  9279: a4 = a4 | a5\n  9282: a2 = a2 | a4\n  9285: a2 = a2 << 0x20\n  9288: t0 = a2 | a1\n  9291: a2 = u8 [a0 + 0x1]\n  9294: a3 = u8 [a0]\n  9296: a4 = u8 [a0 + 0x2]\n  9299: a5 = u8 [a0 + 0x3]\n  9302: a2 = a2 << 0x8\n  9305: a2 = a2 | a3\n  9308: a4 = a4 << 0x10\n  9311: a5 = a5 << 0x18\n  9314: a4 = a4 | a5\n  9317: a2 = a2 | a4\n  9320: a3 = u8 [a0 + 0x5]\n  9323: a4 = u8 [a0 + 0x4]\n  9326: a5 = u8 [a0 + 0x6]\n  9329: s1 = u8 [a0 + 0x7]\n  9332: a3 = a3 << 0x8\n  9335: a3 = a3 | a4\n  9338: a5 = a5 << 0x10\n  9341: s1 = s1 << 0x18\n  9344: a5 = a5 | s1\n  9347: a3 = a3 | a5\n  9350: a3 = a3 << 0x20\n  9353: a2 = a2 | a3\n  9356: a3 = u8 [a0 + 0x19]\n  9359: a4 = u8 [a0 + 0x18]\n  9362: a5 = u8 [a0 + 0x1a]\n  9365: s1 = u8 [a0 + 0x1b]\n  9368: a3 = a3 << 0x8\n  9371: a3 = a3 | a4\n  9374: a5 = a5 << 0x10\n  9377: s1 = s1 << 0x18\n  9380: a5 = a5 | s1\n  9383: a3 = a3 | a5\n  9386: a4 = u8 [a0 + 0x1d]\n  9389: a5 = u8 [a0 + 0x1c]\n  9392: s1 = u8 [a0 + 0x1e]\n  9395: a1 = u8 [a0 + 0x1f]\n  9398: a4 = a4 << 0x8\n  9401: a4 = a4 | a5\n  9404: s1 = s1 << 0x10\n  9407: a1 = a1 << 0x18\n  9410: a1 = a1 | s1\n  9413: a1 = a1 | a4\n  9416: a1 = a1 << 0x20\n  9419: a3 = a3 | a1\n  9422: a1 = u8 [a0 + 0x9]\n  9425: a4 = u8 [a0 + 0x8]\n  9428: a5 = u8 [a0 + 0xa]\n  9431: s1 = u8 [a0 + 0xb]\n  9434: a1 = a1 << 0x8\n  9437: a1 = a1 | a4\n  9440: a5 = a5 << 0x10\n  9443: s1 = s1 << 0x18\n  9446: a5 = a5 | s1\n  9449: a1 = a1 | a5\n  9452: a4 = u8 [a0 + 0xd]\n  9455: a5 = u8 [a0 + 0xc]\n  9458: s1 = u8 [a0 + 0xe]\n  9461: a0 = u8 [a0 + 0xf]\n  9464: a4 = a4 << 0x8\n  9467: a4 = a4 | a5\n  9470: s1 = s1 << 0x10\n  9473: a0 = a0 << 0x18\n  9476: a0 = a0 | s1\n  9479: a0 = a0 | a4\n  9482: a0 = a0 << 0x20\n  9485: a0 = a0 | a1\n  9488: a1 = reverse a0\n  9490: a0 = reverse a3\n  9492: a2 = reverse a2\n  9494: a3 = reverse t0\n  9496: a2 = a2 | a3\n  9499: a3 = a0 | a1\n  9502: a3 = a3 | a2\n  9505: a3 = a3 >> 0x20\n  9508: a1 = a1 | a2\n  9511: a1 = a1 << 0x20\n  9514: a1 = a1 | a3\n  9517: jump @201 if a1 == 0\n      : @198 (gas: 1)\n  9520: trap\n      : @199 (gas: 3)\n  9521: a0 = 0\n  9523: a1 = 0\n  9525: ra = 146, jump @0\n      : @200 [@dyn 73] (gas: 5)\n  9531: i32 a1 = a0 + 0\n  9533: a0 = 0x1\n  9536: a2 = 0\n  9538: ecalli 11 // 'seal_return'\n  9540: fallthrough\n      : @201 (gas: 4)\n  9541: i32 s1 = a0 + 0\n  9543: a1 = 0x20\n  9546: a0 = s1\n  9548: ra = 148, jump @0\n      : @202 [@dyn 74] (gas: 71)\n  9554: a1 = u64 [sp + 0x40]\n  9557: a1 = reverse a1\n  9559: a2 = u64 [sp + 0x48]\n  9562: a2 = reverse a2\n  9564: a3 = u64 [sp + 0x50]\n  9567: a3 = reverse a3\n  9569: a4 = u64 [sp + 0x58]\n  9572: a4 = reverse a4\n  9574: a5 = a4 >> 0x38\n  9577: u8 [a0 + 0x1f] = a5\n  9580: a5 = a4 >> 0x30\n  9583: u8 [a0 + 0x1e] = a5\n  9586: a5 = a4 >> 0x28\n  9589: u8 [a0 + 0x1d] = a5\n  9592: a5 = a4 >> 0x20\n  9595: u8 [a0 + 0x1c] = a5\n  9598: a5 = a4 >> 0x18\n  9601: u8 [a0 + 0x1b] = a5\n  9604: a5 = a4 >> 0x10\n  9607: u8 [a0 + 0x1a] = a5\n  9610: a5 = a4 >> 0x8\n  9613: u8 [a0 + 0x19] = a5\n  9616: u8 [a0 + 0x18] = a4\n  9619: u8 [a0 + 0x10] = a3\n  9622: a4 = a3 >> 0x38\n  9625: u8 [a0 + 0x17] = a4\n  9628: a4 = a3 >> 0x30\n  9631: u8 [a0 + 0x16] = a4\n  9634: a4 = a3 >> 0x28\n  9637: u8 [a0 + 0x15] = a4\n  9640: a4 = a3 >> 0x20\n  9643: u8 [a0 + 0x14] = a4\n  9646: a4 = a3 >> 0x18\n  9649: u8 [a0 + 0x13] = a4\n  9652: a4 = a3 >> 0x10\n  9655: u8 [a0 + 0x12] = a4\n  9658: a3 = a3 >> 0x8\n  9661: u8 [a0 + 0x11] = a3\n  9664: u8 [a0 + 0x8] = a2\n  9667: a3 = a2 >> 0x38\n  9670: u8 [a0 + 0xf] = a3\n  9673: a3 = a2 >> 0x30\n  9676: u8 [a0 + 0xe] = a3\n  9679: a3 = a2 >> 0x28\n  9682: u8 [a0 + 0xd] = a3\n  9685: a3 = a2 >> 0x20\n  9688: u8 [a0 + 0xc] = a3\n  9691: a3 = a2 >> 0x18\n  9694: u8 [a0 + 0xb] = a3\n  9697: a3 = a2 >> 0x10\n  9700: u8 [a0 + 0xa] = a3\n  9703: a2 = a2 >> 0x8\n  9706: u8 [a0 + 0x9] = a2\n  9709: u8 [a0] = a1\n  9711: a2 = a1 >> 0x38\n  9714: u8 [a0 + 0x7] = a2\n  9717: a2 = a1 >> 0x30\n  9720: u8 [a0 + 0x6] = a2\n  9723: a2 = a1 >> 0x28\n  9726: u8 [a0 + 0x5] = a2\n  9729: a2 = a1 >> 0x20\n  9732: u8 [a0 + 0x4] = a2\n  9735: a2 = a1 >> 0x18\n  9738: u8 [a0 + 0x3] = a2\n  9741: a2 = a1 >> 0x10\n  9744: u8 [a0 + 0x2] = a2\n  9747: a1 = a1 >> 0x8\n  9750: u8 [a0 + 0x1] = a1\n  9753: a1 = 0x20\n  9756: a0 = s1\n  9758: ra = 150, jump @0\n      : @203 [@dyn 75] (gas: 6)\n  9764: i32 a1 = a0 + 0\n  9766: a2 = 0x20\n  9769: a0 = 0\n  9771: ra = 0x98\n  9775: ecalli 11 // 'seal_return'\n  9777: fallthrough\n      : @204 [@dyn 76] (gas: 19)\n  9778: t0 = u64 [a0 + 0x18]\n  9781: t1 = u64 [a1 + 0x18]\n  9784: a4 = u64 [a0 + 0x10]\n  9787: a5 = u64 [a0 + 0x8]\n  9790: a2 = u64 [a1 + 0x8]\n  9793: t2 = u64 [a0]\n  9795: a3 = u64 [a1]\n  9797: a1 = u64 [a1 + 0x10]\n  9800: a0 = a2 ^ a5\n  9803: a2 = a2 <u a5\n  9806: a3 = a3 <u t2\n  9809: a3 = a2 if a0 != 0\n  9812: a0 = a1 - a4\n  9815: a0 = a0 <u a3\n  9818: a1 = a1 <u a4\n  9821: a2 = t1 - t0\n  9824: a2 = a2 - a1\n  9827: a2 = a2 - a0\n  9830: jump @206 if a2 <s 0\n      : @205 (gas: 1)\n  9833: ret\n      : @206 (gas: 5)\n  9835: sp = sp + 0xfffffffffffffff8\n  9838: u64 [sp] = ra\n  9840: a0 = 0\n  9842: a1 = 0\n  9844: ra = 154, jump @0\n      : @207 [@dyn 77] (gas: 6)\n  9850: i32 a1 = a0 + 0\n  9852: a0 = 0x1\n  9855: a2 = 0\n  9857: ra = 0x9c\n  9861: ecalli 11 // 'seal_return'\n  9863: fallthrough\n      : @208 [@dyn 78] (gas: 16)\n  9864: sp = sp + 0xffffffffffffff20\n  9868: u64 [sp + 0xd8] = ra\n  9872: u64 [sp + 0xd0] = s0\n  9876: u64 [sp + 0xc8] = s1\n  9880: s0 = sp + 0xe0\n  9884: sp = sp & 0xfffffffffffffff0\n  9887: a3 = u64 [a1 + 0x18]\n  9890: a2 = u64 [a1 + 0x10]\n  9893: a4 = u64 [a1 + 0x8]\n  9896: u64 [sp + 0x10] = a2\n  9899: u64 [sp + 0x8] = a3\n  9902: a2 = a2 | a3\n  9905: a3 = a4 <u 0x1\n  9908: a3 = 0 if a2 != 0\n  9910: u64 [sp + 0x38] = a0\n  9913: jump @214 if a3 == 0\n      : @209 (gas: 19)\n  9917: s1 = u64 [a1]\n  9919: a0 = s1 + 0x1f\n  9922: a1 = a0 <u s1\n  9925: u64 [sp + 0x18] = a4\n  9928: a1 = a1 + a4\n  9931: a1 = a1 & 0x1\n  9934: a0 = a0 & 0xffffffffffffffe0\n  9937: a2 = a0 + 0x20\n  9940: a0 = a2 <u a0\n  9943: a3 = a1 + a0\n  9946: a4 = a3 <u a1\n  9949: a4 = a0 if a0 == 0\n  9952: u64 [sp + 152] = 0\n  9956: u64 [sp + 0x80] = a2\n  9960: u64 [sp + 0x88] = a3\n  9964: a0 = sp + 0xa0\n  9968: a1 = sp + 0x80\n  9972: u64 [sp + 0x90] = a4\n  9976: ra = 158, jump @106\n      : @210 [@dyn 79] (gas: 15)\n  9982: a0 = u64 [sp + 0xb8]\n  9986: a2 = u64 [sp + 0xb0]\n  9990: a1 = u64 [sp + 0xa8]\n  9994: a3 = u64 [sp + 0xa0]\n  9998: u64 [sp + 0x28] = a0\n 10001: u64 [sp + 0x20] = a1\n 10004: a0 = a0 | a1\n 10007: a1 = a3 | a2\n 10010: a1 = a1 | a0\n 10013: a1 = a1 >> 0x20\n 10016: u64 [sp + 0x30] = a2\n 10019: a0 = a0 | a2\n 10022: a0 = a0 << 0x20\n 10025: a0 = a0 | a1\n 10028: jump @213 if a0 != 0\n      : @211 (gas: 4)\n 10032: i32 a0 = a3 + 0\n 10034: a1 = 0x20\n 10037: u64 [sp] = a3\n 10039: ra = 160, jump @0\n      : @212 [@dyn 80] (gas: 82)\n 10045: a1 = u64 [sp + 0x8]\n 10048: a1 = reverse a1\n 10050: a2 = u64 [sp + 0x10]\n 10053: a2 = reverse a2\n 10055: a3 = u64 [sp + 0x18]\n 10058: a3 = reverse a3\n 10060: a4 = reverse s1\n 10062: a5 = a4 >> 0x38\n 10065: u8 [a0 + 0x1f] = a5\n 10068: a5 = a4 >> 0x30\n 10071: u8 [a0 + 0x1e] = a5\n 10074: a5 = a4 >> 0x28\n 10077: u8 [a0 + 0x1d] = a5\n 10080: a5 = a4 >> 0x20\n 10083: u8 [a0 + 0x1c] = a5\n 10086: a5 = a4 >> 0x18\n 10089: u8 [a0 + 0x1b] = a5\n 10092: a5 = a4 >> 0x10\n 10095: u8 [a0 + 0x1a] = a5\n 10098: a5 = a4 >> 0x8\n 10101: u8 [a0 + 0x19] = a5\n 10104: u8 [a0 + 0x18] = a4\n 10107: u8 [a0 + 0x10] = a3\n 10110: a4 = a3 >> 0x38\n 10113: u8 [a0 + 0x17] = a4\n 10116: a4 = a3 >> 0x30\n 10119: u8 [a0 + 0x16] = a4\n 10122: a4 = a3 >> 0x28\n 10125: u8 [a0 + 0x15] = a4\n 10128: a4 = a3 >> 0x20\n 10131: u8 [a0 + 0x14] = a4\n 10134: a4 = a3 >> 0x18\n 10137: u8 [a0 + 0x13] = a4\n 10140: a4 = a3 >> 0x10\n 10143: u8 [a0 + 0x12] = a4\n 10146: a3 = a3 >> 0x8\n 10149: u8 [a0 + 0x11] = a3\n 10152: u8 [a0 + 0x8] = a2\n 10155: a3 = a2 >> 0x38\n 10158: u8 [a0 + 0xf] = a3\n 10161: a3 = a2 >> 0x30\n 10164: u8 [a0 + 0xe] = a3\n 10167: a3 = a2 >> 0x28\n 10170: u8 [a0 + 0xd] = a3\n 10173: a3 = a2 >> 0x20\n 10176: u8 [a0 + 0xc] = a3\n 10179: a3 = a2 >> 0x18\n 10182: u8 [a0 + 0xb] = a3\n 10185: a3 = a2 >> 0x10\n 10188: u8 [a0 + 0xa] = a3\n 10191: a2 = a2 >> 0x8\n 10194: u8 [a0 + 0x9] = a2\n 10197: u8 [a0] = a1\n 10199: a2 = a1 >> 0x38\n 10202: u8 [a0 + 0x7] = a2\n 10205: a2 = a1 >> 0x30\n 10208: u8 [a0 + 0x6] = a2\n 10211: a2 = a1 >> 0x28\n 10214: u8 [a0 + 0x5] = a2\n 10217: a2 = a1 >> 0x20\n 10220: u8 [a0 + 0x4] = a2\n 10223: a2 = a1 >> 0x18\n 10226: u8 [a0 + 0x3] = a2\n 10229: a2 = a1 >> 0x10\n 10232: u8 [a0 + 0x2] = a2\n 10235: a1 = a1 >> 0x8\n 10238: u8 [a0 + 0x1] = a1\n 10241: a0 = u64 [sp + 0x38]\n 10244: a1 = u64 [sp]\n 10246: u64 [a0] = a1\n 10248: a1 = u64 [sp + 0x28]\n 10251: u64 [a0 + 0x18] = a1\n 10254: a1 = u64 [sp + 0x20]\n 10257: u64 [a0 + 0x8] = a1\n 10260: a1 = u64 [sp + 0x30]\n 10263: u64 [a0 + 0x10] = a1\n 10266: sp = s0 + 0xffffffffffffff20\n 10270: ra = u64 [sp + 0xd8]\n 10274: s0 = u64 [sp + 0xd0]\n 10278: s1 = u64 [sp + 0xc8]\n 10282: sp = sp + 0xe0\n 10286: ret\n      : @213 (gas: 1)\n 10288: trap\n      : @214 (gas: 8)\n 10289: u64 [sp + 112] = 0\n 10292: u64 [sp + 104] = 0\n 10295: u64 [sp + 96] = 0\n 10298: a0 = 0x4e487b7100000000\n 10308: a1 = sp + 0x60\n 10311: u64 [sp + 0x78] = a0\n 10314: a0 = 0\n 10316: ra = 162, jump @23\n      : @215 [@dyn 81] (gas: 7)\n 10322: u64 [sp + 88] = 0\n 10325: u64 [sp + 80] = 0\n 10328: u64 [sp + 64] = 0x41\n 10332: a0 = 0x4\n 10335: a1 = sp + 0x40\n 10338: u64 [sp + 72] = 0\n 10341: ra = 164, jump @23\n      : @216 [@dyn 82] (gas: 3)\n 10347: a1 = 0x24\n 10350: a0 = 0\n 10352: ra = 166, jump @0\n      : @217 [@dyn 83] (gas: 6)\n 10358: i32 a1 = a0 + 0\n 10360: a0 = 0x1\n 10363: a2 = 0x24\n 10366: ra = 0xa8\n 10370: ecalli 11 // 'seal_return'\n 10372: fallthrough\n      : @218 [@dyn 84] (gas: 18)\n 10373: sp = sp + 0xffffffffffffffd0\n 10376: u64 [sp + 0x28] = ra\n 10379: u64 [sp + 0x20] = s0\n 10382: u64 [sp + 0x18] = s1\n 10385: s1 = u64 [a0 + 0x10]\n 10388: a2 = u64 [a0 + 0x18]\n 10391: a1 = u64 [a0 + 0x8]\n 10394: s0 = u64 [a0]\n 10396: u64 [sp + 0x10] = a1\n 10399: u64 [sp + 0x8] = a2\n 10402: a0 = a1 | a2\n 10405: a1 = s0 | s1\n 10408: a1 = a1 | a0\n 10411: a1 = a1 >> 0x20\n 10414: a0 = a0 | s1\n 10417: a0 = a0 << 0x20\n 10420: a0 = a0 | a1\n 10423: jump @223 if a0 != 0\n      : @219 (gas: 4)\n 10427: i32 a0 = s0 + 0\n 10429: a1 = 0x20\n 10432: u64 [sp] = a0\n 10434: ra = 170, jump @0\n      : @220 [@dyn 85] (gas: 41)\n 10440: u8 [a0 + 29] = 0x63\n 10444: u8 [a0 + 23] = 0x64\n 10448: u8 [a0 + 31] = 0x6e\n 10452: u8 [a0 + 22] = 0x6e\n 10456: u8 [a0 + 17] = 0x77\n 10460: u8 [a0 + 16] = 0x2d\n 10464: u8 [a0 + 27] = 0x62\n 10468: u8 [a0 + 15] = 0x62\n 10472: u8 [a0 + 26] = 0x75\n 10476: u8 [a0 + 14] = 0x75\n 10480: u8 [a0 + 21] = 0x65\n 10484: u8 [a0 + 18] = 0x65\n 10488: u8 [a0 + 11] = 0x65\n 10492: u8 [a0 + 30] = 0x61\n 10496: u8 [a0 + 8] = 0x61\n 10500: u8 [a0 + 7] = 0x2f\n 10504: u8 [a0 + 6] = 0x2f\n 10508: u8 [a0 + 5] = 0x3a\n 10512: u8 [a0 + 28] = 0x73\n 10516: u8 [a0 + 25] = 0x73\n 10520: u8 [a0 + 19] = 0x73\n 10524: u8 [a0 + 10] = 0x73\n 10528: u8 [a0 + 9] = 0x73\n 10532: u8 [a0 + 4] = 0x73\n 10536: u8 [a0 + 3] = 0x70\n 10540: u8 [a0 + 20] = 0x74\n 10544: u8 [a0 + 12] = 0x74\n 10548: u8 [a0 + 2] = 0x74\n 10552: u8 [a0 + 1] = 0x74\n 10556: u8 [a0 + 13] = 0x68\n 10560: u8 [a0 + 0] = 0x68\n 10563: a1 = u64 [sp + 0x8]\n 10566: a1 = a1 | s1\n 10569: a2 = 0xffffffe0\n 10579: a2 = s0 <u a2\n 10582: a3 = u64 [sp + 0x10]\n 10585: a2 = 0 if a3 != 0\n 10587: a2 = 0 if a1 != 0\n 10589: s0 = 0x2e\n 10592: u8 [a0 + 0x18] = s0\n 10595: jump @223 if a2 == 0\n      : @221 (gas: 4)\n 10599: a0 = u64 [sp]\n 10601: i32 a0 = a0 + 0x20\n 10604: a1 = 0x20\n 10607: ra = 172, jump @0\n      : @222 [@dyn 86] (gas: 38)\n 10613: u8 [a0 + 31] = 0\n 10616: u8 [a0 + 30] = 0\n 10619: u8 [a0 + 29] = 0\n 10622: u8 [a0 + 28] = 0\n 10625: u8 [a0 + 27] = 0\n 10628: u8 [a0 + 26] = 0\n 10631: u8 [a0 + 25] = 0\n 10634: u8 [a0 + 24] = 0\n 10637: u8 [a0 + 23] = 0\n 10640: u8 [a0 + 22] = 0\n 10643: u8 [a0 + 21] = 0\n 10646: u8 [a0 + 20] = 0\n 10649: u8 [a0 + 19] = 0\n 10652: u8 [a0 + 18] = 0\n 10655: u8 [a0 + 17] = 0\n 10658: u8 [a0 + 16] = 0\n 10661: u8 [a0 + 15] = 0\n 10664: u8 [a0 + 14] = 0\n 10667: u8 [a0 + 13] = 0\n 10670: u8 [a0 + 12] = 0\n 10673: u8 [a0 + 11] = 0\n 10676: u8 [a0 + 10] = 0\n 10679: u8 [a0 + 9] = 0\n 10682: u8 [a0 + 8] = 0\n 10685: u8 [a0 + 7] = 0\n 10688: u8 [a0 + 6] = 0\n 10691: u8 [a0 + 5] = 0\n 10694: u8 [a0 + 4] = 0\n 10697: u8 [a0 + 3] = 0\n 10700: u8 [a0 + 2] = 0x6f\n 10704: a1 = 0x69\n 10707: u8 [a0 + 0x1] = a1\n 10710: u8 [a0] = s0\n 10712: ra = u64 [sp + 0x28]\n 10715: s0 = u64 [sp + 0x20]\n 10718: s1 = u64 [sp + 0x18]\n 10721: sp = sp + 0x30\n 10724: ret\n      : @223 (gas: 1)\n 10726: trap\n      : @224 (gas: 16)\n 10727: sp = sp + 0xffffffffffffff88\n 10730: u64 [sp + 0x70] = ra\n 10733: u64 [sp + 0x68] = s0\n 10736: u64 [sp + 0x60] = s1\n 10739: a5 = u64 [a1 + 0x10]\n 10742: s1 = u64 [a1 + 0x18]\n 10745: a4 = u64 [a1 + 0x8]\n 10748: s0 = u64 [a1]\n 10750: a1 = a4 | s1\n 10753: a3 = s0 | a5\n 10756: a3 = a3 | a1\n 10759: a3 = a3 >> 0x20\n 10762: a1 = a1 | a5\n 10765: a1 = a1 << 0x20\n 10768: a1 = a1 | a3\n 10771: jump @237 if a1 != 0\n      : @225 (gas: 16)\n 10775: u64 [sp + 0x28] = s1\n 10778: u64 [sp + 0x30] = a5\n 10781: u64 [sp + 0x40] = a4\n 10784: u64 [sp] = a0\n 10786: a0 = u64 [a2 + 0x18]\n 10789: u64 [sp + 0x58] = a0\n 10792: s1 = u64 [a2 + 0x10]\n 10795: a0 = u64 [a2 + 0x8]\n 10798: u64 [sp + 0x50] = a0\n 10801: a0 = u64 [a2]\n 10803: u64 [sp + 0x48] = a0\n 10806: u64 [sp + 0x20] = s0\n 10809: i32 a0 = s0 + 0\n 10811: a1 = 0x20\n 10814: u64 [sp + 0x8] = a0\n 10817: ra = 174, jump @0\n      : @226 [@dyn 87] (gas: 12)\n 10823: t0 = u64 [sp + 0x48]\n 10826: a1 = t0 | s1\n 10829: a2 = u64 [sp + 0x58]\n 10832: a3 = u64 [sp + 0x50]\n 10835: a2 = a2 | a3\n 10838: a1 = a1 | a2\n 10841: a1 = a1 >> 0x20\n 10844: u64 [sp + 0x38] = s1\n 10847: a2 = a2 | s1\n 10850: a2 = a2 << 0x20\n 10853: a1 = a1 | a2\n 10856: jump @237 if a1 != 0\n      : @227 (gas: 93)\n 10860: a1 = u8 [a0 + 0x19]\n 10863: a2 = u8 [a0 + 0x18]\n 10866: a3 = u8 [a0 + 0x1a]\n 10869: a4 = u8 [a0 + 0x1b]\n 10872: a1 = a1 << 0x8\n 10875: a1 = a1 | a2\n 10878: a3 = a3 << 0x10\n 10881: a4 = a4 << 0x18\n 10884: a3 = a3 | a4\n 10887: a1 = a1 | a3\n 10890: a2 = u8 [a0 + 0x1d]\n 10893: a3 = u8 [a0 + 0x1c]\n 10896: a4 = u8 [a0 + 0x1e]\n 10899: a5 = u8 [a0 + 0x1f]\n 10902: a2 = a2 << 0x8\n 10905: a2 = a2 | a3\n 10908: a4 = a4 << 0x10\n 10911: a5 = a5 << 0x18\n 10914: a4 = a4 | a5\n 10917: a2 = a2 | a4\n 10920: a2 = a2 << 0x20\n 10923: a1 = a1 | a2\n 10926: u64 [sp + 0x18] = a1\n 10929: a1 = u8 [a0 + 0x11]\n 10932: a2 = u8 [a0 + 0x10]\n 10935: a3 = u8 [a0 + 0x12]\n 10938: a4 = u8 [a0 + 0x13]\n 10941: a1 = a1 << 0x8\n 10944: a1 = a1 | a2\n 10947: a3 = a3 << 0x10\n 10950: a4 = a4 << 0x18\n 10953: a3 = a3 | a4\n 10956: a1 = a1 | a3\n 10959: a2 = u8 [a0 + 0x15]\n 10962: a3 = u8 [a0 + 0x14]\n 10965: a4 = u8 [a0 + 0x16]\n 10968: a5 = u8 [a0 + 0x17]\n 10971: a2 = a2 << 0x8\n 10974: a2 = a2 | a3\n 10977: a4 = a4 << 0x10\n 10980: a5 = a5 << 0x18\n 10983: a4 = a4 | a5\n 10986: a2 = a2 | a4\n 10989: a2 = a2 << 0x20\n 10992: a1 = a1 | a2\n 10995: u64 [sp + 0x10] = a1\n 10998: a1 = u8 [a0 + 0x9]\n 11001: a2 = u8 [a0 + 0x8]\n 11004: a3 = u8 [a0 + 0xa]\n 11007: a4 = u8 [a0 + 0xb]\n 11010: a1 = a1 << 0x8\n 11013: a1 = a1 | a2\n 11016: a3 = a3 << 0x10\n 11019: a4 = a4 << 0x18\n 11022: a3 = a3 | a4\n 11025: a1 = a1 | a3\n 11028: a2 = u8 [a0 + 0xd]\n 11031: a3 = u8 [a0 + 0xc]\n 11034: a4 = u8 [a0 + 0xe]\n 11037: a5 = u8 [a0 + 0xf]\n 11040: a2 = a2 << 0x8\n 11043: a2 = a2 | a3\n 11046: a4 = a4 << 0x10\n 11049: a5 = a5 << 0x18\n 11052: a4 = a4 | a5\n 11055: a2 = a2 | a4\n 11058: a2 = a2 << 0x20\n 11061: s1 = a2 | a1\n 11064: a1 = u8 [a0 + 0x1]\n 11067: a2 = u8 [a0]\n 11069: a3 = u8 [a0 + 0x2]\n 11072: a4 = u8 [a0 + 0x3]\n 11075: a1 = a1 << 0x8\n 11078: a1 = a1 | a2\n 11081: a3 = a3 << 0x10\n 11084: a4 = a4 << 0x18\n 11087: a3 = a3 | a4\n 11090: a1 = a1 | a3\n 11093: a2 = u8 [a0 + 0x5]\n 11096: a3 = u8 [a0 + 0x4]\n 11099: a4 = u8 [a0 + 0x6]\n 11102: a0 = u8 [a0 + 0x7]\n 11105: a2 = a2 << 0x8\n 11108: a2 = a2 | a3\n 11111: a4 = a4 << 0x10\n 11114: a0 = a0 << 0x18\n 11117: a0 = a0 | a4\n 11120: a0 = a0 | a2\n 11123: a0 = a0 << 0x20\n 11126: s0 = a0 | a1\n 11129: i32 a0 = t0 + 0\n 11131: a1 = 0x20\n 11134: ra = 176, jump @0\n      : @228 [@dyn 88] (gas: 73)\n 11140: a4 = s1\n 11142: a2 = u64 [sp + 0x10]\n 11145: s1 = u64 [sp + 0x18]\n 11148: t0 = u64 [sp + 0x48]\n 11151: a1 = a4 >> 0x38\n 11154: u8 [a0 + 0xf] = a1\n 11157: a1 = a4 >> 0x30\n 11160: u8 [a0 + 0xe] = a1\n 11163: a1 = a4 >> 0x28\n 11166: u8 [a0 + 0xd] = a1\n 11169: a1 = a4 >> 0x20\n 11172: u8 [a0 + 0xc] = a1\n 11175: a1 = a4 >> 0x18\n 11178: u8 [a0 + 0xb] = a1\n 11181: a1 = a4 >> 0x10\n 11184: u8 [a0 + 0xa] = a1\n 11187: a1 = a4 >> 0x8\n 11190: u8 [a0 + 0x9] = a1\n 11193: a1 = s0 >> 0x38\n 11196: u8 [a0 + 0x7] = a1\n 11199: a1 = s0 >> 0x30\n 11202: u8 [a0 + 0x6] = a1\n 11205: a1 = s0 >> 0x28\n 11208: u8 [a0 + 0x5] = a1\n 11211: a1 = s0 >> 0x20\n 11214: u8 [a0 + 0x4] = a1\n 11217: a1 = s0 >> 0x18\n 11220: u8 [a0 + 0x3] = a1\n 11223: a1 = s0 >> 0x10\n 11226: u8 [a0 + 0x2] = a1\n 11229: a1 = s0 >> 0x8\n 11232: u8 [a0 + 0x1] = a1\n 11235: a1 = a2 >> 0x38\n 11238: u8 [a0 + 0x17] = a1\n 11241: a1 = a2 >> 0x30\n 11244: u8 [a0 + 0x16] = a1\n 11247: a1 = a2 >> 0x28\n 11250: u8 [a0 + 0x15] = a1\n 11253: a1 = a2 >> 0x20\n 11256: u8 [a0 + 0x14] = a1\n 11259: a1 = a2 >> 0x18\n 11262: u8 [a0 + 0x13] = a1\n 11265: a1 = a2 >> 0x10\n 11268: u8 [a0 + 0x12] = a1\n 11271: a1 = a2 >> 0x8\n 11274: u8 [a0 + 0x11] = a1\n 11277: a1 = s1 >> 0x38\n 11280: u8 [a0 + 0x1f] = a1\n 11283: a1 = s1 >> 0x30\n 11286: u8 [a0 + 0x1e] = a1\n 11289: a1 = s1 >> 0x28\n 11292: u8 [a0 + 0x1d] = a1\n 11295: a1 = s1 >> 0x20\n 11298: u8 [a0 + 0x1c] = a1\n 11301: a1 = s1 >> 0x18\n 11304: u8 [a0 + 0x1b] = a1\n 11307: a1 = s1 >> 0x10\n 11310: u8 [a0 + 0x1a] = a1\n 11313: a1 = s1 >> 0x8\n 11316: u8 [a0 + 0x19] = a1\n 11319: ra = u64 [sp + 0x58]\n 11322: t2 = u64 [sp + 0x38]\n 11325: t1 = t2 | ra\n 11328: a1 = 0xffffffe0\n 11338: a3 = t0 <u a1\n 11341: a5 = u64 [sp + 0x50]\n 11344: a3 = 0 if a5 != 0\n 11346: a3 = 0 if t1 != 0\n 11348: u8 [a0 + 0x10] = a2\n 11351: u8 [a0 + 0x8] = a4\n 11354: u8 [a0] = s0\n 11356: u8 [a0 + 0x18] = s1\n 11359: jump @237 if a3 == 0\n      : @229 (gas: 9)\n 11363: a0 = u64 [sp + 0x30]\n 11366: a3 = u64 [sp + 0x28]\n 11369: a0 = a0 | a3\n 11372: a3 = u64 [sp + 0x20]\n 11375: a1 = a3 <u a1\n 11378: a3 = u64 [sp + 0x40]\n 11381: a1 = 0 if a3 != 0\n 11383: a1 = 0 if a0 != 0\n 11385: jump @237 if a1 == 0\n      : @230 (gas: 15)\n 11389: a1 = reverse s0\n 11391: a3 = reverse a4\n 11393: a4 = reverse a2\n 11395: s0 = reverse s1\n 11397: a0 = s0 | a3\n 11400: u64 [sp + 0x30] = a1\n 11403: u64 [sp + 0x20] = a4\n 11406: a1 = a1 | a4\n 11409: a0 = a0 | a1\n 11412: a0 = a0 >> 0x20\n 11415: u64 [sp + 0x28] = a3\n 11418: a1 = a1 | a3\n 11421: a1 = a1 << 0x20\n 11424: a0 = a0 | a1\n 11427: jump @237 if a0 != 0\n      : @231 (gas: 19)\n 11431: a3 = t0 + 0x20\n 11434: u64 [sp + 0x40] = a3\n 11437: a0 = a3 <u t0\n 11440: a1 = a5 + a0\n 11443: u64 [sp + 0x48] = a1\n 11446: a1 = a1 <u a5\n 11449: a1 = a0 if a0 == 0\n 11452: a1 = a1 + t2\n 11455: u64 [sp + 0x50] = a1\n 11458: a0 = a1 <u t2\n 11461: a0 = a0 + ra\n 11464: u64 [sp + 0x58] = a0\n 11467: i32 a0 = a3 + 0\n 11469: a1 = u64 [sp + 0x8]\n 11472: i32 a1 = a1 + 0x20\n 11475: u64 [sp + 0x38] = a1\n 11478: i32 s1 = s0 + 0\n 11480: a1 = s1\n 11482: ra = 178, jump @0\n      : @232 [@dyn 89] (gas: 5)\n 11488: u64 [sp + 0x18] = a0\n 11491: a0 = u64 [sp + 0x38]\n 11494: a1 = s1\n 11496: s1 = s0\n 11498: ra = 180, jump @0\n      : @233 [@dyn 90] (gas: 4)\n 11504: a1 = a0\n 11506: a0 = u64 [sp + 0x18]\n 11509: a2 = s0\n 11511: ra = 182, jump @8\n      : @234 [@dyn 91] (gas: 29)\n 11517: a0 = u64 [sp + 0x40]\n 11520: a0 = a0 + s0\n 11523: a1 = a0 <u s0\n 11526: a4 = u64 [sp + 0x20]\n 11529: a2 = u64 [sp + 0x48]\n 11532: a2 = a2 + a4\n 11535: a2 = a2 + a1\n 11538: a3 = a2 ^ a4\n 11541: a4 = a2 <u a4\n 11544: a4 = a1 if a3 == 0\n 11547: a5 = u64 [sp + 0x28]\n 11550: a1 = u64 [sp + 0x50]\n 11553: a1 = a1 + a5\n 11556: a4 = a4 + a1\n 11559: a3 = a4 <u a1\n 11562: a1 = a1 <u a5\n 11565: a5 = u64 [sp + 0x30]\n 11568: s0 = u64 [sp + 0x58]\n 11571: a5 = a5 + s0\n 11574: a1 = a1 + a5\n 11577: a1 = a1 + a3\n 11580: a3 = a0 | a4\n 11583: a1 = a1 | a2\n 11586: a3 = a3 | a1\n 11589: a3 = a3 >> 0x20\n 11592: a1 = a1 | a4\n 11595: a1 = a1 << 0x20\n 11598: a1 = a1 | a3\n 11601: jump @237 if a1 != 0\n      : @235 (gas: 3)\n 11605: i32 a0 = a0 + 0\n 11607: a1 = 0x20\n 11610: ra = 184, jump @0\n      : @236 [@dyn 92] (gas: 56)\n 11616: u8 [a0 + 31] = 0\n 11619: u8 [a0 + 30] = 0\n 11622: u8 [a0 + 29] = 0\n 11625: u8 [a0 + 28] = 0\n 11628: u8 [a0 + 27] = 0\n 11631: u8 [a0 + 26] = 0\n 11634: u8 [a0 + 25] = 0\n 11637: u8 [a0 + 24] = 0\n 11640: u8 [a0 + 23] = 0\n 11643: u8 [a0 + 22] = 0\n 11646: u8 [a0 + 21] = 0\n 11649: u8 [a0 + 20] = 0\n 11652: u8 [a0 + 19] = 0\n 11655: u8 [a0 + 18] = 0\n 11658: u8 [a0 + 17] = 0\n 11661: u8 [a0 + 16] = 0\n 11664: u8 [a0 + 15] = 0\n 11667: u8 [a0 + 14] = 0\n 11670: u8 [a0 + 13] = 0\n 11673: u8 [a0 + 12] = 0\n 11676: u8 [a0 + 11] = 0\n 11679: u8 [a0 + 10] = 0\n 11682: u8 [a0 + 9] = 0\n 11685: u8 [a0 + 8] = 0\n 11688: u8 [a0 + 7] = 0\n 11691: u8 [a0 + 6] = 0\n 11694: u8 [a0 + 5] = 0\n 11697: u8 [a0 + 4] = 0\n 11700: u8 [a0 + 3] = 0\n 11703: u8 [a0 + 2] = 0\n 11706: u8 [a0 + 1] = 0\n 11709: u8 [a0 + 0] = 0\n 11711: a0 = s1 + 0x1f\n 11714: a1 = 0x1ffffffe0\n 11724: a0 = a0 & a1\n 11727: a1 = u64 [sp + 0x40]\n 11730: a1 = a1 + a0\n 11733: a0 = a1 <u a0\n 11736: a2 = u64 [sp + 0x48]\n 11739: a2 = a2 + a0\n 11742: a0 = 0 if a2 != 0\n 11744: a3 = u64 [sp + 0x50]\n 11747: a0 = a0 + a3\n 11750: a3 = a0 <u a3\n 11753: a4 = u64 [sp + 0x58]\n 11756: a3 = a3 + a4\n 11759: a4 = u64 [sp]\n 11761: u64 [a4] = a1\n 11763: u64 [a4 + 0x8] = a2\n 11766: u64 [a4 + 0x10] = a0\n 11769: u64 [a4 + 0x18] = a3\n 11772: ra = u64 [sp + 0x70]\n 11775: s0 = u64 [sp + 0x68]\n 11778: s1 = u64 [sp + 0x60]\n 11781: sp = sp + 0x78\n 11784: ret\n      : @237 (gas: 1)\n 11786: trap\n      : @238 (gas: 8)\n 11787: a0 = u64 [sp + 0x110]\n 11791: a1 = u64 [sp + 0x118]\n 11795: a2 = u64 [sp + 0x108]\n 11799: a3 = u64 [sp + 0x100]\n 11803: a1 = a1 | a2\n 11806: a0 = a0 | a3\n 11809: a0 = a0 | a1\n 11812: jump @253 if a0 != 0\n      : @239 (gas: 2)\n 11816: a0 = i32 [0x200a4]\n 11821: jump @253 if a0 <=u 3\n      : @240 (gas: 7)\n 11826: u64 [sp + 216] = 0\n 11830: u64 [sp + 208] = 0\n 11834: u64 [sp + 192] = 0x60\n 11839: a0 = sp + 0xe0\n 11843: a1 = sp + 0xc0\n 11847: u64 [sp + 200] = 0\n 11851: ra = 186, jump @106\n      : @241 [@dyn 93] (gas: 12)\n 11857: a4 = u64 [sp + 0xf8]\n 11861: a3 = u64 [sp + 0xf0]\n 11865: a2 = u64 [sp + 0xe8]\n 11869: s1 = u64 [sp + 0xe0]\n 11873: a0 = a2 | a4\n 11876: a1 = s1 | a3\n 11879: a1 = a1 | a0\n 11882: a1 = a1 >> 0x20\n 11885: a0 = a0 | a3\n 11888: a0 = a0 << 0x20\n 11891: a0 = a0 | a1\n 11894: jump @252 if a0 != 0\n      : @242 (gas: 7)\n 11898: i32 a0 = s1 + 0\n 11900: a1 = 0x20\n 11903: u64 [sp + 0x40] = a0\n 11906: u64 [sp + 0x58] = a2\n 11909: u64 [sp + 0x50] = a3\n 11912: u64 [sp + 0x48] = a4\n 11915: ra = 188, jump @0\n      : @243 [@dyn 94] (gas: 43)\n 11921: u8 [a0 + 31] = 0x23\n 11925: u8 [a0 + 30] = 0\n 11928: u8 [a0 + 29] = 0\n 11931: u8 [a0 + 28] = 0\n 11934: u8 [a0 + 27] = 0\n 11937: u8 [a0 + 26] = 0\n 11940: u8 [a0 + 25] = 0\n 11943: u8 [a0 + 24] = 0\n 11946: u8 [a0 + 23] = 0\n 11949: u8 [a0 + 22] = 0\n 11952: u8 [a0 + 21] = 0\n 11955: u8 [a0 + 20] = 0\n 11958: u8 [a0 + 19] = 0\n 11961: u8 [a0 + 18] = 0\n 11964: u8 [a0 + 17] = 0\n 11967: u8 [a0 + 16] = 0\n 11970: u8 [a0 + 15] = 0\n 11973: u8 [a0 + 14] = 0\n 11976: u8 [a0 + 13] = 0\n 11979: u8 [a0 + 12] = 0\n 11982: u8 [a0 + 11] = 0\n 11985: u8 [a0 + 10] = 0\n 11988: u8 [a0 + 9] = 0\n 11991: u8 [a0 + 8] = 0\n 11994: u8 [a0 + 7] = 0\n 11997: u8 [a0 + 6] = 0\n 12000: u8 [a0 + 5] = 0\n 12003: u8 [a0 + 4] = 0\n 12006: u8 [a0 + 3] = 0\n 12009: u8 [a0 + 2] = 0\n 12012: u8 [a0 + 1] = 0\n 12015: a1 = u64 [sp + 0x50]\n 12018: a2 = u64 [sp + 0x48]\n 12021: a3 = a1 | a2\n 12024: a4 = s1\n 12026: s1 = 0x100000000\n 12036: a1 = 0xffffffe0\n 12046: a1 = a4 <u a1\n 12049: a2 = u64 [sp + 0x58]\n 12052: a1 = 0 if a2 != 0\n 12054: a1 = 0 if a3 != 0\n 12056: u8 [a0 + 0] = 0\n 12058: jump @252 if a1 == 0\n      : @244 (gas: 6)\n 12062: a0 = u64 [sp + 0x40]\n 12065: i32 a0 = a0 + 0x20\n 12068: a1 = 0x20\n 12071: u64 [sp + 0x30] = a3\n 12074: u64 [sp + 0x38] = a4\n 12077: ra = 190, jump @0\n      : @245 [@dyn 95] (gas: 41)\n 12083: u8 [a0 + 29] = 0x63\n 12087: u8 [a0 + 23] = 0x64\n 12091: u8 [a0 + 31] = 0x6e\n 12095: u8 [a0 + 22] = 0x6e\n 12099: u8 [a0 + 17] = 0x77\n 12103: u8 [a0 + 16] = 0x2d\n 12107: u8 [a0 + 27] = 0x62\n 12111: u8 [a0 + 15] = 0x62\n 12115: u8 [a0 + 26] = 0x75\n 12119: u8 [a0 + 14] = 0x75\n 12123: u8 [a0 + 21] = 0x65\n 12127: u8 [a0 + 18] = 0x65\n 12131: u8 [a0 + 11] = 0x65\n 12135: u8 [a0 + 30] = 0x61\n 12139: u8 [a0 + 8] = 0x61\n 12143: u8 [a0 + 7] = 0x2f\n 12147: u8 [a0 + 6] = 0x2f\n 12151: u8 [a0 + 5] = 0x3a\n 12155: u8 [a0 + 28] = 0x73\n 12159: u8 [a0 + 25] = 0x73\n 12163: u8 [a0 + 19] = 0x73\n 12167: u8 [a0 + 10] = 0x73\n 12171: u8 [a0 + 9] = 0x73\n 12175: u8 [a0 + 4] = 0x73\n 12179: u8 [a0 + 3] = 0x70\n 12183: u8 [a0 + 20] = 0x74\n 12187: u8 [a0 + 12] = 0x74\n 12191: u8 [a0 + 2] = 0x74\n 12195: u8 [a0 + 1] = 0x74\n 12199: u8 [a0 + 13] = 0x68\n 12203: u8 [a0 + 0] = 0x68\n 12206: a1 = s1 + 0xffffffffffffffc0\n 12209: a2 = u64 [sp + 0x38]\n 12212: a1 = a2 <u a1\n 12215: a2 = u64 [sp + 0x58]\n 12218: a1 = 0 if a2 != 0\n 12220: a2 = u64 [sp + 0x30]\n 12223: a1 = 0 if a2 != 0\n 12225: s1 = 0x2e\n 12228: u8 [a0 + 0x18] = s1\n 12231: jump @252 if a1 == 0\n      : @246 (gas: 4)\n 12235: a0 = u64 [sp + 0x40]\n 12238: i32 a0 = a0 + 0x40\n 12241: a1 = 0x20\n 12244: ra = 192, jump @0\n      : @247 [@dyn 96] (gas: 35)\n 12250: u8 [a0 + 31] = 0\n 12253: u8 [a0 + 30] = 0\n 12256: u8 [a0 + 29] = 0\n 12259: u8 [a0 + 28] = 0\n 12262: u8 [a0 + 27] = 0\n 12265: u8 [a0 + 26] = 0\n 12268: u8 [a0 + 25] = 0\n 12271: u8 [a0 + 24] = 0\n 12274: u8 [a0 + 23] = 0\n 12277: u8 [a0 + 22] = 0\n 12280: u8 [a0 + 21] = 0\n 12283: u8 [a0 + 20] = 0\n 12286: u8 [a0 + 19] = 0\n 12289: u8 [a0 + 18] = 0\n 12292: u8 [a0 + 17] = 0\n 12295: u8 [a0 + 16] = 0\n 12298: u8 [a0 + 15] = 0\n 12301: u8 [a0 + 14] = 0\n 12304: u8 [a0 + 13] = 0\n 12307: u8 [a0 + 12] = 0\n 12310: u8 [a0 + 11] = 0\n 12313: u8 [a0 + 10] = 0\n 12316: u8 [a0 + 9] = 0\n 12319: u8 [a0 + 8] = 0\n 12322: u8 [a0 + 7] = 0\n 12325: u8 [a0 + 6] = 0\n 12328: u8 [a0 + 5] = 0\n 12331: u8 [a0 + 4] = 0\n 12334: u8 [a0 + 3] = 0\n 12337: u8 [a0 + 2] = 0x6f\n 12341: u8 [a0 + 1] = 0x69\n 12345: u8 [a0] = s1\n 12347: a0 = 0x40\n 12350: a1 = 0x20\n 12353: ra = 194, jump @0\n      : @248 [@dyn 97] (gas: 100)\n 12359: a1 = u8 [a0 + 0x11]\n 12362: a2 = u8 [a0 + 0x10]\n 12365: a3 = u8 [a0 + 0x12]\n 12368: a4 = u8 [a0 + 0x13]\n 12371: a1 = a1 << 0x8\n 12374: a1 = a1 | a2\n 12377: a3 = a3 << 0x10\n 12380: a4 = a4 << 0x18\n 12383: a3 = a3 | a4\n 12386: a1 = a1 | a3\n 12389: a2 = u8 [a0 + 0x15]\n 12392: a3 = u8 [a0 + 0x14]\n 12395: a4 = u8 [a0 + 0x16]\n 12398: a5 = u8 [a0 + 0x17]\n 12401: a2 = a2 << 0x8\n 12404: a2 = a2 | a3\n 12407: a4 = a4 << 0x10\n 12410: a5 = a5 << 0x18\n 12413: a4 = a4 | a5\n 12416: a2 = a2 | a4\n 12419: a2 = a2 << 0x20\n 12422: t0 = a2 | a1\n 12425: a2 = u8 [a0 + 0x1]\n 12428: a3 = u8 [a0]\n 12430: a4 = u8 [a0 + 0x2]\n 12433: a5 = u8 [a0 + 0x3]\n 12436: a2 = a2 << 0x8\n 12439: a2 = a2 | a3\n 12442: a4 = a4 << 0x10\n 12445: a5 = a5 << 0x18\n 12448: a4 = a4 | a5\n 12451: a2 = a2 | a4\n 12454: a3 = u8 [a0 + 0x5]\n 12457: a4 = u8 [a0 + 0x4]\n 12460: a5 = u8 [a0 + 0x6]\n 12463: s1 = u8 [a0 + 0x7]\n 12466: a3 = a3 << 0x8\n 12469: a3 = a3 | a4\n 12472: a5 = a5 << 0x10\n 12475: s1 = s1 << 0x18\n 12478: a5 = a5 | s1\n 12481: a3 = a3 | a5\n 12484: a3 = a3 << 0x20\n 12487: a2 = a2 | a3\n 12490: a3 = u8 [a0 + 0x19]\n 12493: a4 = u8 [a0 + 0x18]\n 12496: a5 = u8 [a0 + 0x1a]\n 12499: s1 = u8 [a0 + 0x1b]\n 12502: a3 = a3 << 0x8\n 12505: a3 = a3 | a4\n 12508: a5 = a5 << 0x10\n 12511: s1 = s1 << 0x18\n 12514: a5 = a5 | s1\n 12517: a3 = a3 | a5\n 12520: a4 = u8 [a0 + 0x1d]\n 12523: a5 = u8 [a0 + 0x1c]\n 12526: s1 = u8 [a0 + 0x1e]\n 12529: a1 = u8 [a0 + 0x1f]\n 12532: a4 = a4 << 0x8\n 12535: a4 = a4 | a5\n 12538: s1 = s1 << 0x10\n 12541: a1 = a1 << 0x18\n 12544: a1 = a1 | s1\n 12547: a1 = a1 | a4\n 12550: a1 = a1 << 0x20\n 12553: a3 = a3 | a1\n 12556: a1 = u8 [a0 + 0x9]\n 12559: a4 = u8 [a0 + 0x8]\n 12562: a5 = u8 [a0 + 0xa]\n 12565: s1 = u8 [a0 + 0xb]\n 12568: a1 = a1 << 0x8\n 12571: a1 = a1 | a4\n 12574: a5 = a5 << 0x10\n 12577: s1 = s1 << 0x18\n 12580: a5 = a5 | s1\n 12583: a1 = a1 | a5\n 12586: a4 = u8 [a0 + 0xd]\n 12589: a5 = u8 [a0 + 0xc]\n 12592: s1 = u8 [a0 + 0xe]\n 12595: a0 = u8 [a0 + 0xf]\n 12598: a4 = a4 << 0x8\n 12601: a4 = a4 | a5\n 12604: s1 = s1 << 0x10\n 12607: a0 = a0 << 0x18\n 12610: a0 = a0 | s1\n 12613: a0 = a0 | a4\n 12616: a0 = a0 << 0x20\n 12619: a0 = a0 | a1\n 12622: s1 = reverse a0\n 12624: a3 = reverse a3\n 12626: a4 = reverse a2\n 12628: a2 = reverse t0\n 12630: a0 = a2 | a4\n 12633: a1 = a3 | s1\n 12636: a1 = a1 | a0\n 12639: a1 = a1 >> 0x20\n 12642: a0 = a0 | s1\n 12645: a0 = a0 << 0x20\n 12648: a0 = a0 | a1\n 12651: jump @252 if a0 != 0\n      : @249 (gas: 19)\n 12655: a0 = a3 + 0x20\n 12658: u64 [sp + 0x18] = a0\n 12661: a0 = a0 <u a3\n 12664: a1 = a2 + a0\n 12667: u64 [sp + 0x8] = a1\n 12670: a1 = a1 <u a2\n 12673: a1 = a0 if a0 == 0\n 12676: a1 = a1 + s1\n 12679: u64 [sp + 0x10] = a1\n 12682: a0 = a1 <u s1\n 12685: a0 = a0 + a4\n 12688: u64 [sp + 0x20] = a0\n 12691: i32 a0 = a3 + 0\n 12693: a1 = 0x20\n 12696: u64 [sp] = a0\n 12698: u64 [sp + 0x30] = a3\n 12701: u64 [sp + 0x28] = a2\n 12704: u64 [sp + 0x40] = a4\n 12707: ra = 196, jump @0\n      : @250 [@dyn 98] (gas: 52)\n 12713: u8 [a0 + 31] = 0x20\n 12717: u8 [a0 + 30] = 0\n 12720: u8 [a0 + 29] = 0\n 12723: u8 [a0 + 28] = 0\n 12726: u8 [a0 + 27] = 0\n 12729: u8 [a0 + 26] = 0\n 12732: u8 [a0 + 25] = 0\n 12735: u8 [a0 + 24] = 0\n 12738: u8 [a0 + 23] = 0\n 12741: u8 [a0 + 22] = 0\n 12744: u8 [a0 + 21] = 0\n 12747: u8 [a0 + 20] = 0\n 12750: u8 [a0 + 19] = 0\n 12753: u8 [a0 + 18] = 0\n 12756: u8 [a0 + 17] = 0\n 12759: u8 [a0 + 16] = 0\n 12762: u8 [a0 + 15] = 0\n 12765: u8 [a0 + 14] = 0\n 12768: u8 [a0 + 13] = 0\n 12771: u8 [a0 + 12] = 0\n 12774: u8 [a0 + 11] = 0\n 12777: u8 [a0 + 10] = 0\n 12780: u8 [a0 + 9] = 0\n 12783: u8 [a0 + 8] = 0\n 12786: u8 [a0 + 7] = 0\n 12789: u8 [a0 + 6] = 0\n 12792: u8 [a0 + 5] = 0\n 12795: u8 [a0 + 4] = 0\n 12798: u8 [a0 + 3] = 0\n 12801: u8 [a0 + 2] = 0\n 12804: u8 [a0 + 1] = 0\n 12807: u8 [a0 + 0] = 0\n 12809: a0 = u64 [sp + 0x8]\n 12812: u64 [sp + 0x68] = a0\n 12815: a0 = u64 [sp + 0x18]\n 12818: u64 [sp + 0x60] = a0\n 12821: a0 = u64 [sp + 0x48]\n 12824: u64 [sp + 0x98] = a0\n 12828: a0 = u64 [sp + 0x50]\n 12831: u64 [sp + 0x90] = a0\n 12835: a0 = u64 [sp + 0x58]\n 12838: u64 [sp + 0x88] = a0\n 12842: a0 = u64 [sp + 0x38]\n 12845: u64 [sp + 0x80] = a0\n 12849: a0 = u64 [sp + 0x10]\n 12852: u64 [sp + 0x70] = a0\n 12855: a0 = sp + 0xa0\n 12859: a1 = sp + 0x80\n 12863: a2 = sp + 0x60\n 12866: a3 = u64 [sp + 0x20]\n 12869: u64 [sp + 0x78] = a3\n 12872: ra = 198, jump @224\n      : @251 [@dyn 99] (gas: 30)\n 12878: a0 = u64 [sp + 0xa8]\n 12882: t0 = u64 [sp + 0xb8]\n 12886: t1 = u64 [sp + 0xa0]\n 12890: a3 = u64 [sp + 0xb0]\n 12894: a1 = u64 [sp + 0x28]\n 12897: a4 = a0 ^ a1\n 12900: a5 = a0 <u a1\n 12903: t2 = a1\n 12905: a2 = u64 [sp + 0x30]\n 12908: a1 = t1 <u a2\n 12911: a5 = a1 if a4 == 0\n 12914: a4 = a3 - s1\n 12917: a3 = a3 <u s1\n 12920: s1 = u64 [sp + 0x40]\n 12923: s1 = t0 - s1\n 12926: s1 = s1 - a3\n 12929: a3 = a4 <u a5\n 12932: s1 = s1 - a3\n 12935: a4 = a4 - a5\n 12938: a0 = a0 - t2\n 12941: a1 = a0 - a1\n 12944: a0 = t1 - a2\n 12947: a1 = a1 | s1\n 12950: a2 = a0 | a4\n 12953: a2 = a2 | a1\n 12956: a1 = a1 | a4\n 12959: a2 = a2 >> 0x20\n 12962: a1 = a1 << 0x20\n 12965: a1 = a1 | a2\n 12968: jump @255 if a1 == 0\n      : @252 (gas: 1)\n 12971: trap\n      : @253 (gas: 3)\n 12972: a0 = 0\n 12974: a1 = 0\n 12976: ra = 200, jump @0\n      : @254 [@dyn 100] (gas: 5)\n 12982: i32 a1 = a0 + 0\n 12984: a0 = 0x1\n 12987: a2 = 0\n 12989: ecalli 11 // 'seal_return'\n 12991: fallthrough\n      : @255 (gas: 4)\n 12992: i32 s1 = a0 + 0\n 12994: a0 = u64 [sp]\n 12996: a1 = s1\n 12998: ra = 202, jump @0\n      : @256 [@dyn 101] (gas: 6)\n 13004: i32 a1 = a0 + 0\n 13006: a0 = 0\n 13008: a2 = s1\n 13010: ra = 0xcc\n 13014: ecalli 11 // 'seal_return'\n 13016: fallthrough\n      : @257 [@dyn 102] (gas: 52)\n 13017: sp = sp + 0xffffffffffffff80\n 13020: u64 [sp + 0x78] = ra\n 13023: u64 [sp + 0x70] = s0\n 13026: u64 [sp + 0x68] = s1\n 13029: s0 = sp + 0x80\n 13033: sp = sp & 0xffffffffffffffe0\n 13036: t2 = u64 [a1 + 0x10]\n 13039: a5 = u64 [a1 + 0x8]\n 13042: t0 = u64 [a2 + 0x8]\n 13045: s1 = u64 [a1]\n 13047: u64 [sp + 0x10] = s1\n 13050: a4 = u64 [a2]\n 13052: u64 [sp + 0x18] = a4\n 13055: ra = u64 [a2 + 0x10]\n 13058: a3 = t0 ^ a5\n 13061: u64 [sp + 0x38] = a3\n 13064: a3 = t0 <u a5\n 13067: a4 = a4 <u s1\n 13070: t1 = u64 [sp + 0x38]\n 13073: a3 = a4 if t1 == 0\n 13076: t1 = a4\n 13078: a1 = u64 [a1 + 0x18]\n 13081: u64 [sp + 0x38] = a1\n 13084: a1 = u64 [a2 + 0x18]\n 13087: u64 [sp + 0x20] = a1\n 13090: a1 = ra - t2\n 13093: a2 = a1 - a3\n 13096: u64 [sp + 0x28] = a2\n 13099: a2 = a1 <u a3\n 13102: u64 [sp + 0x30] = t2\n 13105: a3 = ra <u t2\n 13108: a1 = u64 [sp + 0x38]\n 13111: a4 = u64 [sp + 0x20]\n 13114: a1 = a4 - a1\n 13117: a1 = a1 - a3\n 13120: t2 = a1 - a2\n 13123: s1 = t0 - a5\n 13126: a2 = s1 - t1\n 13129: t0 = u64 [sp + 0x10]\n 13132: a1 = u64 [sp + 0x18]\n 13135: a3 = a1 - t0\n 13138: a4 = a2 >u 0\n 13140: a3 = a3 <u 0x20\n 13143: a3 = a3 ^ 0x1\n 13146: a3 = a4 if a2 != 0\n 13149: a2 = t2 >s 0\n 13151: a1 = u64 [sp + 0x28]\n 13154: a4 = a1 >u 0\n 13156: a4 = a2 if t2 != 0\n 13159: a1 = a1 | t2\n 13162: a3 = a4 if a1 != 0\n 13165: jump @261 if a3 == 0\n      : @258 (gas: 11)\n 13168: s1 = a0\n 13170: a2 = u64 [sp + 0x30]\n 13173: a0 = t0 | a2\n 13176: a1 = u64 [sp + 0x38]\n 13179: a1 = a1 | a5\n 13182: a0 = a0 | a1\n 13185: a0 = a0 >> 0x20\n 13188: a1 = a1 | a2\n 13191: a1 = a1 << 0x20\n 13194: a0 = a0 | a1\n 13197: jump @260 if a0 != 0\n      : @259 (gas: 17)\n 13200: i32 a1 = t0 + 0\n 13202: i32 a0 = sp + 0x40\n 13205: ecalli 2 // 'call_data_load'\n 13207: a0 = u64 [sp + 0x58]\n 13210: a1 = u64 [sp + 0x50]\n 13213: a2 = u64 [sp + 0x48]\n 13216: a3 = u64 [sp + 0x40]\n 13219: u64 [s1 + 0x18] = a0\n 13222: u64 [s1 + 0x10] = a1\n 13225: u64 [s1 + 0x8] = a2\n 13228: u64 [s1] = a3\n 13230: sp = s0 + 0xffffffffffffff80\n 13233: ra = u64 [sp + 0x78]\n 13236: s0 = u64 [sp + 0x70]\n 13239: s1 = u64 [sp + 0x68]\n 13242: sp = sp + 0x80\n 13246: ret\n      : @260 (gas: 1)\n 13248: trap\n      : @261 (gas: 3)\n 13249: a0 = 0\n 13251: a1 = 0\n 13253: ra = 206, jump @0\n      : @262 [@dyn 103] (gas: 6)\n 13259: i32 a1 = a0 + 0\n 13261: a0 = 0x1\n 13264: a2 = 0\n 13266: ra = 0xd0\n 13270: ecalli 11 // 'seal_return'\n 13272: fallthrough\n      : @263 [@dyn 104] (gas: 9)\n 13273: a2 = u64 [a1 + 0x18]\n 13276: a3 = u64 [a1 + 0x10]\n 13279: a4 = u64 [a1 + 0x8]\n 13282: a1 = u64 [a1]\n 13284: u64 [a0 + 0x18] = a2\n 13287: u64 [a0 + 0x10] = a3\n 13290: u64 [a0 + 0x8] = a4\n 13293: u64 [a0] = a1\n 13295: ret\n      : @264 (gas: 8)\n 13297: a0 = u64 [sp + 0x30]\n 13300: a1 = u64 [sp + 0x38]\n 13303: a2 = u64 [sp + 0x28]\n 13306: a3 = u64 [sp + 0x20]\n 13309: a1 = a1 | a2\n 13312: a0 = a0 | a3\n 13315: a0 = a0 | a1\n 13318: jump @270 if a0 != 0\n      : @265 (gas: 2)\n 13322: a0 = i32 [0x200a4]\n 13327: jump @270 if a0 <=u 35\n      : @266 (gas: 13)\n 13332: i32 a0 = sp + 0x40\n 13335: a1 = 0x4\n 13338: ecalli 2 // 'call_data_load'\n 13340: a1 = u64 [sp + 0x40]\n 13343: a0 = u64 [sp + 0x48]\n 13346: a2 = u64 [sp + 0x50]\n 13349: a3 = u64 [sp + 0x58]\n 13352: u64 [sp + 0x18] = a3\n 13355: u64 [sp + 0x10] = a2\n 13358: u64 [sp + 0x8] = a0\n 13361: a0 = sp\n 13363: u64 [sp] = a1\n 13365: ra = 210, jump @782\n      : @267 [@dyn 105] (gas: 3)\n 13372: a0 = 0x40\n 13375: a1 = 0x20\n 13378: ra = 212, jump @0\n      : @268 [@dyn 106] (gas: 100)\n 13384: a1 = u8 [a0 + 0x11]\n 13387: a2 = u8 [a0 + 0x10]\n 13390: a3 = u8 [a0 + 0x12]\n 13393: a4 = u8 [a0 + 0x13]\n 13396: a1 = a1 << 0x8\n 13399: a1 = a1 | a2\n 13402: a3 = a3 << 0x10\n 13405: a4 = a4 << 0x18\n 13408: a3 = a3 | a4\n 13411: a1 = a1 | a3\n 13414: a2 = u8 [a0 + 0x15]\n 13417: a3 = u8 [a0 + 0x14]\n 13420: a4 = u8 [a0 + 0x16]\n 13423: a5 = u8 [a0 + 0x17]\n 13426: a2 = a2 << 0x8\n 13429: a2 = a2 | a3\n 13432: a4 = a4 << 0x10\n 13435: a5 = a5 << 0x18\n 13438: a4 = a4 | a5\n 13441: a2 = a2 | a4\n 13444: a2 = a2 << 0x20\n 13447: t0 = a2 | a1\n 13450: a2 = u8 [a0 + 0x1]\n 13453: a3 = u8 [a0]\n 13455: a4 = u8 [a0 + 0x2]\n 13458: a5 = u8 [a0 + 0x3]\n 13461: a2 = a2 << 0x8\n 13464: a2 = a2 | a3\n 13467: a4 = a4 << 0x10\n 13470: a5 = a5 << 0x18\n 13473: a4 = a4 | a5\n 13476: a2 = a2 | a4\n 13479: a3 = u8 [a0 + 0x5]\n 13482: a4 = u8 [a0 + 0x4]\n 13485: a5 = u8 [a0 + 0x6]\n 13488: a1 = u8 [a0 + 0x7]\n 13491: a3 = a3 << 0x8\n 13494: a3 = a3 | a4\n 13497: a5 = a5 << 0x10\n 13500: a1 = a1 << 0x18\n 13503: a1 = a1 | a5\n 13506: a1 = a1 | a3\n 13509: a1 = a1 << 0x20\n 13512: t1 = a1 | a2\n 13515: a1 = u8 [a0 + 0x19]\n 13518: a3 = u8 [a0 + 0x18]\n 13521: a4 = u8 [a0 + 0x1a]\n 13524: a5 = u8 [a0 + 0x1b]\n 13527: a1 = a1 << 0x8\n 13530: a1 = a1 | a3\n 13533: a4 = a4 << 0x10\n 13536: a5 = a5 << 0x18\n 13539: a4 = a4 | a5\n 13542: a1 = a1 | a4\n 13545: a3 = u8 [a0 + 0x1d]\n 13548: a4 = u8 [a0 + 0x1c]\n 13551: a5 = u8 [a0 + 0x1e]\n 13554: a2 = u8 [a0 + 0x1f]\n 13557: a3 = a3 << 0x8\n 13560: a3 = a3 | a4\n 13563: a5 = a5 << 0x10\n 13566: a2 = a2 << 0x18\n 13569: a2 = a2 | a5\n 13572: a2 = a2 | a3\n 13575: a2 = a2 << 0x20\n 13578: a3 = a2 | a1\n 13581: a1 = u8 [a0 + 0x9]\n 13584: a2 = u8 [a0 + 0x8]\n 13587: a4 = u8 [a0 + 0xa]\n 13590: a5 = u8 [a0 + 0xb]\n 13593: a1 = a1 << 0x8\n 13596: a1 = a1 | a2\n 13599: a4 = a4 << 0x10\n 13602: a5 = a5 << 0x18\n 13605: a4 = a4 | a5\n 13608: a1 = a1 | a4\n 13611: a2 = u8 [a0 + 0xd]\n 13614: a4 = u8 [a0 + 0xc]\n 13617: a5 = u8 [a0 + 0xe]\n 13620: a0 = u8 [a0 + 0xf]\n 13623: a2 = a2 << 0x8\n 13626: a2 = a2 | a4\n 13629: a5 = a5 << 0x10\n 13632: a0 = a0 << 0x18\n 13635: a0 = a0 | a5\n 13638: a0 = a0 | a2\n 13641: a0 = a0 << 0x20\n 13644: a0 = a0 | a1\n 13647: a1 = reverse a0\n 13649: a0 = reverse a3\n 13651: a2 = reverse t1\n 13653: a3 = reverse t0\n 13655: a2 = a2 | a3\n 13658: a3 = a0 | a1\n 13661: a3 = a3 | a2\n 13664: a3 = a3 >> 0x20\n 13667: a1 = a1 | a2\n 13670: a1 = a1 << 0x20\n 13673: a1 = a1 | a3\n 13676: jump @272 if a1 == 0\n      : @269 (gas: 1)\n 13679: trap\n      : @270 (gas: 3)\n 13680: a0 = 0\n 13682: a1 = 0\n 13684: ra = 214, jump @0\n      : @271 [@dyn 107] (gas: 7)\n 13690: i32 a1 = a0 + 0\n 13692: a0 = 0x1\n 13695: a2 = 0\n 13697: ecalli 11 // 'seal_return'\n 13699: i32 a0 = a0 + 0\n 13701: ra = 0xd8\n 13705: jump @0\n      : @272 (gas: 2)\n 13708: i32 a0 = a0 + 0\n 13710: ra = 216, jump @0\n      : @273 [@dyn 108] (gas: 6)\n 13716: i32 a1 = a0 + 0\n 13718: a0 = 0\n 13720: a2 = 0\n 13722: ra = 0xda\n 13726: ecalli 11 // 'seal_return'\n 13728: fallthrough\n      : @274 [@dyn 109] (gas: 8)\n 13729: a2 = u32 [a1 + 0x10]\n 13732: a3 = u64 [a1 + 0x8]\n 13735: a1 = u64 [a1]\n 13737: u64 [a0 + 24] = 0\n 13740: u64 [a0 + 0x10] = a2\n 13743: u64 [a0 + 0x8] = a3\n 13746: u64 [a0] = a1\n 13748: ret\n      : @275 (gas: 23)\n 13750: sp = sp + 0xfffffffffffffcd0\n 13754: u64 [sp + 0x328] = ra\n 13758: u64 [sp + 0x320] = s0\n 13762: u64 [sp + 0x318] = s1\n 13766: s0 = sp + 0x330\n 13770: sp = sp & 0xfffffffffffffff0\n 13773: t0 = u64 [a1 + 0x18]\n 13776: t1 = u64 [a1 + 0x10]\n 13779: s1 = u64 [a1 + 0x8]\n 13782: a1 = u64 [a1]\n 13784: u64 [sp + 0x180] = s1\n 13788: u64 [sp + 0x168] = t0\n 13792: t0 = s1 | t0\n 13795: u64 [sp + 0x188] = a1\n 13799: s1 = a1 | t1\n 13802: s1 = s1 | t0\n 13805: s1 = s1 >> 0x20\n 13808: u64 [sp + 0x160] = t1\n 13812: a1 = t0 | t1\n 13815: a1 = a1 << 0x20\n 13818: a1 = a1 | s1\n 13821: u64 [sp + 0x38] = a0\n 13824: jump @302 if a1 != 0\n      : @276 (gas: 96)\n 13828: a0 = u64 [s0 + 0x30]\n 13831: a1 = u64 [s0 + 0x28]\n 13834: s1 = u64 [a0 + 0x10]\n 13837: u64 [sp + 0x10] = s1\n 13840: s1 = u64 [a0 + 0x8]\n 13843: u64 [sp + 0x8] = s1\n 13846: a0 = u64 [a0]\n 13848: u64 [sp] = a0\n 13850: a0 = u64 [a1 + 0x18]\n 13853: u64 [sp + 0x30] = a0\n 13856: a0 = u64 [s0 + 0x20]\n 13859: s1 = u64 [a1 + 0x10]\n 13862: u64 [sp + 0x20] = s1\n 13865: s1 = u64 [a1 + 0x8]\n 13868: u64 [sp + 0x28] = s1\n 13871: a1 = u64 [a1]\n 13873: u64 [sp + 0x18] = a1\n 13876: a1 = u64 [a0 + 0x18]\n 13879: u64 [sp + 0x58] = a1\n 13882: a1 = u64 [s0 + 0x18]\n 13885: s1 = u64 [a0 + 0x10]\n 13888: u64 [sp + 0x48] = s1\n 13891: s1 = u64 [a0 + 0x8]\n 13894: u64 [sp + 0x50] = s1\n 13897: a0 = u64 [a0]\n 13899: u64 [sp + 0x40] = a0\n 13902: a0 = u64 [a1 + 0x18]\n 13905: u64 [sp + 0x78] = a0\n 13908: a0 = u64 [s0 + 0x10]\n 13911: s1 = u64 [a1 + 0x10]\n 13914: u64 [sp + 0x68] = s1\n 13917: s1 = u64 [a1 + 0x8]\n 13920: u64 [sp + 0x70] = s1\n 13923: a1 = u64 [a1]\n 13925: u64 [sp + 0x60] = a1\n 13928: a1 = u64 [a0 + 0x18]\n 13931: u64 [sp + 0x98] = a1\n 13935: a1 = u64 [s0 + 0x8]\n 13938: s1 = u64 [a0 + 0x10]\n 13941: u64 [sp + 0x88] = s1\n 13945: s1 = u64 [a0 + 0x8]\n 13948: u64 [sp + 0x90] = s1\n 13952: a0 = u64 [a0]\n 13954: u64 [sp + 0x80] = a0\n 13958: a0 = u64 [a1 + 0x18]\n 13961: u64 [sp + 0xb8] = a0\n 13965: a0 = u64 [s0]\n 13967: s1 = u64 [a1 + 0x10]\n 13970: u64 [sp + 0xa0] = s1\n 13974: s1 = u64 [a1 + 0x8]\n 13977: u64 [sp + 0xa8] = s1\n 13981: a1 = u64 [a1]\n 13983: u64 [sp + 0xb0] = a1\n 13987: a1 = u64 [a0 + 0x18]\n 13990: u64 [sp + 0xc0] = a1\n 13994: a1 = u64 [a0 + 0x10]\n 13997: u64 [sp + 0xc8] = a1\n 14001: a1 = u64 [a0 + 0x8]\n 14004: u64 [sp + 0xd0] = a1\n 14008: a0 = u64 [a0]\n 14010: u64 [sp + 0xd8] = a0\n 14014: a0 = u64 [a5 + 0x18]\n 14017: u64 [sp + 0xe0] = a0\n 14021: a0 = u64 [a5 + 0x10]\n 14024: u64 [sp + 0xe8] = a0\n 14028: a0 = u64 [a5 + 0x8]\n 14031: u64 [sp + 0xf0] = a0\n 14035: a0 = u64 [a5]\n 14037: u64 [sp + 0xf8] = a0\n 14041: a0 = u64 [a4 + 0x18]\n 14044: u64 [sp + 0x118] = a0\n 14048: a0 = u64 [a4 + 0x10]\n 14051: u64 [sp + 0x120] = a0\n 14055: a0 = u64 [a4 + 0x8]\n 14058: u64 [sp + 0x128] = a0\n 14062: a0 = u64 [a4]\n 14064: u64 [sp + 0x130] = a0\n 14068: a0 = u64 [a3 + 0x18]\n 14071: u64 [sp + 0x138] = a0\n 14075: a0 = u64 [a3 + 0x10]\n 14078: u64 [sp + 0x140] = a0\n 14082: a0 = u64 [a3 + 0x8]\n 14085: u64 [sp + 0x148] = a0\n 14089: a0 = u64 [a2 + 0x10]\n 14092: a1 = u64 [a3]\n 14094: u64 [sp + 0x150] = a1\n 14098: a1 = u64 [a2 + 0x8]\n 14101: u64 [sp + 0x158] = a1\n 14105: a1 = u64 [a2]\n 14107: u64 [sp + 0x170] = a1\n 14111: a0 = a0 << 0x20\n 14114: s1 = a0 >> 0x20\n 14117: a0 = i32 [sp + 0x188]\n 14121: a1 = 0x20\n 14124: u64 [sp + 0x178] = a0\n 14128: ra = 220, jump @0\n      : @277 [@dyn 110] (gas: 68)\n 14134: a1 = reverse s1\n 14136: a2 = u64 [sp + 0x158]\n 14140: a2 = reverse a2\n 14142: a3 = u64 [sp + 0x170]\n 14146: a3 = reverse a3\n 14148: a4 = a3 >> 0x38\n 14151: u8 [a0 + 0x1f] = a4\n 14154: a4 = a3 >> 0x30\n 14157: u8 [a0 + 0x1e] = a4\n 14160: a4 = a3 >> 0x28\n 14163: u8 [a0 + 0x1d] = a4\n 14166: a4 = a3 >> 0x20\n 14169: u8 [a0 + 0x1c] = a4\n 14172: a4 = a3 >> 0x18\n 14175: u8 [a0 + 0x1b] = a4\n 14178: a4 = a3 >> 0x10\n 14181: u8 [a0 + 0x1a] = a4\n 14184: a4 = a3 >> 0x8\n 14187: u8 [a0 + 0x19] = a4\n 14190: u8 [a0 + 0x18] = a3\n 14193: u8 [a0 + 0x10] = a2\n 14196: u8 [a0 + 11] = 0\n 14199: u8 [a0 + 10] = 0\n 14202: u8 [a0 + 9] = 0\n 14205: u8 [a0 + 7] = 0\n 14208: u8 [a0 + 6] = 0\n 14211: u8 [a0 + 5] = 0\n 14214: u8 [a0 + 4] = 0\n 14217: u8 [a0 + 3] = 0\n 14220: u8 [a0 + 2] = 0\n 14223: u8 [a0 + 1] = 0\n 14226: a3 = a2 >> 0x38\n 14229: u8 [a0 + 0x17] = a3\n 14232: a3 = a2 >> 0x30\n 14235: u8 [a0 + 0x16] = a3\n 14238: a3 = a2 >> 0x28\n 14241: u8 [a0 + 0x15] = a3\n 14244: a3 = a2 >> 0x20\n 14247: u8 [a0 + 0x14] = a3\n 14250: a3 = a2 >> 0x18\n 14253: u8 [a0 + 0x13] = a3\n 14256: a3 = a2 >> 0x10\n 14259: u8 [a0 + 0x12] = a3\n 14262: a2 = a2 >> 0x8\n 14265: u8 [a0 + 0x11] = a2\n 14268: u8 [a0 + 0x8] = a1\n 14271: a2 = a1 >> 0x38\n 14274: u8 [a0 + 0xf] = a2\n 14277: a2 = a1 >> 0x30\n 14280: u8 [a0 + 0xe] = a2\n 14283: a2 = a1 >> 0x28\n 14286: u8 [a0 + 0xd] = a2\n 14289: a1 = a1 >> 0x20\n 14292: u8 [a0 + 0xc] = a1\n 14295: a1 = u64 [sp + 0x168]\n 14299: a3 = u64 [sp + 0x160]\n 14303: a3 = a3 | a1\n 14306: a1 = 0x100000000\n 14316: u64 [sp + 0x158] = a1\n 14320: a1 = 0xffffffe0\n 14330: a2 = u64 [sp + 0x188]\n 14334: a1 = a2 <u a1\n 14337: a2 = u64 [sp + 0x180]\n 14341: a1 = 0 if a2 != 0\n 14343: u64 [sp + 0x170] = a3\n 14347: a1 = 0 if a3 != 0\n 14349: u8 [a0 + 0] = 0\n 14351: jump @302 if a1 == 0\n      : @278 (gas: 19)\n 14355: a0 = u64 [sp + 0x188]\n 14359: a1 = a0 + 0x160\n 14363: u64 [sp + 0x110] = a1\n 14367: a0 = a1 <u a0\n 14370: a1 = u64 [sp + 0x180]\n 14374: a2 = a1 + a0\n 14377: u64 [sp + 0x108] = a2\n 14381: s1 = a2 <u a1\n 14384: s1 = a0 if a0 == 0\n 14387: a0 = u64 [sp + 0x160]\n 14391: s1 = s1 + a0\n 14394: a0 = s1 <u a0\n 14397: a1 = u64 [sp + 0x168]\n 14401: a0 = a0 + a1\n 14404: u64 [sp + 0x100] = a0\n 14408: a0 = u64 [sp + 0x178]\n 14412: i32 a0 = a0 + 0x20\n 14415: a1 = 0x20\n 14418: ra = 222, jump @0\n      : @279 [@dyn 111] (gas: 51)\n 14424: u8 [a0 + 31] = 0x60\n 14428: u8 [a0 + 30] = 0x1\n 14432: u8 [a0 + 29] = 0\n 14435: u8 [a0 + 28] = 0\n 14438: u8 [a0 + 27] = 0\n 14441: u8 [a0 + 26] = 0\n 14444: u8 [a0 + 25] = 0\n 14447: u8 [a0 + 24] = 0\n 14450: u8 [a0 + 23] = 0\n 14453: u8 [a0 + 22] = 0\n 14456: u8 [a0 + 21] = 0\n 14459: u8 [a0 + 20] = 0\n 14462: u8 [a0 + 19] = 0\n 14465: u8 [a0 + 18] = 0\n 14468: u8 [a0 + 17] = 0\n 14471: u8 [a0 + 16] = 0\n 14474: u8 [a0 + 15] = 0\n 14477: u8 [a0 + 14] = 0\n 14480: u8 [a0 + 13] = 0\n 14483: u8 [a0 + 12] = 0\n 14486: u8 [a0 + 11] = 0\n 14489: u8 [a0 + 10] = 0\n 14492: u8 [a0 + 9] = 0\n 14495: u8 [a0 + 8] = 0\n 14498: u8 [a0 + 7] = 0\n 14501: u8 [a0 + 6] = 0\n 14504: u8 [a0 + 5] = 0\n 14507: u8 [a0 + 4] = 0\n 14510: u8 [a0 + 3] = 0\n 14513: u8 [a0 + 2] = 0\n 14516: u8 [a0 + 1] = 0\n 14519: u8 [a0 + 0] = 0\n 14521: a0 = u64 [sp + 0x100]\n 14525: u64 [sp + 0x2c8] = a0\n 14529: u64 [sp + 0x2c0] = s1\n 14533: a0 = u64 [sp + 0x108]\n 14537: u64 [sp + 0x2b8] = a0\n 14541: a0 = u64 [sp + 0x110]\n 14545: u64 [sp + 0x2b0] = a0\n 14549: a0 = u64 [sp + 0x138]\n 14553: u64 [sp + 0x2e8] = a0\n 14557: a0 = u64 [sp + 0x140]\n 14561: u64 [sp + 0x2e0] = a0\n 14565: a0 = u64 [sp + 0x148]\n 14569: u64 [sp + 0x2d8] = a0\n 14573: a0 = sp + 0x2f0\n 14577: a1 = sp + 0x2d0\n 14581: a2 = sp + 0x2b0\n 14585: a3 = u64 [sp + 0x150]\n 14589: u64 [sp + 0x2d0] = a3\n 14593: ra = 224, jump @224\n      : @280 [@dyn 112] (gas: 9)\n 14599: a0 = u64 [sp + 0x158]\n 14603: a0 = a0 + 0xffffffffffffffc0\n 14606: a1 = u64 [sp + 0x188]\n 14610: a0 = a1 <u a0\n 14613: a1 = u64 [sp + 0x180]\n 14617: a0 = 0 if a1 != 0\n 14619: a1 = u64 [sp + 0x170]\n 14623: a0 = 0 if a1 != 0\n 14625: jump @302 if a0 == 0\n      : @281 (gas: 37)\n 14629: a2 = u64 [sp + 0x2f0]\n 14633: a5 = u64 [sp + 0x2f8]\n 14637: s1 = u64 [sp + 0x308]\n 14641: u64 [sp + 0x150] = s1\n 14645: a1 = u64 [sp + 0x300]\n 14649: u64 [sp + 0x158] = a1\n 14653: a3 = u64 [sp + 0x188]\n 14657: ra = a2 <u a3\n 14660: t2 = a2\n 14662: t1 = a3\n 14664: a3 = u64 [sp + 0x180]\n 14668: t0 = a5 ^ a3\n 14671: a2 = a5 <u a3\n 14674: u64 [sp + 0x148] = a5\n 14678: a0 = a3\n 14680: a2 = ra if t0 == 0\n 14683: t0 = u64 [sp + 0x160]\n 14687: a3 = a1 - t0\n 14690: a4 = a3 - a2\n 14693: u64 [sp + 0x140] = a4\n 14697: a4 = a3 <u a2\n 14700: a2 = a1 <u t0\n 14703: a3 = u64 [sp + 0x168]\n 14707: a3 = s1 - a3\n 14710: a3 = a3 - a2\n 14713: a3 = a3 - a4\n 14716: u64 [sp + 0x138] = a3\n 14720: a1 = a5 - a0\n 14723: a0 = a1 - ra\n 14726: u64 [sp + 0x110] = a0\n 14730: a0 = t2 - t1\n 14733: u64 [sp + 0x108] = a0\n 14737: s1 = t2\n 14739: a0 = u64 [sp + 0x178]\n 14743: i32 a0 = a0 + 0x40\n 14746: a1 = 0x20\n 14749: ra = 226, jump @0\n      : @282 [@dyn 113] (gas: 87)\n 14755: a1 = u64 [sp + 0x138]\n 14759: a1 = reverse a1\n 14761: a2 = u64 [sp + 0x140]\n 14765: a2 = reverse a2\n 14767: a3 = u64 [sp + 0x110]\n 14771: a3 = reverse a3\n 14773: a4 = u64 [sp + 0x108]\n 14777: a4 = reverse a4\n 14779: u8 [a0 + 0x18] = a4\n 14782: a5 = a4 >> 0x38\n 14785: u8 [a0 + 0x1f] = a5\n 14788: a5 = a4 >> 0x30\n 14791: u8 [a0 + 0x1e] = a5\n 14794: a5 = a4 >> 0x28\n 14797: u8 [a0 + 0x1d] = a5\n 14800: a5 = a4 >> 0x20\n 14803: u8 [a0 + 0x1c] = a5\n 14806: a5 = a4 >> 0x18\n 14809: u8 [a0 + 0x1b] = a5\n 14812: a5 = a4 >> 0x10\n 14815: u8 [a0 + 0x1a] = a5\n 14818: a4 = a4 >> 0x8\n 14821: u8 [a0 + 0x19] = a4\n 14824: u8 [a0 + 0x10] = a3\n 14827: a4 = a3 >> 0x38\n 14830: u8 [a0 + 0x17] = a4\n 14833: a4 = a3 >> 0x30\n 14836: u8 [a0 + 0x16] = a4\n 14839: a4 = a3 >> 0x28\n 14842: u8 [a0 + 0x15] = a4\n 14845: a4 = a3 >> 0x20\n 14848: u8 [a0 + 0x14] = a4\n 14851: a4 = a3 >> 0x18\n 14854: u8 [a0 + 0x13] = a4\n 14857: a4 = a3 >> 0x10\n 14860: u8 [a0 + 0x12] = a4\n 14863: a3 = a3 >> 0x8\n 14866: u8 [a0 + 0x11] = a3\n 14869: u8 [a0 + 0x8] = a2\n 14872: a3 = a2 >> 0x38\n 14875: u8 [a0 + 0xf] = a3\n 14878: a3 = a2 >> 0x30\n 14881: u8 [a0 + 0xe] = a3\n 14884: a3 = a2 >> 0x28\n 14887: u8 [a0 + 0xd] = a3\n 14890: a3 = a2 >> 0x20\n 14893: u8 [a0 + 0xc] = a3\n 14896: a3 = a2 >> 0x18\n 14899: u8 [a0 + 0xb] = a3\n 14902: a3 = a2 >> 0x10\n 14905: u8 [a0 + 0xa] = a3\n 14908: a2 = a2 >> 0x8\n 14911: u8 [a0 + 0x9] = a2\n 14914: u8 [a0] = a1\n 14916: a2 = a1 >> 0x38\n 14919: u8 [a0 + 0x7] = a2\n 14922: a2 = a1 >> 0x30\n 14925: u8 [a0 + 0x6] = a2\n 14928: a2 = a1 >> 0x28\n 14931: u8 [a0 + 0x5] = a2\n 14934: a2 = a1 >> 0x20\n 14937: u8 [a0 + 0x4] = a2\n 14940: a2 = a1 >> 0x18\n 14943: u8 [a0 + 0x3] = a2\n 14946: a2 = a1 >> 0x10\n 14949: u8 [a0 + 0x2] = a2\n 14952: a1 = a1 >> 0x8\n 14955: u8 [a0 + 0x1] = a1\n 14958: a0 = u64 [sp + 0x150]\n 14962: u64 [sp + 0x268] = a0\n 14966: a0 = u64 [sp + 0x158]\n 14970: u64 [sp + 0x260] = a0\n 14974: a0 = u64 [sp + 0x148]\n 14978: u64 [sp + 0x258] = a0\n 14982: u64 [sp + 0x250] = s1\n 14986: a0 = u64 [sp + 0x118]\n 14990: u64 [sp + 0x288] = a0\n 14994: a0 = u64 [sp + 0x120]\n 14998: u64 [sp + 0x280] = a0\n 15002: a0 = u64 [sp + 0x128]\n 15006: u64 [sp + 0x278] = a0\n 15010: a0 = sp + 0x290\n 15014: a1 = sp + 0x270\n 15018: a2 = sp + 0x250\n 15022: a3 = u64 [sp + 0x130]\n 15026: u64 [sp + 0x270] = a3\n 15030: ra = 228, jump @224\n      : @283 [@dyn 114] (gas: 10)\n 15036: a0 = 0x100000000\n 15046: u64 [sp + 0x158] = a0\n 15050: a0 = 0xffffffa0\n 15060: a1 = u64 [sp + 0x188]\n 15064: a0 = a1 <u a0\n 15067: a1 = u64 [sp + 0x180]\n 15071: a0 = 0 if a1 != 0\n 15073: a1 = u64 [sp + 0x170]\n 15077: a0 = 0 if a1 != 0\n 15079: jump @302 if a0 == 0\n      : @284 (gas: 37)\n 15083: a2 = u64 [sp + 0x290]\n 15087: a5 = u64 [sp + 0x298]\n 15091: s1 = u64 [sp + 0x2a8]\n 15095: u64 [sp + 0x148] = s1\n 15099: a1 = u64 [sp + 0x2a0]\n 15103: u64 [sp + 0x150] = a1\n 15107: a3 = u64 [sp + 0x188]\n 15111: ra = a2 <u a3\n 15114: t2 = a2\n 15116: t1 = a3\n 15118: a3 = u64 [sp + 0x180]\n 15122: t0 = a5 ^ a3\n 15125: a2 = a5 <u a3\n 15128: u64 [sp + 0x140] = a5\n 15132: a0 = a3\n 15134: a2 = ra if t0 == 0\n 15137: t0 = u64 [sp + 0x160]\n 15141: a3 = a1 - t0\n 15144: a4 = a3 - a2\n 15147: u64 [sp + 0x138] = a4\n 15151: a4 = a3 <u a2\n 15154: a2 = a1 <u t0\n 15157: a3 = u64 [sp + 0x168]\n 15161: a3 = s1 - a3\n 15164: a3 = a3 - a2\n 15167: a3 = a3 - a4\n 15170: u64 [sp + 0x130] = a3\n 15174: a1 = a5 - a0\n 15177: a0 = a1 - ra\n 15180: u64 [sp + 0x128] = a0\n 15184: a0 = t2 - t1\n 15187: u64 [sp + 0x120] = a0\n 15191: s1 = t2\n 15193: a0 = u64 [sp + 0x178]\n 15197: i32 a0 = a0 + 0x60\n 15200: a1 = 0x20\n 15203: ra = 230, jump @0\n      : @285 [@dyn 115] (gas: 87)\n 15209: a1 = u64 [sp + 0x130]\n 15213: a1 = reverse a1\n 15215: a2 = u64 [sp + 0x138]\n 15219: a2 = reverse a2\n 15221: a3 = u64 [sp + 0x128]\n 15225: a3 = reverse a3\n 15227: a4 = u64 [sp + 0x120]\n 15231: a4 = reverse a4\n 15233: u8 [a0 + 0x18] = a4\n 15236: a5 = a4 >> 0x38\n 15239: u8 [a0 + 0x1f] = a5\n 15242: a5 = a4 >> 0x30\n 15245: u8 [a0 + 0x1e] = a5\n 15248: a5 = a4 >> 0x28\n 15251: u8 [a0 + 0x1d] = a5\n 15254: a5 = a4 >> 0x20\n 15257: u8 [a0 + 0x1c] = a5\n 15260: a5 = a4 >> 0x18\n 15263: u8 [a0 + 0x1b] = a5\n 15266: a5 = a4 >> 0x10\n 15269: u8 [a0 + 0x1a] = a5\n 15272: a4 = a4 >> 0x8\n 15275: u8 [a0 + 0x19] = a4\n 15278: u8 [a0 + 0x10] = a3\n 15281: a4 = a3 >> 0x38\n 15284: u8 [a0 + 0x17] = a4\n 15287: a4 = a3 >> 0x30\n 15290: u8 [a0 + 0x16] = a4\n 15293: a4 = a3 >> 0x28\n 15296: u8 [a0 + 0x15] = a4\n 15299: a4 = a3 >> 0x20\n 15302: u8 [a0 + 0x14] = a4\n 15305: a4 = a3 >> 0x18\n 15308: u8 [a0 + 0x13] = a4\n 15311: a4 = a3 >> 0x10\n 15314: u8 [a0 + 0x12] = a4\n 15317: a3 = a3 >> 0x8\n 15320: u8 [a0 + 0x11] = a3\n 15323: u8 [a0 + 0x8] = a2\n 15326: a3 = a2 >> 0x38\n 15329: u8 [a0 + 0xf] = a3\n 15332: a3 = a2 >> 0x30\n 15335: u8 [a0 + 0xe] = a3\n 15338: a3 = a2 >> 0x28\n 15341: u8 [a0 + 0xd] = a3\n 15344: a3 = a2 >> 0x20\n 15347: u8 [a0 + 0xc] = a3\n 15350: a3 = a2 >> 0x18\n 15353: u8 [a0 + 0xb] = a3\n 15356: a3 = a2 >> 0x10\n 15359: u8 [a0 + 0xa] = a3\n 15362: a2 = a2 >> 0x8\n 15365: u8 [a0 + 0x9] = a2\n 15368: u8 [a0] = a1\n 15370: a2 = a1 >> 0x38\n 15373: u8 [a0 + 0x7] = a2\n 15376: a2 = a1 >> 0x30\n 15379: u8 [a0 + 0x6] = a2\n 15382: a2 = a1 >> 0x28\n 15385: u8 [a0 + 0x5] = a2\n 15388: a2 = a1 >> 0x20\n 15391: u8 [a0 + 0x4] = a2\n 15394: a2 = a1 >> 0x18\n 15397: u8 [a0 + 0x3] = a2\n 15400: a2 = a1 >> 0x10\n 15403: u8 [a0 + 0x2] = a2\n 15406: a1 = a1 >> 0x8\n 15409: u8 [a0 + 0x1] = a1\n 15412: a0 = u64 [sp + 0x148]\n 15416: u64 [sp + 0x208] = a0\n 15420: a0 = u64 [sp + 0x150]\n 15424: u64 [sp + 0x200] = a0\n 15428: a0 = u64 [sp + 0x140]\n 15432: u64 [sp + 0x1f8] = a0\n 15436: u64 [sp + 0x1f0] = s1\n 15440: a0 = u64 [sp + 0xe0]\n 15444: u64 [sp + 0x228] = a0\n 15448: a0 = u64 [sp + 0xe8]\n 15452: u64 [sp + 0x220] = a0\n 15456: a0 = u64 [sp + 0xf0]\n 15460: u64 [sp + 0x218] = a0\n 15464: a0 = sp + 0x230\n 15468: a1 = sp + 0x210\n 15472: a2 = sp + 0x1f0\n 15476: a3 = u64 [sp + 0xf8]\n 15480: u64 [sp + 0x210] = a3\n 15484: ra = 232, jump @224\n      : @286 [@dyn 116] (gas: 9)\n 15490: a0 = u64 [sp + 0x158]\n 15494: a0 = a0 + 0xffffffffffffff80\n 15497: a1 = u64 [sp + 0x188]\n 15501: a0 = a1 <u a0\n 15504: a1 = u64 [sp + 0x180]\n 15508: a0 = 0 if a1 != 0\n 15510: a1 = u64 [sp + 0x170]\n 15514: a0 = 0 if a1 != 0\n 15516: jump @302 if a0 == 0\n      : @287 (gas: 37)\n 15520: a2 = u64 [sp + 0x230]\n 15524: a5 = u64 [sp + 0x238]\n 15528: s1 = u64 [sp + 0x248]\n 15532: u64 [sp + 0x150] = s1\n 15536: a1 = u64 [sp + 0x240]\n 15540: u64 [sp + 0x158] = a1\n 15544: a3 = u64 [sp + 0x188]\n 15548: ra = a2 <u a3\n 15551: t2 = a2\n 15553: t1 = a3\n 15555: a3 = u64 [sp + 0x180]\n 15559: t0 = a5 ^ a3\n 15562: a2 = a5 <u a3\n 15565: u64 [sp + 0x148] = a5\n 15569: a0 = a3\n 15571: a2 = ra if t0 == 0\n 15574: t0 = u64 [sp + 0x160]\n 15578: a3 = a1 - t0\n 15581: a4 = a3 - a2\n 15584: u64 [sp + 0x140] = a4\n 15588: a4 = a3 <u a2\n 15591: a2 = a1 <u t0\n 15594: a3 = u64 [sp + 0x168]\n 15598: a3 = s1 - a3\n 15601: a3 = a3 - a2\n 15604: a3 = a3 - a4\n 15607: u64 [sp + 0x168] = a3\n 15611: a1 = a5 - a0\n 15614: a0 = a1 - ra\n 15617: u64 [sp + 0x160] = a0\n 15621: a0 = t2 - t1\n 15624: u64 [sp + 0x138] = a0\n 15628: s1 = t2\n 15630: a0 = u64 [sp + 0x178]\n 15634: i32 a0 = a0 + 0x80\n 15638: a1 = 0x20\n 15641: ra = 234, jump @0\n      : @288 [@dyn 117] (gas: 87)\n 15647: a1 = u64 [sp + 0x168]\n 15651: a1 = reverse a1\n 15653: a2 = u64 [sp + 0x140]\n 15657: a2 = reverse a2\n 15659: a3 = u64 [sp + 0x160]\n 15663: a3 = reverse a3\n 15665: a4 = u64 [sp + 0x138]\n 15669: a4 = reverse a4\n 15671: u8 [a0 + 0x18] = a4\n 15674: a5 = a4 >> 0x38\n 15677: u8 [a0 + 0x1f] = a5\n 15680: a5 = a4 >> 0x30\n 15683: u8 [a0 + 0x1e] = a5\n 15686: a5 = a4 >> 0x28\n 15689: u8 [a0 + 0x1d] = a5\n 15692: a5 = a4 >> 0x20\n 15695: u8 [a0 + 0x1c] = a5\n 15698: a5 = a4 >> 0x18\n 15701: u8 [a0 + 0x1b] = a5\n 15704: a5 = a4 >> 0x10\n 15707: u8 [a0 + 0x1a] = a5\n 15710: a4 = a4 >> 0x8\n 15713: u8 [a0 + 0x19] = a4\n 15716: u8 [a0 + 0x10] = a3\n 15719: a4 = a3 >> 0x38\n 15722: u8 [a0 + 0x17] = a4\n 15725: a4 = a3 >> 0x30\n 15728: u8 [a0 + 0x16] = a4\n 15731: a4 = a3 >> 0x28\n 15734: u8 [a0 + 0x15] = a4\n 15737: a4 = a3 >> 0x20\n 15740: u8 [a0 + 0x14] = a4\n 15743: a4 = a3 >> 0x18\n 15746: u8 [a0 + 0x13] = a4\n 15749: a4 = a3 >> 0x10\n 15752: u8 [a0 + 0x12] = a4\n 15755: a3 = a3 >> 0x8\n 15758: u8 [a0 + 0x11] = a3\n 15761: u8 [a0 + 0x8] = a2\n 15764: a3 = a2 >> 0x38\n 15767: u8 [a0 + 0xf] = a3\n 15770: a3 = a2 >> 0x30\n 15773: u8 [a0 + 0xe] = a3\n 15776: a3 = a2 >> 0x28\n 15779: u8 [a0 + 0xd] = a3\n 15782: a3 = a2 >> 0x20\n 15785: u8 [a0 + 0xc] = a3\n 15788: a3 = a2 >> 0x18\n 15791: u8 [a0 + 0xb] = a3\n 15794: a3 = a2 >> 0x10\n 15797: u8 [a0 + 0xa] = a3\n 15800: a2 = a2 >> 0x8\n 15803: u8 [a0 + 0x9] = a2\n 15806: u8 [a0] = a1\n 15808: a2 = a1 >> 0x38\n 15811: u8 [a0 + 0x7] = a2\n 15814: a2 = a1 >> 0x30\n 15817: u8 [a0 + 0x6] = a2\n 15820: a2 = a1 >> 0x28\n 15823: u8 [a0 + 0x5] = a2\n 15826: a2 = a1 >> 0x20\n 15829: u8 [a0 + 0x4] = a2\n 15832: a2 = a1 >> 0x18\n 15835: u8 [a0 + 0x3] = a2\n 15838: a2 = a1 >> 0x10\n 15841: u8 [a0 + 0x2] = a2\n 15844: a1 = a1 >> 0x8\n 15847: u8 [a0 + 0x1] = a1\n 15850: a0 = u64 [sp + 0x150]\n 15854: u64 [sp + 0x1a8] = a0\n 15858: a0 = u64 [sp + 0x158]\n 15862: u64 [sp + 0x1a0] = a0\n 15866: a0 = u64 [sp + 0x148]\n 15870: u64 [sp + 0x198] = a0\n 15874: u64 [sp + 0x190] = s1\n 15878: a0 = u64 [sp + 0xc0]\n 15882: u64 [sp + 0x1c8] = a0\n 15886: a0 = u64 [sp + 0xc8]\n 15890: u64 [sp + 0x1c0] = a0\n 15894: a0 = u64 [sp + 0xd0]\n 15898: u64 [sp + 0x1b8] = a0\n 15902: a0 = sp + 0x1d0\n 15906: a1 = sp + 0x1b0\n 15910: a2 = sp + 0x190\n 15914: a3 = u64 [sp + 0xd8]\n 15918: u64 [sp + 0x1b0] = a3\n 15922: ra = 236, jump @224\n      : @289 [@dyn 118] (gas: 9)\n 15928: s1 = 0x100000000\n 15938: a0 = 0xffffff60\n 15948: a1 = u64 [sp + 0x188]\n 15952: a0 = a1 <u a0\n 15955: a1 = u64 [sp + 0x180]\n 15959: a0 = 0 if a1 != 0\n 15961: a1 = u64 [sp + 0x170]\n 15965: a0 = 0 if a1 != 0\n 15967: jump @302 if a0 == 0\n      : @290 (gas: 12)\n 15971: a0 = u64 [sp + 0x1e8]\n 15975: u64 [sp + 0x158] = a0\n 15979: a0 = u64 [sp + 0x1e0]\n 15983: u64 [sp + 0x160] = a0\n 15987: a0 = u64 [sp + 0x1d8]\n 15991: u64 [sp + 0x150] = a0\n 15995: a0 = u64 [sp + 0x1d0]\n 15999: u64 [sp + 0x148] = a0\n 16003: a0 = u64 [sp + 0x178]\n 16007: i32 a0 = a0 + 0xa0\n 16011: a1 = 0x20\n 16014: ra = 238, jump @0\n      : @291 [@dyn 119] (gas: 76)\n 16020: a1 = u64 [sp + 0xb8]\n 16024: a1 = reverse a1\n 16026: a2 = u64 [sp + 0xa0]\n 16030: a2 = reverse a2\n 16032: a3 = u64 [sp + 0xa8]\n 16036: a3 = reverse a3\n 16038: a4 = u64 [sp + 0xb0]\n 16042: a4 = reverse a4\n 16044: a5 = a4 >> 0x38\n 16047: u8 [a0 + 0x1f] = a5\n 16050: a5 = a4 >> 0x30\n 16053: u8 [a0 + 0x1e] = a5\n 16056: a5 = a4 >> 0x28\n 16059: u8 [a0 + 0x1d] = a5\n 16062: a5 = a4 >> 0x20\n 16065: u8 [a0 + 0x1c] = a5\n 16068: a5 = a4 >> 0x18\n 16071: u8 [a0 + 0x1b] = a5\n 16074: a5 = a4 >> 0x10\n 16077: u8 [a0 + 0x1a] = a5\n 16080: a5 = a4 >> 0x8\n 16083: u8 [a0 + 0x19] = a5\n 16086: u8 [a0 + 0x18] = a4\n 16089: u8 [a0 + 0x10] = a3\n 16092: a4 = a3 >> 0x38\n 16095: u8 [a0 + 0x17] = a4\n 16098: a4 = a3 >> 0x30\n 16101: u8 [a0 + 0x16] = a4\n 16104: a4 = a3 >> 0x28\n 16107: u8 [a0 + 0x15] = a4\n 16110: a4 = a3 >> 0x20\n 16113: u8 [a0 + 0x14] = a4\n 16116: a4 = a3 >> 0x18\n 16119: u8 [a0 + 0x13] = a4\n 16122: a4 = a3 >> 0x10\n 16125: u8 [a0 + 0x12] = a4\n 16128: a3 = a3 >> 0x8\n 16131: u8 [a0 + 0x11] = a3\n 16134: u8 [a0 + 0x8] = a2\n 16137: a3 = a2 >> 0x38\n 16140: u8 [a0 + 0xf] = a3\n 16143: a3 = a2 >> 0x30\n 16146: u8 [a0 + 0xe] = a3\n 16149: a3 = a2 >> 0x28\n 16152: u8 [a0 + 0xd] = a3\n 16155: a3 = a2 >> 0x20\n 16158: u8 [a0 + 0xc] = a3\n 16161: a3 = a2 >> 0x18\n 16164: u8 [a0 + 0xb] = a3\n 16167: a3 = a2 >> 0x10\n 16170: u8 [a0 + 0xa] = a3\n 16173: a2 = a2 >> 0x8\n 16176: u8 [a0 + 0x9] = a2\n 16179: u8 [a0] = a1\n 16181: a2 = a1 >> 0x38\n 16184: u8 [a0 + 0x7] = a2\n 16187: a2 = a1 >> 0x30\n 16190: u8 [a0 + 0x6] = a2\n 16193: a2 = a1 >> 0x28\n 16196: u8 [a0 + 0x5] = a2\n 16199: a2 = a1 >> 0x20\n 16202: u8 [a0 + 0x4] = a2\n 16205: a2 = a1 >> 0x18\n 16208: u8 [a0 + 0x3] = a2\n 16211: a2 = a1 >> 0x10\n 16214: u8 [a0 + 0x2] = a2\n 16217: a1 = a1 >> 0x8\n 16220: a2 = s1 + 0xffffffffffffff40\n 16224: a3 = u64 [sp + 0x188]\n 16228: a2 = a3 <u a2\n 16231: a3 = u64 [sp + 0x180]\n 16235: a2 = 0 if a3 != 0\n 16237: a3 = u64 [sp + 0x170]\n 16241: a2 = 0 if a3 != 0\n 16243: u8 [a0 + 0x1] = a1\n 16246: jump @302 if a2 == 0\n      : @292 (gas: 12)\n 16250: a0 = u64 [sp + 0x88]\n 16254: a1 = u64 [sp + 0x80]\n 16258: a0 = a0 | a1\n 16261: a1 = u64 [sp + 0x98]\n 16265: a2 = u64 [sp + 0x90]\n 16269: a1 = a1 | a2\n 16272: a0 = a0 | a1\n 16275: s1 = a0 >u 0\n 16277: a0 = u64 [sp + 0x178]\n 16281: i32 a0 = a0 + 0xc0\n 16285: a1 = 0x20\n 16288: ra = 240, jump @0\n      : @293 [@dyn 120] (gas: 41)\n 16294: u8 [a0 + 30] = 0\n 16297: u8 [a0 + 29] = 0\n 16300: u8 [a0 + 28] = 0\n 16303: u8 [a0 + 27] = 0\n 16306: u8 [a0 + 26] = 0\n 16309: u8 [a0 + 25] = 0\n 16312: u8 [a0 + 24] = 0\n 16315: u8 [a0 + 23] = 0\n 16318: u8 [a0 + 22] = 0\n 16321: u8 [a0 + 21] = 0\n 16324: u8 [a0 + 20] = 0\n 16327: u8 [a0 + 19] = 0\n 16330: u8 [a0 + 18] = 0\n 16333: u8 [a0 + 17] = 0\n 16336: u8 [a0 + 16] = 0\n 16339: u8 [a0 + 15] = 0\n 16342: u8 [a0 + 14] = 0\n 16345: u8 [a0 + 13] = 0\n 16348: u8 [a0 + 12] = 0\n 16351: u8 [a0 + 11] = 0\n 16354: u8 [a0 + 10] = 0\n 16357: u8 [a0 + 9] = 0\n 16360: u8 [a0 + 8] = 0\n 16363: u8 [a0 + 7] = 0\n 16366: u8 [a0 + 6] = 0\n 16369: u8 [a0 + 5] = 0\n 16372: u8 [a0 + 4] = 0\n 16375: u8 [a0 + 3] = 0\n 16378: u8 [a0 + 2] = 0\n 16381: u8 [a0 + 1] = 0\n 16384: u8 [a0 + 0x1f] = s1\n 16387: s1 = 0x100000000\n 16397: a1 = 0xffffff20\n 16407: a2 = u64 [sp + 0x188]\n 16411: a1 = a2 <u a1\n 16414: a2 = u64 [sp + 0x180]\n 16418: a1 = 0 if a2 != 0\n 16420: a2 = u64 [sp + 0x170]\n 16424: a1 = 0 if a2 != 0\n 16426: u8 [a0 + 0] = 0\n 16428: jump @302 if a1 == 0\n      : @294 (gas: 13)\n 16432: a0 = u64 [sp + 0x68]\n 16435: a1 = u64 [sp + 0x60]\n 16438: a0 = a0 | a1\n 16441: a1 = u64 [sp + 0x78]\n 16444: a2 = u64 [sp + 0x70]\n 16447: a1 = a1 | a2\n 16450: a0 = a0 | a1\n 16453: a0 = a0 >u 0\n 16455: u64 [sp + 0x168] = a0\n 16459: a0 = u64 [sp + 0x178]\n 16463: i32 a0 = a0 + 0xe0\n 16467: a1 = 0x20\n 16470: ra = 242, jump @0\n      : @295 [@dyn 121] (gas: 41)\n 16476: u8 [a0 + 30] = 0\n 16479: u8 [a0 + 29] = 0\n 16482: u8 [a0 + 28] = 0\n 16485: u8 [a0 + 27] = 0\n 16488: u8 [a0 + 26] = 0\n 16491: u8 [a0 + 25] = 0\n 16494: u8 [a0 + 24] = 0\n 16497: u8 [a0 + 23] = 0\n 16500: u8 [a0 + 22] = 0\n 16503: u8 [a0 + 21] = 0\n 16506: u8 [a0 + 20] = 0\n 16509: u8 [a0 + 19] = 0\n 16512: u8 [a0 + 18] = 0\n 16515: u8 [a0 + 17] = 0\n 16518: u8 [a0 + 16] = 0\n 16521: u8 [a0 + 15] = 0\n 16524: u8 [a0 + 14] = 0\n 16527: u8 [a0 + 13] = 0\n 16530: u8 [a0 + 12] = 0\n 16533: u8 [a0 + 11] = 0\n 16536: u8 [a0 + 10] = 0\n 16539: u8 [a0 + 9] = 0\n 16542: u8 [a0 + 8] = 0\n 16545: u8 [a0 + 7] = 0\n 16548: u8 [a0 + 6] = 0\n 16551: u8 [a0 + 5] = 0\n 16554: u8 [a0 + 4] = 0\n 16557: u8 [a0 + 3] = 0\n 16560: u8 [a0 + 2] = 0\n 16563: u8 [a0 + 1] = 0\n 16566: u8 [a0 + 0] = 0\n 16568: a1 = s1 + 0xffffffffffffff00\n 16572: a2 = u64 [sp + 0x188]\n 16576: a1 = a2 <u a1\n 16579: a2 = u64 [sp + 0x180]\n 16583: a1 = 0 if a2 != 0\n 16585: a2 = u64 [sp + 0x170]\n 16589: a1 = 0 if a2 != 0\n 16591: a2 = u64 [sp + 0x168]\n 16595: u8 [a0 + 0x1f] = a2\n 16598: jump @302 if a1 == 0\n      : @296 (gas: 12)\n 16602: a0 = u64 [sp + 0x48]\n 16605: a1 = u64 [sp + 0x40]\n 16608: a0 = a0 | a1\n 16611: a1 = u64 [sp + 0x58]\n 16614: a2 = u64 [sp + 0x50]\n 16617: a1 = a1 | a2\n 16620: a0 = a0 | a1\n 16623: s1 = a0 >u 0\n 16625: a0 = u64 [sp + 0x178]\n 16629: i32 a0 = a0 + 0x100\n 16633: a1 = 0x20\n 16636: ra = 244, jump @0\n      : @297 [@dyn 122] (gas: 41)\n 16642: u8 [a0 + 30] = 0\n 16645: u8 [a0 + 29] = 0\n 16648: u8 [a0 + 28] = 0\n 16651: u8 [a0 + 27] = 0\n 16654: u8 [a0 + 26] = 0\n 16657: u8 [a0 + 25] = 0\n 16660: u8 [a0 + 24] = 0\n 16663: u8 [a0 + 23] = 0\n 16666: u8 [a0 + 22] = 0\n 16669: u8 [a0 + 21] = 0\n 16672: u8 [a0 + 20] = 0\n 16675: u8 [a0 + 19] = 0\n 16678: u8 [a0 + 18] = 0\n 16681: u8 [a0 + 17] = 0\n 16684: u8 [a0 + 16] = 0\n 16687: u8 [a0 + 15] = 0\n 16690: u8 [a0 + 14] = 0\n 16693: u8 [a0 + 13] = 0\n 16696: u8 [a0 + 12] = 0\n 16699: u8 [a0 + 11] = 0\n 16702: u8 [a0 + 10] = 0\n 16705: u8 [a0 + 9] = 0\n 16708: u8 [a0 + 8] = 0\n 16711: u8 [a0 + 7] = 0\n 16714: u8 [a0 + 6] = 0\n 16717: u8 [a0 + 5] = 0\n 16720: u8 [a0 + 4] = 0\n 16723: u8 [a0 + 3] = 0\n 16726: u8 [a0 + 2] = 0\n 16729: u8 [a0 + 1] = 0\n 16732: u8 [a0 + 0x1f] = s1\n 16735: s1 = 0x100000000\n 16745: a1 = 0xfffffee0\n 16755: a2 = u64 [sp + 0x188]\n 16759: a1 = a2 <u a1\n 16762: a2 = u64 [sp + 0x180]\n 16766: a1 = 0 if a2 != 0\n 16768: a2 = u64 [sp + 0x170]\n 16772: a1 = 0 if a2 != 0\n 16774: u8 [a0 + 0] = 0\n 16776: jump @302 if a1 == 0\n      : @298 (gas: 13)\n 16780: a0 = u64 [sp + 0x20]\n 16783: a1 = u64 [sp + 0x18]\n 16786: a0 = a0 | a1\n 16789: a1 = u64 [sp + 0x30]\n 16792: a2 = u64 [sp + 0x28]\n 16795: a1 = a1 | a2\n 16798: a0 = a0 | a1\n 16801: a0 = a0 >u 0\n 16803: u64 [sp + 0x168] = a0\n 16807: a0 = u64 [sp + 0x178]\n 16811: i32 a0 = a0 + 0x120\n 16815: a1 = 0x20\n 16818: ra = 246, jump @0\n      : @299 [@dyn 123] (gas: 41)\n 16824: u8 [a0 + 30] = 0\n 16827: u8 [a0 + 29] = 0\n 16830: u8 [a0 + 28] = 0\n 16833: u8 [a0 + 27] = 0\n 16836: u8 [a0 + 26] = 0\n 16839: u8 [a0 + 25] = 0\n 16842: u8 [a0 + 24] = 0\n 16845: u8 [a0 + 23] = 0\n 16848: u8 [a0 + 22] = 0\n 16851: u8 [a0 + 21] = 0\n 16854: u8 [a0 + 20] = 0\n 16857: u8 [a0 + 19] = 0\n 16860: u8 [a0 + 18] = 0\n 16863: u8 [a0 + 17] = 0\n 16866: u8 [a0 + 16] = 0\n 16869: u8 [a0 + 15] = 0\n 16872: u8 [a0 + 14] = 0\n 16875: u8 [a0 + 13] = 0\n 16878: u8 [a0 + 12] = 0\n 16881: u8 [a0 + 11] = 0\n 16884: u8 [a0 + 10] = 0\n 16887: u8 [a0 + 9] = 0\n 16890: u8 [a0 + 8] = 0\n 16893: u8 [a0 + 7] = 0\n 16896: u8 [a0 + 6] = 0\n 16899: u8 [a0 + 5] = 0\n 16902: u8 [a0 + 4] = 0\n 16905: u8 [a0 + 3] = 0\n 16908: u8 [a0 + 2] = 0\n 16911: u8 [a0 + 1] = 0\n 16914: u8 [a0 + 0] = 0\n 16916: a1 = s1 + 0xfffffffffffffec0\n 16920: a2 = u64 [sp + 0x188]\n 16924: a1 = a2 <u a1\n 16927: a2 = u64 [sp + 0x180]\n 16931: a1 = 0 if a2 != 0\n 16933: a2 = u64 [sp + 0x170]\n 16937: a1 = 0 if a2 != 0\n 16939: a2 = u64 [sp + 0x168]\n 16943: u8 [a0 + 0x1f] = a2\n 16946: jump @302 if a1 == 0\n      : @300 (gas: 13)\n 16950: a1 = 0xffffffff\n 16960: a2 = u64 [sp]\n 16962: a2 = a2 & 0xffffffffffffffff\n 16965: u64 [sp + 0x188] = a2\n 16969: a2 = u64 [sp + 0x8]\n 16972: a0 = a2 & 0xffffffffffffffff\n 16975: u64 [sp + 0x180] = a0\n 16979: s1 = u64 [sp + 0x10]\n 16982: s1 = s1 & a1\n 16985: a0 = u64 [sp + 0x178]\n 16989: i32 a0 = a0 + 0x140\n 16993: a1 = 0x20\n 16996: ra = 248, jump @0\n      : @301 [@dyn 124] (gas: 70)\n 17002: a1 = reverse s1\n 17004: a2 = u64 [sp + 0x180]\n 17008: a2 = reverse a2\n 17010: a3 = u64 [sp + 0x188]\n 17014: a3 = reverse a3\n 17016: u8 [a0 + 0x18] = a3\n 17019: u8 [a0 + 11] = 0\n 17022: u8 [a0 + 10] = 0\n 17025: u8 [a0 + 9] = 0\n 17028: u8 [a0 + 7] = 0\n 17031: u8 [a0 + 6] = 0\n 17034: u8 [a0 + 5] = 0\n 17037: u8 [a0 + 4] = 0\n 17040: u8 [a0 + 3] = 0\n 17043: u8 [a0 + 2] = 0\n 17046: u8 [a0 + 1] = 0\n 17049: u8 [a0 + 0] = 0\n 17051: a4 = a3 >> 0x38\n 17054: u8 [a0 + 0x1f] = a4\n 17057: a4 = a3 >> 0x30\n 17060: u8 [a0 + 0x1e] = a4\n 17063: a4 = a3 >> 0x28\n 17066: u8 [a0 + 0x1d] = a4\n 17069: a4 = a3 >> 0x20\n 17072: u8 [a0 + 0x1c] = a4\n 17075: a4 = a3 >> 0x18\n 17078: u8 [a0 + 0x1b] = a4\n 17081: a4 = a3 >> 0x10\n 17084: u8 [a0 + 0x1a] = a4\n 17087: a3 = a3 >> 0x8\n 17090: u8 [a0 + 0x19] = a3\n 17093: u8 [a0 + 0x10] = a2\n 17096: a3 = a2 >> 0x38\n 17099: u8 [a0 + 0x17] = a3\n 17102: a3 = a2 >> 0x30\n 17105: u8 [a0 + 0x16] = a3\n 17108: a3 = a2 >> 0x28\n 17111: u8 [a0 + 0x15] = a3\n 17114: a3 = a2 >> 0x20\n 17117: u8 [a0 + 0x14] = a3\n 17120: a3 = a2 >> 0x18\n 17123: u8 [a0 + 0x13] = a3\n 17126: a3 = a2 >> 0x10\n 17129: u8 [a0 + 0x12] = a3\n 17132: a2 = a2 >> 0x8\n 17135: u8 [a0 + 0x11] = a2\n 17138: u8 [a0 + 0x8] = a1\n 17141: a2 = a1 >> 0x38\n 17144: u8 [a0 + 0xf] = a2\n 17147: a2 = a1 >> 0x30\n 17150: u8 [a0 + 0xe] = a2\n 17153: a2 = a1 >> 0x28\n 17156: u8 [a0 + 0xd] = a2\n 17159: a1 = a1 >> 0x20\n 17162: u8 [a0 + 0xc] = a1\n 17165: a0 = u64 [sp + 0x38]\n 17168: a1 = u64 [sp + 0x148]\n 17172: u64 [a0] = a1\n 17174: a1 = u64 [sp + 0x158]\n 17178: u64 [a0 + 0x18] = a1\n 17181: a1 = u64 [sp + 0x150]\n 17185: u64 [a0 + 0x8] = a1\n 17188: a1 = u64 [sp + 0x160]\n 17192: u64 [a0 + 0x10] = a1\n 17195: sp = s0 + 0xfffffffffffffcd0\n 17199: ra = u64 [sp + 0x328]\n 17203: s0 = u64 [sp + 0x320]\n 17207: s1 = u64 [sp + 0x318]\n 17211: sp = sp + 0x330\n 17215: ret\n      : @302 (gas: 1)\n 17217: trap\n      : @303 (gas: 8)\n 17218: a0 = u64 [sp + 0x4f0]\n 17222: a1 = u64 [sp + 0x4f8]\n 17226: a2 = u64 [sp + 0x4e8]\n 17230: a3 = u64 [sp + 0x4e0]\n 17234: a1 = a1 | a2\n 17237: a0 = a0 | a3\n 17240: a0 = a0 | a1\n 17243: jump @311 if a0 != 0\n      : @304 (gas: 2)\n 17247: a0 = i32 [0x200a4]\n 17252: jump @311 if a0 <=u 35\n      : @305 (gas: 45)\n 17257: i32 a0 = sp + 0x500\n 17261: a1 = 0x4\n 17264: ecalli 2 // 'call_data_load'\n 17266: a2 = u64 [sp + 0x500]\n 17270: a0 = u64 [sp + 0x508]\n 17274: a1 = u64 [sp + 0x510]\n 17278: a3 = u64 [sp + 0x518]\n 17282: u64 [sp + 0x378] = a3\n 17286: u64 [sp + 0x370] = a1\n 17290: u64 [sp + 0x368] = a0\n 17294: a0 = sp + 0x380\n 17298: a1 = sp + 0x360\n 17302: u64 [sp + 0x360] = a2\n 17306: ra = 0xfa\n 17310: sp = sp + 0xfffffffffffffcc0\n 17314: u64 [sp + 0x338] = ra\n 17318: u64 [sp + 0x330] = s0\n 17322: u64 [sp + 0x328] = s1\n 17326: s0 = sp + 0x340\n 17330: sp = sp & 0xffffffffffffffe0\n 17333: s1 = a0\n 17335: a0 = u64 [a1]\n 17337: u64 [sp + 0x110] = a0\n 17341: a0 = u64 [a1 + 0x8]\n 17344: u64 [sp + 0x108] = a0\n 17348: a0 = u64 [a1 + 0x10]\n 17351: u64 [sp + 0x118] = a0\n 17355: a0 = u64 [a1 + 0x18]\n 17358: u64 [sp + 0x100] = a0\n 17362: u64 [sp + 760] = 0\n 17366: u64 [sp + 752] = 0\n 17370: u64 [sp + 744] = 0\n 17374: u64 [sp + 736] = 0x1\n 17379: u64 [sp + 792] = 0\n 17383: u64 [sp + 784] = 0\n 17387: u64 [sp + 776] = 0\n 17391: u64 [sp + 768] = 0\n 17395: u32 [sp + 800] = 0x20\n 17400: i32 a1 = sp + 0x2e0\n 17404: i32 a3 = sp + 0x300\n 17408: i32 a4 = sp + 0x320\n 17412: a2 = 0xffffffffffffffff\n 17415: a0 = 0\n 17417: ecalli 7 // 'get_storage'\n 17419: jump @832\n      : @306 [@dyn 125] (gas: 91)\n 17423: a0 = u64 [sp + 0x380]\n 17427: u64 [sp + 0x1b0] = a0\n 17431: a0 = u64 [sp + 0x388]\n 17435: u64 [sp + 0x1a8] = a0\n 17439: a0 = u64 [sp + 0x390]\n 17443: u64 [sp + 0x1a0] = a0\n 17447: a0 = u64 [sp + 0x398]\n 17451: u64 [sp + 0x198] = a0\n 17455: a0 = u64 [sp + 0x3a0]\n 17459: u64 [sp + 0x190] = a0\n 17463: a0 = u64 [sp + 0x3a8]\n 17467: u64 [sp + 0x188] = a0\n 17471: a0 = u64 [sp + 0x3b0]\n 17475: u64 [sp + 0x180] = a0\n 17479: a0 = u64 [sp + 0x3b8]\n 17483: u64 [sp + 0x178] = a0\n 17487: a0 = u64 [sp + 0x3c0]\n 17491: u64 [sp + 0x170] = a0\n 17495: a0 = u64 [sp + 0x3c8]\n 17499: u64 [sp + 0x168] = a0\n 17503: a0 = u64 [sp + 0x3d0]\n 17507: u64 [sp + 0x160] = a0\n 17511: a0 = u64 [sp + 0x3d8]\n 17515: u64 [sp + 0x158] = a0\n 17519: a0 = u64 [sp + 0x3e0]\n 17523: u64 [sp + 0x150] = a0\n 17527: a0 = u64 [sp + 0x3e8]\n 17531: u64 [sp + 0x148] = a0\n 17535: a0 = u64 [sp + 0x3f0]\n 17539: u64 [sp + 0x140] = a0\n 17543: a0 = u64 [sp + 0x3f8]\n 17547: u64 [sp + 0x138] = a0\n 17551: a0 = u64 [sp + 0x400]\n 17555: u64 [sp + 0x130] = a0\n 17559: a0 = u64 [sp + 0x408]\n 17563: u64 [sp + 0x128] = a0\n 17567: a0 = u64 [sp + 0x410]\n 17571: u64 [sp + 0x120] = a0\n 17575: a0 = u64 [sp + 0x418]\n 17579: u64 [sp + 0x118] = a0\n 17583: a0 = u64 [sp + 0x420]\n 17587: u64 [sp + 0x110] = a0\n 17591: a0 = u64 [sp + 0x428]\n 17595: u64 [sp + 0x108] = a0\n 17599: a0 = u64 [sp + 0x430]\n 17603: u64 [sp + 0x100] = a0\n 17607: a0 = u64 [sp + 0x438]\n 17611: u64 [sp + 0xf8] = a0\n 17615: a0 = u64 [sp + 0x440]\n 17619: u64 [sp + 0xf0] = a0\n 17623: a0 = u64 [sp + 0x448]\n 17627: u64 [sp + 0xe8] = a0\n 17631: a0 = u64 [sp + 0x450]\n 17635: u64 [sp + 0xe0] = a0\n 17639: a0 = u64 [sp + 0x458]\n 17643: u64 [sp + 0xd8] = a0\n 17647: a0 = u64 [sp + 0x460]\n 17651: u64 [sp + 0xd0] = a0\n 17655: a0 = u64 [sp + 0x468]\n 17659: u64 [sp + 0xc8] = a0\n 17663: a0 = u64 [sp + 0x470]\n 17667: u64 [sp + 0xc0] = a0\n 17671: a0 = u64 [sp + 0x478]\n 17675: u64 [sp + 0xb8] = a0\n 17679: a0 = u64 [sp + 0x480]\n 17683: u64 [sp + 0xb0] = a0\n 17687: a0 = u64 [sp + 0x488]\n 17691: u64 [sp + 0xa8] = a0\n 17695: a0 = u64 [sp + 0x490]\n 17699: u64 [sp + 0xa0] = a0\n 17703: a0 = u64 [sp + 0x498]\n 17707: u64 [sp + 0x98] = a0\n 17711: a0 = u64 [sp + 0x4a0]\n 17715: u64 [sp + 0x90] = a0\n 17719: a0 = u64 [sp + 0x4a8]\n 17723: u64 [sp + 0x88] = a0\n 17727: a0 = u64 [sp + 0x4b0]\n 17731: u64 [sp + 0x80] = a0\n 17735: a0 = u64 [sp + 0x4b8]\n 17739: u64 [sp + 0x78] = a0\n 17742: a0 = u64 [sp + 0x4c0]\n 17746: u64 [sp + 0x70] = a0\n 17749: a0 = u64 [sp + 0x4c8]\n 17753: u64 [sp + 0x68] = a0\n 17756: a0 = u64 [sp + 0x4d0]\n 17760: u64 [sp + 0x60] = a0\n 17763: a0 = u64 [sp + 0x4d8]\n 17767: u64 [sp + 0x58] = a0\n 17770: a0 = 0x40\n 17773: a1 = 0x20\n 17776: ra = 252, jump @0\n      : @307 [@dyn 126] (gas: 208)\n 17782: a1 = u8 [a0 + 0x1]\n 17785: a2 = u8 [a0]\n 17787: a3 = u8 [a0 + 0x2]\n 17790: a4 = u8 [a0 + 0x3]\n 17793: a1 = a1 << 0x8\n 17796: a1 = a1 | a2\n 17799: a3 = a3 << 0x10\n 17802: a4 = a4 << 0x18\n 17805: a3 = a3 | a4\n 17808: a1 = a1 | a3\n 17811: a2 = u8 [a0 + 0x5]\n 17814: a3 = u8 [a0 + 0x4]\n 17817: a4 = u8 [a0 + 0x6]\n 17820: a5 = u8 [a0 + 0x7]\n 17823: a2 = a2 << 0x8\n 17826: a2 = a2 | a3\n 17829: a4 = a4 << 0x10\n 17832: a5 = a5 << 0x18\n 17835: a4 = a4 | a5\n 17838: a2 = a2 | a4\n 17841: a2 = a2 << 0x20\n 17844: t0 = a2 | a1\n 17847: a2 = u8 [a0 + 0x9]\n 17850: a3 = u8 [a0 + 0x8]\n 17853: a4 = u8 [a0 + 0xa]\n 17856: a5 = u8 [a0 + 0xb]\n 17859: a2 = a2 << 0x8\n 17862: a2 = a2 | a3\n 17865: a4 = a4 << 0x10\n 17868: a5 = a5 << 0x18\n 17871: a4 = a4 | a5\n 17874: a2 = a2 | a4\n 17877: a3 = u8 [a0 + 0xd]\n 17880: a4 = u8 [a0 + 0xc]\n 17883: a5 = u8 [a0 + 0xe]\n 17886: s1 = u8 [a0 + 0xf]\n 17889: a3 = a3 << 0x8\n 17892: a3 = a3 | a4\n 17895: a5 = a5 << 0x10\n 17898: s1 = s1 << 0x18\n 17901: a5 = a5 | s1\n 17904: a3 = a3 | a5\n 17907: a3 = a3 << 0x20\n 17910: a2 = a2 | a3\n 17913: a3 = u8 [a0 + 0x11]\n 17916: a4 = u8 [a0 + 0x10]\n 17919: a5 = u8 [a0 + 0x12]\n 17922: s1 = u8 [a0 + 0x13]\n 17925: a3 = a3 << 0x8\n 17928: a3 = a3 | a4\n 17931: a5 = a5 << 0x10\n 17934: s1 = s1 << 0x18\n 17937: a5 = a5 | s1\n 17940: a3 = a3 | a5\n 17943: a4 = u8 [a0 + 0x15]\n 17946: a5 = u8 [a0 + 0x14]\n 17949: s1 = u8 [a0 + 0x16]\n 17952: a1 = u8 [a0 + 0x17]\n 17955: a4 = a4 << 0x8\n 17958: a4 = a4 | a5\n 17961: s1 = s1 << 0x10\n 17964: a1 = a1 << 0x18\n 17967: a1 = a1 | s1\n 17970: a1 = a1 | a4\n 17973: a1 = a1 << 0x20\n 17976: a3 = a3 | a1\n 17979: a1 = u8 [a0 + 0x19]\n 17982: a4 = u8 [a0 + 0x18]\n 17985: a5 = u8 [a0 + 0x1a]\n 17988: s1 = u8 [a0 + 0x1b]\n 17991: a1 = a1 << 0x8\n 17994: a1 = a1 | a4\n 17997: a5 = a5 << 0x10\n 18000: s1 = s1 << 0x18\n 18003: a5 = a5 | s1\n 18006: a1 = a1 | a5\n 18009: a4 = u8 [a0 + 0x1d]\n 18012: a5 = u8 [a0 + 0x1c]\n 18015: s1 = u8 [a0 + 0x1e]\n 18018: a0 = u8 [a0 + 0x1f]\n 18021: a4 = a4 << 0x8\n 18024: a4 = a4 | a5\n 18027: s1 = s1 << 0x10\n 18030: a0 = a0 << 0x18\n 18033: a0 = a0 | s1\n 18036: a0 = a0 | a4\n 18039: a0 = a0 << 0x20\n 18042: a0 = a0 | a1\n 18045: t1 = reverse a0\n 18047: u64 [sp + 0x48] = t1\n 18050: a1 = reverse a3\n 18052: u64 [sp + 0x50] = a1\n 18055: s1 = reverse a2\n 18057: a2 = reverse t0\n 18059: u64 [sp + 0x1b8] = a2\n 18063: a0 = sp + 0x1c0\n 18067: u64 [sp + 0x30] = a0\n 18070: a0 = sp + 0x1e0\n 18074: u64 [sp + 0x28] = a0\n 18077: a0 = sp + 0x200\n 18081: u64 [sp + 0x20] = a0\n 18084: a0 = sp + 0x220\n 18088: u64 [sp + 0x18] = a0\n 18091: a0 = sp + 0x240\n 18095: u64 [sp + 0x10] = a0\n 18098: a0 = sp + 0x260\n 18102: u64 [sp + 0x8] = a0\n 18105: a0 = sp + 0x280\n 18109: u64 [sp] = a0\n 18111: a0 = u64 [sp + 0x58]\n 18114: u64 [sp + 0x1d8] = a0\n 18118: a0 = u64 [sp + 0x60]\n 18121: u64 [sp + 0x1d0] = a0\n 18125: a0 = u64 [sp + 0x68]\n 18128: u64 [sp + 0x1c8] = a0\n 18132: a0 = u64 [sp + 0x70]\n 18135: u64 [sp + 0x1c0] = a0\n 18139: a0 = u64 [sp + 0x78]\n 18142: u64 [sp + 0x1f8] = a0\n 18146: a0 = u64 [sp + 0x80]\n 18150: u64 [sp + 0x1f0] = a0\n 18154: a0 = u64 [sp + 0x88]\n 18158: u64 [sp + 0x1e8] = a0\n 18162: a0 = u64 [sp + 0x90]\n 18166: u64 [sp + 0x1e0] = a0\n 18170: a0 = u64 [sp + 0x98]\n 18174: u64 [sp + 0x218] = a0\n 18178: a0 = u64 [sp + 0xa0]\n 18182: u64 [sp + 0x210] = a0\n 18186: a0 = u64 [sp + 0xa8]\n 18190: u64 [sp + 0x208] = a0\n 18194: a0 = u64 [sp + 0xb0]\n 18198: u64 [sp + 0x200] = a0\n 18202: a0 = u64 [sp + 0xb8]\n 18206: u64 [sp + 0x238] = a0\n 18210: a0 = u64 [sp + 0xc0]\n 18214: u64 [sp + 0x230] = a0\n 18218: a0 = u64 [sp + 0xc8]\n 18222: u64 [sp + 0x228] = a0\n 18226: a0 = u64 [sp + 0xd0]\n 18230: u64 [sp + 0x220] = a0\n 18234: a0 = u64 [sp + 0xd8]\n 18238: u64 [sp + 0x258] = a0\n 18242: a0 = u64 [sp + 0xe0]\n 18246: u64 [sp + 0x250] = a0\n 18250: a0 = u64 [sp + 0xe8]\n 18254: u64 [sp + 0x248] = a0\n 18258: a0 = u64 [sp + 0xf0]\n 18262: u64 [sp + 0x240] = a0\n 18266: a0 = u64 [sp + 0xf8]\n 18270: u64 [sp + 0x278] = a0\n 18274: a0 = u64 [sp + 0x100]\n 18278: u64 [sp + 0x270] = a0\n 18282: a0 = u64 [sp + 0x108]\n 18286: u64 [sp + 0x268] = a0\n 18290: a0 = u64 [sp + 0x110]\n 18294: u64 [sp + 0x260] = a0\n 18298: a0 = u64 [sp + 0x118]\n 18302: u64 [sp + 0x298] = a0\n 18306: a0 = u64 [sp + 0x120]\n 18310: u64 [sp + 0x290] = a0\n 18314: a0 = u64 [sp + 0x128]\n 18318: u64 [sp + 0x288] = a0\n 18322: a0 = u64 [sp + 0x130]\n 18326: u64 [sp + 0x280] = a0\n 18330: a0 = u64 [sp + 0x138]\n 18334: u64 [sp + 0x2b8] = a0\n 18338: a0 = u64 [sp + 0x140]\n 18342: u64 [sp + 0x2b0] = a0\n 18346: a0 = u64 [sp + 0x148]\n 18350: u64 [sp + 0x2a8] = a0\n 18354: a0 = u64 [sp + 0x150]\n 18358: u64 [sp + 0x2a0] = a0\n 18362: a0 = u64 [sp + 0x158]\n 18366: u64 [sp + 0x2d8] = a0\n 18370: a0 = u64 [sp + 0x160]\n 18374: u64 [sp + 0x2d0] = a0\n 18378: a0 = u64 [sp + 0x168]\n 18382: u64 [sp + 0x2c8] = a0\n 18386: a0 = u64 [sp + 0x170]\n 18390: u64 [sp + 0x2c0] = a0\n 18394: a0 = u64 [sp + 0x178]\n 18398: u64 [sp + 0x2f8] = a0\n 18402: a0 = u64 [sp + 0x180]\n 18406: u64 [sp + 0x2f0] = a0\n 18410: a0 = u64 [sp + 0x188]\n 18414: u64 [sp + 0x2e8] = a0\n 18418: a0 = u64 [sp + 0x190]\n 18422: u64 [sp + 0x2e0] = a0\n 18426: a0 = u64 [sp + 0x198]\n 18430: u64 [sp + 0x318] = a0\n 18434: a0 = u64 [sp + 0x1a0]\n 18438: u64 [sp + 0x310] = a0\n 18442: a0 = u64 [sp + 0x1a8]\n 18446: u64 [sp + 0x308] = a0\n 18450: a0 = u64 [sp + 0x1b0]\n 18454: u64 [sp + 0x300] = a0\n 18458: u64 [sp + 0x338] = a2\n 18462: u64 [sp + 0x330] = s1\n 18466: u64 [sp + 0x328] = a1\n 18470: a0 = sp + 0x340\n 18474: a1 = sp + 0x320\n 18478: a2 = sp + 0x300\n 18482: a3 = sp + 0x2e0\n 18486: a4 = sp + 0x2c0\n 18490: a5 = sp + 0x2a0\n 18494: u64 [sp + 0x320] = t1\n 18498: ra = 254, jump @275\n      : @308 [@dyn 127] (gas: 11)\n 18504: a4 = u64 [sp + 0x50]\n 18507: a2 = u64 [sp + 0x48]\n 18510: a0 = u64 [sp + 0x1b8]\n 18514: a0 = a0 | a4\n 18517: a1 = a2 | s1\n 18520: a1 = a1 | a0\n 18523: a1 = a1 >> 0x20\n 18526: a0 = a0 | s1\n 18529: a0 = a0 << 0x20\n 18532: a0 = a0 | a1\n 18535: jump @310 if a0 != 0\n      : @309 (gas: 29)\n 18538: a0 = u64 [sp + 0x348]\n 18542: a1 = u64 [sp + 0x358]\n 18546: u64 [sp + 0x1b0] = a1\n 18550: t1 = u64 [sp + 0x340]\n 18554: a1 = u64 [sp + 0x350]\n 18558: t2 = a0 ^ a4\n 18561: a5 = a0 <u a4\n 18564: ra = t1 <u a2\n 18567: a5 = ra if t2 == 0\n 18570: a3 = a1 - s1\n 18573: t2 = a3 - a5\n 18576: t0 = a3 <u a5\n 18579: a3 = a1 <u s1\n 18582: a1 = u64 [sp + 0x1b8]\n 18586: a5 = u64 [sp + 0x1b0]\n 18590: a5 = a5 - a1\n 18593: a5 = a5 - a3\n 18596: a5 = a5 - t0\n 18599: a0 = a0 - a4\n 18602: a0 = a0 - ra\n 18605: a3 = t1 - a2\n 18608: a0 = a0 | a5\n 18611: a1 = a3 | t2\n 18614: a1 = a1 | a0\n 18617: a0 = a0 | t2\n 18620: a1 = a1 >> 0x20\n 18623: a0 = a0 << 0x20\n 18626: a0 = a0 | a1\n 18629: jump @313 if a0 == 0\n      : @310 (gas: 1)\n 18632: trap\n      : @311 (gas: 3)\n 18633: a0 = 0\n 18635: a1 = 0\n 18637: ra = 256, jump @0\n      : @312 [@dyn 128] (gas: 5)\n 18643: i32 a1 = a0 + 0\n 18645: a0 = 0x1\n 18648: a2 = 0\n 18650: ecalli 11 // 'seal_return'\n 18652: fallthrough\n      : @313 (gas: 4)\n 18653: i32 a0 = a2 + 0\n 18655: i32 s1 = a3 + 0\n 18657: a1 = s1\n 18659: ra = 258, jump @0\n      : @314 [@dyn 129] (gas: 6)\n 18665: i32 a1 = a0 + 0\n 18667: a0 = 0\n 18669: a2 = s1\n 18671: ra = 0x104\n 18675: ecalli 11 // 'seal_return'\n 18677: fallthrough\n      : @315 [@dyn 130] (gas: 13)\n 18678: sp = sp + 0xffffffffffffff60\n 18682: u64 [sp + 0x98] = ra\n 18686: u64 [sp + 0x90] = s0\n 18690: u64 [sp + 0x88] = s1\n 18694: s0 = sp + 0xa0\n 18698: sp = sp & 0xffffffffffffffe0\n 18701: u64 [sp + 56] = 0\n 18704: u64 [sp + 48] = 0\n 18707: u64 [sp + 40] = 0\n 18710: u64 [sp + 32] = 0\n 18713: i32 a0 = sp + 0x20\n 18716: ecalli 14 // 'value_transferred'\n 18718: fallthrough\n      : @316 (gas: 8)\n 18719: a0 = u64 [sp + 0x30]\n 18722: a1 = u64 [sp + 0x38]\n 18725: a2 = u64 [sp + 0x28]\n 18728: a3 = u64 [sp + 0x20]\n 18731: a1 = a1 | a2\n 18734: a0 = a0 | a3\n 18737: a0 = a0 | a1\n 18740: jump @321 if a0 != 0\n      : @317 (gas: 2)\n 18744: a0 = i32 [0x200a4]\n 18749: jump @321 if a0 <=u 3\n      : @318 (gas: 26)\n 18754: u64 [sp + 88] = 0\n 18757: u64 [sp + 80] = 0\n 18760: u64 [sp + 72] = 0\n 18763: u64 [sp + 64] = 0x1\n 18767: u64 [sp + 120] = 0\n 18770: u64 [sp + 112] = 0\n 18773: u64 [sp + 104] = 0\n 18776: u64 [sp + 96] = 0\n 18779: u32 [sp + 128] = 0x20\n 18784: i32 a1 = sp + 0x40\n 18787: i32 a3 = sp + 0x60\n 18790: i32 a4 = sp + 0x80\n 18794: a2 = 0xffffffffffffffff\n 18797: a0 = 0\n 18799: ecalli 7 // 'get_storage'\n 18801: a0 = u64 [sp + 0x78]\n 18804: u64 [sp] = a0\n 18806: a0 = u64 [sp + 0x70]\n 18809: u64 [sp + 0x8] = a0\n 18812: a0 = u64 [sp + 0x68]\n 18815: u64 [sp + 0x10] = a0\n 18818: a0 = u64 [sp + 0x60]\n 18821: u64 [sp + 0x18] = a0\n 18824: a0 = 0x40\n 18827: a1 = 0x20\n 18830: ra = 262, jump @0\n      : @319 [@dyn 131] (gas: 100)\n 18836: a1 = u8 [a0 + 0x11]\n 18839: a2 = u8 [a0 + 0x10]\n 18842: a3 = u8 [a0 + 0x12]\n 18845: a4 = u8 [a0 + 0x13]\n 18848: a1 = a1 << 0x8\n 18851: a1 = a1 | a2\n 18854: a3 = a3 << 0x10\n 18857: a4 = a4 << 0x18\n 18860: a3 = a3 | a4\n 18863: a1 = a1 | a3\n 18866: a2 = u8 [a0 + 0x15]\n 18869: a3 = u8 [a0 + 0x14]\n 18872: a4 = u8 [a0 + 0x16]\n 18875: a5 = u8 [a0 + 0x17]\n 18878: a2 = a2 << 0x8\n 18881: a2 = a2 | a3\n 18884: a4 = a4 << 0x10\n 18887: a5 = a5 << 0x18\n 18890: a4 = a4 | a5\n 18893: a2 = a2 | a4\n 18896: a2 = a2 << 0x20\n 18899: t0 = a2 | a1\n 18902: a2 = u8 [a0 + 0x1]\n 18905: a3 = u8 [a0]\n 18907: a4 = u8 [a0 + 0x2]\n 18910: a5 = u8 [a0 + 0x3]\n 18913: a2 = a2 << 0x8\n 18916: a2 = a2 | a3\n 18919: a4 = a4 << 0x10\n 18922: a5 = a5 << 0x18\n 18925: a4 = a4 | a5\n 18928: a2 = a2 | a4\n 18931: a3 = u8 [a0 + 0x5]\n 18934: a4 = u8 [a0 + 0x4]\n 18937: a5 = u8 [a0 + 0x6]\n 18940: s1 = u8 [a0 + 0x7]\n 18943: a3 = a3 << 0x8\n 18946: a3 = a3 | a4\n 18949: a5 = a5 << 0x10\n 18952: s1 = s1 << 0x18\n 18955: a5 = a5 | s1\n 18958: a3 = a3 | a5\n 18961: a3 = a3 << 0x20\n 18964: a2 = a2 | a3\n 18967: a3 = u8 [a0 + 0x19]\n 18970: a4 = u8 [a0 + 0x18]\n 18973: a5 = u8 [a0 + 0x1a]\n 18976: s1 = u8 [a0 + 0x1b]\n 18979: a3 = a3 << 0x8\n 18982: a3 = a3 | a4\n 18985: a5 = a5 << 0x10\n 18988: s1 = s1 << 0x18\n 18991: a5 = a5 | s1\n 18994: a3 = a3 | a5\n 18997: a4 = u8 [a0 + 0x1d]\n 19000: a5 = u8 [a0 + 0x1c]\n 19003: s1 = u8 [a0 + 0x1e]\n 19006: a1 = u8 [a0 + 0x1f]\n 19009: a4 = a4 << 0x8\n 19012: a4 = a4 | a5\n 19015: s1 = s1 << 0x10\n 19018: a1 = a1 << 0x18\n 19021: a1 = a1 | s1\n 19024: a1 = a1 | a4\n 19027: a1 = a1 << 0x20\n 19030: a3 = a3 | a1\n 19033: a1 = u8 [a0 + 0x9]\n 19036: a4 = u8 [a0 + 0x8]\n 19039: a5 = u8 [a0 + 0xa]\n 19042: s1 = u8 [a0 + 0xb]\n 19045: a1 = a1 << 0x8\n 19048: a1 = a1 | a4\n 19051: a5 = a5 << 0x10\n 19054: s1 = s1 << 0x18\n 19057: a5 = a5 | s1\n 19060: a1 = a1 | a5\n 19063: a4 = u8 [a0 + 0xd]\n 19066: a5 = u8 [a0 + 0xc]\n 19069: s1 = u8 [a0 + 0xe]\n 19072: a0 = u8 [a0 + 0xf]\n 19075: a4 = a4 << 0x8\n 19078: a4 = a4 | a5\n 19081: s1 = s1 << 0x10\n 19084: a0 = a0 << 0x18\n 19087: a0 = a0 | s1\n 19090: a0 = a0 | a4\n 19093: a0 = a0 << 0x20\n 19096: a0 = a0 | a1\n 19099: a1 = reverse a0\n 19101: a0 = reverse a3\n 19103: a2 = reverse a2\n 19105: a3 = reverse t0\n 19107: a2 = a2 | a3\n 19110: a3 = a0 | a1\n 19113: a3 = a3 | a2\n 19116: a3 = a3 >> 0x20\n 19119: a1 = a1 | a2\n 19122: a1 = a1 << 0x20\n 19125: a1 = a1 | a3\n 19128: jump @323 if a1 == 0\n      : @320 (gas: 1)\n 19131: trap\n      : @321 (gas: 3)\n 19132: a0 = 0\n 19134: a1 = 0\n 19136: ra = 264, jump @0\n      : @322 [@dyn 132] (gas: 5)\n 19142: i32 a1 = a0 + 0\n 19144: a0 = 0x1\n 19147: a2 = 0\n 19149: ecalli 11 // 'seal_return'\n 19151: fallthrough\n      : @323 (gas: 4)\n 19152: i32 s1 = a0 + 0\n 19154: a1 = 0x20\n 19157: a0 = s1\n 19159: ra = 266, jump @0\n      : @324 [@dyn 133] (gas: 71)\n 19165: a1 = u64 [sp]\n 19167: a1 = reverse a1\n 19169: a2 = u64 [sp + 0x8]\n 19172: a2 = reverse a2\n 19174: a3 = u64 [sp + 0x10]\n 19177: a3 = reverse a3\n 19179: a4 = u64 [sp + 0x18]\n 19182: a4 = reverse a4\n 19184: a5 = a4 >> 0x38\n 19187: u8 [a0 + 0x1f] = a5\n 19190: a5 = a4 >> 0x30\n 19193: u8 [a0 + 0x1e] = a5\n 19196: a5 = a4 >> 0x28\n 19199: u8 [a0 + 0x1d] = a5\n 19202: a5 = a4 >> 0x20\n 19205: u8 [a0 + 0x1c] = a5\n 19208: a5 = a4 >> 0x18\n 19211: u8 [a0 + 0x1b] = a5\n 19214: a5 = a4 >> 0x10\n 19217: u8 [a0 + 0x1a] = a5\n 19220: a5 = a4 >> 0x8\n 19223: u8 [a0 + 0x19] = a5\n 19226: u8 [a0 + 0x18] = a4\n 19229: u8 [a0 + 0x10] = a3\n 19232: a4 = a3 >> 0x38\n 19235: u8 [a0 + 0x17] = a4\n 19238: a4 = a3 >> 0x30\n 19241: u8 [a0 + 0x16] = a4\n 19244: a4 = a3 >> 0x28\n 19247: u8 [a0 + 0x15] = a4\n 19250: a4 = a3 >> 0x20\n 19253: u8 [a0 + 0x14] = a4\n 19256: a4 = a3 >> 0x18\n 19259: u8 [a0 + 0x13] = a4\n 19262: a4 = a3 >> 0x10\n 19265: u8 [a0 + 0x12] = a4\n 19268: a3 = a3 >> 0x8\n 19271: u8 [a0 + 0x11] = a3\n 19274: u8 [a0 + 0x8] = a2\n 19277: a3 = a2 >> 0x38\n 19280: u8 [a0 + 0xf] = a3\n 19283: a3 = a2 >> 0x30\n 19286: u8 [a0 + 0xe] = a3\n 19289: a3 = a2 >> 0x28\n 19292: u8 [a0 + 0xd] = a3\n 19295: a3 = a2 >> 0x20\n 19298: u8 [a0 + 0xc] = a3\n 19301: a3 = a2 >> 0x18\n 19304: u8 [a0 + 0xb] = a3\n 19307: a3 = a2 >> 0x10\n 19310: u8 [a0 + 0xa] = a3\n 19313: a2 = a2 >> 0x8\n 19316: u8 [a0 + 0x9] = a2\n 19319: u8 [a0] = a1\n 19321: a2 = a1 >> 0x38\n 19324: u8 [a0 + 0x7] = a2\n 19327: a2 = a1 >> 0x30\n 19330: u8 [a0 + 0x6] = a2\n 19333: a2 = a1 >> 0x28\n 19336: u8 [a0 + 0x5] = a2\n 19339: a2 = a1 >> 0x20\n 19342: u8 [a0 + 0x4] = a2\n 19345: a2 = a1 >> 0x18\n 19348: u8 [a0 + 0x3] = a2\n 19351: a2 = a1 >> 0x10\n 19354: u8 [a0 + 0x2] = a2\n 19357: a1 = a1 >> 0x8\n 19360: u8 [a0 + 0x1] = a1\n 19363: a1 = 0x20\n 19366: a0 = s1\n 19368: ra = 268, jump @0\n      : @325 [@dyn 134] (gas: 6)\n 19374: i32 a1 = a0 + 0\n 19376: a2 = 0x20\n 19379: a0 = 0\n 19381: ra = 0x10e\n 19385: ecalli 11 // 'seal_return'\n 19387: fallthrough\n      : @326 [@dyn 135] (gas: 9)\n 19388: a2 = u64 [a1 + 0x18]\n 19391: a3 = u64 [a1 + 0x10]\n 19394: a4 = u64 [a1 + 0x8]\n 19397: a1 = u64 [a1]\n 19399: u64 [a0 + 0x18] = a2\n 19402: u64 [a0 + 0x10] = a3\n 19405: u64 [a0 + 0x8] = a4\n 19408: u64 [a0] = a1\n 19410: ret\n      : @327 (gas: 8)\n 19412: a0 = u64 [sp + 0x10]\n 19415: a1 = u64 [sp + 0x18]\n 19418: a2 = u64 [sp + 0x8]\n 19421: a3 = u64 [sp]\n 19423: a1 = a1 | a2\n 19426: a0 = a0 | a3\n 19429: a0 = a0 | a1\n 19432: jump @332 if a0 != 0\n      : @328 (gas: 2)\n 19436: a0 = i32 [0x200a4]\n 19441: jump @332 if a0 <=u 3\n      : @329 (gas: 3)\n 19446: a0 = 0x40\n 19449: a1 = 0x20\n 19452: ra = 272, jump @0\n      : @330 [@dyn 136] (gas: 100)\n 19458: a1 = u8 [a0 + 0x11]\n 19461: a2 = u8 [a0 + 0x10]\n 19464: a3 = u8 [a0 + 0x12]\n 19467: a4 = u8 [a0 + 0x13]\n 19470: a1 = a1 << 0x8\n 19473: a1 = a1 | a2\n 19476: a3 = a3 << 0x10\n 19479: a4 = a4 << 0x18\n 19482: a3 = a3 | a4\n 19485: a1 = a1 | a3\n 19488: a2 = u8 [a0 + 0x15]\n 19491: a3 = u8 [a0 + 0x14]\n 19494: a4 = u8 [a0 + 0x16]\n 19497: a5 = u8 [a0 + 0x17]\n 19500: a2 = a2 << 0x8\n 19503: a2 = a2 | a3\n 19506: a4 = a4 << 0x10\n 19509: a5 = a5 << 0x18\n 19512: a4 = a4 | a5\n 19515: a2 = a2 | a4\n 19518: a2 = a2 << 0x20\n 19521: t0 = a2 | a1\n 19524: a2 = u8 [a0 + 0x1]\n 19527: a3 = u8 [a0]\n 19529: a4 = u8 [a0 + 0x2]\n 19532: a5 = u8 [a0 + 0x3]\n 19535: a2 = a2 << 0x8\n 19538: a2 = a2 | a3\n 19541: a4 = a4 << 0x10\n 19544: a5 = a5 << 0x18\n 19547: a4 = a4 | a5\n 19550: a2 = a2 | a4\n 19553: a3 = u8 [a0 + 0x5]\n 19556: a4 = u8 [a0 + 0x4]\n 19559: a5 = u8 [a0 + 0x6]\n 19562: s1 = u8 [a0 + 0x7]\n 19565: a3 = a3 << 0x8\n 19568: a3 = a3 | a4\n 19571: a5 = a5 << 0x10\n 19574: s1 = s1 << 0x18\n 19577: a5 = a5 | s1\n 19580: a3 = a3 | a5\n 19583: a3 = a3 << 0x20\n 19586: a2 = a2 | a3\n 19589: a3 = u8 [a0 + 0x19]\n 19592: a4 = u8 [a0 + 0x18]\n 19595: a5 = u8 [a0 + 0x1a]\n 19598: s1 = u8 [a0 + 0x1b]\n 19601: a3 = a3 << 0x8\n 19604: a3 = a3 | a4\n 19607: a5 = a5 << 0x10\n 19610: s1 = s1 << 0x18\n 19613: a5 = a5 | s1\n 19616: a3 = a3 | a5\n 19619: a4 = u8 [a0 + 0x1d]\n 19622: a5 = u8 [a0 + 0x1c]\n 19625: s1 = u8 [a0 + 0x1e]\n 19628: a1 = u8 [a0 + 0x1f]\n 19631: a4 = a4 << 0x8\n 19634: a4 = a4 | a5\n 19637: s1 = s1 << 0x10\n 19640: a1 = a1 << 0x18\n 19643: a1 = a1 | s1\n 19646: a1 = a1 | a4\n 19649: a1 = a1 << 0x20\n 19652: a3 = a3 | a1\n 19655: a1 = u8 [a0 + 0x9]\n 19658: a4 = u8 [a0 + 0x8]\n 19661: a5 = u8 [a0 + 0xa]\n 19664: s1 = u8 [a0 + 0xb]\n 19667: a1 = a1 << 0x8\n 19670: a1 = a1 | a4\n 19673: a5 = a5 << 0x10\n 19676: s1 = s1 << 0x18\n 19679: a5 = a5 | s1\n 19682: a1 = a1 | a5\n 19685: a4 = u8 [a0 + 0xd]\n 19688: a5 = u8 [a0 + 0xc]\n 19691: s1 = u8 [a0 + 0xe]\n 19694: a0 = u8 [a0 + 0xf]\n 19697: a4 = a4 << 0x8\n 19700: a4 = a4 | a5\n 19703: s1 = s1 << 0x10\n 19706: a0 = a0 << 0x18\n 19709: a0 = a0 | s1\n 19712: a0 = a0 | a4\n 19715: a0 = a0 << 0x20\n 19718: a0 = a0 | a1\n 19721: a0 = reverse a0\n 19723: s1 = reverse a3\n 19725: a1 = reverse a2\n 19727: a2 = reverse t0\n 19729: a1 = a1 | a2\n 19732: a2 = s1 | a0\n 19735: a2 = a2 | a1\n 19738: a2 = a2 >> 0x20\n 19741: a0 = a0 | a1\n 19744: a0 = a0 << 0x20\n 19747: a0 = a0 | a2\n 19750: jump @334 if a0 == 0\n      : @331 (gas: 1)\n 19753: trap\n      : @332 (gas: 3)\n 19754: a0 = 0\n 19756: a1 = 0\n 19758: ra = 274, jump @0\n      : @333 [@dyn 137] (gas: 5)\n 19764: i32 a1 = a0 + 0\n 19766: a0 = 0x1\n 19769: a2 = 0\n 19771: ecalli 11 // 'seal_return'\n 19773: fallthrough\n      : @334 (gas: 4)\n 19774: i32 s1 = s1 + 0\n 19776: a1 = 0x20\n 19779: a0 = s1\n 19781: ra = 276, jump @0\n      : @335 [@dyn 138] (gas: 35)\n 19787: u8 [a0 + 31] = 0x45\n 19791: u8 [a0 + 30] = 0x1b\n 19795: u8 [a0 + 29] = 0xf\n 19799: u8 [a0 + 28] = 0x19\n 19803: u8 [a0 + 27] = 0\n 19806: u8 [a0 + 26] = 0\n 19809: u8 [a0 + 25] = 0\n 19812: u8 [a0 + 24] = 0\n 19815: u8 [a0 + 23] = 0\n 19818: u8 [a0 + 22] = 0\n 19821: u8 [a0 + 21] = 0\n 19824: u8 [a0 + 20] = 0\n 19827: u8 [a0 + 19] = 0\n 19830: u8 [a0 + 18] = 0\n 19833: u8 [a0 + 17] = 0\n 19836: u8 [a0 + 16] = 0\n 19839: u8 [a0 + 15] = 0\n 19842: u8 [a0 + 14] = 0\n 19845: u8 [a0 + 13] = 0\n 19848: u8 [a0 + 12] = 0\n 19851: u8 [a0 + 11] = 0\n 19854: u8 [a0 + 10] = 0\n 19857: u8 [a0 + 9] = 0\n 19860: u8 [a0 + 8] = 0\n 19863: u8 [a0 + 7] = 0\n 19866: u8 [a0 + 6] = 0\n 19869: u8 [a0 + 5] = 0\n 19872: u8 [a0 + 4] = 0\n 19875: u8 [a0 + 3] = 0\n 19878: u8 [a0 + 2] = 0\n 19881: u8 [a0 + 1] = 0\n 19884: u8 [a0 + 0] = 0\n 19886: a1 = 0x20\n 19889: a0 = s1\n 19891: ra = 278, jump @0\n      : @336 [@dyn 139] (gas: 6)\n 19897: i32 a1 = a0 + 0\n 19899: a2 = 0x20\n 19902: a0 = 0\n 19904: ra = 0x118\n 19908: ecalli 11 // 'seal_return'\n 19910: fallthrough\n      : @337 [@dyn 140] (gas: 42)\n 19911: sp = sp + 0xfffffffffffffea0\n 19915: u64 [sp + 0x158] = ra\n 19919: u64 [sp + 0x150] = s0\n 19923: u64 [sp + 0x148] = s1\n 19927: s0 = sp + 0x160\n 19931: sp = sp & 0xffffffffffffffe0\n 19934: s1 = u64 [a2 + 0x8]\n 19937: t2 = u64 [a1 + 0x8]\n 19940: a5 = u64 [a2]\n 19942: ra = u64 [a1]\n 19944: t1 = u64 [a2 + 0x10]\n 19947: a4 = s1 ^ t2\n 19950: a3 = s1 <u t2\n 19953: t0 = a5 <u ra\n 19956: a3 = t0 if a4 == 0\n 19959: u64 [sp + 0x60] = s1\n 19962: a4 = s1 - t2\n 19965: a4 = a4 - t0\n 19968: u64 [sp + 0x58] = a5\n 19971: a5 = a5 - ra\n 19974: a5 = a5 <u 0x40\n 19977: a5 = a5 ^ 0x1\n 19980: t0 = u64 [a1 + 0x10]\n 19983: s1 = a4 >u 0\n 19985: a5 = s1 if a4 != 0\n 19988: a4 = u64 [a2 + 0x18]\n 19991: s1 = u64 [a1 + 0x18]\n 19994: a1 = t1 - t0\n 19997: a2 = a1 - a3\n 20000: a1 = a1 <u a3\n 20003: u64 [sp + 0x50] = t1\n 20006: a3 = t1 <u t0\n 20009: u64 [sp + 0x48] = a4\n 20012: a4 = a4 - s1\n 20015: a4 = a4 - a3\n 20018: a4 = a4 - a1\n 20021: a1 = a4 >s 0\n 20023: a3 = a2 >u 0\n 20025: a3 = a1 if a4 != 0\n 20028: a2 = a2 | a4\n 20031: a5 = a3 if a2 != 0\n 20034: jump @348 if a5 == 0\n      : @338 (gas: 12)\n 20038: u64 [sp + 0x40] = a0\n 20041: a0 = ra | t0\n 20044: a1 = t2 | s1\n 20047: a0 = a0 | a1\n 20050: a0 = a0 >> 0x20\n 20053: a1 = a1 | t0\n 20056: a1 = a1 << 0x20\n 20059: a0 = a0 | a1\n 20062: u64 [sp + 0x78] = t2\n 20065: u64 [sp + 0x70] = t0\n 20068: u64 [sp + 0x68] = s1\n 20071: jump @347 if a0 != 0\n      : @339 (gas: 6)\n 20075: i32 a1 = ra + 0\n 20077: i32 a0 = sp + 0x120\n 20081: u64 [sp + 0x30] = a1\n 20084: s1 = ra\n 20086: ecalli 2 // 'call_data_load'\n 20088: fallthrough\n      : @340 (gas: 10)\n 20089: a0 = u64 [sp + 0x70]\n 20092: a1 = u64 [sp + 0x68]\n 20095: a0 = a0 | a1\n 20098: a1 = 0xffffffe0\n 20108: u64 [sp + 0x38] = s1\n 20111: a1 = s1 <u a1\n 20114: a2 = u64 [sp + 0x78]\n 20117: a1 = 0 if a2 != 0\n 20119: a1 = 0 if a0 != 0\n 20121: jump @347 if a1 == 0\n      : @341 (gas: 13)\n 20125: a0 = u64 [sp + 0x138]\n 20129: u64 [sp + 0x10] = a0\n 20132: a0 = u64 [sp + 0x130]\n 20136: u64 [sp + 0x18] = a0\n 20139: a0 = u64 [sp + 0x128]\n 20143: u64 [sp + 0x20] = a0\n 20146: a0 = u64 [sp + 0x120]\n 20150: u64 [sp + 0x28] = a0\n 20153: a0 = u64 [sp + 0x30]\n 20156: i32 a1 = a0 + 0x20\n 20159: i32 a0 = sp + 0x100\n 20163: ecalli 2 // 'call_data_load'\n 20165: fallthrough\n      : @342 (gas: 7)\n 20166: a0 = u64 [sp + 0x118]\n 20170: a1 = u64 [sp + 0x110]\n 20174: a2 = u64 [sp + 0x108]\n 20178: a3 = a1 | a0\n 20181: a4 = a2 <u 0x1\n 20184: a4 = 0 if a3 != 0\n 20186: jump @348 if a4 == 0\n      : @343 (gas: 43)\n 20190: a3 = u64 [sp + 0x100]\n 20194: a4 = u64 [sp + 0x38]\n 20197: t0 = a3 + a4\n 20200: a3 = t0 <u a3\n 20203: a4 = u64 [sp + 0x78]\n 20206: a4 = a4 + a2\n 20209: t1 = a4 + a3\n 20212: a4 = t1 ^ a2\n 20215: s1 = t1 <u a2\n 20218: s1 = a3 if a4 == 0\n 20221: a2 = u64 [sp + 0x70]\n 20224: a2 = a2 + a1\n 20227: s1 = s1 + a2\n 20230: a3 = s1 <u a2\n 20233: a1 = a2 <u a1\n 20236: a2 = u64 [sp + 0x68]\n 20239: a0 = a0 + a2\n 20242: a0 = a0 + a1\n 20245: ra = a0 + a3\n 20248: a0 = t0 + 0x1f\n 20251: a1 = a0 <u t0\n 20254: a2 = t1 + a1\n 20257: a3 = a2 <u t1\n 20260: a3 = a1 if a1 == 0\n 20263: t2 = s1 + a3\n 20266: a1 = t2 <u s1\n 20269: a1 = a1 + ra\n 20272: a5 = u64 [sp + 0x60]\n 20275: a4 = a2 ^ a5\n 20278: a2 = a2 <u a5\n 20281: a5 = u64 [sp + 0x58]\n 20284: a0 = a0 <u a5\n 20287: a0 = a2 if a4 != 0\n 20290: a5 = u64 [sp + 0x50]\n 20293: a2 = t2 <u a5\n 20296: a4 = u64 [sp + 0x48]\n 20299: a3 = a1 ^ a4\n 20302: a1 = a1 <s a4\n 20305: a1 = a2 if a3 == 0\n 20308: a2 = t2 ^ a5\n 20311: a2 = a2 | a3\n 20314: a0 = a1 if a2 != 0\n 20317: jump @349 if a0 == 0\n      : @344 (gas: 11)\n 20321: a0 = t0 | s1\n 20324: u64 [sp + 0x78] = t1\n 20327: u64 [sp + 0x68] = ra\n 20330: a1 = t1 | ra\n 20333: a0 = a0 | a1\n 20336: a0 = a0 >> 0x20\n 20339: u64 [sp + 0x70] = s1\n 20342: a1 = a1 | s1\n 20345: a1 = a1 << 0x20\n 20348: a0 = a0 | a1\n 20351: jump @347 if a0 != 0\n      : @345 (gas: 40)\n 20355: i32 a1 = t0 + 0\n 20357: i32 a0 = sp + 0x120\n 20361: s1 = t0\n 20363: ecalli 2 // 'call_data_load'\n 20365: t0 = u64 [sp + 0x120]\n 20369: t1 = u64 [sp + 0x128]\n 20373: a2 = u64 [sp + 0x130]\n 20377: a3 = u64 [sp + 0x138]\n 20381: a4 = s1 + 0x20\n 20384: a5 = a4 <u s1\n 20387: a1 = u64 [sp + 0x78]\n 20390: a0 = a1 + a5\n 20393: a1 = a0 <u a1\n 20396: a1 = a5 if a5 == 0\n 20399: a5 = u64 [sp + 0x70]\n 20402: a1 = a1 + a5\n 20405: a5 = a1 <u a5\n 20408: s1 = u64 [sp + 0x68]\n 20411: a5 = a5 + s1\n 20414: s1 = u64 [sp + 0x48]\n 20417: u64 [sp + 0x98] = s1\n 20421: s1 = u64 [sp + 0x50]\n 20424: u64 [sp + 0x90] = s1\n 20428: s1 = u64 [sp + 0x60]\n 20431: u64 [sp + 0x88] = s1\n 20435: s1 = u64 [sp + 0x58]\n 20438: u64 [sp + 0x80] = s1\n 20442: u64 [sp + 0xb8] = a3\n 20446: u64 [sp + 0xb0] = a2\n 20450: u64 [sp + 0xa8] = t1\n 20454: u64 [sp + 0xa0] = t0\n 20458: u64 [sp + 0xc8] = a0\n 20462: u64 [sp + 0xc0] = a4\n 20466: u64 [sp + 0xd0] = a1\n 20470: a0 = sp + 0xe0\n 20474: a1 = sp + 0xc0\n 20478: a2 = sp + 0xa0\n 20482: a3 = sp + 0x80\n 20486: u64 [sp + 0xd8] = a5\n 20490: ra = 282, jump @130\n      : @346 [@dyn 141] (gas: 23)\n 20496: a0 = u64 [sp + 0xf8]\n 20500: a1 = u64 [sp + 0xf0]\n 20504: a2 = u64 [sp + 0xe8]\n 20508: a3 = u64 [sp + 0xe0]\n 20512: a4 = u64 [sp + 0x40]\n 20515: u64 [a4 + 0x38] = a0\n 20518: u64 [a4 + 0x30] = a1\n 20521: u64 [a4 + 0x28] = a2\n 20524: u64 [a4 + 0x20] = a3\n 20527: a0 = u64 [sp + 0x10]\n 20530: u64 [a4 + 0x18] = a0\n 20533: a0 = u64 [sp + 0x18]\n 20536: u64 [a4 + 0x10] = a0\n 20539: a0 = u64 [sp + 0x20]\n 20542: u64 [a4 + 0x8] = a0\n 20545: a0 = u64 [sp + 0x28]\n 20548: u64 [a4] = a0\n 20550: sp = s0 + 0xfffffffffffffea0\n 20554: ra = u64 [sp + 0x158]\n 20558: s0 = u64 [sp + 0x150]\n 20562: s1 = u64 [sp + 0x148]\n 20566: sp = sp + 0x160\n 20570: ret\n      : @347 (gas: 1)\n 20572: trap\n      : @348 (gas: 4)\n 20573: a0 = 0\n 20575: a1 = 0\n 20577: ra = 0x11c\n 20581: jump @0\n      : @349 (gas: 2)\n 20584: a1 = 0\n 20586: ra = 284, jump @0\n      : @350 [@dyn 142] (gas: 6)\n 20592: i32 a1 = a0 + 0\n 20594: a0 = 0x1\n 20597: a2 = 0\n 20599: ra = 0x11e\n 20603: ecalli 11 // 'seal_return'\n 20605: fallthrough\n      : @351 [@dyn 143] (gas: 17)\n 20606: sp = sp + 0xffffffffffffffc0\n 20609: u64 [sp + 0x38] = ra\n 20612: u64 [sp + 0x30] = s0\n 20615: u64 [sp + 0x28] = s1\n 20618: a3 = u64 [a1 + 0x10]\n 20621: s1 = u64 [a1 + 0x18]\n 20624: a5 = u64 [a1 + 0x8]\n 20627: s0 = u64 [a1]\n 20629: a4 = a5 | s1\n 20632: a1 = s0 | a3\n 20635: a1 = a1 | a4\n 20638: a1 = a1 >> 0x20\n 20641: a4 = a4 | a3\n 20644: a4 = a4 << 0x20\n 20647: a1 = a1 | a4\n 20650: u64 [sp + 0x20] = a0\n 20653: jump @354 if a1 != 0\n      : @352 (gas: 23)\n 20657: t0 = u64 [a2 + 0x18]\n 20660: t1 = u64 [a2 + 0x10]\n 20663: a4 = u64 [a2 + 0x8]\n 20666: a2 = u64 [a2]\n 20668: a0 = s0 + 0x20\n 20671: u64 [sp + 0x18] = a0\n 20674: a0 = a0 <u s0\n 20677: a1 = a5 + a0\n 20680: u64 [sp + 0x10] = a1\n 20683: a5 = a1 <u a5\n 20686: a5 = a0 if a0 == 0\n 20689: a5 = a5 + a3\n 20692: u64 [sp + 0x8] = a5\n 20695: a0 = a5 <u a3\n 20698: s1 = s1 + a0\n 20701: a1 = a2 | t1\n 20704: a0 = a4 | t0\n 20707: a0 = a0 | a1\n 20710: a0 = a0 >u 0\n 20712: u64 [sp] = a0\n 20714: i32 a0 = s0 + 0\n 20716: a1 = 0x20\n 20719: ra = 288, jump @0\n      : @353 [@dyn 144] (gas: 46)\n 20725: u8 [a0 + 30] = 0\n 20728: u8 [a0 + 29] = 0\n 20731: u8 [a0 + 28] = 0\n 20734: u8 [a0 + 27] = 0\n 20737: u8 [a0 + 26] = 0\n 20740: u8 [a0 + 25] = 0\n 20743: u8 [a0 + 24] = 0\n 20746: u8 [a0 + 23] = 0\n 20749: u8 [a0 + 22] = 0\n 20752: u8 [a0 + 21] = 0\n 20755: u8 [a0 + 20] = 0\n 20758: u8 [a0 + 19] = 0\n 20761: u8 [a0 + 18] = 0\n 20764: u8 [a0 + 17] = 0\n 20767: u8 [a0 + 16] = 0\n 20770: u8 [a0 + 15] = 0\n 20773: u8 [a0 + 14] = 0\n 20776: u8 [a0 + 13] = 0\n 20779: u8 [a0 + 12] = 0\n 20782: u8 [a0 + 11] = 0\n 20785: u8 [a0 + 10] = 0\n 20788: u8 [a0 + 9] = 0\n 20791: u8 [a0 + 8] = 0\n 20794: u8 [a0 + 7] = 0\n 20797: u8 [a0 + 6] = 0\n 20800: u8 [a0 + 5] = 0\n 20803: u8 [a0 + 4] = 0\n 20806: u8 [a0 + 3] = 0\n 20809: u8 [a0 + 2] = 0\n 20812: u8 [a0 + 1] = 0\n 20815: u8 [a0 + 0] = 0\n 20817: a1 = u64 [sp]\n 20819: u8 [a0 + 0x1f] = a1\n 20822: a0 = u64 [sp + 0x20]\n 20825: a1 = u64 [sp + 0x18]\n 20828: u64 [a0] = a1\n 20830: u64 [a0 + 0x18] = s1\n 20833: a1 = u64 [sp + 0x10]\n 20836: u64 [a0 + 0x8] = a1\n 20839: a1 = u64 [sp + 0x8]\n 20842: u64 [a0 + 0x10] = a1\n 20845: ra = u64 [sp + 0x38]\n 20848: s0 = u64 [sp + 0x30]\n 20851: s1 = u64 [sp + 0x28]\n 20854: sp = sp + 0x40\n 20857: ret\n      : @354 (gas: 1)\n 20859: trap\n      : @355 (gas: 8)\n 20860: a0 = u64 [sp + 0xf0]\n 20864: a1 = u64 [sp + 0xf8]\n 20868: a2 = u64 [sp + 0xe8]\n 20872: a3 = u64 [sp + 0xe0]\n 20876: a1 = a1 | a2\n 20879: a0 = a0 | a3\n 20882: a0 = a0 | a1\n 20885: jump @361 if a0 != 0\n      : @356 (gas: 13)\n 20889: a0 = u32 [0x200a4]\n 20894: u64 [sp + 120] = 0\n 20897: u64 [sp + 112] = 0\n 20900: u64 [sp + 104] = 0\n 20903: u64 [sp + 0x60] = a0\n 20906: u64 [sp + 152] = 0\n 20910: u64 [sp + 144] = 0\n 20914: u64 [sp + 128] = 0x4\n 20919: a0 = sp + 0xa0\n 20923: a1 = sp + 0x80\n 20927: a2 = sp + 0x60\n 20930: u64 [sp + 136] = 0\n 20934: ra = 290, jump @337\n      : @357 [@dyn 145] (gas: 60)\n 20940: t0 = u64 [sp + 0xa0]\n 20944: a0 = u64 [sp + 0xa8]\n 20948: a1 = u64 [sp + 0xb0]\n 20952: a2 = u64 [sp + 0xb8]\n 20956: a4 = u64 [sp + 0xc0]\n 20960: a5 = u64 [sp + 0xc8]\n 20964: s1 = u64 [sp + 0xd0]\n 20968: a3 = u64 [sp + 0xd8]\n 20972: u64 [sp + 0x18] = a3\n 20975: u64 [sp + 0x10] = s1\n 20978: u64 [sp + 0x8] = a5\n 20981: u64 [sp] = a4\n 20983: u64 [sp + 0x38] = a2\n 20986: u64 [sp + 0x30] = a1\n 20989: u64 [sp + 0x28] = a0\n 20992: a0 = sp + 0x40\n 20995: a1 = sp + 0x20\n 20998: a2 = sp\n 21000: u64 [sp + 0x20] = t0\n 21003: ra = 0x124\n 21007: sp = sp + 0xfffffffffffffc20\n 21011: u64 [sp + 0x3d8] = ra\n 21015: u64 [sp + 0x3d0] = s0\n 21019: u64 [sp + 0x3c8] = s1\n 21023: s0 = sp + 0x3e0\n 21027: sp = sp & 0xffffffffffffffe0\n 21030: s1 = sp\n 21032: u64 [s1 + 0x28] = a0\n 21035: a0 = u64 [a2 + 0x18]\n 21038: u64 [s1 + 0xc0] = a0\n 21042: a0 = u64 [a2 + 0x10]\n 21045: u64 [s1 + 0xb8] = a0\n 21049: a0 = u64 [a2 + 0x8]\n 21052: u64 [s1 + 0xd0] = a0\n 21056: a0 = u64 [a2]\n 21058: u64 [s1 + 0xc8] = a0\n 21062: a0 = u64 [a1]\n 21064: u64 [s1 + 0xb0] = a0\n 21068: a0 = u64 [a1 + 0x8]\n 21071: u64 [s1 + 0xa8] = a0\n 21075: a0 = u64 [a1 + 0x10]\n 21078: u64 [s1 + 0xa0] = a0\n 21082: a0 = u64 [a1 + 0x18]\n 21085: u64 [s1 + 0x98] = a0\n 21089: u64 [s1 + 856] = 0\n 21093: u64 [s1 + 848] = 0\n 21097: u64 [s1 + 840] = 0\n 21101: u64 [s1 + 832] = 0x1\n 21106: u64 [s1 + 888] = 0\n 21110: u64 [s1 + 880] = 0\n 21114: u64 [s1 + 872] = 0\n 21118: u64 [s1 + 864] = 0\n 21122: u32 [s1 + 800] = 0x20\n 21127: i32 a1 = s1 + 0x340\n 21131: i32 a3 = s1 + 0x360\n 21135: i32 a4 = s1 + 0x320\n 21139: a2 = 0xffffffffffffffff\n 21142: a0 = 0\n 21144: ecalli 7 // 'get_storage'\n 21146: jump @887\n      : @358 [@dyn 146] (gas: 3)\n 21150: a0 = 0x40\n 21153: a1 = 0x20\n 21156: ra = 294, jump @0\n      : @359 [@dyn 147] (gas: 100)\n 21162: a1 = u8 [a0 + 0x11]\n 21165: a2 = u8 [a0 + 0x10]\n 21168: a3 = u8 [a0 + 0x12]\n 21171: a4 = u8 [a0 + 0x13]\n 21174: a1 = a1 << 0x8\n 21177: a1 = a1 | a2\n 21180: a3 = a3 << 0x10\n 21183: a4 = a4 << 0x18\n 21186: a3 = a3 | a4\n 21189: a1 = a1 | a3\n 21192: a2 = u8 [a0 + 0x15]\n 21195: a3 = u8 [a0 + 0x14]\n 21198: a4 = u8 [a0 + 0x16]\n 21201: a5 = u8 [a0 + 0x17]\n 21204: a2 = a2 << 0x8\n 21207: a2 = a2 | a3\n 21210: a4 = a4 << 0x10\n 21213: a5 = a5 << 0x18\n 21216: a4 = a4 | a5\n 21219: a2 = a2 | a4\n 21222: a2 = a2 << 0x20\n 21225: t0 = a2 | a1\n 21228: a2 = u8 [a0 + 0x1]\n 21231: a3 = u8 [a0]\n 21233: a4 = u8 [a0 + 0x2]\n 21236: a5 = u8 [a0 + 0x3]\n 21239: a2 = a2 << 0x8\n 21242: a2 = a2 | a3\n 21245: a4 = a4 << 0x10\n 21248: a5 = a5 << 0x18\n 21251: a4 = a4 | a5\n 21254: a2 = a2 | a4\n 21257: a3 = u8 [a0 + 0x5]\n 21260: a4 = u8 [a0 + 0x4]\n 21263: a5 = u8 [a0 + 0x6]\n 21266: s1 = u8 [a0 + 0x7]\n 21269: a3 = a3 << 0x8\n 21272: a3 = a3 | a4\n 21275: a5 = a5 << 0x10\n 21278: s1 = s1 << 0x18\n 21281: a5 = a5 | s1\n 21284: a3 = a3 | a5\n 21287: a3 = a3 << 0x20\n 21290: a2 = a2 | a3\n 21293: a3 = u8 [a0 + 0x19]\n 21296: a4 = u8 [a0 + 0x18]\n 21299: a5 = u8 [a0 + 0x1a]\n 21302: s1 = u8 [a0 + 0x1b]\n 21305: a3 = a3 << 0x8\n 21308: a3 = a3 | a4\n 21311: a5 = a5 << 0x10\n 21314: s1 = s1 << 0x18\n 21317: a5 = a5 | s1\n 21320: a3 = a3 | a5\n 21323: a4 = u8 [a0 + 0x1d]\n 21326: a5 = u8 [a0 + 0x1c]\n 21329: s1 = u8 [a0 + 0x1e]\n 21332: a1 = u8 [a0 + 0x1f]\n 21335: a4 = a4 << 0x8\n 21338: a4 = a4 | a5\n 21341: s1 = s1 << 0x10\n 21344: a1 = a1 << 0x18\n 21347: a1 = a1 | s1\n 21350: a1 = a1 | a4\n 21353: a1 = a1 << 0x20\n 21356: a3 = a3 | a1\n 21359: a1 = u8 [a0 + 0x9]\n 21362: a4 = u8 [a0 + 0x8]\n 21365: a5 = u8 [a0 + 0xa]\n 21368: s1 = u8 [a0 + 0xb]\n 21371: a1 = a1 << 0x8\n 21374: a1 = a1 | a4\n 21377: a5 = a5 << 0x10\n 21380: s1 = s1 << 0x18\n 21383: a5 = a5 | s1\n 21386: a1 = a1 | a5\n 21389: a4 = u8 [a0 + 0xd]\n 21392: a5 = u8 [a0 + 0xc]\n 21395: s1 = u8 [a0 + 0xe]\n 21398: a0 = u8 [a0 + 0xf]\n 21401: a4 = a4 << 0x8\n 21404: a4 = a4 | a5\n 21407: s1 = s1 << 0x10\n 21410: a0 = a0 << 0x18\n 21413: a0 = a0 | s1\n 21416: a0 = a0 | a4\n 21419: a0 = a0 << 0x20\n 21422: a0 = a0 | a1\n 21425: a0 = reverse a0\n 21427: s1 = reverse a3\n 21429: a1 = reverse a2\n 21431: a2 = reverse t0\n 21433: a1 = a1 | a2\n 21436: a2 = s1 | a0\n 21439: a2 = a2 | a1\n 21442: a2 = a2 >> 0x20\n 21445: a0 = a0 | a1\n 21448: a0 = a0 << 0x20\n 21451: a0 = a0 | a2\n 21454: jump @363 if a0 == 0\n      : @360 (gas: 1)\n 21457: trap\n      : @361 (gas: 3)\n 21458: a0 = 0\n 21460: a1 = 0\n 21462: ra = 296, jump @0\n      : @362 [@dyn 148] (gas: 5)\n 21468: i32 a1 = a0 + 0\n 21470: a0 = 0x1\n 21473: a2 = 0\n 21475: ecalli 11 // 'seal_return'\n 21477: fallthrough\n      : @363 (gas: 4)\n 21478: i32 s1 = s1 + 0\n 21480: a1 = 0x20\n 21483: a0 = s1\n 21485: ra = 298, jump @0\n      : @364 [@dyn 149] (gas: 35)\n 21491: u8 [a0 + 31] = 0x1\n 21495: u8 [a0 + 30] = 0\n 21498: u8 [a0 + 29] = 0\n 21501: u8 [a0 + 28] = 0\n 21504: u8 [a0 + 27] = 0\n 21507: u8 [a0 + 26] = 0\n 21510: u8 [a0 + 25] = 0\n 21513: u8 [a0 + 24] = 0\n 21516: u8 [a0 + 23] = 0\n 21519: u8 [a0 + 22] = 0\n 21522: u8 [a0 + 21] = 0\n 21525: u8 [a0 + 20] = 0\n 21528: u8 [a0 + 19] = 0\n 21531: u8 [a0 + 18] = 0\n 21534: u8 [a0 + 17] = 0\n 21537: u8 [a0 + 16] = 0\n 21540: u8 [a0 + 15] = 0\n 21543: u8 [a0 + 14] = 0\n 21546: u8 [a0 + 13] = 0\n 21549: u8 [a0 + 12] = 0\n 21552: u8 [a0 + 11] = 0\n 21555: u8 [a0 + 10] = 0\n 21558: u8 [a0 + 9] = 0\n 21561: u8 [a0 + 8] = 0\n 21564: u8 [a0 + 7] = 0\n 21567: u8 [a0 + 6] = 0\n 21570: u8 [a0 + 5] = 0\n 21573: u8 [a0 + 4] = 0\n 21576: u8 [a0 + 3] = 0\n 21579: u8 [a0 + 2] = 0\n 21582: u8 [a0 + 1] = 0\n 21585: u8 [a0 + 0] = 0\n 21587: a1 = 0x20\n 21590: a0 = s1\n 21592: ra = 300, jump @0\n      : @365 [@dyn 150] (gas: 6)\n 21598: i32 a1 = a0 + 0\n 21600: a2 = 0x20\n 21603: a0 = 0\n 21605: ra = 0x12e\n 21609: ecalli 11 // 'seal_return'\n 21611: fallthrough\n      : @366 [@dyn 151] (gas: 12)\n 21612: a2 = u64 [a1 + 0x10]\n 21615: a3 = u64 [a1 + 0x18]\n 21618: a4 = u64 [a1 + 0x8]\n 21621: a1 = u64 [a1]\n 21623: a3 = a3 | a4\n 21626: a4 = a1 | a2\n 21629: a4 = a4 | a3\n 21632: a4 = a4 >> 0x20\n 21635: a2 = a2 | a3\n 21638: a2 = a2 << 0x20\n 21641: a2 = a2 | a4\n 21644: jump @369 if a2 != 0\n      : @367 (gas: 7)\n 21648: sp = sp + 0xfffffffffffffff0\n 21651: u64 [sp + 0x8] = ra\n 21654: u64 [sp] = s0\n 21656: s0 = a0\n 21658: i32 a0 = a1 + 0\n 21660: a1 = 0x20\n 21663: ra = 304, jump @0\n      : @368 [@dyn 152] (gas: 100)\n 21669: a1 = u8 [a0 + 0x1]\n 21672: a2 = u8 [a0]\n 21674: a3 = u8 [a0 + 0x2]\n 21677: a4 = u8 [a0 + 0x3]\n 21680: a1 = a1 << 0x8\n 21683: a1 = a1 | a2\n 21686: a3 = a3 << 0x10\n 21689: a4 = a4 << 0x18\n 21692: a3 = a3 | a4\n 21695: a1 = a1 | a3\n 21698: a2 = u8 [a0 + 0x5]\n 21701: a3 = u8 [a0 + 0x4]\n 21704: a4 = u8 [a0 + 0x6]\n 21707: a5 = u8 [a0 + 0x7]\n 21710: a2 = a2 << 0x8\n 21713: a2 = a2 | a3\n 21716: a4 = a4 << 0x10\n 21719: a5 = a5 << 0x18\n 21722: a4 = a4 | a5\n 21725: a2 = a2 | a4\n 21728: a2 = a2 << 0x20\n 21731: t0 = a2 | a1\n 21734: a2 = u8 [a0 + 0x9]\n 21737: a3 = u8 [a0 + 0x8]\n 21740: a4 = u8 [a0 + 0xa]\n 21743: a5 = u8 [a0 + 0xb]\n 21746: a2 = a2 << 0x8\n 21749: a2 = a2 | a3\n 21752: a4 = a4 << 0x10\n 21755: a5 = a5 << 0x18\n 21758: a4 = a4 | a5\n 21761: a2 = a2 | a4\n 21764: a3 = u8 [a0 + 0xd]\n 21767: a4 = u8 [a0 + 0xc]\n 21770: a5 = u8 [a0 + 0xe]\n 21773: a1 = u8 [a0 + 0xf]\n 21776: a3 = a3 << 0x8\n 21779: a3 = a3 | a4\n 21782: a5 = a5 << 0x10\n 21785: a1 = a1 << 0x18\n 21788: a1 = a1 | a5\n 21791: a1 = a1 | a3\n 21794: a1 = a1 << 0x20\n 21797: t1 = a1 | a2\n 21800: a1 = u8 [a0 + 0x11]\n 21803: a3 = u8 [a0 + 0x10]\n 21806: a4 = u8 [a0 + 0x12]\n 21809: a5 = u8 [a0 + 0x13]\n 21812: a1 = a1 << 0x8\n 21815: a1 = a1 | a3\n 21818: a4 = a4 << 0x10\n 21821: a5 = a5 << 0x18\n 21824: a4 = a4 | a5\n 21827: a1 = a1 | a4\n 21830: a3 = u8 [a0 + 0x15]\n 21833: a4 = u8 [a0 + 0x14]\n 21836: a5 = u8 [a0 + 0x16]\n 21839: a2 = u8 [a0 + 0x17]\n 21842: a3 = a3 << 0x8\n 21845: a3 = a3 | a4\n 21848: a5 = a5 << 0x10\n 21851: a2 = a2 << 0x18\n 21854: a2 = a2 | a5\n 21857: a2 = a2 | a3\n 21860: a2 = a2 << 0x20\n 21863: a3 = a2 | a1\n 21866: a1 = u8 [a0 + 0x19]\n 21869: a2 = u8 [a0 + 0x18]\n 21872: a4 = u8 [a0 + 0x1a]\n 21875: a5 = u8 [a0 + 0x1b]\n 21878: a1 = a1 << 0x8\n 21881: a1 = a1 | a2\n 21884: a4 = a4 << 0x10\n 21887: a5 = a5 << 0x18\n 21890: a4 = a4 | a5\n 21893: a1 = a1 | a4\n 21896: a2 = u8 [a0 + 0x1d]\n 21899: a4 = u8 [a0 + 0x1c]\n 21902: a5 = u8 [a0 + 0x1e]\n 21905: a0 = u8 [a0 + 0x1f]\n 21908: a2 = a2 << 0x8\n 21911: a2 = a2 | a4\n 21914: a5 = a5 << 0x10\n 21917: a0 = a0 << 0x18\n 21920: a0 = a0 | a5\n 21923: a0 = a0 | a2\n 21926: a0 = a0 << 0x20\n 21929: a0 = a0 | a1\n 21932: a0 = reverse a0\n 21934: a1 = reverse a3\n 21936: a2 = reverse t1\n 21938: a3 = reverse t0\n 21940: u64 [s0 + 0x18] = a3\n 21943: u64 [s0 + 0x10] = a2\n 21946: u64 [s0 + 0x8] = a1\n 21949: u64 [s0] = a0\n 21951: ra = u64 [sp + 0x8]\n 21954: s0 = u64 [sp]\n 21956: sp = sp + 0x10\n 21959: ret\n      : @369 (gas: 1)\n 21961: trap\n      : @370 (gas: 20)\n 21962: sp = sp + 0xfffffffffffffe58\n 21966: u64 [sp + 0x1a0] = ra\n 21970: u64 [sp + 0x198] = s0\n 21974: u64 [sp + 0x190] = s1\n 21978: a3 = u64 [a1 + 0x18]\n 21981: a4 = u64 [a1 + 0x10]\n 21984: a5 = u64 [a1 + 0x8]\n 21987: s0 = u64 [a1]\n 21989: u64 [sp + 0x180] = a3\n 21993: u64 [sp + 0x150] = a5\n 21997: a1 = a5 | a3\n 22000: a3 = s0 | a4\n 22003: a3 = a3 | a1\n 22006: a3 = a3 >> 0x20\n 22009: u64 [sp + 0x178] = a4\n 22013: a1 = a1 | a4\n 22016: a1 = a1 << 0x20\n 22019: a1 = a1 | a3\n 22022: u64 [sp] = a0\n 22024: jump @386 if a1 != 0\n      : @371 (gas: 12)\n 22028: a0 = u64 [a2 + 0x18]\n 22031: u64 [sp + 0x188] = a0\n 22035: a0 = u64 [a2 + 0x10]\n 22038: u64 [sp + 0x168] = a0\n 22042: a0 = u64 [a2 + 0x8]\n 22045: u64 [sp + 0x170] = a0\n 22049: s1 = u64 [a2]\n 22051: u64 [sp + 0x138] = s0\n 22055: i32 a0 = s0 + 0\n 22057: a1 = 0x20\n 22060: s0 = 0x20\n 22063: ra = 306, jump @0\n      : @372 [@dyn 153] (gas: 43)\n 22069: u8 [a0 + 0x1f] = s0\n 22072: a3 = u64 [sp + 0x168]\n 22076: a1 = s1 | a3\n 22079: a2 = u64 [sp + 0x188]\n 22083: a5 = u64 [sp + 0x170]\n 22087: a2 = a2 | a5\n 22090: a1 = a1 | a2\n 22093: a1 = a1 >> 0x20\n 22096: a2 = a2 | a3\n 22099: a2 = a2 << 0x20\n 22102: a1 = a1 | a2\n 22105: u8 [a0 + 30] = 0\n 22108: u8 [a0 + 29] = 0\n 22111: u8 [a0 + 28] = 0\n 22114: u8 [a0 + 27] = 0\n 22117: u8 [a0 + 26] = 0\n 22120: u8 [a0 + 25] = 0\n 22123: u8 [a0 + 24] = 0\n 22126: u8 [a0 + 23] = 0\n 22129: u8 [a0 + 22] = 0\n 22132: u8 [a0 + 21] = 0\n 22135: u8 [a0 + 20] = 0\n 22138: u8 [a0 + 19] = 0\n 22141: u8 [a0 + 18] = 0\n 22144: u8 [a0 + 17] = 0\n 22147: u8 [a0 + 16] = 0\n 22150: u8 [a0 + 15] = 0\n 22153: u8 [a0 + 14] = 0\n 22156: u8 [a0 + 13] = 0\n 22159: u8 [a0 + 12] = 0\n 22162: u8 [a0 + 11] = 0\n 22165: u8 [a0 + 10] = 0\n 22168: u8 [a0 + 9] = 0\n 22171: u8 [a0 + 8] = 0\n 22174: u8 [a0 + 7] = 0\n 22177: u8 [a0 + 6] = 0\n 22180: u8 [a0 + 5] = 0\n 22183: u8 [a0 + 4] = 0\n 22186: u8 [a0 + 3] = 0\n 22189: u8 [a0 + 2] = 0\n 22192: u8 [a0 + 1] = 0\n 22195: u8 [a0 + 0] = 0\n 22197: jump @386 if a1 != 0\n      : @373 (gas: 19)\n 22201: a4 = s1\n 22203: a0 = u64 [sp + 0x138]\n 22207: a1 = a0 + 0x20\n 22210: u64 [sp + 0x160] = a1\n 22214: a0 = a1 <u a0\n 22217: a1 = u64 [sp + 0x150]\n 22221: s1 = a1 + a0\n 22224: a1 = s1 <u a1\n 22227: a1 = a0 if a0 == 0\n 22230: a0 = u64 [sp + 0x178]\n 22234: s0 = a0 + a1\n 22237: a0 = s0 <u a0\n 22240: a1 = u64 [sp + 0x180]\n 22244: a0 = a0 + a1\n 22247: u64 [sp + 0x158] = a0\n 22251: u64 [sp + 0x118] = a4\n 22255: i32 a0 = a4 + 0\n 22257: a1 = 0x20\n 22260: ra = 308, jump @0\n      : @374 [@dyn 154] (gas: 12)\n 22266: t0 = u64 [sp + 0x160]\n 22270: a1 = t0 | s0\n 22273: u64 [sp + 0x148] = s1\n 22277: a2 = u64 [sp + 0x158]\n 22281: a2 = a2 | s1\n 22284: a1 = a1 | a2\n 22287: a1 = a1 >> 0x20\n 22290: u64 [sp + 0x140] = s0\n 22294: a2 = a2 | s0\n 22297: a2 = a2 << 0x20\n 22300: a1 = a1 | a2\n 22303: jump @386 if a1 != 0\n      : @375 (gas: 93)\n 22307: a1 = u8 [a0 + 0x19]\n 22310: a2 = u8 [a0 + 0x18]\n 22313: a3 = u8 [a0 + 0x1a]\n 22316: a4 = u8 [a0 + 0x1b]\n 22319: a1 = a1 << 0x8\n 22322: a1 = a1 | a2\n 22325: a3 = a3 << 0x10\n 22328: a4 = a4 << 0x18\n 22331: a3 = a3 | a4\n 22334: a1 = a1 | a3\n 22337: a2 = u8 [a0 + 0x1d]\n 22340: a3 = u8 [a0 + 0x1c]\n 22343: a4 = u8 [a0 + 0x1e]\n 22346: a5 = u8 [a0 + 0x1f]\n 22349: a2 = a2 << 0x8\n 22352: a2 = a2 | a3\n 22355: a4 = a4 << 0x10\n 22358: a5 = a5 << 0x18\n 22361: a4 = a4 | a5\n 22364: a2 = a2 | a4\n 22367: a2 = a2 << 0x20\n 22370: a1 = a1 | a2\n 22373: u64 [sp + 0x128] = a1\n 22377: a1 = u8 [a0 + 0x11]\n 22380: a2 = u8 [a0 + 0x10]\n 22383: a3 = u8 [a0 + 0x12]\n 22386: a4 = u8 [a0 + 0x13]\n 22389: a1 = a1 << 0x8\n 22392: a1 = a1 | a2\n 22395: a3 = a3 << 0x10\n 22398: a4 = a4 << 0x18\n 22401: a3 = a3 | a4\n 22404: a1 = a1 | a3\n 22407: a2 = u8 [a0 + 0x15]\n 22410: a3 = u8 [a0 + 0x14]\n 22413: a4 = u8 [a0 + 0x16]\n 22416: a5 = u8 [a0 + 0x17]\n 22419: a2 = a2 << 0x8\n 22422: a2 = a2 | a3\n 22425: a4 = a4 << 0x10\n 22428: a5 = a5 << 0x18\n 22431: a4 = a4 | a5\n 22434: a2 = a2 | a4\n 22437: a2 = a2 << 0x20\n 22440: a1 = a1 | a2\n 22443: u64 [sp + 0x130] = a1\n 22447: a1 = u8 [a0 + 0x9]\n 22450: a2 = u8 [a0 + 0x8]\n 22453: a3 = u8 [a0 + 0xa]\n 22456: a4 = u8 [a0 + 0xb]\n 22459: a1 = a1 << 0x8\n 22462: a1 = a1 | a2\n 22465: a3 = a3 << 0x10\n 22468: a4 = a4 << 0x18\n 22471: a3 = a3 | a4\n 22474: a1 = a1 | a3\n 22477: a2 = u8 [a0 + 0xd]\n 22480: a3 = u8 [a0 + 0xc]\n 22483: a4 = u8 [a0 + 0xe]\n 22486: a5 = u8 [a0 + 0xf]\n 22489: a2 = a2 << 0x8\n 22492: a2 = a2 | a3\n 22495: a4 = a4 << 0x10\n 22498: a5 = a5 << 0x18\n 22501: a4 = a4 | a5\n 22504: a2 = a2 | a4\n 22507: a2 = a2 << 0x20\n 22510: s1 = a2 | a1\n 22513: a1 = u8 [a0 + 0x1]\n 22516: a2 = u8 [a0]\n 22518: a3 = u8 [a0 + 0x2]\n 22521: a4 = u8 [a0 + 0x3]\n 22524: a1 = a1 << 0x8\n 22527: a1 = a1 | a2\n 22530: a3 = a3 << 0x10\n 22533: a4 = a4 << 0x18\n 22536: a3 = a3 | a4\n 22539: a1 = a1 | a3\n 22542: a2 = u8 [a0 + 0x5]\n 22545: a3 = u8 [a0 + 0x4]\n 22548: a4 = u8 [a0 + 0x6]\n 22551: a0 = u8 [a0 + 0x7]\n 22554: a2 = a2 << 0x8\n 22557: a2 = a2 | a3\n 22560: a4 = a4 << 0x10\n 22563: a0 = a0 << 0x18\n 22566: a0 = a0 | a4\n 22569: a0 = a0 | a2\n 22572: a0 = a0 << 0x20\n 22575: s0 = a0 | a1\n 22578: i32 a0 = t0 + 0\n 22580: a1 = 0x20\n 22583: ra = 310, jump @0\n      : @376 [@dyn 155] (gas: 82)\n 22589: a2 = u64 [sp + 0x130]\n 22593: u8 [a0 + 0x10] = a2\n 22596: a1 = s1 >> 0x38\n 22599: u8 [a0 + 0xf] = a1\n 22602: a1 = s1 >> 0x30\n 22605: u8 [a0 + 0xe] = a1\n 22608: a1 = s1 >> 0x28\n 22611: u8 [a0 + 0xd] = a1\n 22614: a1 = s1 >> 0x20\n 22617: u8 [a0 + 0xc] = a1\n 22620: a1 = s1 >> 0x18\n 22623: u8 [a0 + 0xb] = a1\n 22626: a1 = s1 >> 0x10\n 22629: u8 [a0 + 0xa] = a1\n 22632: a1 = s1 >> 0x8\n 22635: u8 [a0 + 0x9] = a1\n 22638: u8 [a0 + 0x8] = s1\n 22641: a1 = s0 >> 0x38\n 22644: u8 [a0 + 0x7] = a1\n 22647: a1 = s0 >> 0x30\n 22650: u8 [a0 + 0x6] = a1\n 22653: a1 = s0 >> 0x28\n 22656: u8 [a0 + 0x5] = a1\n 22659: a1 = s0 >> 0x20\n 22662: u8 [a0 + 0x4] = a1\n 22665: a1 = s0 >> 0x18\n 22668: u8 [a0 + 0x3] = a1\n 22671: a1 = s0 >> 0x10\n 22674: u8 [a0 + 0x2] = a1\n 22677: a1 = s0 >> 0x8\n 22680: u8 [a0 + 0x1] = a1\n 22683: u8 [a0] = s0\n 22685: a4 = u64 [sp + 0x128]\n 22689: u8 [a0 + 0x18] = a4\n 22692: a1 = a2 >> 0x38\n 22695: u8 [a0 + 0x17] = a1\n 22698: a1 = a2 >> 0x30\n 22701: u8 [a0 + 0x16] = a1\n 22704: a1 = a2 >> 0x28\n 22707: u8 [a0 + 0x15] = a1\n 22710: a1 = a2 >> 0x20\n 22713: u8 [a0 + 0x14] = a1\n 22716: a1 = a2 >> 0x18\n 22719: u8 [a0 + 0x13] = a1\n 22722: a1 = a2 >> 0x10\n 22725: u8 [a0 + 0x12] = a1\n 22728: a1 = a2 >> 0x8\n 22731: a5 = a2\n 22733: u8 [a0 + 0x11] = a1\n 22736: a1 = a4 >> 0x38\n 22739: u8 [a0 + 0x1f] = a1\n 22742: a1 = a4 >> 0x30\n 22745: u8 [a0 + 0x1e] = a1\n 22748: a1 = a4 >> 0x28\n 22751: u8 [a0 + 0x1d] = a1\n 22754: a1 = a4 >> 0x20\n 22757: u8 [a0 + 0x1c] = a1\n 22760: a1 = a4 >> 0x18\n 22763: u8 [a0 + 0x1b] = a1\n 22766: a1 = a4 >> 0x10\n 22769: u8 [a0 + 0x1a] = a1\n 22772: a1 = a4 >> 0x8\n 22775: u8 [a0 + 0x19] = a1\n 22778: a1 = u64 [sp + 0x138]\n 22782: t2 = a1 + 0x40\n 22785: a2 = t2 <u a1\n 22788: a3 = u64 [sp + 0x150]\n 22792: ra = a3 + a2\n 22795: a3 = ra <u a3\n 22798: a3 = a2 if a2 == 0\n 22801: a2 = s0 | a5\n 22804: t1 = a4\n 22806: a4 = a4 | s1\n 22809: a4 = a4 | a2\n 22812: a5 = u64 [sp + 0x178]\n 22816: a3 = a3 + a5\n 22819: u64 [sp + 0x120] = a3\n 22823: a3 = a3 <u a5\n 22826: t0 = u64 [sp + 0x180]\n 22830: a5 = t0 + a3\n 22833: u64 [sp + 0x150] = a5\n 22837: jump @384 if a4 == 0\n      : @377 (gas: 20)\n 22841: a0 = 0\n 22843: a1 = 0\n 22845: u64 [sp + 312] = 0\n 22849: a2 = 0\n 22851: a3 = reverse s0\n 22853: u64 [sp + 0x20] = a3\n 22856: a3 = reverse s1\n 22858: u64 [sp + 0x18] = a3\n 22861: a3 = u64 [sp + 0x130]\n 22865: a3 = reverse a3\n 22867: u64 [sp + 0x10] = a3\n 22870: a3 = reverse t1\n 22872: u64 [sp + 0x8] = a3\n 22875: a4 = 0xffffffe0\n 22885: u64 [sp + 0x28] = a4\n 22888: s0 = u64 [sp + 0x168]\n 22892: t0 = u64 [sp + 0x170]\n 22896: a3 = u64 [sp + 0x118]\n 22900: t1 = u64 [sp + 0x120]\n 22904: fallthrough\n      : @378 (gas: 16)\n 22905: u64 [sp + 0x120] = a2\n 22909: u64 [sp + 0x128] = a1\n 22913: u64 [sp + 0x130] = a0\n 22917: a4 = u64 [sp + 0x188]\n 22921: a4 = a4 | s0\n 22924: s1 = u64 [sp + 0x28]\n 22927: a5 = a3 <u s1\n 22930: u64 [sp + 0x170] = t0\n 22934: a5 = 0 if t0 != 0\n 22936: a5 = 0 if a4 != 0\n 22938: a0 = u64 [sp + 0x150]\n 22942: u64 [sp + 0x118] = a0\n 22946: u64 [sp + 0x110] = t1\n 22950: u64 [sp + 0x108] = ra\n 22954: u64 [sp + 0x180] = t2\n 22958: jump @386 if a5 == 0\n      : @379 (gas: 7)\n 22962: u64 [sp + 0x168] = s0\n 22966: a0 = a3 + 0x20\n 22969: u64 [sp + 0x178] = a0\n 22973: i32 a0 = a0 + 0\n 22975: a1 = 0x20\n 22978: s0 = a3\n 22980: ra = 312, jump @0\n      : @380 [@dyn 156] (gas: 9)\n 22986: a1 = u64 [sp + 0x140]\n 22990: a2 = u64 [sp + 0x158]\n 22994: a1 = a1 | a2\n 22997: a2 = u64 [sp + 0x160]\n 23001: a2 = a2 <u s1\n 23004: a3 = u64 [sp + 0x148]\n 23008: a2 = 0 if a3 != 0\n 23010: a2 = 0 if a1 != 0\n 23012: jump @386 if a2 == 0\n      : @381 (gas: 81)\n 23016: a1 = u64 [sp + 0x178]\n 23020: a2 = a1 <u s0\n 23023: a1 = u64 [sp + 0x170]\n 23027: a3 = a1 + a2\n 23030: u64 [sp + 0x160] = a3\n 23034: a1 = a3 <u a1\n 23037: a1 = a2 if a2 == 0\n 23040: a2 = u8 [a0]\n 23042: u64 [sp + 0x158] = a2\n 23046: a2 = u8 [a0 + 0x1]\n 23049: u64 [sp + 0x150] = a2\n 23053: a2 = u8 [a0 + 0x2]\n 23056: u64 [sp + 0x148] = a2\n 23060: a2 = u8 [a0 + 0x3]\n 23063: u64 [sp + 0x140] = a2\n 23067: a2 = u8 [a0 + 0x4]\n 23070: u64 [sp + 0x100] = a2\n 23074: a2 = u8 [a0 + 0x5]\n 23077: u64 [sp + 0xf8] = a2\n 23081: a2 = u8 [a0 + 0x6]\n 23084: u64 [sp + 0xf0] = a2\n 23088: a2 = u8 [a0 + 0x7]\n 23091: u64 [sp + 0xe8] = a2\n 23095: a2 = u8 [a0 + 0x8]\n 23098: u64 [sp + 0xe0] = a2\n 23102: a2 = u8 [a0 + 0x9]\n 23105: u64 [sp + 0xd8] = a2\n 23109: a2 = u8 [a0 + 0xa]\n 23112: u64 [sp + 0xd0] = a2\n 23116: a2 = u8 [a0 + 0xb]\n 23119: u64 [sp + 0xc8] = a2\n 23123: a2 = u8 [a0 + 0xc]\n 23126: u64 [sp + 0xc0] = a2\n 23130: a2 = u8 [a0 + 0xd]\n 23133: u64 [sp + 0xb8] = a2\n 23137: a2 = u8 [a0 + 0xe]\n 23140: u64 [sp + 0xb0] = a2\n 23144: a2 = u8 [a0 + 0xf]\n 23147: u64 [sp + 0xa8] = a2\n 23151: a2 = u8 [a0 + 0x10]\n 23154: u64 [sp + 0xa0] = a2\n 23158: a2 = u8 [a0 + 0x11]\n 23161: u64 [sp + 0x98] = a2\n 23165: a2 = u8 [a0 + 0x12]\n 23168: u64 [sp + 0x90] = a2\n 23172: a2 = u8 [a0 + 0x13]\n 23175: u64 [sp + 0x88] = a2\n 23179: a2 = u8 [a0 + 0x14]\n 23182: u64 [sp + 0x80] = a2\n 23186: a2 = u8 [a0 + 0x15]\n 23189: u64 [sp + 0x78] = a2\n 23192: a2 = u8 [a0 + 0x16]\n 23195: u64 [sp + 0x70] = a2\n 23198: a2 = u8 [a0 + 0x17]\n 23201: u64 [sp + 0x68] = a2\n 23204: a2 = u8 [a0 + 0x18]\n 23207: u64 [sp + 0x60] = a2\n 23210: a2 = u8 [a0 + 0x19]\n 23213: u64 [sp + 0x58] = a2\n 23216: a2 = u8 [a0 + 0x1a]\n 23219: u64 [sp + 0x50] = a2\n 23222: a2 = u8 [a0 + 0x1b]\n 23225: u64 [sp + 0x48] = a2\n 23228: a2 = u8 [a0 + 0x1c]\n 23231: u64 [sp + 0x40] = a2\n 23234: a2 = u8 [a0 + 0x1d]\n 23237: u64 [sp + 0x38] = a2\n 23240: a2 = u8 [a0 + 0x1e]\n 23243: u64 [sp + 0x30] = a2\n 23246: s1 = u8 [a0 + 0x1f]\n 23249: s0 = u64 [sp + 0x168]\n 23253: a1 = a1 + s0\n 23256: u64 [sp + 0x170] = a1\n 23260: a0 = a1 <u s0\n 23263: a1 = u64 [sp + 0x188]\n 23267: a1 = a1 + a0\n 23270: u64 [sp + 0x188] = a1\n 23274: s0 = u64 [sp + 0x180]\n 23278: i32 a0 = s0 + 0\n 23280: a1 = 0x20\n 23283: ra = 314, jump @0\n      : @382 [@dyn 157] (gas: 120)\n 23289: u8 [a0 + 0x1f] = s1\n 23292: a1 = u64 [sp + 0x30]\n 23295: u8 [a0 + 0x1e] = a1\n 23298: a1 = u64 [sp + 0x38]\n 23301: u8 [a0 + 0x1d] = a1\n 23304: a1 = u64 [sp + 0x40]\n 23307: u8 [a0 + 0x1c] = a1\n 23310: a1 = u64 [sp + 0x48]\n 23313: u8 [a0 + 0x1b] = a1\n 23316: a1 = u64 [sp + 0x50]\n 23319: u8 [a0 + 0x1a] = a1\n 23322: a1 = u64 [sp + 0x58]\n 23325: u8 [a0 + 0x19] = a1\n 23328: a1 = u64 [sp + 0x60]\n 23331: u8 [a0 + 0x18] = a1\n 23334: a1 = u64 [sp + 0x68]\n 23337: u8 [a0 + 0x17] = a1\n 23340: a1 = u64 [sp + 0x70]\n 23343: u8 [a0 + 0x16] = a1\n 23346: a1 = u64 [sp + 0x78]\n 23349: u8 [a0 + 0x15] = a1\n 23352: a1 = u64 [sp + 0x80]\n 23356: u8 [a0 + 0x14] = a1\n 23359: a1 = u64 [sp + 0x88]\n 23363: u8 [a0 + 0x13] = a1\n 23366: a1 = u64 [sp + 0x90]\n 23370: u8 [a0 + 0x12] = a1\n 23373: a1 = u64 [sp + 0x98]\n 23377: u8 [a0 + 0x11] = a1\n 23380: a1 = u64 [sp + 0xa0]\n 23384: u8 [a0 + 0x10] = a1\n 23387: a1 = u64 [sp + 0xa8]\n 23391: u8 [a0 + 0xf] = a1\n 23394: a1 = u64 [sp + 0xb0]\n 23398: u8 [a0 + 0xe] = a1\n 23401: a1 = u64 [sp + 0xb8]\n 23405: u8 [a0 + 0xd] = a1\n 23408: a1 = u64 [sp + 0xc0]\n 23412: u8 [a0 + 0xc] = a1\n 23415: a1 = u64 [sp + 0xc8]\n 23419: u8 [a0 + 0xb] = a1\n 23422: a1 = u64 [sp + 0xd0]\n 23426: u8 [a0 + 0xa] = a1\n 23429: a1 = u64 [sp + 0xd8]\n 23433: u8 [a0 + 0x9] = a1\n 23436: a1 = u64 [sp + 0xe0]\n 23440: u8 [a0 + 0x8] = a1\n 23443: a1 = u64 [sp + 0xe8]\n 23447: u8 [a0 + 0x7] = a1\n 23450: a1 = u64 [sp + 0xf0]\n 23454: u8 [a0 + 0x6] = a1\n 23457: a1 = u64 [sp + 0xf8]\n 23461: u8 [a0 + 0x5] = a1\n 23464: a1 = u64 [sp + 0x100]\n 23468: u8 [a0 + 0x4] = a1\n 23471: a1 = u64 [sp + 0x140]\n 23475: u8 [a0 + 0x3] = a1\n 23478: a1 = u64 [sp + 0x148]\n 23482: u8 [a0 + 0x2] = a1\n 23485: a1 = u64 [sp + 0x150]\n 23489: u8 [a0 + 0x1] = a1\n 23492: a1 = u64 [sp + 0x158]\n 23496: u8 [a0] = a1\n 23498: t1 = u64 [sp + 0x130]\n 23502: t1 = t1 + 0x1\n 23505: a0 = t1 <u 0x1\n 23508: t2 = u64 [sp + 0x128]\n 23512: t2 = t2 + a0\n 23515: a0 = t1 | t2\n 23518: a4 = a0 <u 0x1\n 23521: a0 = u64 [sp + 0x138]\n 23525: a4 = a4 + a0\n 23528: a0 = a4 <u a0\n 23531: ra = u64 [sp + 0x120]\n 23535: ra = ra + a0\n 23538: a0 = u64 [sp + 0x8]\n 23541: a0 = t1 <u a0\n 23544: a2 = u64 [sp + 0x10]\n 23547: a1 = t2 ^ a2\n 23550: a2 = t2 <u a2\n 23553: a2 = a0 if a1 == 0\n 23556: a0 = u64 [sp + 0x18]\n 23559: s1 = a4 <u a0\n 23562: a3 = u64 [sp + 0x20]\n 23565: a1 = ra ^ a3\n 23568: a5 = ra <u a3\n 23571: a5 = s1 if a1 == 0\n 23574: a0 = a0 ^ a4\n 23577: a1 = a1 | a0\n 23580: a0 = s0 + 0x20\n 23583: u64 [sp + 0x168] = a0\n 23587: a5 = a2 if a1 == 0\n 23590: a2 = a0 <u s0\n 23593: s1 = u64 [sp + 0x108]\n 23597: a0 = s1 + a2\n 23600: u64 [sp + 0x130] = a0\n 23604: a3 = a0 <u s1\n 23607: a3 = a2 if a2 == 0\n 23610: a1 = u64 [sp + 0x110]\n 23614: a2 = a1 + a3\n 23617: a3 = a2 <u a1\n 23620: a0 = u64 [sp + 0x118]\n 23624: a3 = a3 + a0\n 23627: u64 [sp + 0x150] = a3\n 23631: u64 [sp + 0x138] = a4\n 23635: a3 = u64 [sp + 0x178]\n 23639: t0 = u64 [sp + 0x160]\n 23643: s0 = u64 [sp + 0x170]\n 23647: a4 = u64 [sp + 0x180]\n 23651: u64 [sp + 0x160] = a4\n 23655: u64 [sp + 0x148] = s1\n 23659: u64 [sp + 0x140] = a1\n 23663: u64 [sp + 0x158] = a0\n 23667: a0 = t1\n 23669: t1 = a2\n 23671: a1 = t2\n 23673: t2 = u64 [sp + 0x168]\n 23677: a2 = ra\n 23679: ra = u64 [sp + 0x130]\n 23683: jump @378 if a5 != 0\n      : @383 (gas: 1)\n 23687: jump @385\n      : @384 (gas: 2)\n 23689: t1 = u64 [sp + 0x120]\n 23693: fallthrough\n      : @385 (gas: 11)\n 23694: a4 = u64 [sp]\n 23696: u64 [a4] = t2\n 23698: u64 [a4 + 0x8] = ra\n 23701: u64 [a4 + 0x10] = t1\n 23704: a0 = u64 [sp + 0x150]\n 23708: u64 [a4 + 0x18] = a0\n 23711: ra = u64 [sp + 0x1a0]\n 23715: s0 = u64 [sp + 0x198]\n 23719: s1 = u64 [sp + 0x190]\n 23723: sp = sp + 0x1a8\n 23727: ret\n      : @386 (gas: 1)\n 23729: trap\n      : @387 (gas: 8)\n 23730: a0 = u64 [sp + 0xf0]\n 23734: a1 = u64 [sp + 0xf8]\n 23738: a2 = u64 [sp + 0xe8]\n 23742: a3 = u64 [sp + 0xe0]\n 23746: a1 = a1 | a2\n 23749: a0 = a0 | a3\n 23752: a0 = a0 | a1\n 23755: jump @398 if a0 != 0\n      : @388 (gas: 2)\n 23759: a0 = i32 [0x200a4]\n 23764: jump @398 if a0 <=u 3\n      : @389 (gas: 19)\n 23769: i32 a0 = sp + 0x100\n 23773: ecalli 4 // 'caller'\n 23775: a0 = u64 [sp + 0x108]\n 23779: a1 = i32 [sp + 0x110]\n 23783: s1 = u64 [sp + 0x100]\n 23787: a0 = reverse a0\n 23789: a2 = a0 << 0x20\n 23792: a1 = reverse a1\n 23794: a1 = a1 >> 0x20\n 23797: a1 = a1 | a2\n 23800: u64 [sp + 0x38] = a1\n 23803: a0 = a0 >> 0x20\n 23806: a1 = reverse s1\n 23808: a1 = a1 << 0x20\n 23811: a0 = a0 | a1\n 23814: u64 [sp + 0x30] = a0\n 23817: a1 = 0x20\n 23820: a0 = 0\n 23822: ra = 316, jump @0\n      : @390 [@dyn 158] (gas: 56)\n 23828: a1 = u64 [sp + 0x30]\n 23831: a1 = reverse a1\n 23833: a2 = u64 [sp + 0x38]\n 23836: a2 = reverse a2\n 23838: a3 = s1 >> 0x18\n 23841: u8 [a0 + 0xf] = a3\n 23844: a3 = s1 >> 0x10\n 23847: u8 [a0 + 0xe] = a3\n 23850: a3 = s1 >> 0x8\n 23853: u8 [a0 + 0xd] = a3\n 23856: u8 [a0 + 0xc] = s1\n 23859: u8 [a0 + 11] = 0\n 23862: u8 [a0 + 10] = 0\n 23865: u8 [a0 + 9] = 0\n 23868: u8 [a0 + 8] = 0\n 23871: u8 [a0 + 7] = 0\n 23874: u8 [a0 + 6] = 0\n 23877: u8 [a0 + 5] = 0\n 23880: u8 [a0 + 4] = 0\n 23883: u8 [a0 + 3] = 0\n 23886: u8 [a0 + 2] = 0\n 23889: u8 [a0 + 1] = 0\n 23892: u8 [a0 + 0] = 0\n 23894: u8 [a0 + 0x18] = a2\n 23897: u8 [a0 + 0x10] = a1\n 23900: a3 = a2 >> 0x38\n 23903: u8 [a0 + 0x1f] = a3\n 23906: a3 = a2 >> 0x30\n 23909: u8 [a0 + 0x1e] = a3\n 23912: a3 = a2 >> 0x28\n 23915: u8 [a0 + 0x1d] = a3\n 23918: a3 = a2 >> 0x20\n 23921: u8 [a0 + 0x1c] = a3\n 23924: a3 = a2 >> 0x18\n 23927: u8 [a0 + 0x1b] = a3\n 23930: a3 = a2 >> 0x10\n 23933: u8 [a0 + 0x1a] = a3\n 23936: a2 = a2 >> 0x8\n 23939: u8 [a0 + 0x19] = a2\n 23942: a2 = a1 >> 0x38\n 23945: u8 [a0 + 0x17] = a2\n 23948: a2 = a1 >> 0x30\n 23951: u8 [a0 + 0x16] = a2\n 23954: a2 = a1 >> 0x28\n 23957: u8 [a0 + 0x15] = a2\n 23960: a2 = a1 >> 0x20\n 23963: u8 [a0 + 0x14] = a2\n 23966: a2 = a1 >> 0x18\n 23969: u8 [a0 + 0x13] = a2\n 23972: a2 = a1 >> 0x10\n 23975: u8 [a0 + 0x12] = a2\n 23978: a1 = a1 >> 0x8\n 23981: u8 [a0 + 0x11] = a1\n 23984: a0 = 0x20\n 23987: a1 = 0x20\n 23990: ra = 318, jump @0\n      : @391 [@dyn 159] (gas: 35)\n 23996: u8 [a0 + 31] = 0x2\n 24000: u8 [a0 + 30] = 0\n 24003: u8 [a0 + 29] = 0\n 24006: u8 [a0 + 28] = 0\n 24009: u8 [a0 + 27] = 0\n 24012: u8 [a0 + 26] = 0\n 24015: u8 [a0 + 25] = 0\n 24018: u8 [a0 + 24] = 0\n 24021: u8 [a0 + 23] = 0\n 24024: u8 [a0 + 22] = 0\n 24027: u8 [a0 + 21] = 0\n 24030: u8 [a0 + 20] = 0\n 24033: u8 [a0 + 19] = 0\n 24036: u8 [a0 + 18] = 0\n 24039: u8 [a0 + 17] = 0\n 24042: u8 [a0 + 16] = 0\n 24045: u8 [a0 + 15] = 0\n 24048: u8 [a0 + 14] = 0\n 24051: u8 [a0 + 13] = 0\n 24054: u8 [a0 + 12] = 0\n 24057: u8 [a0 + 11] = 0\n 24060: u8 [a0 + 10] = 0\n 24063: u8 [a0 + 9] = 0\n 24066: u8 [a0 + 8] = 0\n 24069: u8 [a0 + 7] = 0\n 24072: u8 [a0 + 6] = 0\n 24075: u8 [a0 + 5] = 0\n 24078: u8 [a0 + 4] = 0\n 24081: u8 [a0 + 3] = 0\n 24084: u8 [a0 + 2] = 0\n 24087: u8 [a0 + 1] = 0\n 24090: u8 [a0 + 0] = 0\n 24092: a1 = 0x40\n 24095: a0 = 0\n 24097: ra = 320, jump @0\n      : @392 [@dyn 160] (gas: 19)\n 24103: i32 a0 = a0 + 0\n 24105: i32 a2 = sp + 0x120\n 24109: a1 = 0x40\n 24112: ecalli 8 // 'hash_keccak_256'\n 24114: a0 = u64 [sp + 0x138]\n 24118: a1 = u64 [sp + 0x130]\n 24122: a2 = u64 [sp + 0x128]\n 24126: a3 = u64 [sp + 0x120]\n 24130: a4 = reverse a0\n 24132: a0 = reverse a1\n 24134: a1 = reverse a2\n 24136: a2 = reverse a3\n 24138: u64 [sp + 0xb8] = a2\n 24142: u64 [sp + 0xb0] = a1\n 24146: u64 [sp + 0xa8] = a0\n 24150: a0 = sp + 0xc0\n 24154: a1 = sp + 0xa0\n 24158: u64 [sp + 0xa0] = a4\n 24162: ra = 322, jump @978\n      : @393 [@dyn 161] (gas: 11)\n 24169: a0 = u64 [sp + 0xc0]\n 24173: u64 [sp + 0x38] = a0\n 24176: a0 = u64 [sp + 0xc8]\n 24180: u64 [sp + 0x30] = a0\n 24183: a0 = u64 [sp + 0xd0]\n 24187: u64 [sp + 0x28] = a0\n 24190: a0 = u64 [sp + 0xd8]\n 24194: u64 [sp + 0x20] = a0\n 24197: a0 = 0x40\n 24200: a1 = 0x20\n 24203: ra = 324, jump @0\n      : @394 [@dyn 162] (gas: 111)\n 24209: a1 = u8 [a0 + 0x1]\n 24212: a2 = u8 [a0]\n 24214: a3 = u8 [a0 + 0x2]\n 24217: a4 = u8 [a0 + 0x3]\n 24220: a1 = a1 << 0x8\n 24223: a1 = a1 | a2\n 24226: a3 = a3 << 0x10\n 24229: a4 = a4 << 0x18\n 24232: a3 = a3 | a4\n 24235: a1 = a1 | a3\n 24238: a2 = u8 [a0 + 0x5]\n 24241: a3 = u8 [a0 + 0x4]\n 24244: a4 = u8 [a0 + 0x6]\n 24247: a5 = u8 [a0 + 0x7]\n 24250: a2 = a2 << 0x8\n 24253: a2 = a2 | a3\n 24256: a4 = a4 << 0x10\n 24259: a5 = a5 << 0x18\n 24262: a4 = a4 | a5\n 24265: a2 = a2 | a4\n 24268: a2 = a2 << 0x20\n 24271: t0 = a2 | a1\n 24274: a2 = u8 [a0 + 0x9]\n 24277: a3 = u8 [a0 + 0x8]\n 24280: a4 = u8 [a0 + 0xa]\n 24283: a5 = u8 [a0 + 0xb]\n 24286: a2 = a2 << 0x8\n 24289: a2 = a2 | a3\n 24292: a4 = a4 << 0x10\n 24295: a5 = a5 << 0x18\n 24298: a4 = a4 | a5\n 24301: a2 = a2 | a4\n 24304: a3 = u8 [a0 + 0xd]\n 24307: a4 = u8 [a0 + 0xc]\n 24310: a5 = u8 [a0 + 0xe]\n 24313: s1 = u8 [a0 + 0xf]\n 24316: a3 = a3 << 0x8\n 24319: a3 = a3 | a4\n 24322: a5 = a5 << 0x10\n 24325: s1 = s1 << 0x18\n 24328: a5 = a5 | s1\n 24331: a3 = a3 | a5\n 24334: a3 = a3 << 0x20\n 24337: a2 = a2 | a3\n 24340: a3 = u8 [a0 + 0x11]\n 24343: a4 = u8 [a0 + 0x10]\n 24346: a5 = u8 [a0 + 0x12]\n 24349: s1 = u8 [a0 + 0x13]\n 24352: a3 = a3 << 0x8\n 24355: a3 = a3 | a4\n 24358: a5 = a5 << 0x10\n 24361: s1 = s1 << 0x18\n 24364: a5 = a5 | s1\n 24367: a3 = a3 | a5\n 24370: a4 = u8 [a0 + 0x15]\n 24373: a5 = u8 [a0 + 0x14]\n 24376: s1 = u8 [a0 + 0x16]\n 24379: a1 = u8 [a0 + 0x17]\n 24382: a4 = a4 << 0x8\n 24385: a4 = a4 | a5\n 24388: s1 = s1 << 0x10\n 24391: a1 = a1 << 0x18\n 24394: a1 = a1 | s1\n 24397: a1 = a1 | a4\n 24400: a1 = a1 << 0x20\n 24403: a3 = a3 | a1\n 24406: a1 = u8 [a0 + 0x19]\n 24409: a4 = u8 [a0 + 0x18]\n 24412: a5 = u8 [a0 + 0x1a]\n 24415: s1 = u8 [a0 + 0x1b]\n 24418: a1 = a1 << 0x8\n 24421: a1 = a1 | a4\n 24424: a5 = a5 << 0x10\n 24427: s1 = s1 << 0x18\n 24430: a5 = a5 | s1\n 24433: a1 = a1 | a5\n 24436: a4 = u8 [a0 + 0x1d]\n 24439: a5 = u8 [a0 + 0x1c]\n 24442: s1 = u8 [a0 + 0x1e]\n 24445: a0 = u8 [a0 + 0x1f]\n 24448: a4 = a4 << 0x8\n 24451: a4 = a4 | a5\n 24454: s1 = s1 << 0x10\n 24457: a0 = a0 << 0x18\n 24460: a0 = a0 | s1\n 24463: a0 = a0 | a4\n 24466: a0 = a0 << 0x20\n 24469: a0 = a0 | a1\n 24472: a4 = reverse a0\n 24474: u64 [sp + 0x8] = a4\n 24477: a3 = reverse a3\n 24479: u64 [sp + 0x10] = a3\n 24482: a1 = reverse a2\n 24484: u64 [sp + 0x18] = a1\n 24487: s1 = reverse t0\n 24489: a0 = u64 [sp + 0x20]\n 24492: u64 [sp + 0x58] = a0\n 24495: a0 = u64 [sp + 0x28]\n 24498: u64 [sp + 0x50] = a0\n 24501: a0 = u64 [sp + 0x30]\n 24504: u64 [sp + 0x48] = a0\n 24507: a0 = u64 [sp + 0x38]\n 24510: u64 [sp + 0x40] = a0\n 24513: u64 [sp + 0x78] = s1\n 24516: u64 [sp + 0x70] = a1\n 24519: u64 [sp + 0x68] = a3\n 24522: a0 = sp + 0x80\n 24526: a1 = sp + 0x60\n 24529: a2 = sp + 0x40\n 24532: u64 [sp + 0x60] = a4\n 24535: ra = 326, jump @370\n      : @395 [@dyn 163] (gas: 12)\n 24541: a4 = u64 [sp + 0x10]\n 24544: a2 = u64 [sp + 0x8]\n 24547: u64 [sp + 0x38] = s1\n 24550: a0 = a4 | s1\n 24553: s1 = u64 [sp + 0x18]\n 24556: a1 = a2 | s1\n 24559: a1 = a1 | a0\n 24562: a1 = a1 >> 0x20\n 24565: a0 = a0 | s1\n 24568: a0 = a0 << 0x20\n 24571: a0 = a0 | a1\n 24574: jump @397 if a0 != 0\n      : @396 (gas: 29)\n 24577: a0 = u64 [sp + 0x88]\n 24581: a1 = u64 [sp + 0x98]\n 24585: u64 [sp + 0x30] = a1\n 24588: t1 = u64 [sp + 0x80]\n 24592: a1 = u64 [sp + 0x90]\n 24596: t2 = a0 ^ a4\n 24599: a5 = a0 <u a4\n 24602: ra = t1 <u a2\n 24605: a5 = ra if t2 == 0\n 24608: a3 = a1 - s1\n 24611: t2 = a3 - a5\n 24614: t0 = a3 <u a5\n 24617: a3 = a1 <u s1\n 24620: a1 = u64 [sp + 0x38]\n 24623: a5 = u64 [sp + 0x30]\n 24626: a5 = a5 - a1\n 24629: a5 = a5 - a3\n 24632: a5 = a5 - t0\n 24635: a0 = a0 - a4\n 24638: a0 = a0 - ra\n 24641: s1 = t1 - a2\n 24644: a0 = a0 | a5\n 24647: a1 = s1 | t2\n 24650: a1 = a1 | a0\n 24653: a0 = a0 | t2\n 24656: a1 = a1 >> 0x20\n 24659: a0 = a0 << 0x20\n 24662: a0 = a0 | a1\n 24665: jump @400 if a0 == 0\n      : @397 (gas: 1)\n 24668: trap\n      : @398 (gas: 3)\n 24669: a0 = 0\n 24671: a1 = 0\n 24673: ra = 328, jump @0\n      : @399 [@dyn 164] (gas: 5)\n 24679: i32 a1 = a0 + 0\n 24681: a0 = 0x1\n 24684: a2 = 0\n 24686: ecalli 11 // 'seal_return'\n 24688: fallthrough\n      : @400 (gas: 4)\n 24689: i32 a0 = a2 + 0\n 24691: i32 s1 = s1 + 0\n 24693: a1 = s1\n 24695: ra = 330, jump @0\n      : @401 [@dyn 165] (gas: 6)\n 24701: i32 a1 = a0 + 0\n 24703: a0 = 0\n 24705: a2 = s1\n 24707: ra = 0x14c\n 24711: ecalli 11 // 'seal_return'\n 24713: fallthrough\n      : @402 [@dyn 166] (gas: 8)\n 24714: sp = sp + 0xffffffffffffff40\n 24718: u64 [sp + 0xb8] = ra\n 24722: u64 [sp + 0xb0] = s0\n 24726: u64 [sp + 0xa8] = s1\n 24730: s0 = sp + 0xc0\n 24734: sp = sp & 0xffffffffffffffe0\n 24737: a0 = i32 [0x200a4]\n 24742: jump @408 if a0 <=u 35\n      : @403 (gas: 11)\n 24747: i32 a0 = sp + 0x80\n 24751: a1 = 0x4\n 24754: ecalli 2 // 'call_data_load'\n 24756: a0 = u64 [sp + 0x80]\n 24760: u64 [sp + 0x18] = a0\n 24763: a0 = u64 [sp + 0x88]\n 24767: u64 [sp + 0x10] = a0\n 24770: a0 = u64 [sp + 0x90]\n 24774: u64 [sp + 0x8] = a0\n 24777: s1 = u64 [sp + 0x98]\n 24781: ra = 334, jump @1108\n      : @404 [@dyn 167] (gas: 9)\n 24788: u64 [sp + 0x38] = s1\n 24791: a0 = u64 [sp + 0x8]\n 24794: u64 [sp + 0x30] = a0\n 24797: a0 = u64 [sp + 0x10]\n 24800: u64 [sp + 0x28] = a0\n 24803: a0 = sp + 0x20\n 24806: a1 = u64 [sp + 0x18]\n 24809: u64 [sp + 0x20] = a1\n 24812: ra = 336, jump @1014\n      : @405 [@dyn 168] (gas: 32)\n 24819: u64 [sp + 120] = 0\n 24822: u64 [sp + 112] = 0\n 24825: u64 [sp + 104] = 0\n 24828: u64 [sp + 96] = 0\n 24831: u64 [sp + 152] = 0\n 24835: u64 [sp + 144] = 0\n 24839: u64 [sp + 136] = 0\n 24843: u64 [sp + 128] = 0\n 24847: u32 [sp + 64] = 0x20\n 24851: i32 a1 = sp + 0x60\n 24854: i32 a3 = sp + 0x80\n 24858: i32 a4 = sp + 0x40\n 24861: a2 = 0xffffffffffffffff\n 24864: a0 = 0\n 24866: ecalli 7 // 'get_storage'\n 24868: u64 [sp + 120] = 0\n 24871: u64 [sp + 112] = 0\n 24874: u64 [sp + 104] = 0\n 24877: u64 [sp + 96] = 0\n 24880: u64 [sp + 152] = 0\n 24884: u64 [sp + 144] = 0\n 24888: u64 [sp + 136] = 0\n 24892: u64 [sp + 128] = 0x1\n 24897: i32 a1 = sp + 0x60\n 24900: i32 a3 = sp + 0x80\n 24904: a2 = 0xffffffffffffffff\n 24907: a4 = 0x20\n 24910: a0 = 0\n 24912: ecalli 13 // 'set_storage'\n 24914: a0 = 0x40\n 24917: a1 = 0x20\n 24920: ra = 338, jump @0\n      : @406 [@dyn 169] (gas: 100)\n 24926: a1 = u8 [a0 + 0x11]\n 24929: a2 = u8 [a0 + 0x10]\n 24932: a3 = u8 [a0 + 0x12]\n 24935: a4 = u8 [a0 + 0x13]\n 24938: a1 = a1 << 0x8\n 24941: a1 = a1 | a2\n 24944: a3 = a3 << 0x10\n 24947: a4 = a4 << 0x18\n 24950: a3 = a3 | a4\n 24953: a1 = a1 | a3\n 24956: a2 = u8 [a0 + 0x15]\n 24959: a3 = u8 [a0 + 0x14]\n 24962: a4 = u8 [a0 + 0x16]\n 24965: a5 = u8 [a0 + 0x17]\n 24968: a2 = a2 << 0x8\n 24971: a2 = a2 | a3\n 24974: a4 = a4 << 0x10\n 24977: a5 = a5 << 0x18\n 24980: a4 = a4 | a5\n 24983: a2 = a2 | a4\n 24986: a2 = a2 << 0x20\n 24989: t0 = a2 | a1\n 24992: a2 = u8 [a0 + 0x1]\n 24995: a3 = u8 [a0]\n 24997: a4 = u8 [a0 + 0x2]\n 25000: a5 = u8 [a0 + 0x3]\n 25003: a2 = a2 << 0x8\n 25006: a2 = a2 | a3\n 25009: a4 = a4 << 0x10\n 25012: a5 = a5 << 0x18\n 25015: a4 = a4 | a5\n 25018: a2 = a2 | a4\n 25021: a3 = u8 [a0 + 0x5]\n 25024: a4 = u8 [a0 + 0x4]\n 25027: a5 = u8 [a0 + 0x6]\n 25030: s1 = u8 [a0 + 0x7]\n 25033: a3 = a3 << 0x8\n 25036: a3 = a3 | a4\n 25039: a5 = a5 << 0x10\n 25042: s1 = s1 << 0x18\n 25045: a5 = a5 | s1\n 25048: a3 = a3 | a5\n 25051: a3 = a3 << 0x20\n 25054: a2 = a2 | a3\n 25057: a3 = u8 [a0 + 0x19]\n 25060: a4 = u8 [a0 + 0x18]\n 25063: a5 = u8 [a0 + 0x1a]\n 25066: s1 = u8 [a0 + 0x1b]\n 25069: a3 = a3 << 0x8\n 25072: a3 = a3 | a4\n 25075: a5 = a5 << 0x10\n 25078: s1 = s1 << 0x18\n 25081: a5 = a5 | s1\n 25084: a3 = a3 | a5\n 25087: a4 = u8 [a0 + 0x1d]\n 25090: a5 = u8 [a0 + 0x1c]\n 25093: s1 = u8 [a0 + 0x1e]\n 25096: a1 = u8 [a0 + 0x1f]\n 25099: a4 = a4 << 0x8\n 25102: a4 = a4 | a5\n 25105: s1 = s1 << 0x10\n 25108: a1 = a1 << 0x18\n 25111: a1 = a1 | s1\n 25114: a1 = a1 | a4\n 25117: a1 = a1 << 0x20\n 25120: a3 = a3 | a1\n 25123: a1 = u8 [a0 + 0x9]\n 25126: a4 = u8 [a0 + 0x8]\n 25129: a5 = u8 [a0 + 0xa]\n 25132: s1 = u8 [a0 + 0xb]\n 25135: a1 = a1 << 0x8\n 25138: a1 = a1 | a4\n 25141: a5 = a5 << 0x10\n 25144: s1 = s1 << 0x18\n 25147: a5 = a5 | s1\n 25150: a1 = a1 | a5\n 25153: a4 = u8 [a0 + 0xd]\n 25156: a5 = u8 [a0 + 0xc]\n 25159: s1 = u8 [a0 + 0xe]\n 25162: a0 = u8 [a0 + 0xf]\n 25165: a4 = a4 << 0x8\n 25168: a4 = a4 | a5\n 25171: s1 = s1 << 0x10\n 25174: a0 = a0 << 0x18\n 25177: a0 = a0 | s1\n 25180: a0 = a0 | a4\n 25183: a0 = a0 << 0x20\n 25186: a0 = a0 | a1\n 25189: a1 = reverse a0\n 25191: a0 = reverse a3\n 25193: a2 = reverse a2\n 25195: a3 = reverse t0\n 25197: a2 = a2 | a3\n 25200: a3 = a0 | a1\n 25203: a3 = a3 | a2\n 25206: a3 = a3 >> 0x20\n 25209: a1 = a1 | a2\n 25212: a1 = a1 << 0x20\n 25215: a1 = a1 | a3\n 25218: jump @410 if a1 == 0\n      : @407 (gas: 1)\n 25221: trap\n      : @408 (gas: 3)\n 25222: a0 = 0\n 25224: a1 = 0\n 25226: ra = 340, jump @0\n      : @409 [@dyn 170] (gas: 7)\n 25232: i32 a1 = a0 + 0\n 25234: a0 = 0x1\n 25237: a2 = 0\n 25239: ecalli 11 // 'seal_return'\n 25241: i32 a0 = a0 + 0\n 25243: ra = 0x156\n 25247: jump @0\n      : @410 (gas: 2)\n 25250: i32 a0 = a0 + 0\n 25252: ra = 342, jump @0\n      : @411 [@dyn 171] (gas: 6)\n 25258: i32 a1 = a0 + 0\n 25260: a0 = 0\n 25262: a2 = 0\n 25264: ra = 0x158\n 25268: ecalli 11 // 'seal_return'\n 25270: fallthrough\n      : @412 [@dyn 172] (gas: 12)\n 25271: sp = sp + 0xffffffffffffff80\n 25274: u64 [sp + 0x78] = ra\n 25277: u64 [sp + 0x70] = s0\n 25280: s0 = sp + 0x80\n 25284: sp = sp & 0xffffffffffffffe0\n 25287: u64 [sp + 56] = 0\n 25290: u64 [sp + 48] = 0\n 25293: u64 [sp + 40] = 0\n 25296: u64 [sp + 32] = 0\n 25299: i32 a0 = sp + 0x20\n 25302: ecalli 14 // 'value_transferred'\n 25304: fallthrough\n      : @413 (gas: 8)\n 25305: a0 = u64 [sp + 0x30]\n 25308: a1 = u64 [sp + 0x38]\n 25311: a2 = u64 [sp + 0x28]\n 25314: a3 = u64 [sp + 0x20]\n 25317: a1 = a1 | a2\n 25320: a0 = a0 | a3\n 25323: a0 = a0 | a1\n 25326: jump @419 if a0 != 0\n      : @414 (gas: 2)\n 25330: a0 = i32 [0x200a4]\n 25335: jump @419 if a0 <=u 35\n      : @415 (gas: 42)\n 25340: i32 a0 = sp + 0x40\n 25343: a1 = 0x4\n 25346: ecalli 2 // 'call_data_load'\n 25348: a1 = u64 [sp + 0x40]\n 25351: a0 = u64 [sp + 0x48]\n 25354: a2 = u64 [sp + 0x50]\n 25357: a3 = u64 [sp + 0x58]\n 25360: u64 [sp + 0x18] = a3\n 25363: u64 [sp + 0x10] = a2\n 25366: u64 [sp + 0x8] = a0\n 25369: a0 = sp\n 25371: u64 [sp] = a1\n 25373: ra = 0x15a\n 25377: sp = sp + 0xfffffffffffffd20\n 25381: u64 [sp + 0x2d8] = ra\n 25385: u64 [sp + 0x2d0] = s0\n 25389: u64 [sp + 0x2c8] = s1\n 25393: s0 = sp + 0x2e0\n 25397: sp = sp & 0xffffffffffffffe0\n 25400: a1 = u64 [a0]\n 25402: u64 [sp + 0x48] = a1\n 25405: a1 = u64 [a0 + 0x8]\n 25408: u64 [sp + 0x40] = a1\n 25411: a1 = u64 [a0 + 0x10]\n 25414: u64 [sp + 0x38] = a1\n 25417: s1 = u64 [a0 + 0x18]\n 25420: u64 [sp + 600] = 0\n 25424: u64 [sp + 592] = 0\n 25428: u64 [sp + 584] = 0\n 25432: u64 [sp + 576] = 0x1\n 25437: u64 [sp + 632] = 0\n 25441: u64 [sp + 624] = 0\n 25445: u64 [sp + 616] = 0\n 25449: u64 [sp + 608] = 0\n 25453: u32 [sp + 544] = 0x20\n 25458: i32 a1 = sp + 0x240\n 25462: i32 a3 = sp + 0x260\n 25466: i32 a4 = sp + 0x220\n 25470: a2 = 0xffffffffffffffff\n 25473: a0 = 0\n 25475: ecalli 7 // 'get_storage'\n 25477: jump @1071\n      : @416 [@dyn 173] (gas: 3)\n 25481: a0 = 0x40\n 25484: a1 = 0x20\n 25487: ra = 348, jump @0\n      : @417 [@dyn 174] (gas: 100)\n 25493: a1 = u8 [a0 + 0x11]\n 25496: a2 = u8 [a0 + 0x10]\n 25499: a3 = u8 [a0 + 0x12]\n 25502: a4 = u8 [a0 + 0x13]\n 25505: a1 = a1 << 0x8\n 25508: a1 = a1 | a2\n 25511: a3 = a3 << 0x10\n 25514: a4 = a4 << 0x18\n 25517: a3 = a3 | a4\n 25520: a1 = a1 | a3\n 25523: a2 = u8 [a0 + 0x15]\n 25526: a3 = u8 [a0 + 0x14]\n 25529: a4 = u8 [a0 + 0x16]\n 25532: a5 = u8 [a0 + 0x17]\n 25535: a2 = a2 << 0x8\n 25538: a2 = a2 | a3\n 25541: a4 = a4 << 0x10\n 25544: a5 = a5 << 0x18\n 25547: a4 = a4 | a5\n 25550: a2 = a2 | a4\n 25553: a2 = a2 << 0x20\n 25556: t0 = a2 | a1\n 25559: a2 = u8 [a0 + 0x1]\n 25562: a3 = u8 [a0]\n 25564: a4 = u8 [a0 + 0x2]\n 25567: a5 = u8 [a0 + 0x3]\n 25570: a2 = a2 << 0x8\n 25573: a2 = a2 | a3\n 25576: a4 = a4 << 0x10\n 25579: a5 = a5 << 0x18\n 25582: a4 = a4 | a5\n 25585: a2 = a2 | a4\n 25588: a3 = u8 [a0 + 0x5]\n 25591: a4 = u8 [a0 + 0x4]\n 25594: a5 = u8 [a0 + 0x6]\n 25597: a1 = u8 [a0 + 0x7]\n 25600: a3 = a3 << 0x8\n 25603: a3 = a3 | a4\n 25606: a5 = a5 << 0x10\n 25609: a1 = a1 << 0x18\n 25612: a1 = a1 | a5\n 25615: a1 = a1 | a3\n 25618: a1 = a1 << 0x20\n 25621: t1 = a1 | a2\n 25624: a1 = u8 [a0 + 0x19]\n 25627: a3 = u8 [a0 + 0x18]\n 25630: a4 = u8 [a0 + 0x1a]\n 25633: a5 = u8 [a0 + 0x1b]\n 25636: a1 = a1 << 0x8\n 25639: a1 = a1 | a3\n 25642: a4 = a4 << 0x10\n 25645: a5 = a5 << 0x18\n 25648: a4 = a4 | a5\n 25651: a1 = a1 | a4\n 25654: a3 = u8 [a0 + 0x1d]\n 25657: a4 = u8 [a0 + 0x1c]\n 25660: a5 = u8 [a0 + 0x1e]\n 25663: a2 = u8 [a0 + 0x1f]\n 25666: a3 = a3 << 0x8\n 25669: a3 = a3 | a4\n 25672: a5 = a5 << 0x10\n 25675: a2 = a2 << 0x18\n 25678: a2 = a2 | a5\n 25681: a2 = a2 | a3\n 25684: a2 = a2 << 0x20\n 25687: a3 = a2 | a1\n 25690: a1 = u8 [a0 + 0x9]\n 25693: a2 = u8 [a0 + 0x8]\n 25696: a4 = u8 [a0 + 0xa]\n 25699: a5 = u8 [a0 + 0xb]\n 25702: a1 = a1 << 0x8\n 25705: a1 = a1 | a2\n 25708: a4 = a4 << 0x10\n 25711: a5 = a5 << 0x18\n 25714: a4 = a4 | a5\n 25717: a1 = a1 | a4\n 25720: a2 = u8 [a0 + 0xd]\n 25723: a4 = u8 [a0 + 0xc]\n 25726: a5 = u8 [a0 + 0xe]\n 25729: a0 = u8 [a0 + 0xf]\n 25732: a2 = a2 << 0x8\n 25735: a2 = a2 | a4\n 25738: a5 = a5 << 0x10\n 25741: a0 = a0 << 0x18\n 25744: a0 = a0 | a5\n 25747: a0 = a0 | a2\n 25750: a0 = a0 << 0x20\n 25753: a0 = a0 | a1\n 25756: a1 = reverse a0\n 25758: a0 = reverse a3\n 25760: a2 = reverse t1\n 25762: a3 = reverse t0\n 25764: a2 = a2 | a3\n 25767: a3 = a0 | a1\n 25770: a3 = a3 | a2\n 25773: a3 = a3 >> 0x20\n 25776: a1 = a1 | a2\n 25779: a1 = a1 << 0x20\n 25782: a1 = a1 | a3\n 25785: jump @421 if a1 == 0\n      : @418 (gas: 1)\n 25788: trap\n      : @419 (gas: 3)\n 25789: a0 = 0\n 25791: a1 = 0\n 25793: ra = 350, jump @0\n      : @420 [@dyn 175] (gas: 7)\n 25799: i32 a1 = a0 + 0\n 25801: a0 = 0x1\n 25804: a2 = 0\n 25806: ecalli 11 // 'seal_return'\n 25808: i32 a0 = a0 + 0\n 25810: ra = 0x160\n 25814: jump @0\n      : @421 (gas: 2)\n 25817: i32 a0 = a0 + 0\n 25819: ra = 352, jump @0\n      : @422 [@dyn 176] (gas: 6)\n 25825: i32 a1 = a0 + 0\n 25827: a0 = 0\n 25829: a2 = 0\n 25831: ra = 0x162\n 25835: ecalli 11 // 'seal_return'\n 25837: fallthrough\n      : @423 [@dyn 177] (gas: 10)\n 25838: a1 = u64 [a0 + 0x10]\n 25841: a0 = u64 [a0 + 0x18]\n 25844: a2 = 0x100000000\n 25854: a2 = a2 ^ a1\n 25857: a2 = a2 | a0\n 25860: a1 = a1 >> 0x20\n 25863: a1 = a1 <u 0x1\n 25866: a1 = 0 if a0 != 0\n 25868: a1 = 0 if a2 == 0\n 25870: jump @425 if a1 == 0\n      : @424 (gas: 1)\n 25873: ret\n      : @425 (gas: 4)\n 25875: sp = sp + 0xfffffffffffffff8\n 25878: u64 [sp] = ra\n 25880: a0 = 0\n 25882: ra = 356, jump @0\n      : @426 [@dyn 178] (gas: 6)\n 25888: i32 a1 = a0 + 0\n 25890: a0 = 0x1\n 25893: a2 = 0\n 25895: ra = 0x166\n 25899: ecalli 11 // 'seal_return'\n 25901: fallthrough\n      : @427 [@dyn 179] (gas: 18)\n 25902: sp = sp + 0xffffffffffffffc0\n 25905: u64 [sp + 0x38] = ra\n 25908: u64 [sp + 0x30] = s0\n 25911: u64 [sp + 0x28] = s1\n 25914: s0 = sp + 0x40\n 25917: sp = sp & 0xffffffffffffffe0\n 25920: a2 = u64 [a1 + 0x10]\n 25923: a3 = u64 [a1 + 0x18]\n 25926: a4 = u64 [a1 + 0x8]\n 25929: a1 = u64 [a1]\n 25931: a3 = a3 | a4\n 25934: a4 = a1 | a2\n 25937: a4 = a4 | a3\n 25940: a4 = a4 >> 0x20\n 25943: a2 = a2 | a3\n 25946: a2 = a2 << 0x20\n 25949: a2 = a2 | a4\n 25952: jump @431 if a2 != 0\n      : @428 (gas: 5)\n 25955: s1 = a0\n 25957: i32 a1 = a1 + 0\n 25959: i32 a0 = sp + 0\n 25961: ecalli 2 // 'call_data_load'\n 25963: fallthrough\n      : @429 (gas: 10)\n 25964: a0 = u64 [sp + 0x10]\n 25967: a1 = u64 [sp + 0x18]\n 25970: a2 = 0x100000000\n 25980: a2 = a2 ^ a0\n 25983: a2 = a2 | a1\n 25986: a3 = a0 >> 0x20\n 25989: a3 = a3 <u 0x1\n 25992: a3 = 0 if a1 != 0\n 25994: a3 = 0 if a2 == 0\n 25996: jump @432 if a3 == 0\n      : @430 (gas: 12)\n 25999: a2 = u64 [sp]\n 26001: a3 = u64 [sp + 0x8]\n 26004: u64 [s1] = a2\n 26006: u64 [s1 + 0x8] = a3\n 26009: u64 [s1 + 0x10] = a0\n 26012: u64 [s1 + 0x18] = a1\n 26015: sp = s0 + 0xffffffffffffffc0\n 26018: ra = u64 [sp + 0x38]\n 26021: s0 = u64 [sp + 0x30]\n 26024: s1 = u64 [sp + 0x28]\n 26027: sp = sp + 0x40\n 26030: ret\n      : @431 (gas: 1)\n 26032: trap\n      : @432 (gas: 3)\n 26033: a0 = 0\n 26035: a1 = 0\n 26037: ra = 360, jump @0\n      : @433 [@dyn 180] (gas: 6)\n 26043: i32 a1 = a0 + 0\n 26045: a0 = 0x1\n 26048: a2 = 0\n 26050: ra = 0x16a\n 26054: ecalli 11 // 'seal_return'\n 26056: fallthrough\n      : @434 [@dyn 181] (gas: 47)\n 26057: sp = sp + 0xffffffffffffff80\n 26060: u64 [sp + 0x78] = ra\n 26063: u64 [sp + 0x70] = s0\n 26066: u64 [sp + 0x68] = s1\n 26069: s0 = sp + 0x80\n 26073: sp = sp & 0xffffffffffffffe0\n 26076: ra = u64 [a1 + 0x10]\n 26079: a5 = u64 [a1 + 0x8]\n 26082: a3 = u64 [a2 + 0x8]\n 26085: t1 = u64 [a1]\n 26087: a4 = u64 [a2]\n 26089: u64 [sp + 0x28] = a4\n 26092: t2 = u64 [a2 + 0x10]\n 26095: t0 = a3 ^ a5\n 26098: s1 = a3 <u a5\n 26101: a4 = a4 <u t1\n 26104: u64 [sp + 0x20] = a4\n 26107: s1 = a4 if t0 == 0\n 26110: t0 = u64 [a1 + 0x18]\n 26113: a1 = u64 [a2 + 0x18]\n 26116: u64 [sp + 0x18] = a1\n 26119: a2 = t2 - ra\n 26122: a1 = a2 - s1\n 26125: u64 [sp + 0x30] = a1\n 26128: a1 = a2 <u s1\n 26131: a4 = t2 <u ra\n 26134: u64 [sp + 0x38] = t0\n 26137: a2 = u64 [sp + 0x18]\n 26140: a2 = a2 - t0\n 26143: a2 = a2 - a4\n 26146: a2 = a2 - a1\n 26149: a1 = a3 - a5\n 26152: a3 = u64 [sp + 0x20]\n 26155: a1 = a1 - a3\n 26158: a3 = u64 [sp + 0x28]\n 26161: a3 = a3 - t1\n 26164: a4 = a1 >u 0\n 26166: a3 = a3 <u 0x40\n 26169: a3 = a3 ^ 0x1\n 26172: a3 = a4 if a1 != 0\n 26175: s1 = a2 >s 0\n 26177: a1 = u64 [sp + 0x30]\n 26180: a4 = a1 >u 0\n 26182: a4 = s1 if a2 != 0\n 26185: a1 = a1 | a2\n 26188: a3 = a4 if a1 != 0\n 26191: jump @441 if a3 == 0\n      : @435 (gas: 12)\n 26195: s1 = a0\n 26197: a0 = t1 | ra\n 26200: u64 [sp + 0x30] = a5\n 26203: a1 = u64 [sp + 0x38]\n 26206: a1 = a1 | a5\n 26209: a0 = a0 | a1\n 26212: a0 = a0 >> 0x20\n 26215: u64 [sp + 0x28] = ra\n 26218: a1 = a1 | ra\n 26221: a1 = a1 << 0x20\n 26224: a0 = a0 | a1\n 26227: jump @440 if a0 != 0\n      : @436 (gas: 6)\n 26231: u64 [sp + 0x20] = t1\n 26234: i32 a1 = t1 + 0\n 26236: i32 a0 = sp + 0x40\n 26239: u64 [sp + 0x8] = a1\n 26242: ecalli 2 // 'call_data_load'\n 26244: fallthrough\n      : @437 (gas: 10)\n 26245: a3 = u64 [sp + 0x50]\n 26248: a4 = u64 [sp + 0x58]\n 26251: a0 = 0x100000000\n 26261: a1 = a3 ^ a0\n 26264: a1 = a1 | a4\n 26267: a2 = a3 >> 0x20\n 26270: a2 = a2 <u 0x1\n 26273: a2 = 0 if a4 != 0\n 26275: a2 = 0 if a1 == 0\n 26277: jump @441 if a2 == 0\n      : @438 (gas: 12)\n 26281: u64 [sp + 0x10] = a4\n 26284: u64 [sp + 0x18] = a3\n 26287: a1 = u64 [sp + 0x28]\n 26290: a2 = u64 [sp + 0x38]\n 26293: a1 = a1 | a2\n 26296: a0 = 0xffffffe0\n 26306: a2 = u64 [sp + 0x20]\n 26309: a0 = a2 <u a0\n 26312: a2 = u64 [sp + 0x30]\n 26315: a0 = 0 if a2 != 0\n 26317: a0 = 0 if a1 != 0\n 26319: jump @440 if a0 == 0\n      : @439 (gas: 30)\n 26322: a0 = u64 [sp + 0x48]\n 26325: u64 [sp + 0x30] = a0\n 26328: a0 = u64 [sp + 0x40]\n 26331: u64 [sp + 0x38] = a0\n 26334: a0 = u64 [sp + 0x8]\n 26337: i32 a1 = a0 + 0x20\n 26340: i32 a0 = sp + 0x40\n 26343: ecalli 2 // 'call_data_load'\n 26345: a0 = u64 [sp + 0x58]\n 26348: a1 = u64 [sp + 0x50]\n 26351: a2 = u64 [sp + 0x48]\n 26354: a3 = u64 [sp + 0x40]\n 26357: u64 [s1 + 0x38] = a0\n 26360: u64 [s1 + 0x30] = a1\n 26363: u64 [s1 + 0x28] = a2\n 26366: u64 [s1 + 0x20] = a3\n 26369: a0 = u64 [sp + 0x10]\n 26372: u64 [s1 + 0x18] = a0\n 26375: a0 = u64 [sp + 0x18]\n 26378: u64 [s1 + 0x10] = a0\n 26381: a0 = u64 [sp + 0x30]\n 26384: u64 [s1 + 0x8] = a0\n 26387: a0 = u64 [sp + 0x38]\n 26390: u64 [s1] = a0\n 26392: sp = s0 + 0xffffffffffffff80\n 26395: ra = u64 [sp + 0x78]\n 26398: s0 = u64 [sp + 0x70]\n 26401: s1 = u64 [sp + 0x68]\n 26404: sp = sp + 0x80\n 26408: ret\n      : @440 (gas: 1)\n 26410: trap\n      : @441 (gas: 3)\n 26411: a0 = 0\n 26413: a1 = 0\n 26415: ra = 364, jump @0\n      : @442 [@dyn 182] (gas: 6)\n 26421: i32 a1 = a0 + 0\n 26423: a0 = 0x1\n 26426: a2 = 0\n 26428: ra = 0x16e\n 26432: ecalli 11 // 'seal_return'\n 26434: fallthrough\n      : @443 [@dyn 183] (gas: 23)\n 26435: sp = sp + 0xffffffffffffff80\n 26438: u64 [sp + 0x78] = ra\n 26441: u64 [sp + 0x70] = s0\n 26444: u64 [sp + 0x68] = s1\n 26447: s0 = sp + 0x80\n 26451: sp = sp & 0xffffffffffffffe0\n 26454: a3 = u64 [a1]\n 26456: u64 [sp + 0x30] = a3\n 26459: a3 = u64 [a1 + 0x8]\n 26462: u64 [sp + 0x28] = a3\n 26465: a3 = u64 [a1 + 0x10]\n 26468: u64 [sp + 0x20] = a3\n 26471: a1 = u64 [a1 + 0x18]\n 26474: u64 [sp + 0x18] = a1\n 26477: a1 = u64 [a2]\n 26479: u64 [sp + 0x10] = a1\n 26482: a1 = u64 [a2 + 0x8]\n 26485: u64 [sp + 0x8] = a1\n 26488: s1 = u32 [a2 + 0x10]\n 26491: u64 [sp + 0x38] = a0\n 26494: a1 = 0x20\n 26497: a0 = 0\n 26499: ra = 368, jump @0\n      : @444 [@dyn 184] (gas: 58)\n 26505: a1 = reverse s1\n 26507: a2 = u64 [sp + 0x8]\n 26510: a2 = reverse a2\n 26512: a3 = u64 [sp + 0x10]\n 26515: a3 = reverse a3\n 26517: a4 = a3 >> 0x38\n 26520: u8 [a0 + 0x1f] = a4\n 26523: a4 = a3 >> 0x30\n 26526: u8 [a0 + 0x1e] = a4\n 26529: a4 = a3 >> 0x28\n 26532: u8 [a0 + 0x1d] = a4\n 26535: a4 = a3 >> 0x20\n 26538: u8 [a0 + 0x1c] = a4\n 26541: a4 = a3 >> 0x18\n 26544: u8 [a0 + 0x1b] = a4\n 26547: a4 = a3 >> 0x10\n 26550: u8 [a0 + 0x1a] = a4\n 26553: a4 = a3 >> 0x8\n 26556: u8 [a0 + 0x19] = a4\n 26559: u8 [a0 + 0x18] = a3\n 26562: a3 = a2 >> 0x38\n 26565: u8 [a0 + 0x17] = a3\n 26568: a3 = a2 >> 0x30\n 26571: u8 [a0 + 0x16] = a3\n 26574: a3 = a2 >> 0x28\n 26577: u8 [a0 + 0x15] = a3\n 26580: a3 = a2 >> 0x20\n 26583: u8 [a0 + 0x14] = a3\n 26586: a3 = a2 >> 0x18\n 26589: u8 [a0 + 0x13] = a3\n 26592: a3 = a2 >> 0x10\n 26595: u8 [a0 + 0x12] = a3\n 26598: a3 = a2 >> 0x8\n 26601: u8 [a0 + 0x11] = a3\n 26604: u8 [a0 + 0x10] = a2\n 26607: a2 = a1 >> 0x38\n 26610: u8 [a0 + 0xf] = a2\n 26613: a2 = a1 >> 0x30\n 26616: u8 [a0 + 0xe] = a2\n 26619: a2 = a1 >> 0x28\n 26622: u8 [a0 + 0xd] = a2\n 26625: a2 = a1 >> 0x20\n 26628: u8 [a0 + 0xc] = a2\n 26631: u8 [a0 + 11] = 0\n 26634: u8 [a0 + 10] = 0\n 26637: u8 [a0 + 9] = 0\n 26640: u8 [a0 + 0x8] = a1\n 26643: u8 [a0 + 7] = 0\n 26646: u8 [a0 + 6] = 0\n 26649: u8 [a0 + 5] = 0\n 26652: u8 [a0 + 4] = 0\n 26655: u8 [a0 + 3] = 0\n 26658: u8 [a0 + 2] = 0\n 26661: u8 [a0 + 1] = 0\n 26664: u8 [a0 + 0] = 0\n 26666: a0 = 0x20\n 26669: a1 = 0x20\n 26672: ra = 370, jump @0\n      : @445 [@dyn 185] (gas: 71)\n 26678: a1 = u64 [sp + 0x18]\n 26681: a1 = reverse a1\n 26683: a2 = u64 [sp + 0x20]\n 26686: a2 = reverse a2\n 26688: a3 = u64 [sp + 0x28]\n 26691: a3 = reverse a3\n 26693: a4 = u64 [sp + 0x30]\n 26696: a4 = reverse a4\n 26698: a5 = a4 >> 0x38\n 26701: u8 [a0 + 0x1f] = a5\n 26704: a5 = a4 >> 0x30\n 26707: u8 [a0 + 0x1e] = a5\n 26710: a5 = a4 >> 0x28\n 26713: u8 [a0 + 0x1d] = a5\n 26716: a5 = a4 >> 0x20\n 26719: u8 [a0 + 0x1c] = a5\n 26722: a5 = a4 >> 0x18\n 26725: u8 [a0 + 0x1b] = a5\n 26728: a5 = a4 >> 0x10\n 26731: u8 [a0 + 0x1a] = a5\n 26734: a5 = a4 >> 0x8\n 26737: u8 [a0 + 0x19] = a5\n 26740: u8 [a0 + 0x18] = a4\n 26743: a4 = a3 >> 0x38\n 26746: u8 [a0 + 0x17] = a4\n 26749: a4 = a3 >> 0x30\n 26752: u8 [a0 + 0x16] = a4\n 26755: a4 = a3 >> 0x28\n 26758: u8 [a0 + 0x15] = a4\n 26761: a4 = a3 >> 0x20\n 26764: u8 [a0 + 0x14] = a4\n 26767: a4 = a3 >> 0x18\n 26770: u8 [a0 + 0x13] = a4\n 26773: a4 = a3 >> 0x10\n 26776: u8 [a0 + 0x12] = a4\n 26779: a4 = a3 >> 0x8\n 26782: u8 [a0 + 0x11] = a4\n 26785: u8 [a0 + 0x10] = a3\n 26788: a3 = a2 >> 0x38\n 26791: u8 [a0 + 0xf] = a3\n 26794: a3 = a2 >> 0x30\n 26797: u8 [a0 + 0xe] = a3\n 26800: a3 = a2 >> 0x28\n 26803: u8 [a0 + 0xd] = a3\n 26806: a3 = a2 >> 0x20\n 26809: u8 [a0 + 0xc] = a3\n 26812: a3 = a2 >> 0x18\n 26815: u8 [a0 + 0xb] = a3\n 26818: a3 = a2 >> 0x10\n 26821: u8 [a0 + 0xa] = a3\n 26824: a3 = a2 >> 0x8\n 26827: u8 [a0 + 0x9] = a3\n 26830: u8 [a0 + 0x8] = a2\n 26833: a2 = a1 >> 0x38\n 26836: u8 [a0 + 0x7] = a2\n 26839: a2 = a1 >> 0x30\n 26842: u8 [a0 + 0x6] = a2\n 26845: a2 = a1 >> 0x28\n 26848: u8 [a0 + 0x5] = a2\n 26851: a2 = a1 >> 0x20\n 26854: u8 [a0 + 0x4] = a2\n 26857: a2 = a1 >> 0x18\n 26860: u8 [a0 + 0x3] = a2\n 26863: a2 = a1 >> 0x10\n 26866: u8 [a0 + 0x2] = a2\n 26869: a2 = a1 >> 0x8\n 26872: u8 [a0 + 0x1] = a2\n 26875: u8 [a0] = a1\n 26877: a1 = 0x40\n 26880: a0 = 0\n 26882: ra = 372, jump @0\n      : @446 [@dyn 186] (gas: 23)\n 26888: i32 a0 = a0 + 0\n 26890: i32 a2 = sp + 0x40\n 26893: a1 = 0x40\n 26896: ecalli 8 // 'hash_keccak_256'\n 26898: a0 = u64 [sp + 0x58]\n 26901: a1 = u64 [sp + 0x50]\n 26904: a2 = u64 [sp + 0x48]\n 26907: a3 = u64 [sp + 0x40]\n 26910: a0 = reverse a0\n 26912: a1 = reverse a1\n 26914: a2 = reverse a2\n 26916: a3 = reverse a3\n 26918: a4 = u64 [sp + 0x38]\n 26921: u64 [a4 + 0x18] = a3\n 26924: u64 [a4 + 0x10] = a2\n 26927: u64 [a4 + 0x8] = a1\n 26930: u64 [a4] = a0\n 26932: sp = s0 + 0xffffffffffffff80\n 26935: ra = u64 [sp + 0x78]\n 26938: s0 = u64 [sp + 0x70]\n 26941: s1 = u64 [sp + 0x68]\n 26944: sp = sp + 0x80\n 26948: ret\n      : @447 (gas: 38)\n 26950: sp = sp + 0xfffffffffffffee0\n 26954: u64 [sp + 0x118] = ra\n 26958: u64 [sp + 0x110] = s0\n 26962: u64 [sp + 0x108] = s1\n 26966: s0 = sp + 0x120\n 26970: sp = sp & 0xffffffffffffffe0\n 26973: u64 [sp + 0x40] = a0\n 26976: a0 = u64 [a2]\n 26978: u64 [sp + 0x48] = a0\n 26981: a0 = u64 [a2 + 0x8]\n 26984: u64 [sp + 0x50] = a0\n 26987: a0 = u64 [a2 + 0x10]\n 26990: u64 [sp + 0x58] = a0\n 26993: s1 = u64 [a2 + 0x18]\n 26996: a4 = u64 [a1 + 0x18]\n 26999: a3 = u64 [a1 + 0x10]\n 27002: a2 = u64 [a1 + 0x8]\n 27005: a0 = u64 [a1]\n 27007: u64 [sp + 0x18] = a4\n 27010: u64 [sp + 0xb8] = a4\n 27014: u64 [sp + 0x20] = a3\n 27017: u64 [sp + 0xb0] = a3\n 27021: u64 [sp + 0x28] = a2\n 27024: u64 [sp + 0xa8] = a2\n 27028: u64 [sp + 0x30] = a0\n 27031: u64 [sp + 0xa0] = a0\n 27035: u64 [sp + 248] = 0\n 27039: u64 [sp + 240] = 0\n 27043: u64 [sp + 232] = 0\n 27047: u64 [sp + 224] = 0\n 27051: u32 [sp + 192] = 0x20\n 27056: i32 a1 = sp + 0xa0\n 27060: i32 a3 = sp + 0xe0\n 27064: i32 a4 = sp + 0xc0\n 27068: a2 = 0xffffffffffffffff\n 27071: a0 = 0\n 27073: ecalli 7 // 'get_storage'\n 27075: fallthrough\n      : @448 (gas: 20)\n 27076: a0 = u64 [sp + 0xf8]\n 27080: t0 = u64 [sp + 0xe0]\n 27084: a2 = u64 [sp + 0xf0]\n 27088: a3 = u64 [sp + 0xe8]\n 27092: a4 = a0 ^ s1\n 27095: u64 [sp + 0x38] = s1\n 27098: a1 = s1 <u a0\n 27101: a0 = u64 [sp + 0x58]\n 27104: a5 = a0 <u a2\n 27107: a5 = a1 if a4 != 0\n 27110: a1 = u64 [sp + 0x50]\n 27113: t1 = a3 ^ a1\n 27116: a3 = a1 <u a3\n 27119: a1 = u64 [sp + 0x48]\n 27122: a1 = a1 <u t0\n 27125: a1 = a3 if t1 != 0\n 27128: a0 = a0 ^ a2\n 27131: a0 = a0 | a4\n 27134: a1 = a5 if a0 != 0\n 27137: jump @452 if a1 == 0\n      : @449 (gas: 3)\n 27141: a1 = 0x20\n 27144: a0 = 0\n 27146: ra = 374, jump @0\n      : @450 [@dyn 187] (gas: 71)\n 27152: a1 = u64 [sp + 0x18]\n 27155: a1 = reverse a1\n 27157: a2 = u64 [sp + 0x20]\n 27160: a2 = reverse a2\n 27162: a3 = u64 [sp + 0x28]\n 27165: a3 = reverse a3\n 27167: a4 = u64 [sp + 0x30]\n 27170: a4 = reverse a4\n 27172: a5 = a4 >> 0x38\n 27175: u8 [a0 + 0x1f] = a5\n 27178: a5 = a4 >> 0x30\n 27181: u8 [a0 + 0x1e] = a5\n 27184: a5 = a4 >> 0x28\n 27187: u8 [a0 + 0x1d] = a5\n 27190: a5 = a4 >> 0x20\n 27193: u8 [a0 + 0x1c] = a5\n 27196: a5 = a4 >> 0x18\n 27199: u8 [a0 + 0x1b] = a5\n 27202: a5 = a4 >> 0x10\n 27205: u8 [a0 + 0x1a] = a5\n 27208: a5 = a4 >> 0x8\n 27211: u8 [a0 + 0x19] = a5\n 27214: u8 [a0 + 0x18] = a4\n 27217: u8 [a0 + 0x10] = a3\n 27220: a4 = a3 >> 0x38\n 27223: u8 [a0 + 0x17] = a4\n 27226: a4 = a3 >> 0x30\n 27229: u8 [a0 + 0x16] = a4\n 27232: a4 = a3 >> 0x28\n 27235: u8 [a0 + 0x15] = a4\n 27238: a4 = a3 >> 0x20\n 27241: u8 [a0 + 0x14] = a4\n 27244: a4 = a3 >> 0x18\n 27247: u8 [a0 + 0x13] = a4\n 27250: a4 = a3 >> 0x10\n 27253: u8 [a0 + 0x12] = a4\n 27256: a3 = a3 >> 0x8\n 27259: u8 [a0 + 0x11] = a3\n 27262: u8 [a0 + 0x8] = a2\n 27265: a3 = a2 >> 0x38\n 27268: u8 [a0 + 0xf] = a3\n 27271: a3 = a2 >> 0x30\n 27274: u8 [a0 + 0xe] = a3\n 27277: a3 = a2 >> 0x28\n 27280: u8 [a0 + 0xd] = a3\n 27283: a3 = a2 >> 0x20\n 27286: u8 [a0 + 0xc] = a3\n 27289: a3 = a2 >> 0x18\n 27292: u8 [a0 + 0xb] = a3\n 27295: a3 = a2 >> 0x10\n 27298: u8 [a0 + 0xa] = a3\n 27301: a2 = a2 >> 0x8\n 27304: u8 [a0 + 0x9] = a2\n 27307: u8 [a0] = a1\n 27309: a2 = a1 >> 0x38\n 27312: u8 [a0 + 0x7] = a2\n 27315: a2 = a1 >> 0x30\n 27318: u8 [a0 + 0x6] = a2\n 27321: a2 = a1 >> 0x28\n 27324: u8 [a0 + 0x5] = a2\n 27327: a2 = a1 >> 0x20\n 27330: u8 [a0 + 0x4] = a2\n 27333: a2 = a1 >> 0x18\n 27336: u8 [a0 + 0x3] = a2\n 27339: a2 = a1 >> 0x10\n 27342: u8 [a0 + 0x2] = a2\n 27345: a1 = a1 >> 0x8\n 27348: u8 [a0 + 0x1] = a1\n 27351: a1 = 0x20\n 27354: a0 = 0\n 27356: ra = 376, jump @0\n      : @451 [@dyn 188] (gas: 45)\n 27362: i32 a0 = a0 + 0\n 27364: i32 a2 = sp + 0xe0\n 27368: a1 = 0x20\n 27371: ecalli 8 // 'hash_keccak_256'\n 27373: a0 = u64 [sp + 0xe0]\n 27377: a1 = u64 [sp + 0xe8]\n 27381: a2 = u64 [sp + 0xf8]\n 27385: a3 = u64 [sp + 0xf0]\n 27389: t0 = reverse a0\n 27391: a1 = reverse a1\n 27393: a2 = reverse a2\n 27395: a3 = reverse a3\n 27397: a4 = u64 [sp + 0x50]\n 27400: a4 = a4 + a3\n 27403: a5 = u64 [sp + 0x48]\n 27406: a5 = a5 + a2\n 27409: a2 = a5 <u a2\n 27412: a4 = a4 + a2\n 27415: s1 = a4 ^ a3\n 27418: a3 = a4 <u a3\n 27421: a3 = a2 if s1 == 0\n 27424: a2 = u64 [sp + 0x58]\n 27427: a2 = a2 + a1\n 27430: a3 = a3 + a2\n 27433: s1 = a3 <u a2\n 27436: a0 = u64 [sp + 0x38]\n 27439: a0 = a0 + t0\n 27442: a1 = a2 <u a1\n 27445: a0 = a0 + a1\n 27448: a0 = a0 + s1\n 27451: a1 = u64 [sp + 0x40]\n 27454: u64 [a1 + 56] = 0\n 27457: u64 [a1 + 48] = 0\n 27460: u64 [a1 + 40] = 0\n 27463: u64 [a1 + 32] = 0\n 27466: u64 [a1] = a5\n 27468: u64 [a1 + 0x8] = a4\n 27471: u64 [a1 + 0x10] = a3\n 27474: u64 [a1 + 0x18] = a0\n 27477: sp = s0 + 0xfffffffffffffee0\n 27481: ra = u64 [sp + 0x118]\n 27485: s0 = u64 [sp + 0x110]\n 27489: s1 = u64 [sp + 0x108]\n 27493: sp = sp + 0x120\n 27497: ret\n      : @452 (gas: 8)\n 27499: u64 [sp + 144] = 0\n 27503: u64 [sp + 136] = 0\n 27507: u64 [sp + 128] = 0\n 27511: a0 = 0x4e487b7100000000\n 27521: a1 = sp + 0x80\n 27525: u64 [sp + 0x98] = a0\n 27529: a0 = 0\n 27531: ra = 378, jump @23\n      : @453 [@dyn 189] (gas: 7)\n 27537: u64 [sp + 120] = 0\n 27540: u64 [sp + 112] = 0\n 27543: u64 [sp + 96] = 0x32\n 27547: a0 = 0x4\n 27550: a1 = sp + 0x60\n 27553: u64 [sp + 104] = 0\n 27556: ra = 380, jump @23\n      : @454 [@dyn 190] (gas: 3)\n 27562: a1 = 0x24\n 27565: a0 = 0\n 27567: ra = 382, jump @0\n      : @455 [@dyn 191] (gas: 6)\n 27573: i32 a1 = a0 + 0\n 27575: a0 = 0x1\n 27578: a2 = 0x24\n 27581: ra = 0x180\n 27585: ecalli 11 // 'seal_return'\n 27587: fallthrough\n      : @456 [@dyn 192] (gas: 236)\n 27588: sp = sp + 0xffffffffffffffa0\n 27591: u64 [sp + 0x58] = ra\n 27594: u64 [sp + 0x50] = s0\n 27597: u64 [sp + 0x48] = s1\n 27600: u64 [sp] = a0\n 27602: t0 = u64 [a1]\n 27604: t1 = u64 [a2]\n 27606: a0 = u64 [a2 + 0x8]\n 27609: a3 = u64 [a2 + 0x10]\n 27612: a4 = u64 [a1 + 0x18]\n 27615: s0 = u64 [a1 + 0x10]\n 27618: a2 = u64 [a2 + 0x18]\n 27621: a1 = u64 [a1 + 0x8]\n 27624: t2 = a4 >u 0\n 27626: s1 = s0 >u 0\n 27628: s1 = t2 if a4 != 0\n 27631: ra = a1 >u 0\n 27633: a5 = t0 <u 0x100\n 27637: t2 = a5 ^ 0x1\n 27640: t2 = ra if a1 != 0\n 27643: a4 = a4 | s0\n 27646: t2 = s1 if a4 != 0\n 27649: u8 [sp + 71] = 0\n 27652: u8 [sp + 70] = 0\n 27655: u8 [sp + 69] = 0\n 27658: u8 [sp + 68] = 0\n 27661: u8 [sp + 67] = 0\n 27664: u8 [sp + 66] = 0\n 27667: u8 [sp + 65] = 0\n 27670: u8 [sp + 64] = 0\n 27673: u8 [sp + 63] = 0\n 27676: u8 [sp + 62] = 0\n 27679: u8 [sp + 61] = 0\n 27682: u8 [sp + 60] = 0\n 27685: u8 [sp + 59] = 0\n 27688: u8 [sp + 58] = 0\n 27691: u8 [sp + 57] = 0\n 27694: u8 [sp + 56] = 0\n 27697: u8 [sp + 55] = 0\n 27700: u8 [sp + 54] = 0\n 27703: u8 [sp + 53] = 0\n 27706: u8 [sp + 52] = 0\n 27709: u8 [sp + 51] = 0\n 27712: u8 [sp + 50] = 0\n 27715: u8 [sp + 49] = 0\n 27718: u8 [sp + 48] = 0\n 27721: u8 [sp + 47] = 0\n 27724: u8 [sp + 46] = 0\n 27727: u8 [sp + 45] = 0\n 27730: u8 [sp + 44] = 0\n 27733: u8 [sp + 43] = 0\n 27736: u8 [sp + 42] = 0\n 27739: u8 [sp + 41] = 0\n 27742: u8 [sp + 40] = 0\n 27745: u8 [sp + 0x20] = a2\n 27748: u8 [sp + 0x18] = a3\n 27751: u8 [sp + 0x10] = a0\n 27754: u8 [sp + 0x8] = t1\n 27757: a1 = a2 >> 0x38\n 27760: u8 [sp + 0x27] = a1\n 27763: a1 = a2 >> 0x30\n 27766: u8 [sp + 0x26] = a1\n 27769: a1 = a2 >> 0x28\n 27772: u8 [sp + 0x25] = a1\n 27775: a1 = a2 >> 0x20\n 27778: u8 [sp + 0x24] = a1\n 27781: a1 = a2 >> 0x18\n 27784: u8 [sp + 0x23] = a1\n 27787: a1 = a2 >> 0x10\n 27790: u8 [sp + 0x22] = a1\n 27793: a2 = a2 >> 0x8\n 27796: u8 [sp + 0x21] = a2\n 27799: a1 = a3 >> 0x38\n 27802: u8 [sp + 0x1f] = a1\n 27805: a1 = a3 >> 0x30\n 27808: u8 [sp + 0x1e] = a1\n 27811: a1 = a3 >> 0x28\n 27814: u8 [sp + 0x1d] = a1\n 27817: a1 = a3 >> 0x20\n 27820: u8 [sp + 0x1c] = a1\n 27823: a1 = a3 >> 0x18\n 27826: u8 [sp + 0x1b] = a1\n 27829: a1 = a3 >> 0x10\n 27832: u8 [sp + 0x1a] = a1\n 27835: a3 = a3 >> 0x8\n 27838: u8 [sp + 0x19] = a3\n 27841: a1 = a0 >> 0x38\n 27844: u8 [sp + 0x17] = a1\n 27847: a1 = a0 >> 0x30\n 27850: u8 [sp + 0x16] = a1\n 27853: a1 = a0 >> 0x28\n 27856: u8 [sp + 0x15] = a1\n 27859: a1 = a0 >> 0x20\n 27862: u8 [sp + 0x14] = a1\n 27865: a1 = a0 >> 0x18\n 27868: u8 [sp + 0x13] = a1\n 27871: a1 = a0 >> 0x10\n 27874: u8 [sp + 0x12] = a1\n 27877: a0 = a0 >> 0x8\n 27880: u8 [sp + 0x11] = a0\n 27883: a0 = t1 >> 0x38\n 27886: u8 [sp + 0xf] = a0\n 27889: a0 = t1 >> 0x30\n 27892: u8 [sp + 0xe] = a0\n 27895: a0 = t1 >> 0x28\n 27898: u8 [sp + 0xd] = a0\n 27901: a0 = t1 >> 0x20\n 27904: u8 [sp + 0xc] = a0\n 27907: a0 = t1 >> 0x18\n 27910: u8 [sp + 0xb] = a0\n 27913: a0 = t1 >> 0x10\n 27916: u8 [sp + 0xa] = a0\n 27919: a0 = t1 >> 0x8\n 27922: u8 [sp + 0x9] = a0\n 27925: a0 = t0 << 0x38\n 27928: a0 = a0 >> 0x3b\n 27931: a2 = sp + 0x8\n 27934: a2 = a2 + a0\n 27937: a0 = u8 [a2 + 0x11]\n 27940: a1 = u8 [a2 + 0x10]\n 27943: a3 = u8 [a2 + 0x12]\n 27946: a4 = u8 [a2 + 0x13]\n 27949: a0 = a0 << 0x8\n 27952: a0 = a0 | a1\n 27955: a3 = a3 << 0x10\n 27958: a4 = a4 << 0x18\n 27961: a3 = a3 | a4\n 27964: a0 = a0 | a3\n 27967: a1 = u8 [a2 + 0x15]\n 27970: a3 = u8 [a2 + 0x14]\n 27973: a4 = u8 [a2 + 0x16]\n 27976: a5 = u8 [a2 + 0x17]\n 27979: a1 = a1 << 0x8\n 27982: a1 = a1 | a3\n 27985: a4 = a4 << 0x10\n 27988: a5 = a5 << 0x18\n 27991: a4 = a4 | a5\n 27994: a1 = a1 | a4\n 27997: a1 = a1 << 0x20\n 28000: ra = a1 | a0\n 28003: a3 = t0 & 0x7\n 28006: a1 = ra >> a3\n 28009: a0 = u8 [a2 + 0x19]\n 28012: a4 = u8 [a2 + 0x18]\n 28015: s1 = u8 [a2 + 0x1a]\n 28018: s0 = u8 [a2 + 0x1b]\n 28021: a0 = a0 << 0x8\n 28024: a0 = a0 | a4\n 28027: s1 = s1 << 0x10\n 28030: s0 = s0 << 0x18\n 28033: s0 = s0 | s1\n 28036: a0 = a0 | s0\n 28039: a4 = u8 [a2 + 0x1d]\n 28042: s1 = u8 [a2 + 0x1c]\n 28045: s0 = u8 [a2 + 0x1e]\n 28048: a5 = u8 [a2 + 0x1f]\n 28051: a4 = a4 << 0x8\n 28054: a4 = a4 | s1\n 28057: s0 = s0 << 0x10\n 28060: a5 = a5 << 0x18\n 28063: a5 = a5 | s0\n 28066: a4 = a4 | a5\n 28069: a4 = a4 << 0x20\n 28072: t0 = a4 | a0\n 28075: a0 = t0 << 0x1\n 28078: t1 = a3 ^ 0x3f\n 28081: a4 = a0 << t1\n 28084: a4 = a4 | a1\n 28087: a0 = u8 [a2 + 0x9]\n 28090: a1 = u8 [a2 + 0x8]\n 28093: a5 = u8 [a2 + 0xa]\n 28096: s0 = u8 [a2 + 0xb]\n 28099: a0 = a0 << 0x8\n 28102: a0 = a0 | a1\n 28105: a5 = a5 << 0x10\n 28108: s0 = s0 << 0x18\n 28111: a5 = a5 | s0\n 28114: a0 = a0 | a5\n 28117: a1 = u8 [a2 + 0xd]\n 28120: a5 = u8 [a2 + 0xc]\n 28123: s0 = u8 [a2 + 0xe]\n 28126: s1 = u8 [a2 + 0xf]\n 28129: a1 = a1 << 0x8\n 28132: a1 = a1 | a5\n 28135: s0 = s0 << 0x10\n 28138: s1 = s1 << 0x18\n 28141: s0 = s0 | s1\n 28144: a1 = a1 | s0\n 28147: a1 = a1 << 0x20\n 28150: a1 = a1 | a0\n 28153: a0 = a1 >> a3\n 28156: ra = ra << 0x1\n 28159: a5 = a3 ^ 0xffffffffffffffff\n 28162: a5 = ra << a5\n 28165: ra = a0 | a5\n 28168: a0 = u8 [a2 + 0x1]\n 28171: s0 = u8 [a2]\n 28173: s1 = u8 [a2 + 0x2]\n 28176: a5 = u8 [a2 + 0x3]\n 28179: a0 = a0 << 0x8\n 28182: a0 = a0 | s0\n 28185: s1 = s1 << 0x10\n 28188: a5 = a5 << 0x18\n 28191: a5 = a5 | s1\n 28194: a0 = a0 | a5\n 28197: a5 = u8 [a2 + 0x5]\n 28200: s0 = u8 [a2 + 0x4]\n 28203: s1 = u8 [a2 + 0x6]\n 28206: a2 = u8 [a2 + 0x7]\n 28209: a5 = a5 << 0x8\n 28212: a5 = a5 | s0\n 28215: s1 = s1 << 0x10\n 28218: a2 = a2 << 0x18\n 28221: a2 = a2 | s1\n 28224: a2 = a2 | a5\n 28227: a2 = a2 << 0x20\n 28230: a0 = a0 | a2\n 28233: a0 = a0 >> a3\n 28236: a1 = a1 << 0x1\n 28239: a1 = a1 << t1\n 28242: a0 = a0 | a1\n 28245: a1 = t0 >> a3\n 28248: a0 = 0 if t2 != 0\n 28250: ra = 0 if t2 != 0\n 28252: a4 = 0 if t2 != 0\n 28254: a1 = 0 if t2 != 0\n 28256: a2 = u64 [sp]\n 28258: u64 [a2 + 0x18] = a1\n 28261: u64 [a2 + 0x10] = a4\n 28264: u64 [a2 + 0x8] = ra\n 28267: u64 [a2] = a0\n 28269: ra = u64 [sp + 0x58]\n 28272: s0 = u64 [sp + 0x50]\n 28275: s1 = u64 [sp + 0x48]\n 28278: sp = sp + 0x60\n 28281: ret\n      : @457 [@dyn 193] (gas: 58)\n 28283: a1 = reverse s1\n 28285: a2 = u64 [sp + 0x28]\n 28288: a2 = reverse a2\n 28290: a3 = u64 [sp + 0x30]\n 28293: a3 = reverse a3\n 28295: a4 = a3 >> 0x38\n 28298: u8 [a0 + 0x1f] = a4\n 28301: a4 = a3 >> 0x30\n 28304: u8 [a0 + 0x1e] = a4\n 28307: a4 = a3 >> 0x28\n 28310: u8 [a0 + 0x1d] = a4\n 28313: a4 = a3 >> 0x20\n 28316: u8 [a0 + 0x1c] = a4\n 28319: a4 = a3 >> 0x18\n 28322: u8 [a0 + 0x1b] = a4\n 28325: a4 = a3 >> 0x10\n 28328: u8 [a0 + 0x1a] = a4\n 28331: a4 = a3 >> 0x8\n 28334: u8 [a0 + 0x19] = a4\n 28337: u8 [a0 + 0x18] = a3\n 28340: a3 = a2 >> 0x38\n 28343: u8 [a0 + 0x17] = a3\n 28346: a3 = a2 >> 0x30\n 28349: u8 [a0 + 0x16] = a3\n 28352: a3 = a2 >> 0x28\n 28355: u8 [a0 + 0x15] = a3\n 28358: a3 = a2 >> 0x20\n 28361: u8 [a0 + 0x14] = a3\n 28364: a3 = a2 >> 0x18\n 28367: u8 [a0 + 0x13] = a3\n 28370: a3 = a2 >> 0x10\n 28373: u8 [a0 + 0x12] = a3\n 28376: a3 = a2 >> 0x8\n 28379: u8 [a0 + 0x11] = a3\n 28382: u8 [a0 + 0x10] = a2\n 28385: a2 = a1 >> 0x38\n 28388: u8 [a0 + 0xf] = a2\n 28391: a2 = a1 >> 0x30\n 28394: u8 [a0 + 0xe] = a2\n 28397: a2 = a1 >> 0x28\n 28400: u8 [a0 + 0xd] = a2\n 28403: a2 = a1 >> 0x20\n 28406: u8 [a0 + 0xc] = a2\n 28409: u8 [a0 + 11] = 0\n 28412: u8 [a0 + 10] = 0\n 28415: u8 [a0 + 9] = 0\n 28418: u8 [a0 + 0x8] = a1\n 28421: u8 [a0 + 7] = 0\n 28424: u8 [a0 + 6] = 0\n 28427: u8 [a0 + 5] = 0\n 28430: u8 [a0 + 4] = 0\n 28433: u8 [a0 + 3] = 0\n 28436: u8 [a0 + 2] = 0\n 28439: u8 [a0 + 1] = 0\n 28442: u8 [a0 + 0] = 0\n 28444: a0 = 0x20\n 28447: a1 = 0x20\n 28450: ra = 388, jump @0\n      : @458 [@dyn 194] (gas: 35)\n 28456: u8 [a0 + 31] = 0x2\n 28460: u8 [a0 + 30] = 0\n 28463: u8 [a0 + 29] = 0\n 28466: u8 [a0 + 28] = 0\n 28469: u8 [a0 + 27] = 0\n 28472: u8 [a0 + 26] = 0\n 28475: u8 [a0 + 25] = 0\n 28478: u8 [a0 + 24] = 0\n 28481: u8 [a0 + 23] = 0\n 28484: u8 [a0 + 22] = 0\n 28487: u8 [a0 + 21] = 0\n 28490: u8 [a0 + 20] = 0\n 28493: u8 [a0 + 19] = 0\n 28496: u8 [a0 + 18] = 0\n 28499: u8 [a0 + 17] = 0\n 28502: u8 [a0 + 16] = 0\n 28505: u8 [a0 + 15] = 0\n 28508: u8 [a0 + 14] = 0\n 28511: u8 [a0 + 13] = 0\n 28514: u8 [a0 + 12] = 0\n 28517: u8 [a0 + 11] = 0\n 28520: u8 [a0 + 10] = 0\n 28523: u8 [a0 + 9] = 0\n 28526: u8 [a0 + 8] = 0\n 28529: u8 [a0 + 7] = 0\n 28532: u8 [a0 + 6] = 0\n 28535: u8 [a0 + 5] = 0\n 28538: u8 [a0 + 4] = 0\n 28541: u8 [a0 + 3] = 0\n 28544: u8 [a0 + 2] = 0\n 28547: u8 [a0 + 1] = 0\n 28550: u8 [a0 + 0] = 0\n 28552: a1 = 0x40\n 28555: a0 = 0\n 28557: ra = 390, jump @0\n      : @459 [@dyn 195] (gas: 32)\n 28563: i32 a0 = a0 + 0\n 28565: i32 a2 = sp + 0x140\n 28569: a1 = 0x40\n 28572: ecalli 8 // 'hash_keccak_256'\n 28574: a0 = u64 [sp + 0x158]\n 28578: a1 = u64 [sp + 0x150]\n 28582: a2 = u64 [sp + 0x148]\n 28586: a3 = u64 [sp + 0x140]\n 28590: a5 = reverse a0\n 28592: a4 = reverse a1\n 28594: a1 = reverse a2\n 28596: a0 = reverse a3\n 28598: u64 [sp + 0x30] = a0\n 28601: u64 [sp + 0x138] = a0\n 28605: u64 [sp + 0x28] = a1\n 28608: u64 [sp + 0x130] = a1\n 28612: u64 [sp + 0x20] = a4\n 28615: u64 [sp + 0x128] = a4\n 28619: u64 [sp + 0x18] = a5\n 28622: u64 [sp + 0x120] = a5\n 28626: u64 [sp + 344] = 0\n 28630: u64 [sp + 336] = 0\n 28634: u64 [sp + 328] = 0\n 28638: u64 [sp + 320] = 0\n 28642: u32 [sp + 352] = 0x20\n 28647: i32 a1 = sp + 0x120\n 28651: i32 a3 = sp + 0x140\n 28655: i32 a4 = sp + 0x160\n 28659: a2 = 0xffffffffffffffff\n 28662: a0 = 0\n 28664: ecalli 7 // 'get_storage'\n 28666: fallthrough\n      : @460 (gas: 20)\n 28667: t1 = u64 [sp + 0x48]\n 28670: t2 = u64 [sp + 0x40]\n 28673: t0 = u64 [sp + 0x38]\n 28676: a0 = u64 [sp + 0x158]\n 28680: a1 = u64 [sp + 0x140]\n 28684: s1 = u64 [sp + 0x150]\n 28688: a3 = u64 [sp + 0x148]\n 28692: a4 = a0 ^ t0\n 28695: a0 = t0 <u a0\n 28698: a2 = u64 [sp + 0x50]\n 28701: a5 = a2 <u s1\n 28704: a5 = a0 if a4 != 0\n 28707: a0 = a3 ^ t2\n 28710: a3 = t2 <u a3\n 28713: a1 = t1 <u a1\n 28716: a1 = a3 if a0 != 0\n 28719: a0 = s1 ^ a2\n 28722: a0 = a0 | a4\n 28725: a1 = a5 if a0 != 0\n 28728: jump @463 if a1 == 0\n      : @461 (gas: 16)\n 28732: u64 [sp + 0xa0] = t1\n 28736: a0 = u64 [sp + 0x18]\n 28739: u64 [sp + 0xc0] = a0\n 28743: u64 [sp + 0xa8] = t2\n 28747: a0 = u64 [sp + 0x20]\n 28750: u64 [sp + 0xc8] = a0\n 28754: u64 [sp + 0xb0] = a2\n 28758: a0 = u64 [sp + 0x28]\n 28761: u64 [sp + 0xd0] = a0\n 28765: u64 [sp + 0xb8] = t0\n 28769: a0 = sp + 0xe0\n 28773: a1 = sp + 0xc0\n 28777: a2 = sp + 0xa0\n 28781: a3 = u64 [sp + 0x30]\n 28784: u64 [sp + 0xd8] = a3\n 28788: ra = 392, jump @447\n      : @462 [@dyn 196] (gas: 250)\n 28794: a0 = u64 [sp + 0x118]\n 28798: u64 [sp + 0x50] = a0\n 28801: a0 = u64 [sp + 0x110]\n 28805: u64 [sp + 0x48] = a0\n 28808: s1 = u64 [sp + 0x108]\n 28812: a0 = u64 [sp + 0x100]\n 28816: u64 [sp + 0x40] = a0\n 28819: a0 = u64 [sp + 0xf8]\n 28823: a1 = u64 [sp + 0xf0]\n 28827: a2 = u64 [sp + 0xe8]\n 28831: a3 = u64 [sp + 0xe0]\n 28835: u64 [sp + 0x138] = a0\n 28839: u64 [sp + 0x130] = a1\n 28843: u64 [sp + 0x128] = a2\n 28847: u64 [sp + 0x120] = a3\n 28851: u64 [sp + 344] = 0\n 28855: u64 [sp + 336] = 0\n 28859: u64 [sp + 328] = 0\n 28863: u64 [sp + 320] = 0\n 28867: u32 [sp + 352] = 0x20\n 28872: i32 a1 = sp + 0x120\n 28876: i32 a3 = sp + 0x140\n 28880: i32 a4 = sp + 0x160\n 28884: a2 = 0xffffffffffffffff\n 28887: a0 = 0\n 28889: ecalli 7 // 'get_storage'\n 28891: t0 = u64 [sp + 0x140]\n 28895: a2 = u64 [sp + 0x148]\n 28899: a3 = u64 [sp + 0x150]\n 28903: t2 = u64 [sp + 0x40]\n 28906: a0 = t2 >> 0x3d\n 28909: a4 = s1 << 0x3\n 28912: a4 = a4 | a0\n 28915: s1 = s1 >> 0x3d\n 28918: a1 = u64 [sp + 0x48]\n 28921: a0 = a1 << 0x3\n 28924: s1 = s1 | a0\n 28927: a0 = a1 >> 0x3d\n 28930: a5 = u64 [sp + 0x50]\n 28933: a5 = a5 << 0x3\n 28936: a5 = a5 | a0\n 28939: a0 = t2 << 0x3\n 28942: a1 = a4 >u 0\n 28944: a0 = a0 <u 0x100\n 28948: t1 = a0 ^ 0x1\n 28951: t1 = a1 if a4 != 0\n 28954: a1 = a5 >u 0\n 28956: a0 = s1 >u 0\n 28958: a0 = a1 if a5 != 0\n 28961: a4 = u64 [sp + 0x158]\n 28965: a5 = a5 | s1\n 28968: t1 = a0 if a5 != 0\n 28971: u8 [sp + 159] = 0\n 28975: u8 [sp + 158] = 0\n 28979: u8 [sp + 157] = 0\n 28983: u8 [sp + 156] = 0\n 28987: u8 [sp + 155] = 0\n 28991: u8 [sp + 154] = 0\n 28995: u8 [sp + 153] = 0\n 28999: u8 [sp + 152] = 0\n 29003: u8 [sp + 151] = 0\n 29007: u8 [sp + 150] = 0\n 29011: u8 [sp + 149] = 0\n 29015: u8 [sp + 148] = 0\n 29019: u8 [sp + 147] = 0\n 29023: u8 [sp + 146] = 0\n 29027: u8 [sp + 145] = 0\n 29031: u8 [sp + 144] = 0\n 29035: u8 [sp + 143] = 0\n 29039: u8 [sp + 142] = 0\n 29043: u8 [sp + 141] = 0\n 29047: u8 [sp + 140] = 0\n 29051: u8 [sp + 139] = 0\n 29055: u8 [sp + 138] = 0\n 29059: u8 [sp + 137] = 0\n 29063: u8 [sp + 136] = 0\n 29067: u8 [sp + 135] = 0\n 29071: u8 [sp + 134] = 0\n 29075: u8 [sp + 133] = 0\n 29079: u8 [sp + 132] = 0\n 29083: u8 [sp + 131] = 0\n 29087: u8 [sp + 130] = 0\n 29091: u8 [sp + 129] = 0\n 29095: u8 [sp + 128] = 0\n 29099: u8 [sp + 0x78] = a4\n 29102: u8 [sp + 0x70] = a3\n 29105: u8 [sp + 0x68] = a2\n 29108: u8 [sp + 0x60] = t0\n 29111: a0 = a4 >> 0x38\n 29114: u8 [sp + 0x7f] = a0\n 29117: a0 = a4 >> 0x30\n 29120: u8 [sp + 0x7e] = a0\n 29123: a0 = a4 >> 0x28\n 29126: u8 [sp + 0x7d] = a0\n 29129: a0 = a4 >> 0x20\n 29132: u8 [sp + 0x7c] = a0\n 29135: a0 = a4 >> 0x18\n 29138: u8 [sp + 0x7b] = a0\n 29141: a0 = a4 >> 0x10\n 29144: u8 [sp + 0x7a] = a0\n 29147: a4 = a4 >> 0x8\n 29150: u8 [sp + 0x79] = a4\n 29153: a0 = a3 >> 0x38\n 29156: u8 [sp + 0x77] = a0\n 29159: a0 = a3 >> 0x30\n 29162: u8 [sp + 0x76] = a0\n 29165: a0 = a3 >> 0x28\n 29168: u8 [sp + 0x75] = a0\n 29171: a0 = a3 >> 0x20\n 29174: u8 [sp + 0x74] = a0\n 29177: a0 = a3 >> 0x18\n 29180: u8 [sp + 0x73] = a0\n 29183: a0 = a3 >> 0x10\n 29186: u8 [sp + 0x72] = a0\n 29189: a3 = a3 >> 0x8\n 29192: u8 [sp + 0x71] = a3\n 29195: a0 = a2 >> 0x38\n 29198: u8 [sp + 0x6f] = a0\n 29201: a0 = a2 >> 0x30\n 29204: u8 [sp + 0x6e] = a0\n 29207: a0 = a2 >> 0x28\n 29210: u8 [sp + 0x6d] = a0\n 29213: a0 = a2 >> 0x20\n 29216: u8 [sp + 0x6c] = a0\n 29219: a0 = a2 >> 0x18\n 29222: u8 [sp + 0x6b] = a0\n 29225: a0 = a2 >> 0x10\n 29228: u8 [sp + 0x6a] = a0\n 29231: a2 = a2 >> 0x8\n 29234: u8 [sp + 0x69] = a2\n 29237: a0 = t0 >> 0x38\n 29240: u8 [sp + 0x67] = a0\n 29243: a0 = t0 >> 0x30\n 29246: u8 [sp + 0x66] = a0\n 29249: a0 = t0 >> 0x28\n 29252: u8 [sp + 0x65] = a0\n 29255: a0 = t0 >> 0x20\n 29258: u8 [sp + 0x64] = a0\n 29261: a0 = t0 >> 0x18\n 29264: u8 [sp + 0x63] = a0\n 29267: a0 = t0 >> 0x10\n 29270: u8 [sp + 0x62] = a0\n 29273: a0 = t0 >> 0x8\n 29276: u8 [sp + 0x61] = a0\n 29279: a1 = t2 & 0x1f\n 29282: a0 = sp + 0x60\n 29285: a1 = a1 + a0\n 29288: a0 = u8 [a1 + 0x19]\n 29291: a2 = u8 [a1 + 0x18]\n 29294: a3 = u8 [a1 + 0x1a]\n 29297: a4 = u8 [a1 + 0x1b]\n 29300: a0 = a0 << 0x8\n 29303: a0 = a0 | a2\n 29306: a3 = a3 << 0x10\n 29309: a4 = a4 << 0x18\n 29312: a3 = a3 | a4\n 29315: a0 = a0 | a3\n 29318: a2 = u8 [a1 + 0x1d]\n 29321: a3 = u8 [a1 + 0x1c]\n 29324: a4 = u8 [a1 + 0x1e]\n 29327: a5 = u8 [a1 + 0x1f]\n 29330: a2 = a2 << 0x8\n 29333: a2 = a2 | a3\n 29336: a4 = a4 << 0x10\n 29339: a5 = a5 << 0x18\n 29342: a4 = a4 | a5\n 29345: a2 = a2 | a4\n 29348: a2 = a2 << 0x20\n 29351: t0 = a2 | a0\n 29354: a0 = u8 [a1 + 0x11]\n 29357: a3 = u8 [a1 + 0x10]\n 29360: a4 = u8 [a1 + 0x12]\n 29363: a5 = u8 [a1 + 0x13]\n 29366: a0 = a0 << 0x8\n 29369: a0 = a0 | a3\n 29372: a4 = a4 << 0x10\n 29375: a5 = a5 << 0x18\n 29378: a4 = a4 | a5\n 29381: a0 = a0 | a4\n 29384: a3 = u8 [a1 + 0x15]\n 29387: a4 = u8 [a1 + 0x14]\n 29390: a5 = u8 [a1 + 0x16]\n 29393: s1 = u8 [a1 + 0x17]\n 29396: a3 = a3 << 0x8\n 29399: a3 = a3 | a4\n 29402: a5 = a5 << 0x10\n 29405: s1 = s1 << 0x18\n 29408: a5 = a5 | s1\n 29411: a3 = a3 | a5\n 29414: a3 = a3 << 0x20\n 29417: a3 = a3 | a0\n 29420: a0 = u8 [a1 + 0x9]\n 29423: a4 = u8 [a1 + 0x8]\n 29426: a5 = u8 [a1 + 0xa]\n 29429: s1 = u8 [a1 + 0xb]\n 29432: a0 = a0 << 0x8\n 29435: a0 = a0 | a4\n 29438: a5 = a5 << 0x10\n 29441: s1 = s1 << 0x18\n 29444: a5 = a5 | s1\n 29447: a0 = a0 | a5\n 29450: a4 = u8 [a1 + 0xd]\n 29453: a5 = u8 [a1 + 0xc]\n 29456: s1 = u8 [a1 + 0xe]\n 29459: a2 = u8 [a1 + 0xf]\n 29462: a4 = a4 << 0x8\n 29465: a4 = a4 | a5\n 29468: s1 = s1 << 0x10\n 29471: a2 = a2 << 0x18\n 29474: a2 = a2 | s1\n 29477: a2 = a2 | a4\n 29480: a2 = a2 << 0x20\n 29483: a4 = a2 | a0\n 29486: a0 = u8 [a1 + 0x1]\n 29489: a2 = u8 [a1]\n 29491: a5 = u8 [a1 + 0x2]\n 29494: s1 = u8 [a1 + 0x3]\n 29497: a0 = a0 << 0x8\n 29500: a0 = a0 | a2\n 29503: a5 = a5 << 0x10\n 29506: s1 = s1 << 0x18\n 29509: a5 = a5 | s1\n 29512: a0 = a0 | a5\n 29515: a2 = u8 [a1 + 0x5]\n 29518: a5 = u8 [a1 + 0x4]\n 29521: s1 = u8 [a1 + 0x6]\n 29524: a1 = u8 [a1 + 0x7]\n 29527: a2 = a2 << 0x8\n 29530: a2 = a2 | a5\n 29533: s1 = s1 << 0x10\n 29536: a1 = a1 << 0x18\n 29539: a1 = a1 | s1\n 29542: a1 = a1 | a2\n 29545: a1 = a1 << 0x20\n 29548: a0 = a0 | a1\n 29551: a0 = 0 if t1 != 0\n 29553: a4 = 0 if t1 != 0\n 29555: a3 = 0 if t1 != 0\n 29557: t0 = 0 if t1 != 0\n 29559: a1 = u64 [sp + 0x58]\n 29562: u64 [a1 + 0x18] = t0\n 29565: u64 [a1 + 0x10] = a3\n 29568: u64 [a1 + 0x8] = a4\n 29571: u64 [a1] = a0\n 29573: sp = s0 + 0xfffffffffffffe80\n 29577: ra = u64 [sp + 0x178]\n 29581: s0 = u64 [sp + 0x170]\n 29585: s1 = u64 [sp + 0x168]\n 29589: sp = sp + 0x180\n 29593: ret\n      : @463 (gas: 2)\n 29595: a0 = 0\n 29597: ra = 394, jump @0\n      : @464 [@dyn 197] (gas: 6)\n 29603: i32 a1 = a0 + 0\n 29605: a0 = 0x1\n 29608: a2 = 0\n 29610: ra = 0x18c\n 29614: ecalli 11 // 'seal_return'\n 29616: fallthrough\n      : @465 [@dyn 198] (gas: 13)\n 29617: sp = sp + 0xfffffffffffffec0\n 29621: u64 [sp + 0x138] = ra\n 29625: u64 [sp + 0x130] = s0\n 29629: u64 [sp + 0x128] = s1\n 29633: s0 = sp + 0x140\n 29637: sp = sp & 0xffffffffffffffe0\n 29640: u64 [sp + 280] = 0\n 29644: u64 [sp + 272] = 0\n 29648: u64 [sp + 264] = 0\n 29652: u64 [sp + 256] = 0\n 29656: i32 a0 = sp + 0x100\n 29660: ecalli 14 // 'value_transferred'\n 29662: fallthrough\n      : @466 (gas: 8)\n 29663: a0 = u64 [sp + 0x110]\n 29667: a1 = u64 [sp + 0x118]\n 29671: a2 = u64 [sp + 0x108]\n 29675: a3 = u64 [sp + 0x100]\n 29679: a1 = a1 | a2\n 29682: a0 = a0 | a3\n 29685: a0 = a0 | a1\n 29688: jump @472 if a0 != 0\n      : @467 (gas: 13)\n 29692: a0 = u32 [0x200a4]\n 29697: u64 [sp + 152] = 0\n 29701: u64 [sp + 144] = 0\n 29705: u64 [sp + 136] = 0\n 29709: u64 [sp + 0x80] = a0\n 29713: u64 [sp + 184] = 0\n 29717: u64 [sp + 176] = 0\n 29721: u64 [sp + 160] = 0x4\n 29726: a0 = sp + 0xc0\n 29730: a1 = sp + 0xa0\n 29734: a2 = sp + 0x80\n 29738: u64 [sp + 168] = 0\n 29742: ra = 398, jump @434\n      : @468 [@dyn 199] (gas: 44)\n 29748: t0 = u64 [sp + 0xc0]\n 29752: a0 = u64 [sp + 0xc8]\n 29756: a1 = u64 [sp + 0xd0]\n 29760: a2 = u64 [sp + 0xd8]\n 29764: a4 = u64 [sp + 0xe0]\n 29768: a5 = u64 [sp + 0xe8]\n 29772: s1 = u64 [sp + 0xf0]\n 29776: a3 = u64 [sp + 0xf8]\n 29780: u64 [sp + 0x38] = a3\n 29783: u64 [sp + 0x30] = s1\n 29786: u64 [sp + 0x28] = a5\n 29789: u64 [sp + 0x20] = a4\n 29792: u64 [sp + 0x58] = a2\n 29795: u64 [sp + 0x50] = a1\n 29798: u64 [sp + 0x48] = a0\n 29801: a0 = sp + 0x60\n 29804: a1 = sp + 0x40\n 29807: a2 = sp + 0x20\n 29810: u64 [sp + 0x40] = t0\n 29813: ra = 0x190\n 29817: sp = sp + 0xfffffffffffffe80\n 29821: u64 [sp + 0x178] = ra\n 29825: u64 [sp + 0x170] = s0\n 29829: u64 [sp + 0x168] = s1\n 29833: s0 = sp + 0x180\n 29837: sp = sp & 0xffffffffffffffe0\n 29840: a3 = u64 [a2]\n 29842: u64 [sp + 0x48] = a3\n 29845: a3 = u64 [a2 + 0x8]\n 29848: u64 [sp + 0x40] = a3\n 29851: a3 = u64 [a2 + 0x10]\n 29854: u64 [sp + 0x50] = a3\n 29857: a2 = u64 [a2 + 0x18]\n 29860: u64 [sp + 0x38] = a2\n 29863: a2 = u64 [a1]\n 29865: u64 [sp + 0x30] = a2\n 29868: a2 = u64 [a1 + 0x8]\n 29871: u64 [sp + 0x28] = a2\n 29874: s1 = u32 [a1 + 0x10]\n 29877: u64 [sp + 0x58] = a0\n 29880: a1 = 0x20\n 29883: a0 = 0\n 29885: ra = 0x182\n 29889: jump @0\n      : @469 [@dyn 200] (gas: 11)\n 29892: a0 = u64 [sp + 0x78]\n 29895: u64 [sp] = a0\n 29897: a0 = u64 [sp + 0x70]\n 29900: u64 [sp + 0x8] = a0\n 29903: a0 = u64 [sp + 0x68]\n 29906: u64 [sp + 0x10] = a0\n 29909: a0 = u64 [sp + 0x60]\n 29912: u64 [sp + 0x18] = a0\n 29915: a0 = 0x40\n 29918: a1 = 0x20\n 29921: ra = 402, jump @0\n      : @470 [@dyn 201] (gas: 100)\n 29927: a1 = u8 [a0 + 0x11]\n 29930: a2 = u8 [a0 + 0x10]\n 29933: a3 = u8 [a0 + 0x12]\n 29936: a4 = u8 [a0 + 0x13]\n 29939: a1 = a1 << 0x8\n 29942: a1 = a1 | a2\n 29945: a3 = a3 << 0x10\n 29948: a4 = a4 << 0x18\n 29951: a3 = a3 | a4\n 29954: a1 = a1 | a3\n 29957: a2 = u8 [a0 + 0x15]\n 29960: a3 = u8 [a0 + 0x14]\n 29963: a4 = u8 [a0 + 0x16]\n 29966: a5 = u8 [a0 + 0x17]\n 29969: a2 = a2 << 0x8\n 29972: a2 = a2 | a3\n 29975: a4 = a4 << 0x10\n 29978: a5 = a5 << 0x18\n 29981: a4 = a4 | a5\n 29984: a2 = a2 | a4\n 29987: a2 = a2 << 0x20\n 29990: t0 = a2 | a1\n 29993: a2 = u8 [a0 + 0x1]\n 29996: a3 = u8 [a0]\n 29998: a4 = u8 [a0 + 0x2]\n 30001: a5 = u8 [a0 + 0x3]\n 30004: a2 = a2 << 0x8\n 30007: a2 = a2 | a3\n 30010: a4 = a4 << 0x10\n 30013: a5 = a5 << 0x18\n 30016: a4 = a4 | a5\n 30019: a2 = a2 | a4\n 30022: a3 = u8 [a0 + 0x5]\n 30025: a4 = u8 [a0 + 0x4]\n 30028: a5 = u8 [a0 + 0x6]\n 30031: s1 = u8 [a0 + 0x7]\n 30034: a3 = a3 << 0x8\n 30037: a3 = a3 | a4\n 30040: a5 = a5 << 0x10\n 30043: s1 = s1 << 0x18\n 30046: a5 = a5 | s1\n 30049: a3 = a3 | a5\n 30052: a3 = a3 << 0x20\n 30055: a2 = a2 | a3\n 30058: a3 = u8 [a0 + 0x19]\n 30061: a4 = u8 [a0 + 0x18]\n 30064: a5 = u8 [a0 + 0x1a]\n 30067: s1 = u8 [a0 + 0x1b]\n 30070: a3 = a3 << 0x8\n 30073: a3 = a3 | a4\n 30076: a5 = a5 << 0x10\n 30079: s1 = s1 << 0x18\n 30082: a5 = a5 | s1\n 30085: a3 = a3 | a5\n 30088: a4 = u8 [a0 + 0x1d]\n 30091: a5 = u8 [a0 + 0x1c]\n 30094: s1 = u8 [a0 + 0x1e]\n 30097: a1 = u8 [a0 + 0x1f]\n 30100: a4 = a4 << 0x8\n 30103: a4 = a4 | a5\n 30106: s1 = s1 << 0x10\n 30109: a1 = a1 << 0x18\n 30112: a1 = a1 | s1\n 30115: a1 = a1 | a4\n 30118: a1 = a1 << 0x20\n 30121: a3 = a3 | a1\n 30124: a1 = u8 [a0 + 0x9]\n 30127: a4 = u8 [a0 + 0x8]\n 30130: a5 = u8 [a0 + 0xa]\n 30133: s1 = u8 [a0 + 0xb]\n 30136: a1 = a1 << 0x8\n 30139: a1 = a1 | a4\n 30142: a5 = a5 << 0x10\n 30145: s1 = s1 << 0x18\n 30148: a5 = a5 | s1\n 30151: a1 = a1 | a5\n 30154: a4 = u8 [a0 + 0xd]\n 30157: a5 = u8 [a0 + 0xc]\n 30160: s1 = u8 [a0 + 0xe]\n 30163: a0 = u8 [a0 + 0xf]\n 30166: a4 = a4 << 0x8\n 30169: a4 = a4 | a5\n 30172: s1 = s1 << 0x10\n 30175: a0 = a0 << 0x18\n 30178: a0 = a0 | s1\n 30181: a0 = a0 | a4\n 30184: a0 = a0 << 0x20\n 30187: a0 = a0 | a1\n 30190: a1 = reverse a0\n 30192: a0 = reverse a3\n 30194: a2 = reverse a2\n 30196: a3 = reverse t0\n 30198: a2 = a2 | a3\n 30201: a3 = a0 | a1\n 30204: a3 = a3 | a2\n 30207: a3 = a3 >> 0x20\n 30210: a1 = a1 | a2\n 30213: a1 = a1 << 0x20\n 30216: a1 = a1 | a3\n 30219: jump @474 if a1 == 0\n      : @471 (gas: 1)\n 30222: trap\n      : @472 (gas: 3)\n 30223: a0 = 0\n 30225: a1 = 0\n 30227: ra = 404, jump @0\n      : @473 [@dyn 202] (gas: 5)\n 30233: i32 a1 = a0 + 0\n 30235: a0 = 0x1\n 30238: a2 = 0\n 30240: ecalli 11 // 'seal_return'\n 30242: fallthrough\n      : @474 (gas: 4)\n 30243: i32 s1 = a0 + 0\n 30245: a1 = 0x20\n 30248: a0 = s1\n 30250: ra = 406, jump @0\n      : @475 [@dyn 203] (gas: 71)\n 30256: a1 = u64 [sp]\n 30258: a1 = reverse a1\n 30260: a2 = u64 [sp + 0x8]\n 30263: a2 = reverse a2\n 30265: a3 = u64 [sp + 0x10]\n 30268: a3 = reverse a3\n 30270: a4 = u64 [sp + 0x18]\n 30273: a4 = reverse a4\n 30275: a5 = a4 >> 0x38\n 30278: u8 [a0 + 0x1f] = a5\n 30281: a5 = a4 >> 0x30\n 30284: u8 [a0 + 0x1e] = a5\n 30287: a5 = a4 >> 0x28\n 30290: u8 [a0 + 0x1d] = a5\n 30293: a5 = a4 >> 0x20\n 30296: u8 [a0 + 0x1c] = a5\n 30299: a5 = a4 >> 0x18\n 30302: u8 [a0 + 0x1b] = a5\n 30305: a5 = a4 >> 0x10\n 30308: u8 [a0 + 0x1a] = a5\n 30311: a5 = a4 >> 0x8\n 30314: u8 [a0 + 0x19] = a5\n 30317: u8 [a0 + 0x18] = a4\n 30320: u8 [a0 + 0x10] = a3\n 30323: a4 = a3 >> 0x38\n 30326: u8 [a0 + 0x17] = a4\n 30329: a4 = a3 >> 0x30\n 30332: u8 [a0 + 0x16] = a4\n 30335: a4 = a3 >> 0x28\n 30338: u8 [a0 + 0x15] = a4\n 30341: a4 = a3 >> 0x20\n 30344: u8 [a0 + 0x14] = a4\n 30347: a4 = a3 >> 0x18\n 30350: u8 [a0 + 0x13] = a4\n 30353: a4 = a3 >> 0x10\n 30356: u8 [a0 + 0x12] = a4\n 30359: a3 = a3 >> 0x8\n 30362: u8 [a0 + 0x11] = a3\n 30365: u8 [a0 + 0x8] = a2\n 30368: a3 = a2 >> 0x38\n 30371: u8 [a0 + 0xf] = a3\n 30374: a3 = a2 >> 0x30\n 30377: u8 [a0 + 0xe] = a3\n 30380: a3 = a2 >> 0x28\n 30383: u8 [a0 + 0xd] = a3\n 30386: a3 = a2 >> 0x20\n 30389: u8 [a0 + 0xc] = a3\n 30392: a3 = a2 >> 0x18\n 30395: u8 [a0 + 0xb] = a3\n 30398: a3 = a2 >> 0x10\n 30401: u8 [a0 + 0xa] = a3\n 30404: a2 = a2 >> 0x8\n 30407: u8 [a0 + 0x9] = a2\n 30410: u8 [a0] = a1\n 30412: a2 = a1 >> 0x38\n 30415: u8 [a0 + 0x7] = a2\n 30418: a2 = a1 >> 0x30\n 30421: u8 [a0 + 0x6] = a2\n 30424: a2 = a1 >> 0x28\n 30427: u8 [a0 + 0x5] = a2\n 30430: a2 = a1 >> 0x20\n 30433: u8 [a0 + 0x4] = a2\n 30436: a2 = a1 >> 0x18\n 30439: u8 [a0 + 0x3] = a2\n 30442: a2 = a1 >> 0x10\n 30445: u8 [a0 + 0x2] = a2\n 30448: a1 = a1 >> 0x8\n 30451: u8 [a0 + 0x1] = a1\n 30454: a1 = 0x20\n 30457: a0 = s1\n 30459: ra = 408, jump @0\n      : @476 [@dyn 204] (gas: 6)\n 30465: i32 a1 = a0 + 0\n 30467: a2 = 0x20\n 30470: a0 = 0\n 30472: ra = 0x19a\n 30476: ecalli 11 // 'seal_return'\n 30478: fallthrough\n      : @477 [@dyn 205] (gas: 40)\n 30479: sp = sp + 0xffffffffffffffa0\n 30482: u64 [sp + 0x58] = ra\n 30485: u64 [sp + 0x50] = s0\n 30488: u64 [sp + 0x48] = s1\n 30491: s0 = sp + 0x60\n 30494: sp = sp & 0xffffffffffffffe0\n 30497: s1 = a0\n 30499: a0 = u64 [a1 + 0x18]\n 30502: a2 = u64 [a1 + 0x10]\n 30505: a3 = u64 [a1 + 0x8]\n 30508: a1 = u64 [a1]\n 30510: u64 [sp + 0x18] = a0\n 30513: u64 [sp + 0x10] = a2\n 30516: u64 [sp + 0x8] = a3\n 30519: u64 [sp] = a1\n 30521: u64 [sp + 56] = 0\n 30524: u64 [sp + 48] = 0\n 30527: u64 [sp + 40] = 0\n 30530: u64 [sp + 32] = 0\n 30533: u32 [sp + 64] = 0x20\n 30537: i32 a1 = sp + 0\n 30539: i32 a3 = sp + 0x20\n 30542: i32 a4 = sp + 0x40\n 30545: a2 = 0xffffffffffffffff\n 30548: a0 = 0\n 30550: ecalli 7 // 'get_storage'\n 30552: a0 = u64 [sp + 0x38]\n 30555: a1 = u64 [sp + 0x30]\n 30558: a2 = u64 [sp + 0x28]\n 30561: a3 = u64 [sp + 0x20]\n 30564: u64 [s1 + 0x18] = a0\n 30567: u64 [s1 + 0x10] = a1\n 30570: u64 [s1 + 0x8] = a2\n 30573: u64 [s1] = a3\n 30575: sp = s0 + 0xffffffffffffffa0\n 30578: ra = u64 [sp + 0x58]\n 30581: s0 = u64 [sp + 0x50]\n 30584: s1 = u64 [sp + 0x48]\n 30587: sp = sp + 0x60\n 30590: ret\n      : @478 (gas: 38)\n 30592: sp = sp + 0xfffffffffffffee0\n 30596: u64 [sp + 0x118] = ra\n 30600: u64 [sp + 0x110] = s0\n 30604: u64 [sp + 0x108] = s1\n 30608: s0 = sp + 0x120\n 30612: sp = sp & 0xffffffffffffffe0\n 30615: u64 [sp + 0x40] = a0\n 30618: a0 = u64 [a2]\n 30620: u64 [sp + 0x48] = a0\n 30623: a0 = u64 [a2 + 0x8]\n 30626: u64 [sp + 0x50] = a0\n 30629: a0 = u64 [a2 + 0x10]\n 30632: u64 [sp + 0x58] = a0\n 30635: s1 = u64 [a2 + 0x18]\n 30638: a4 = u64 [a1 + 0x18]\n 30641: a3 = u64 [a1 + 0x10]\n 30644: a2 = u64 [a1 + 0x8]\n 30647: a0 = u64 [a1]\n 30649: u64 [sp + 0x18] = a4\n 30652: u64 [sp + 0xb8] = a4\n 30656: u64 [sp + 0x20] = a3\n 30659: u64 [sp + 0xb0] = a3\n 30663: u64 [sp + 0x28] = a2\n 30666: u64 [sp + 0xa8] = a2\n 30670: u64 [sp + 0x30] = a0\n 30673: u64 [sp + 0xa0] = a0\n 30677: u64 [sp + 248] = 0\n 30681: u64 [sp + 240] = 0\n 30685: u64 [sp + 232] = 0\n 30689: u64 [sp + 224] = 0\n 30693: u32 [sp + 192] = 0x20\n 30698: i32 a1 = sp + 0xa0\n 30702: i32 a3 = sp + 0xe0\n 30706: i32 a4 = sp + 0xc0\n 30710: a2 = 0xffffffffffffffff\n 30713: a0 = 0\n 30715: ecalli 7 // 'get_storage'\n 30717: fallthrough\n      : @479 (gas: 20)\n 30718: a0 = u64 [sp + 0xf8]\n 30722: t0 = u64 [sp + 0xe0]\n 30726: a2 = u64 [sp + 0xf0]\n 30730: a3 = u64 [sp + 0xe8]\n 30734: a4 = a0 ^ s1\n 30737: u64 [sp + 0x38] = s1\n 30740: s1 = s1 <u a0\n 30743: a0 = u64 [sp + 0x58]\n 30746: a5 = a0 <u a2\n 30749: a5 = s1 if a4 != 0\n 30752: a1 = u64 [sp + 0x50]\n 30755: s1 = a3 ^ a1\n 30758: a3 = a1 <u a3\n 30761: a1 = u64 [sp + 0x48]\n 30764: a1 = a1 <u t0\n 30767: a1 = a3 if s1 != 0\n 30770: a0 = a0 ^ a2\n 30773: a0 = a0 | a4\n 30776: a1 = a5 if a0 != 0\n 30779: jump @483 if a1 == 0\n      : @480 (gas: 3)\n 30783: a1 = 0x20\n 30786: a0 = 0\n 30788: ra = 412, jump @0\n      : @481 [@dyn 206] (gas: 71)\n 30794: a1 = u64 [sp + 0x18]\n 30797: a1 = reverse a1\n 30799: a2 = u64 [sp + 0x20]\n 30802: a2 = reverse a2\n 30804: a3 = u64 [sp + 0x28]\n 30807: a3 = reverse a3\n 30809: a4 = u64 [sp + 0x30]\n 30812: a4 = reverse a4\n 30814: a5 = a4 >> 0x38\n 30817: u8 [a0 + 0x1f] = a5\n 30820: a5 = a4 >> 0x30\n 30823: u8 [a0 + 0x1e] = a5\n 30826: a5 = a4 >> 0x28\n 30829: u8 [a0 + 0x1d] = a5\n 30832: a5 = a4 >> 0x20\n 30835: u8 [a0 + 0x1c] = a5\n 30838: a5 = a4 >> 0x18\n 30841: u8 [a0 + 0x1b] = a5\n 30844: a5 = a4 >> 0x10\n 30847: u8 [a0 + 0x1a] = a5\n 30850: a5 = a4 >> 0x8\n 30853: u8 [a0 + 0x19] = a5\n 30856: u8 [a0 + 0x18] = a4\n 30859: u8 [a0 + 0x10] = a3\n 30862: a4 = a3 >> 0x38\n 30865: u8 [a0 + 0x17] = a4\n 30868: a4 = a3 >> 0x30\n 30871: u8 [a0 + 0x16] = a4\n 30874: a4 = a3 >> 0x28\n 30877: u8 [a0 + 0x15] = a4\n 30880: a4 = a3 >> 0x20\n 30883: u8 [a0 + 0x14] = a4\n 30886: a4 = a3 >> 0x18\n 30889: u8 [a0 + 0x13] = a4\n 30892: a4 = a3 >> 0x10\n 30895: u8 [a0 + 0x12] = a4\n 30898: a3 = a3 >> 0x8\n 30901: u8 [a0 + 0x11] = a3\n 30904: u8 [a0 + 0x8] = a2\n 30907: a3 = a2 >> 0x38\n 30910: u8 [a0 + 0xf] = a3\n 30913: a3 = a2 >> 0x30\n 30916: u8 [a0 + 0xe] = a3\n 30919: a3 = a2 >> 0x28\n 30922: u8 [a0 + 0xd] = a3\n 30925: a3 = a2 >> 0x20\n 30928: u8 [a0 + 0xc] = a3\n 30931: a3 = a2 >> 0x18\n 30934: u8 [a0 + 0xb] = a3\n 30937: a3 = a2 >> 0x10\n 30940: u8 [a0 + 0xa] = a3\n 30943: a2 = a2 >> 0x8\n 30946: u8 [a0 + 0x9] = a2\n 30949: u8 [a0] = a1\n 30951: a2 = a1 >> 0x38\n 30954: u8 [a0 + 0x7] = a2\n 30957: a2 = a1 >> 0x30\n 30960: u8 [a0 + 0x6] = a2\n 30963: a2 = a1 >> 0x28\n 30966: u8 [a0 + 0x5] = a2\n 30969: a2 = a1 >> 0x20\n 30972: u8 [a0 + 0x4] = a2\n 30975: a2 = a1 >> 0x18\n 30978: u8 [a0 + 0x3] = a2\n 30981: a2 = a1 >> 0x10\n 30984: u8 [a0 + 0x2] = a2\n 30987: a1 = a1 >> 0x8\n 30990: u8 [a0 + 0x1] = a1\n 30993: a1 = 0x20\n 30996: a0 = 0\n 30998: ra = 414, jump @0\n      : @482 [@dyn 207] (gas: 64)\n 31004: i32 a0 = a0 + 0\n 31006: i32 a2 = sp + 0xe0\n 31010: a1 = 0x20\n 31013: ecalli 8 // 'hash_keccak_256'\n 31015: a0 = u64 [sp + 0xf8]\n 31019: a1 = u64 [sp + 0xf0]\n 31023: a0 = reverse a0\n 31025: a3 = reverse a1\n 31027: t0 = 0x7\n 31030: a2 = u64 [sp + 0x48]\n 31033: a5 = a2 mulhu t0\n 31036: s1 = u64 [sp + 0x50]\n 31039: a1 = s1 << 0x3\n 31042: a4 = a1 - s1\n 31045: a5 = a5 + a4\n 31048: a1 = a2 << 0x3\n 31051: a1 = a1 - a2\n 31054: a2 = a3 + a5\n 31057: t1 = a0 + a1\n 31060: a0 = t1 <u a0\n 31063: ra = a2 + a0\n 31066: a2 = ra ^ a3\n 31069: a3 = ra <u a3\n 31072: a3 = a0 if a2 == 0\n 31075: a0 = a5 <u a4\n 31078: t2 = u64 [sp + 0xe0]\n 31082: a4 = s1 mulhu t0\n 31085: a0 = a0 + a4\n 31088: a1 = u64 [sp + 0x58]\n 31091: a4 = a1 << 0x3\n 31094: a4 = a4 - a1\n 31097: a5 = a1 mulhu t0\n 31100: a2 = u64 [sp + 0x38]\n 31103: a1 = a2 << 0x3\n 31106: a1 = a1 - a2\n 31109: a1 = a1 + a5\n 31112: a2 = reverse t2\n 31114: a1 = a1 + a2\n 31117: a2 = u64 [sp + 0xe8]\n 31121: a4 = a4 + a0\n 31124: a0 = a4 <u a0\n 31127: a0 = a0 + a1\n 31130: a1 = reverse a2\n 31132: a4 = a4 + a1\n 31135: a1 = a4 <u a1\n 31138: a0 = a0 + a1\n 31141: a3 = a3 + a4\n 31144: a1 = a3 <u a4\n 31147: a0 = a0 + a1\n 31150: a1 = u64 [sp + 0x40]\n 31153: u64 [a1] = t1\n 31155: u64 [a1 + 0x8] = ra\n 31158: u64 [a1 + 0x10] = a3\n 31161: u64 [a1 + 0x18] = a0\n 31164: u64 [a1 + 56] = 0\n 31167: u64 [a1 + 48] = 0\n 31170: u64 [a1 + 40] = 0\n 31173: u64 [a1 + 32] = 0\n 31176: sp = s0 + 0xfffffffffffffee0\n 31180: ra = u64 [sp + 0x118]\n 31184: s0 = u64 [sp + 0x110]\n 31188: s1 = u64 [sp + 0x108]\n 31192: sp = sp + 0x120\n 31196: ret\n      : @483 (gas: 8)\n 31198: u64 [sp + 144] = 0\n 31202: u64 [sp + 136] = 0\n 31206: u64 [sp + 128] = 0\n 31210: a0 = 0x4e487b7100000000\n 31220: a1 = sp + 0x80\n 31224: u64 [sp + 0x98] = a0\n 31228: a0 = 0\n 31230: ra = 416, jump @23\n      : @484 [@dyn 208] (gas: 7)\n 31236: u64 [sp + 120] = 0\n 31239: u64 [sp + 112] = 0\n 31242: u64 [sp + 96] = 0x32\n 31246: a0 = 0x4\n 31249: a1 = sp + 0x60\n 31252: u64 [sp + 104] = 0\n 31255: ra = 418, jump @23\n      : @485 [@dyn 209] (gas: 3)\n 31261: a1 = 0x24\n 31264: a0 = 0\n 31266: ra = 420, jump @0\n      : @486 [@dyn 210] (gas: 6)\n 31272: i32 a1 = a0 + 0\n 31274: a0 = 0x1\n 31277: a2 = 0x24\n 31280: ra = 0x1a6\n 31284: ecalli 11 // 'seal_return'\n 31286: fallthrough\n      : @487 [@dyn 211] (gas: 9)\n 31287: a2 = u64 [a1 + 0x18]\n 31290: a3 = u64 [a1 + 0x10]\n 31293: a4 = u64 [a1 + 0x8]\n 31296: a1 = u64 [a1]\n 31298: u64 [a0 + 0x18] = a2\n 31301: u64 [a0 + 0x10] = a3\n 31304: u64 [a0 + 0x8] = a4\n 31307: u64 [a0] = a1\n 31309: ret\n      : @488 (gas: 39)\n 31311: sp = sp + 0xfffffffffffffea0\n 31315: u64 [sp + 0x158] = ra\n 31319: u64 [sp + 0x150] = s0\n 31323: u64 [sp + 0x148] = s1\n 31327: s0 = sp + 0x160\n 31331: sp = sp & 0xffffffffffffffe0\n 31334: u64 [sp + 0x8] = a0\n 31337: a0 = u64 [a2 + 0x18]\n 31340: u64 [sp + 0xb0] = a0\n 31344: a0 = u64 [a2 + 0x10]\n 31347: u64 [sp + 0xa8] = a0\n 31351: a0 = u64 [a2 + 0x8]\n 31354: u64 [sp + 0xa0] = a0\n 31358: a0 = u64 [a2]\n 31360: u64 [sp + 0xb8] = a0\n 31364: a4 = u64 [a1 + 0x18]\n 31367: a3 = u64 [a1 + 0x10]\n 31370: a2 = u64 [a1 + 0x8]\n 31373: a0 = u64 [a1]\n 31375: u64 [sp + 0x18] = a4\n 31378: u64 [sp + 0x118] = a4\n 31382: u64 [sp + 0x20] = a3\n 31385: u64 [sp + 0x110] = a3\n 31389: u64 [sp + 0x68] = a2\n 31392: u64 [sp + 0x108] = a2\n 31396: u64 [sp + 0x70] = a0\n 31399: u64 [sp + 0x100] = a0\n 31403: u64 [sp + 312] = 0\n 31407: u64 [sp + 304] = 0\n 31411: u64 [sp + 296] = 0\n 31415: u64 [sp + 288] = 0\n 31419: u32 [sp + 320] = 0x20\n 31424: i32 a1 = sp + 0x100\n 31428: i32 a3 = sp + 0x120\n 31432: i32 a4 = sp + 0x140\n 31436: a2 = 0xffffffffffffffff\n 31439: a0 = 0\n 31441: ecalli 7 // 'get_storage'\n 31443: fallthrough\n      : @489 (gas: 32)\n 31444: t0 = u64 [sp + 0x130]\n 31448: t1 = u64 [sp + 0x128]\n 31452: t2 = u64 [sp + 0x138]\n 31456: a5 = u64 [sp + 0x120]\n 31460: a0 = t0 << 0x3f\n 31463: a1 = t1 >> 0x1\n 31466: a0 = a0 | a1\n 31469: a1 = t2 << 0x3f\n 31472: a2 = t0 >> 0x1\n 31475: a1 = a1 | a2\n 31478: a2 = t1 << 0x3f\n 31481: a3 = a5 >> 0x1\n 31484: a4 = a3 | a2\n 31487: a2 = t2 >> 0x1\n 31490: u64 [sp + 0x78] = a5\n 31493: a5 = a5 & 0x1\n 31496: a3 = -a5\n 31498: ra = a4 & 0x7f\n 31501: a1 = a1 & a3\n 31504: s1 = a3 & a0\n 31507: a4 = ra if a5 == 0\n 31510: a2 = a2 & a3\n 31513: u64 [sp + 0x58] = a4\n 31516: a0 = a4 <u 0x20\n 31519: u64 [sp + 0x48] = s1\n 31522: a0 = 0 if s1 != 0\n 31524: u64 [sp + 0x50] = a1\n 31527: u64 [sp + 0x40] = a2\n 31530: a1 = a1 | a2\n 31533: a0 = 0 if a1 != 0\n 31535: a1 = a5 <u 0x1\n 31538: jump @508 if a1 != a0\n      : @490 (gas: 17)\n 31542: u64 [sp + 0x98] = a5\n 31546: u64 [sp + 0x10] = ra\n 31549: u64 [sp + 0x80] = t1\n 31553: u64 [sp + 0x88] = t0\n 31557: u64 [sp + 0x90] = t2\n 31561: a0 = u64 [sp + 0xb8]\n 31565: a2 = u64 [sp + 0xa8]\n 31569: a0 = a0 | a2\n 31572: a1 = u64 [sp + 0xb0]\n 31576: a3 = u64 [sp + 0xa0]\n 31580: a1 = a1 | a3\n 31583: a0 = a0 | a1\n 31586: a0 = a0 >> 0x20\n 31589: a1 = a1 | a2\n 31592: a1 = a1 << 0x20\n 31595: a0 = a0 | a1\n 31598: jump @507 if a0 != 0\n      : @491 (gas: 4)\n 31602: s1 = u64 [sp + 0xb8]\n 31606: i32 a0 = s1 + 0\n 31608: a1 = 0x20\n 31611: ra = 424, jump @0\n      : @492 [@dyn 212] (gas: 85)\n 31617: a1 = u64 [sp + 0x40]\n 31620: a1 = reverse a1\n 31622: a2 = u64 [sp + 0x58]\n 31625: a2 = reverse a2\n 31627: a3 = a2 >> 0x38\n 31630: u8 [a0 + 0x1f] = a3\n 31633: a3 = a2 >> 0x30\n 31636: u8 [a0 + 0x1e] = a3\n 31639: a3 = a2 >> 0x28\n 31642: u8 [a0 + 0x1d] = a3\n 31645: a3 = a2 >> 0x20\n 31648: u8 [a0 + 0x1c] = a3\n 31651: a3 = a2 >> 0x18\n 31654: u8 [a0 + 0x1b] = a3\n 31657: a3 = a2 >> 0x10\n 31660: u8 [a0 + 0x1a] = a3\n 31663: a3 = a2 >> 0x8\n 31666: u8 [a0 + 0x19] = a3\n 31669: a3 = u64 [sp + 0x48]\n 31672: a3 = reverse a3\n 31674: u8 [a0 + 0x18] = a2\n 31677: a2 = a3 >> 0x38\n 31680: u8 [a0 + 0x17] = a2\n 31683: a2 = a3 >> 0x30\n 31686: u8 [a0 + 0x16] = a2\n 31689: a2 = a3 >> 0x28\n 31692: u8 [a0 + 0x15] = a2\n 31695: a2 = a3 >> 0x20\n 31698: u8 [a0 + 0x14] = a2\n 31701: a2 = a3 >> 0x18\n 31704: u8 [a0 + 0x13] = a2\n 31707: a2 = a3 >> 0x10\n 31710: u8 [a0 + 0x12] = a2\n 31713: a2 = u64 [sp + 0x50]\n 31716: a2 = reverse a2\n 31718: u8 [a0 + 0x10] = a3\n 31721: a3 = a3 >> 0x8\n 31724: u8 [a0 + 0x11] = a3\n 31727: u8 [a0 + 0x8] = a2\n 31730: a3 = a2 >> 0x38\n 31733: u8 [a0 + 0xf] = a3\n 31736: a3 = a2 >> 0x30\n 31739: u8 [a0 + 0xe] = a3\n 31742: a3 = a2 >> 0x28\n 31745: u8 [a0 + 0xd] = a3\n 31748: a3 = a2 >> 0x20\n 31751: u8 [a0 + 0xc] = a3\n 31754: a3 = a2 >> 0x18\n 31757: u8 [a0 + 0xb] = a3\n 31760: a3 = a2 >> 0x10\n 31763: u8 [a0 + 0xa] = a3\n 31766: a2 = a2 >> 0x8\n 31769: u8 [a0 + 0x9] = a2\n 31772: u8 [a0] = a1\n 31774: a2 = a1 >> 0x38\n 31777: u8 [a0 + 0x7] = a2\n 31780: a2 = a1 >> 0x30\n 31783: u8 [a0 + 0x6] = a2\n 31786: a2 = a1 >> 0x28\n 31789: u8 [a0 + 0x5] = a2\n 31792: a2 = a1 >> 0x20\n 31795: u8 [a0 + 0x4] = a2\n 31798: a2 = a1 >> 0x18\n 31801: u8 [a0 + 0x3] = a2\n 31804: a2 = a1 >> 0x10\n 31807: u8 [a0 + 0x2] = a2\n 31810: a1 = a1 >> 0x8\n 31813: u8 [a0 + 0x1] = a1\n 31816: a0 = s1 + 0x20\n 31819: u64 [sp + 0x60] = a0\n 31822: a0 = a0 <u s1\n 31825: a3 = u64 [sp + 0xa0]\n 31829: a1 = a3 + a0\n 31832: u64 [sp + 0x28] = a1\n 31835: a1 = a1 <u a3\n 31838: a1 = a0 if a0 == 0\n 31841: a0 = u64 [sp + 0xa8]\n 31845: a1 = a1 + a0\n 31848: u64 [sp + 0x30] = a1\n 31851: a0 = a1 <u a0\n 31854: a1 = u64 [sp + 0xb0]\n 31858: a0 = a0 + a1\n 31861: u64 [sp + 0x38] = a0\n 31864: a0 = u64 [sp + 0x98]\n 31868: jump @496 if a0 != 0\n      : @493 (gas: 9)\n 31872: a0 = u64 [sp + 0xb0]\n 31876: a1 = u64 [sp + 0xa8]\n 31880: a0 = a0 | a1\n 31883: a1 = 0xffffffe0\n 31893: a2 = u64 [sp + 0xb8]\n 31897: a1 = a2 <u a1\n 31900: a1 = 0 if a3 != 0\n 31902: a1 = 0 if a0 != 0\n 31904: jump @507 if a1 == 0\n      : @494 (gas: 5)\n 31908: a0 = u64 [sp + 0x78]\n 31911: s1 = a0 & 0xffffffffffffff00\n 31915: a0 = i32 [sp + 0x60]\n 31918: a1 = 0x20\n 31921: ra = 426, jump @0\n      : @495 [@dyn 213] (gas: 73)\n 31927: t0 = 0\n 31929: t1 = 0\n 31931: u64 [sp + 176] = 0\n 31935: a3 = reverse s1\n 31937: a4 = a3 >> 0x30\n 31940: u8 [a0 + 0x1e] = a4\n 31943: a4 = a3 >> 0x28\n 31946: u8 [a0 + 0x1d] = a4\n 31949: a4 = a3 >> 0x20\n 31952: u8 [a0 + 0x1c] = a4\n 31955: a4 = a3 >> 0x18\n 31958: u8 [a0 + 0x1b] = a4\n 31961: a4 = a3 >> 0x10\n 31964: u8 [a0 + 0x1a] = a4\n 31967: a1 = u64 [sp + 0x80]\n 31971: a4 = reverse a1\n 31973: u8 [a0 + 0x18] = a3\n 31976: a3 = a3 >> 0x8\n 31979: u8 [a0 + 0x19] = a3\n 31982: a3 = a4 >> 0x38\n 31985: u8 [a0 + 0x17] = a3\n 31988: a3 = a4 >> 0x30\n 31991: u8 [a0 + 0x16] = a3\n 31994: a3 = a4 >> 0x28\n 31997: u8 [a0 + 0x15] = a3\n 32000: a3 = a4 >> 0x20\n 32003: u8 [a0 + 0x14] = a3\n 32006: a3 = a4 >> 0x18\n 32009: u8 [a0 + 0x13] = a3\n 32012: a3 = a4 >> 0x10\n 32015: u8 [a0 + 0x12] = a3\n 32018: a1 = u64 [sp + 0x88]\n 32022: a3 = reverse a1\n 32024: u8 [a0 + 0x10] = a4\n 32027: a4 = a4 >> 0x8\n 32030: u8 [a0 + 0x11] = a4\n 32033: a4 = a3 >> 0x38\n 32036: u8 [a0 + 0xf] = a4\n 32039: a4 = a3 >> 0x30\n 32042: u8 [a0 + 0xe] = a4\n 32045: a4 = a3 >> 0x28\n 32048: u8 [a0 + 0xd] = a4\n 32051: a4 = a3 >> 0x20\n 32054: u8 [a0 + 0xc] = a4\n 32057: a4 = a3 >> 0x18\n 32060: u8 [a0 + 0xb] = a4\n 32063: a4 = a3 >> 0x10\n 32066: u8 [a0 + 0xa] = a4\n 32069: a1 = u64 [sp + 0x90]\n 32073: a4 = reverse a1\n 32075: u8 [a0 + 31] = 0\n 32078: u8 [a0 + 0x8] = a3\n 32081: a3 = a3 >> 0x8\n 32084: u8 [a0 + 0x9] = a3\n 32087: u8 [a0] = a4\n 32089: a3 = a4 >> 0x38\n 32092: u8 [a0 + 0x7] = a3\n 32095: a3 = a4 >> 0x30\n 32098: u8 [a0 + 0x6] = a3\n 32101: a3 = a4 >> 0x28\n 32104: u8 [a0 + 0x5] = a3\n 32107: a3 = a4 >> 0x20\n 32110: u8 [a0 + 0x4] = a3\n 32113: a3 = a4 >> 0x18\n 32116: u8 [a0 + 0x3] = a3\n 32119: a3 = a4 >> 0x10\n 32122: u8 [a0 + 0x2] = a3\n 32125: a4 = a4 >> 0x8\n 32128: u8 [a0 + 0x1] = a4\n 32131: a0 = u64 [sp + 0x10]\n 32134: a0 = a0 >u 0\n 32136: ra = a0 << 0x5\n 32139: jump @506\n      : @496 (gas: 3)\n 32142: a1 = 0x20\n 32145: a0 = 0\n 32147: ra = 428, jump @0\n      : @497 [@dyn 214] (gas: 71)\n 32153: a1 = u64 [sp + 0x18]\n 32156: a1 = reverse a1\n 32158: a2 = u64 [sp + 0x20]\n 32161: a2 = reverse a2\n 32163: a3 = u64 [sp + 0x68]\n 32166: a3 = reverse a3\n 32168: a4 = u64 [sp + 0x70]\n 32171: a4 = reverse a4\n 32173: a5 = a4 >> 0x38\n 32176: u8 [a0 + 0x1f] = a5\n 32179: a5 = a4 >> 0x30\n 32182: u8 [a0 + 0x1e] = a5\n 32185: a5 = a4 >> 0x28\n 32188: u8 [a0 + 0x1d] = a5\n 32191: a5 = a4 >> 0x20\n 32194: u8 [a0 + 0x1c] = a5\n 32197: a5 = a4 >> 0x18\n 32200: u8 [a0 + 0x1b] = a5\n 32203: a5 = a4 >> 0x10\n 32206: u8 [a0 + 0x1a] = a5\n 32209: a5 = a4 >> 0x8\n 32212: u8 [a0 + 0x19] = a5\n 32215: u8 [a0 + 0x18] = a4\n 32218: u8 [a0 + 0x10] = a3\n 32221: a4 = a3 >> 0x38\n 32224: u8 [a0 + 0x17] = a4\n 32227: a4 = a3 >> 0x30\n 32230: u8 [a0 + 0x16] = a4\n 32233: a4 = a3 >> 0x28\n 32236: u8 [a0 + 0x15] = a4\n 32239: a4 = a3 >> 0x20\n 32242: u8 [a0 + 0x14] = a4\n 32245: a4 = a3 >> 0x18\n 32248: u8 [a0 + 0x13] = a4\n 32251: a4 = a3 >> 0x10\n 32254: u8 [a0 + 0x12] = a4\n 32257: a3 = a3 >> 0x8\n 32260: u8 [a0 + 0x11] = a3\n 32263: u8 [a0 + 0x8] = a2\n 32266: a3 = a2 >> 0x38\n 32269: u8 [a0 + 0xf] = a3\n 32272: a3 = a2 >> 0x30\n 32275: u8 [a0 + 0xe] = a3\n 32278: a3 = a2 >> 0x28\n 32281: u8 [a0 + 0xd] = a3\n 32284: a3 = a2 >> 0x20\n 32287: u8 [a0 + 0xc] = a3\n 32290: a3 = a2 >> 0x18\n 32293: u8 [a0 + 0xb] = a3\n 32296: a3 = a2 >> 0x10\n 32299: u8 [a0 + 0xa] = a3\n 32302: a2 = a2 >> 0x8\n 32305: u8 [a0 + 0x9] = a2\n 32308: u8 [a0] = a1\n 32310: a2 = a1 >> 0x38\n 32313: u8 [a0 + 0x7] = a2\n 32316: a2 = a1 >> 0x30\n 32319: u8 [a0 + 0x6] = a2\n 32322: a2 = a1 >> 0x28\n 32325: u8 [a0 + 0x5] = a2\n 32328: a2 = a1 >> 0x20\n 32331: u8 [a0 + 0x4] = a2\n 32334: a2 = a1 >> 0x18\n 32337: u8 [a0 + 0x3] = a2\n 32340: a2 = a1 >> 0x10\n 32343: u8 [a0 + 0x2] = a2\n 32346: a1 = a1 >> 0x8\n 32349: u8 [a0 + 0x1] = a1\n 32352: a1 = 0x20\n 32355: a0 = 0\n 32357: ra = 430, jump @0\n      : @498 [@dyn 215] (gas: 5)\n 32363: i32 a0 = a0 + 0\n 32365: i32 a2 = sp + 0x120\n 32369: a1 = 0x20\n 32372: ecalli 8 // 'hash_keccak_256'\n 32374: fallthrough\n      : @499 (gas: 9)\n 32375: a0 = u64 [sp + 0x78]\n 32378: a0 = a0 <u 0x2\n 32381: a1 = u64 [sp + 0x80]\n 32385: a0 = 0 if a1 != 0\n 32387: a1 = u64 [sp + 0x90]\n 32391: a2 = u64 [sp + 0x88]\n 32395: a1 = a1 | a2\n 32398: a0 = 0 if a1 != 0\n 32400: jump @501 if a0 == 0\n      : @500 (gas: 5)\n 32403: ra = 0\n 32405: t0 = 0\n 32407: t1 = 0\n 32409: u64 [sp + 176] = 0\n 32413: jump @506\n      : @501 (gas: 19)\n 32416: u64 [sp + 168] = 0\n 32420: u64 [sp + 160] = 0\n 32424: s1 = 0\n 32426: u64 [sp + 176] = 0\n 32430: a0 = u64 [sp + 0x120]\n 32434: a1 = u64 [sp + 0x128]\n 32438: a2 = u64 [sp + 0x130]\n 32442: a3 = u64 [sp + 0x138]\n 32446: a0 = reverse a0\n 32448: a5 = reverse a1\n 32450: a1 = reverse a2\n 32452: t2 = reverse a3\n 32454: i32 a3 = sp + 0x100\n 32458: u64 [sp + 0x20] = a3\n 32461: i32 a3 = sp + 0x120\n 32465: u64 [sp + 0x18] = a3\n 32468: i32 a3 = sp + 0x140\n 32472: u64 [sp + 0x10] = a3\n 32475: fallthrough\n      : @502 (gas: 20)\n 32476: u64 [sp + 0x88] = a5\n 32480: u64 [sp + 0x110] = a5\n 32484: u64 [sp + 0xb8] = a1\n 32488: u64 [sp + 0x108] = a1\n 32492: u64 [sp + 0x90] = t2\n 32496: u64 [sp + 0x100] = t2\n 32500: u64 [sp + 0x98] = a0\n 32504: u64 [sp + 0x118] = a0\n 32508: u64 [sp + 312] = 0\n 32512: u64 [sp + 304] = 0\n 32516: u64 [sp + 296] = 0\n 32520: u64 [sp + 288] = 0\n 32524: u32 [sp + 320] = 0x20\n 32529: a2 = 0xffffffffffffffff\n 32532: a0 = 0\n 32534: a1 = u64 [sp + 0x20]\n 32537: a3 = u64 [sp + 0x18]\n 32540: a4 = u64 [sp + 0x10]\n 32543: ecalli 7 // 'get_storage'\n 32545: fallthrough\n      : @503 (gas: 30)\n 32546: a0 = u64 [sp + 0x60]\n 32549: a1 = u64 [sp + 0xa8]\n 32553: a0 = a0 + a1\n 32556: a1 = a0 <u a1\n 32559: a2 = u64 [sp + 0x28]\n 32562: a4 = u64 [sp + 0xa0]\n 32566: a2 = a2 + a4\n 32569: a2 = a2 + a1\n 32572: a3 = a2 ^ a4\n 32575: a4 = a2 <u a4\n 32578: a4 = a1 if a3 == 0\n 32581: a1 = u64 [sp + 0x30]\n 32584: a1 = a1 + s1\n 32587: u64 [sp + 0x80] = s1\n 32591: a3 = a1 <u s1\n 32594: a5 = u64 [sp + 0x38]\n 32597: s1 = u64 [sp + 0xb0]\n 32601: a5 = a5 + s1\n 32604: a3 = a3 + a5\n 32607: a4 = a4 + a1\n 32610: a1 = a4 <u a1\n 32613: a1 = a1 + a3\n 32616: a1 = a1 | a2\n 32619: a2 = a0 | a4\n 32622: a2 = a2 | a1\n 32625: a1 = a1 | a4\n 32628: a2 = a2 >> 0x20\n 32631: a1 = a1 << 0x20\n 32634: a1 = a1 | a2\n 32637: jump @507 if a1 != 0\n      : @504 (gas: 10)\n 32641: a1 = u64 [sp + 0x138]\n 32645: u64 [sp + 0x70] = a1\n 32648: a1 = u64 [sp + 0x130]\n 32652: u64 [sp + 0x78] = a1\n 32655: a1 = u64 [sp + 0x128]\n 32659: u64 [sp + 0x68] = a1\n 32662: s1 = u64 [sp + 0x120]\n 32666: i32 a0 = a0 + 0\n 32668: a1 = 0x20\n 32671: ra = 432, jump @0\n      : @505 [@dyn 216] (gas: 115)\n 32677: a1 = reverse s1\n 32679: a2 = a1 >> 0x38\n 32682: u8 [a0 + 0x1f] = a2\n 32685: a2 = a1 >> 0x30\n 32688: u8 [a0 + 0x1e] = a2\n 32691: a2 = a1 >> 0x28\n 32694: u8 [a0 + 0x1d] = a2\n 32697: a2 = a1 >> 0x20\n 32700: u8 [a0 + 0x1c] = a2\n 32703: a2 = a1 >> 0x18\n 32706: u8 [a0 + 0x1b] = a2\n 32709: a2 = a1 >> 0x10\n 32712: u8 [a0 + 0x1a] = a2\n 32715: a2 = a1 >> 0x8\n 32718: u8 [a0 + 0x19] = a2\n 32721: a2 = u64 [sp + 0x68]\n 32724: a2 = reverse a2\n 32726: u8 [a0 + 0x18] = a1\n 32729: a1 = a2 >> 0x38\n 32732: u8 [a0 + 0x17] = a1\n 32735: a1 = a2 >> 0x30\n 32738: u8 [a0 + 0x16] = a1\n 32741: a1 = a2 >> 0x28\n 32744: u8 [a0 + 0x15] = a1\n 32747: a1 = a2 >> 0x20\n 32750: u8 [a0 + 0x14] = a1\n 32753: a1 = a2 >> 0x18\n 32756: u8 [a0 + 0x13] = a1\n 32759: a1 = a2 >> 0x10\n 32762: u8 [a0 + 0x12] = a1\n 32765: a1 = u64 [sp + 0x70]\n 32768: a1 = reverse a1\n 32770: a3 = u64 [sp + 0x78]\n 32773: a3 = reverse a3\n 32775: u8 [a0 + 0x10] = a2\n 32778: a2 = a2 >> 0x8\n 32781: u8 [a0 + 0x11] = a2\n 32784: u8 [a0 + 0x8] = a3\n 32787: a2 = a3 >> 0x38\n 32790: u8 [a0 + 0xf] = a2\n 32793: a2 = a3 >> 0x30\n 32796: u8 [a0 + 0xe] = a2\n 32799: a2 = a3 >> 0x28\n 32802: u8 [a0 + 0xd] = a2\n 32805: a2 = a3 >> 0x20\n 32808: u8 [a0 + 0xc] = a2\n 32811: a2 = a3 >> 0x18\n 32814: u8 [a0 + 0xb] = a2\n 32817: a2 = a3 >> 0x10\n 32820: u8 [a0 + 0xa] = a2\n 32823: a3 = a3 >> 0x8\n 32826: u8 [a0 + 0x9] = a3\n 32829: u8 [a0] = a1\n 32831: a2 = a1 >> 0x38\n 32834: u8 [a0 + 0x7] = a2\n 32837: a2 = a1 >> 0x30\n 32840: u8 [a0 + 0x6] = a2\n 32843: a2 = a1 >> 0x28\n 32846: u8 [a0 + 0x5] = a2\n 32849: a2 = a1 >> 0x20\n 32852: u8 [a0 + 0x4] = a2\n 32855: a2 = a1 >> 0x18\n 32858: u8 [a0 + 0x3] = a2\n 32861: a2 = a1 >> 0x10\n 32864: u8 [a0 + 0x2] = a2\n 32867: a1 = a1 >> 0x8\n 32870: u8 [a0 + 0x1] = a1\n 32873: t2 = u64 [sp + 0x90]\n 32877: t2 = t2 + 0x1\n 32880: a0 = t2 <u 0x1\n 32883: a1 = u64 [sp + 0xb8]\n 32887: a1 = a1 + a0\n 32890: u64 [sp + 0xb8] = a1\n 32894: a0 = u64 [sp + 0xa8]\n 32898: ra = a0 + 0x20\n 32901: a2 = ra <u a0\n 32904: a0 = u64 [sp + 0xa0]\n 32908: t0 = a0 + a2\n 32911: a3 = t0 <u a0\n 32914: a3 = a2 if a2 == 0\n 32917: a0 = u64 [sp + 0x80]\n 32921: t1 = a0 + a3\n 32924: a3 = t1 <u a0\n 32927: a5 = u64 [sp + 0xb0]\n 32931: a5 = a5 + a3\n 32934: a1 = u64 [sp + 0x50]\n 32937: a0 = t1 <u a1\n 32940: u64 [sp + 0xa8] = a0\n 32944: a2 = u64 [sp + 0x58]\n 32947: a4 = ra <u a2\n 32950: a2 = u64 [sp + 0x48]\n 32953: s1 = t0 ^ a2\n 32956: a3 = t0 <u a2\n 32959: a3 = a4 if s1 == 0\n 32962: a2 = u64 [sp + 0x40]\n 32965: a0 = a5 ^ a2\n 32968: u64 [sp + 0xb0] = a5\n 32972: s1 = a5 <u a2\n 32975: a2 = u64 [sp + 0xa8]\n 32979: s1 = a2 if a0 == 0\n 32982: a4 = t1 ^ a1\n 32985: a1 = u64 [sp + 0xb8]\n 32989: a0 = a0 | a4\n 32992: a5 = t2 | a1\n 32995: a5 = a5 <u 0x1\n 32998: a4 = u64 [sp + 0x88]\n 33002: a5 = a5 + a4\n 33005: a4 = a5 <u a4\n 33008: a3 = s1 if a0 != 0\n 33011: a0 = u64 [sp + 0x98]\n 33015: a0 = a0 + a4\n 33018: u64 [sp + 0xa8] = ra\n 33022: u64 [sp + 0xa0] = t0\n 33026: s1 = t1\n 33028: jump @502 if a3 != 0\n      : @506 (gas: 30)\n 33032: a3 = u64 [sp + 0x60]\n 33035: a3 = a3 + ra\n 33038: a0 = a3 <u ra\n 33041: a4 = u64 [sp + 0x28]\n 33044: a4 = a4 + t0\n 33047: a4 = a4 + a0\n 33050: a5 = a4 ^ t0\n 33053: a1 = a4 <u t0\n 33056: a1 = a0 if a5 == 0\n 33059: a0 = u64 [sp + 0x30]\n 33062: a0 = a0 + t1\n 33065: a1 = a1 + a0\n 33068: a5 = a1 <u a0\n 33071: a0 = a0 <u t1\n 33074: a2 = u64 [sp + 0x38]\n 33077: s1 = u64 [sp + 0xb0]\n 33081: a2 = a2 + s1\n 33084: a0 = a0 + a2\n 33087: a0 = a0 + a5\n 33090: a2 = u64 [sp + 0x8]\n 33093: u64 [a2] = a3\n 33095: u64 [a2 + 0x8] = a4\n 33098: u64 [a2 + 0x10] = a1\n 33101: u64 [a2 + 0x18] = a0\n 33104: sp = s0 + 0xfffffffffffffea0\n 33108: ra = u64 [sp + 0x158]\n 33112: s0 = u64 [sp + 0x150]\n 33116: s1 = u64 [sp + 0x148]\n 33120: sp = sp + 0x160\n 33124: ret\n      : @507 (gas: 1)\n 33126: trap\n      : @508 (gas: 8)\n 33127: u64 [sp + 240] = 0\n 33131: u64 [sp + 232] = 0\n 33135: u64 [sp + 224] = 0\n 33139: a0 = 0x4e487b7100000000\n 33149: a1 = sp + 0xe0\n 33153: u64 [sp + 0xf8] = a0\n 33157: a0 = 0\n 33159: ra = 434, jump @23\n      : @509 [@dyn 217] (gas: 7)\n 33166: u64 [sp + 216] = 0\n 33170: u64 [sp + 208] = 0\n 33174: u64 [sp + 192] = 0x22\n 33179: a0 = 0x4\n 33182: a1 = sp + 0xc0\n 33186: u64 [sp + 200] = 0\n 33190: ra = 436, jump @23\n      : @510 [@dyn 218] (gas: 3)\n 33197: a1 = 0x24\n 33200: a0 = 0\n 33202: ra = 438, jump @0\n      : @511 [@dyn 219] (gas: 6)\n 33209: i32 a1 = a0 + 0\n 33211: a0 = 0x1\n 33214: a2 = 0x24\n 33217: ra = 0x1b8\n 33221: ecalli 11 // 'seal_return'\n 33223: fallthrough\n      : @512 [@dyn 220] (gas: 27)\n 33224: sp = sp + 0xffffffffffffff80\n 33227: u64 [sp + 0x78] = ra\n 33230: u64 [sp + 0x70] = s0\n 33233: u64 [sp + 0x68] = s1\n 33236: s0 = sp + 0x80\n 33240: sp = sp & 0xfffffffffffffff0\n 33243: t0 = u64 [a1]\n 33245: t1 = u64 [a1 + 0x8]\n 33248: t2 = u64 [a1 + 0x10]\n 33251: a1 = u64 [a1 + 0x18]\n 33254: a3 = u64 [a2]\n 33256: a4 = u64 [a2 + 0x8]\n 33259: a5 = u64 [a2 + 0x10]\n 33262: a2 = u64 [a2 + 0x18]\n 33265: s1 = a0\n 33267: u64 [sp + 0x18] = a2\n 33270: u64 [sp + 0x10] = a5\n 33273: u64 [sp + 0x8] = a4\n 33276: u64 [sp] = a3\n 33278: u64 [sp + 0x38] = a1\n 33281: u64 [sp + 0x30] = t2\n 33284: u64 [sp + 0x28] = t1\n 33287: a0 = sp + 0x40\n 33290: a1 = sp + 0x20\n 33293: a2 = sp\n 33295: u64 [sp + 0x20] = t0\n 33298: ra = 442, jump @488\n      : @513 [@dyn 221] (gas: 14)\n 33304: a0 = u64 [sp + 0x50]\n 33307: a1 = u64 [sp + 0x58]\n 33310: a2 = u64 [sp + 0x40]\n 33313: a3 = u64 [sp + 0x48]\n 33316: u64 [s1 + 0x10] = a0\n 33319: u64 [s1 + 0x18] = a1\n 33322: u64 [s1] = a2\n 33324: u64 [s1 + 0x8] = a3\n 33327: sp = s0 + 0xffffffffffffff80\n 33330: ra = u64 [sp + 0x78]\n 33333: s0 = u64 [sp + 0x70]\n 33336: s1 = u64 [sp + 0x68]\n 33339: sp = sp + 0x80\n 33343: ret\n      : @514 (gas: 18)\n 33345: sp = sp + 0xffffffffffffff00\n 33349: u64 [sp + 0xf8] = ra\n 33353: u64 [sp + 0xf0] = s0\n 33357: u64 [sp + 0xe8] = s1\n 33361: s0 = sp + 0x100\n 33365: sp = sp & 0xfffffffffffffff0\n 33368: a2 = u64 [a1]\n 33370: u64 [sp + 0x20] = a2\n 33373: a2 = u64 [a1 + 0x8]\n 33376: u64 [sp + 0x10] = a2\n 33379: a2 = u64 [a1 + 0x10]\n 33382: u64 [sp + 0x8] = a2\n 33385: a1 = u64 [a1 + 0x18]\n 33388: u64 [sp] = a1\n 33390: u64 [sp + 0x18] = a0\n 33393: a0 = 0x40\n 33396: a1 = 0x20\n 33399: ra = 444, jump @0\n      : @515 [@dyn 222] (gas: 111)\n 33406: a1 = u8 [a0 + 0x1]\n 33409: a2 = u8 [a0]\n 33411: a3 = u8 [a0 + 0x2]\n 33414: a4 = u8 [a0 + 0x3]\n 33417: a1 = a1 << 0x8\n 33420: a1 = a1 | a2\n 33423: a3 = a3 << 0x10\n 33426: a4 = a4 << 0x18\n 33429: a3 = a3 | a4\n 33432: a1 = a1 | a3\n 33435: a2 = u8 [a0 + 0x5]\n 33438: a3 = u8 [a0 + 0x4]\n 33441: a4 = u8 [a0 + 0x6]\n 33444: a5 = u8 [a0 + 0x7]\n 33447: a2 = a2 << 0x8\n 33450: a2 = a2 | a3\n 33453: a4 = a4 << 0x10\n 33456: a5 = a5 << 0x18\n 33459: a4 = a4 | a5\n 33462: a2 = a2 | a4\n 33465: a2 = a2 << 0x20\n 33468: t0 = a2 | a1\n 33471: a2 = u8 [a0 + 0x9]\n 33474: a3 = u8 [a0 + 0x8]\n 33477: a4 = u8 [a0 + 0xa]\n 33480: a5 = u8 [a0 + 0xb]\n 33483: a2 = a2 << 0x8\n 33486: a2 = a2 | a3\n 33489: a4 = a4 << 0x10\n 33492: a5 = a5 << 0x18\n 33495: a4 = a4 | a5\n 33498: a2 = a2 | a4\n 33501: a3 = u8 [a0 + 0xd]\n 33504: a4 = u8 [a0 + 0xc]\n 33507: a5 = u8 [a0 + 0xe]\n 33510: s1 = u8 [a0 + 0xf]\n 33513: a3 = a3 << 0x8\n 33516: a3 = a3 | a4\n 33519: a5 = a5 << 0x10\n 33522: s1 = s1 << 0x18\n 33525: a5 = a5 | s1\n 33528: a3 = a3 | a5\n 33531: a3 = a3 << 0x20\n 33534: a2 = a2 | a3\n 33537: a3 = u8 [a0 + 0x11]\n 33540: a4 = u8 [a0 + 0x10]\n 33543: a5 = u8 [a0 + 0x12]\n 33546: s1 = u8 [a0 + 0x13]\n 33549: a3 = a3 << 0x8\n 33552: a3 = a3 | a4\n 33555: a5 = a5 << 0x10\n 33558: s1 = s1 << 0x18\n 33561: a5 = a5 | s1\n 33564: a3 = a3 | a5\n 33567: a4 = u8 [a0 + 0x15]\n 33570: a5 = u8 [a0 + 0x14]\n 33573: s1 = u8 [a0 + 0x16]\n 33576: a1 = u8 [a0 + 0x17]\n 33579: a4 = a4 << 0x8\n 33582: a4 = a4 | a5\n 33585: s1 = s1 << 0x10\n 33588: a1 = a1 << 0x18\n 33591: a1 = a1 | s1\n 33594: a1 = a1 | a4\n 33597: a1 = a1 << 0x20\n 33600: a3 = a3 | a1\n 33603: a1 = u8 [a0 + 0x19]\n 33606: a4 = u8 [a0 + 0x18]\n 33609: a5 = u8 [a0 + 0x1a]\n 33612: s1 = u8 [a0 + 0x1b]\n 33615: a1 = a1 << 0x8\n 33618: a1 = a1 | a4\n 33621: a5 = a5 << 0x10\n 33624: s1 = s1 << 0x18\n 33627: a5 = a5 | s1\n 33630: a1 = a1 | a5\n 33633: a4 = u8 [a0 + 0x1d]\n 33636: a5 = u8 [a0 + 0x1c]\n 33639: s1 = u8 [a0 + 0x1e]\n 33642: a0 = u8 [a0 + 0x1f]\n 33645: a4 = a4 << 0x8\n 33648: a4 = a4 | a5\n 33651: s1 = s1 << 0x10\n 33654: a0 = a0 << 0x18\n 33657: a0 = a0 | s1\n 33660: a0 = a0 | a4\n 33663: a0 = a0 << 0x20\n 33666: a0 = a0 | a1\n 33669: a4 = reverse a0\n 33671: u64 [sp + 0x38] = a4\n 33674: s1 = reverse a3\n 33676: a2 = reverse a2\n 33678: u64 [sp + 0x30] = a2\n 33681: a1 = reverse t0\n 33683: u64 [sp + 0x28] = a1\n 33686: a0 = u64 [sp]\n 33688: u64 [sp + 0xb8] = a0\n 33692: a0 = u64 [sp + 0x8]\n 33695: u64 [sp + 0xb0] = a0\n 33699: a0 = u64 [sp + 0x10]\n 33702: u64 [sp + 0xa8] = a0\n 33706: a0 = u64 [sp + 0x20]\n 33709: u64 [sp + 0xa0] = a0\n 33713: u64 [sp + 0x98] = a1\n 33717: u64 [sp + 0x90] = a2\n 33721: u64 [sp + 0x88] = s1\n 33725: a0 = sp + 0xc0\n 33729: a1 = sp + 0xa0\n 33733: a2 = sp + 0x80\n 33737: u64 [sp + 0x80] = a4\n 33741: ra = 446, jump @488\n      : @516 [@dyn 223] (gas: 58)\n 33747: t2 = s1\n 33749: a3 = u64 [sp + 0xc8]\n 33753: a0 = u64 [sp + 0xd8]\n 33757: u64 [sp + 0x10] = a0\n 33760: a4 = u64 [sp + 0xc0]\n 33764: t1 = u64 [sp + 0xd0]\n 33768: a5 = a3 ^ s1\n 33771: a1 = a3 <u s1\n 33774: a2 = u64 [sp + 0x38]\n 33777: s1 = a4 <u a2\n 33780: a1 = s1 if a5 == 0\n 33783: a3 = a3 - t2\n 33786: a3 = a3 - s1\n 33789: u64 [sp + 0x8] = a3\n 33792: a4 = a4 - a2\n 33795: a5 = a4 + 0x1f\n 33798: a4 = a5 <u a4\n 33801: a3 = a3 + a4\n 33804: a5 = a5 & 0xffffffffffffffe0\n 33807: a0 = a3 + t2\n 33810: a2 = a2 + a5\n 33813: u64 [sp + 0x20] = a2\n 33816: a5 = a2 <u a5\n 33819: t0 = a0 + a5\n 33822: a0 = t0 ^ a3\n 33825: a2 = t0 <u a3\n 33828: a2 = a5 if a0 == 0\n 33831: s1 = u64 [sp + 0x30]\n 33834: a0 = t1 - s1\n 33837: a5 = t1 <u s1\n 33840: t1 = s1\n 33842: ra = u64 [sp + 0x28]\n 33845: s1 = u64 [sp + 0x10]\n 33848: s1 = s1 - ra\n 33851: s1 = s1 - a5\n 33854: a5 = a0 <u a1\n 33857: s1 = s1 - a5\n 33860: a0 = a0 - a1\n 33863: a1 = u64 [sp + 0x8]\n 33866: a1 = a3 <u a1\n 33869: a1 = a4 if a4 == 0\n 33872: a1 = a1 + a0\n 33875: a0 = a1 <u a0\n 33878: a3 = a1 + t1\n 33881: a5 = a3 + a2\n 33884: a1 = a3 <u a1\n 33887: a2 = a5 <u a3\n 33890: s1 = s1 + ra\n 33893: a0 = a0 + s1\n 33896: a0 = a0 + a1\n 33899: s1 = a0 + a2\n 33902: a0 = s1 >u 0\n 33904: a1 = a5 >u 0\n 33906: a1 = a0 if s1 != 0\n 33909: a0 = a5 | s1\n 33912: a2 = t0 >u 0\n 33914: a2 = a1 if a0 != 0\n 33917: jump @520 if a2 != 0\n      : @517 (gas: 15)\n 33921: a4 = t1\n 33923: a0 = u64 [sp + 0x38]\n 33926: a1 = u64 [sp + 0x20]\n 33929: a0 = a1 <u a0\n 33932: a1 = t0 ^ t2\n 33935: a2 = t0 <u t2\n 33938: a2 = a0 if a1 == 0\n 33941: a0 = a5 <u t1\n 33944: a1 = s1 ^ ra\n 33947: a3 = s1 <u ra\n 33950: a3 = a0 if a1 == 0\n 33953: a0 = a5 ^ t1\n 33956: a0 = a0 | a1\n 33959: a3 = a2 if a0 == 0\n 33962: jump @520 if a3 != 0\n      : @518 (gas: 6)\n 33966: a0 = 0x40\n 33969: a1 = 0x20\n 33972: u64 [sp + 0x10] = t2\n 33975: u64 [sp + 0x8] = t0\n 33978: u64 [sp] = a5\n 33980: ra = 448, jump @0\n      : @519 [@dyn 224] (gas: 82)\n 33987: a1 = reverse s1\n 33989: a2 = u64 [sp]\n 33991: a2 = reverse a2\n 33993: a3 = u64 [sp + 0x8]\n 33996: a3 = reverse a3\n 33998: a4 = u64 [sp + 0x20]\n 34001: a4 = reverse a4\n 34003: u8 [a0 + 0x18] = a4\n 34006: a5 = a4 >> 0x38\n 34009: u8 [a0 + 0x1f] = a5\n 34012: a5 = a4 >> 0x30\n 34015: u8 [a0 + 0x1e] = a5\n 34018: a5 = a4 >> 0x28\n 34021: u8 [a0 + 0x1d] = a5\n 34024: a5 = a4 >> 0x20\n 34027: u8 [a0 + 0x1c] = a5\n 34030: a5 = a4 >> 0x18\n 34033: u8 [a0 + 0x1b] = a5\n 34036: a5 = a4 >> 0x10\n 34039: u8 [a0 + 0x1a] = a5\n 34042: a4 = a4 >> 0x8\n 34045: u8 [a0 + 0x19] = a4\n 34048: u8 [a0 + 0x10] = a3\n 34051: a4 = a3 >> 0x38\n 34054: u8 [a0 + 0x17] = a4\n 34057: a4 = a3 >> 0x30\n 34060: u8 [a0 + 0x16] = a4\n 34063: a4 = a3 >> 0x28\n 34066: u8 [a0 + 0x15] = a4\n 34069: a4 = a3 >> 0x20\n 34072: u8 [a0 + 0x14] = a4\n 34075: a4 = a3 >> 0x18\n 34078: u8 [a0 + 0x13] = a4\n 34081: a4 = a3 >> 0x10\n 34084: u8 [a0 + 0x12] = a4\n 34087: a3 = a3 >> 0x8\n 34090: u8 [a0 + 0x11] = a3\n 34093: u8 [a0 + 0x8] = a2\n 34096: a3 = a2 >> 0x38\n 34099: u8 [a0 + 0xf] = a3\n 34102: a3 = a2 >> 0x30\n 34105: u8 [a0 + 0xe] = a3\n 34108: a3 = a2 >> 0x28\n 34111: u8 [a0 + 0xd] = a3\n 34114: a3 = a2 >> 0x20\n 34117: u8 [a0 + 0xc] = a3\n 34120: a3 = a2 >> 0x18\n 34123: u8 [a0 + 0xb] = a3\n 34126: a3 = a2 >> 0x10\n 34129: u8 [a0 + 0xa] = a3\n 34132: a2 = a2 >> 0x8\n 34135: u8 [a0 + 0x9] = a2\n 34138: u8 [a0] = a1\n 34140: a2 = a1 >> 0x38\n 34143: u8 [a0 + 0x7] = a2\n 34146: a2 = a1 >> 0x30\n 34149: u8 [a0 + 0x6] = a2\n 34152: a2 = a1 >> 0x28\n 34155: u8 [a0 + 0x5] = a2\n 34158: a2 = a1 >> 0x20\n 34161: u8 [a0 + 0x4] = a2\n 34164: a2 = a1 >> 0x18\n 34167: u8 [a0 + 0x3] = a2\n 34170: a2 = a1 >> 0x10\n 34173: u8 [a0 + 0x2] = a2\n 34176: a1 = a1 >> 0x8\n 34179: u8 [a0 + 0x1] = a1\n 34182: a0 = u64 [sp + 0x18]\n 34185: a1 = u64 [sp + 0x38]\n 34188: u64 [a0] = a1\n 34190: a1 = u64 [sp + 0x28]\n 34193: u64 [a0 + 0x18] = a1\n 34196: a1 = u64 [sp + 0x10]\n 34199: u64 [a0 + 0x8] = a1\n 34202: a1 = u64 [sp + 0x30]\n 34205: u64 [a0 + 0x10] = a1\n 34208: sp = s0 + 0xffffffffffffff00\n 34212: ra = u64 [sp + 0xf8]\n 34216: s0 = u64 [sp + 0xf0]\n 34220: s1 = u64 [sp + 0xe8]\n 34224: sp = sp + 0x100\n 34228: ret\n      : @520 (gas: 8)\n 34230: u64 [sp + 112] = 0\n 34233: u64 [sp + 104] = 0\n 34236: u64 [sp + 96] = 0\n 34239: a0 = 0x4e487b7100000000\n 34249: a1 = sp + 0x60\n 34252: u64 [sp + 0x78] = a0\n 34255: a0 = 0\n 34257: ra = 450, jump @23\n      : @521 [@dyn 225] (gas: 7)\n 34264: u64 [sp + 88] = 0\n 34267: u64 [sp + 80] = 0\n 34270: u64 [sp + 64] = 0x41\n 34274: a0 = 0x4\n 34277: a1 = sp + 0x40\n 34280: u64 [sp + 72] = 0\n 34283: ra = 452, jump @23\n      : @522 [@dyn 226] (gas: 3)\n 34290: a1 = 0x24\n 34293: a0 = 0\n 34295: ra = 454, jump @0\n      : @523 [@dyn 227] (gas: 6)\n 34302: i32 a1 = a0 + 0\n 34304: a0 = 0x1\n 34307: a2 = 0x24\n 34310: ra = 0x1c8\n 34314: ecalli 11 // 'seal_return'\n 34316: fallthrough\n      : @524 [@dyn 228] (gas: 9)\n 34317: a2 = u64 [a1 + 0x18]\n 34320: a3 = u64 [a1 + 0x10]\n 34323: a4 = u64 [a1 + 0x8]\n 34326: a1 = u64 [a1]\n 34328: u64 [a0 + 0x18] = a2\n 34331: u64 [a0 + 0x10] = a3\n 34334: u64 [a0 + 0x8] = a4\n 34337: u64 [a0] = a1\n 34339: ret\n      : @525 (gas: 20)\n 34341: t2 = u64 [sp + 0xf0]\n 34345: t1 = u64 [sp + 0xe8]\n 34349: t0 = u64 [sp + 0xe0]\n 34353: a0 = u64 [sp + 0x2b8]\n 34357: a1 = u64 [sp + 0x2a0]\n 34361: ra = u64 [sp + 0x2b0]\n 34365: a3 = u64 [sp + 0x2a8]\n 34369: a4 = a0 ^ t0\n 34372: a0 = t0 <u a0\n 34375: a2 = u64 [sp + 0xf8]\n 34379: a5 = a2 <u ra\n 34382: a5 = a0 if a4 != 0\n 34385: a0 = a3 ^ t1\n 34388: a3 = t1 <u a3\n 34391: a1 = t2 <u a1\n 34394: a1 = a3 if a0 != 0\n 34397: a0 = ra ^ a2\n 34400: a0 = a0 | a4\n 34403: a1 = a5 if a0 != 0\n 34406: jump @532 if a1 == 0\n      : @526 (gas: 12)\n 34410: u64 [sp + 0x200] = t2\n 34414: u64 [sp + 568] = 0\n 34418: u64 [sp + 560] = 0\n 34422: u64 [sp + 552] = 0\n 34426: u64 [sp + 544] = 0x1\n 34431: u64 [sp + 0x208] = t1\n 34435: u64 [sp + 0x210] = a2\n 34439: a0 = sp + 0x240\n 34443: a1 = sp + 0x220\n 34447: a2 = sp + 0x200\n 34451: u64 [sp + 0x218] = t0\n 34455: ra = 458, jump @478\n      : @527 [@dyn 229] (gas: 48)\n 34461: a0 = u64 [sp + 0x258]\n 34465: u64 [sp + 0xf8] = a0\n 34469: a3 = u64 [sp + 0x250]\n 34473: u64 [sp + 0xe0] = a3\n 34477: a1 = u64 [sp + 0x248]\n 34481: u64 [sp + 0xf0] = a1\n 34485: a2 = u64 [sp + 0x240]\n 34489: u64 [sp + 0xe8] = a2\n 34493: u64 [sp + 0x298] = a0\n 34497: u64 [sp + 0x290] = a3\n 34501: u64 [sp + 0x288] = a1\n 34505: u64 [sp + 0x280] = a2\n 34509: u64 [sp + 696] = 0\n 34513: u64 [sp + 688] = 0\n 34517: u64 [sp + 680] = 0\n 34521: u64 [sp + 672] = 0\n 34525: u32 [sp + 704] = 0x20\n 34530: i32 a1 = sp + 0x280\n 34534: i32 a3 = sp + 0x2a0\n 34538: i32 a4 = sp + 0x2c0\n 34542: a2 = 0xffffffffffffffff\n 34545: a0 = 0\n 34547: ecalli 7 // 'get_storage'\n 34549: a0 = u64 [sp + 0x2a0]\n 34553: u64 [sp + 0xd0] = a0\n 34557: a0 = u64 [sp + 0x2a8]\n 34561: u64 [sp + 0xc8] = a0\n 34565: a0 = u32 [sp + 0x2b0]\n 34569: u64 [sp + 0xc0] = a0\n 34573: a2 = u64 [sp + 0xe8]\n 34577: a2 = a2 + 0x1\n 34580: a0 = a2 <u 0x1\n 34583: a1 = u64 [sp + 0xf0]\n 34587: a0 = a0 + a1\n 34590: a1 = a2 | a0\n 34593: a1 = a1 <u 0x1\n 34596: a3 = u64 [sp + 0xe0]\n 34600: a1 = a1 + a3\n 34603: a3 = a1 <u a3\n 34606: a4 = u64 [sp + 0xf8]\n 34610: a3 = a3 + a4\n 34613: u64 [sp + 0x1d8] = a3\n 34617: u64 [sp + 0x1d0] = a1\n 34621: u64 [sp + 0x1c8] = a0\n 34625: a0 = sp + 0x1e0\n 34629: a1 = sp + 0x1c0\n 34633: u64 [sp + 0x1c0] = a2\n 34637: ra = 460, jump @514\n      : @528 [@dyn 230] (gas: 27)\n 34643: a0 = u64 [sp + 0x1e0]\n 34647: u64 [sp + 0xb8] = a0\n 34651: a0 = u64 [sp + 0x1e8]\n 34655: u64 [sp + 0xb0] = a0\n 34659: a0 = u64 [sp + 0x1f0]\n 34663: u64 [sp + 0xa8] = a0\n 34667: a0 = u64 [sp + 0x1f8]\n 34671: u64 [sp + 0xa0] = a0\n 34675: a0 = u64 [sp + 0xe8]\n 34679: a2 = a0 + 0x2\n 34682: a0 = a2 <u a0\n 34685: a3 = u64 [sp + 0xf0]\n 34689: a1 = a3 + a0\n 34692: a3 = a1 <u a3\n 34695: a3 = a0 if a0 == 0\n 34698: a0 = u64 [sp + 0xe0]\n 34702: a3 = a3 + a0\n 34705: a0 = a3 <u a0\n 34708: a4 = u64 [sp + 0xf8]\n 34712: a0 = a0 + a4\n 34715: u64 [sp + 0x198] = a0\n 34719: u64 [sp + 0x190] = a3\n 34723: u64 [sp + 0x188] = a1\n 34727: a0 = sp + 0x1a0\n 34731: a1 = sp + 0x180\n 34735: u64 [sp + 0x180] = a2\n 34739: ra = 462, jump @514\n      : @529 [@dyn 231] (gas: 27)\n 34745: a0 = u64 [sp + 0x1a0]\n 34749: u64 [sp + 0x98] = a0\n 34753: a0 = u64 [sp + 0x1a8]\n 34757: u64 [sp + 0x90] = a0\n 34761: a0 = u64 [sp + 0x1b0]\n 34765: u64 [sp + 0x88] = a0\n 34769: a0 = u64 [sp + 0x1b8]\n 34773: u64 [sp + 0x80] = a0\n 34777: a0 = u64 [sp + 0xe8]\n 34781: a2 = a0 + 0x3\n 34784: a0 = a2 <u a0\n 34787: a3 = u64 [sp + 0xf0]\n 34791: a1 = a3 + a0\n 34794: a3 = a1 <u a3\n 34797: a3 = a0 if a0 == 0\n 34800: a0 = u64 [sp + 0xe0]\n 34804: a3 = a3 + a0\n 34807: a0 = a3 <u a0\n 34810: a4 = u64 [sp + 0xf8]\n 34814: a0 = a0 + a4\n 34817: u64 [sp + 0x158] = a0\n 34821: u64 [sp + 0x150] = a3\n 34825: u64 [sp + 0x148] = a1\n 34829: a0 = sp + 0x160\n 34833: a1 = sp + 0x140\n 34837: u64 [sp + 0x140] = a2\n 34841: ra = 464, jump @514\n      : @530 [@dyn 232] (gas: 27)\n 34847: a0 = u64 [sp + 0x160]\n 34851: u64 [sp + 0x78] = a0\n 34854: a0 = u64 [sp + 0x168]\n 34858: u64 [sp + 0x70] = a0\n 34861: a0 = u64 [sp + 0x170]\n 34865: u64 [sp + 0x68] = a0\n 34868: a0 = u64 [sp + 0x178]\n 34872: u64 [sp + 0x60] = a0\n 34875: a0 = u64 [sp + 0xe8]\n 34879: a2 = a0 + 0x4\n 34882: a0 = a2 <u a0\n 34885: a3 = u64 [sp + 0xf0]\n 34889: a1 = a3 + a0\n 34892: a3 = a1 <u a3\n 34895: a3 = a0 if a0 == 0\n 34898: a0 = u64 [sp + 0xe0]\n 34902: a3 = a3 + a0\n 34905: a0 = a3 <u a0\n 34908: a4 = u64 [sp + 0xf8]\n 34912: a0 = a0 + a4\n 34915: u64 [sp + 0x118] = a0\n 34919: u64 [sp + 0x110] = a3\n 34923: u64 [sp + 0x108] = a1\n 34927: a0 = sp + 0x120\n 34931: a1 = sp + 0x100\n 34935: u64 [sp + 0x100] = a2\n 34939: ra = 466, jump @514\n      : @531 [@dyn 233] (gas: 245)\n 34945: a0 = u64 [sp + 0x120]\n 34949: u64 [sp + 0x58] = a0\n 34952: a0 = u64 [sp + 0x128]\n 34956: u64 [sp + 0x50] = a0\n 34959: a0 = u64 [sp + 0x130]\n 34963: u64 [sp + 0x48] = a0\n 34966: a0 = u64 [sp + 0x138]\n 34970: u64 [sp + 0x40] = a0\n 34973: a1 = u64 [sp + 0xe8]\n 34977: a0 = a1 + 0x5\n 34980: a1 = a0 <u a1\n 34983: a3 = u64 [sp + 0xf0]\n 34987: a2 = a3 + a1\n 34990: a3 = a2 <u a3\n 34993: a3 = a1 if a1 == 0\n 34996: a1 = u64 [sp + 0xe0]\n 35000: a3 = a3 + a1\n 35003: a1 = a3 <u a1\n 35006: a4 = u64 [sp + 0xf8]\n 35010: a1 = a1 + a4\n 35013: u64 [sp + 0x298] = a1\n 35017: u64 [sp + 0x290] = a3\n 35021: u64 [sp + 0x288] = a2\n 35025: u64 [sp + 0x280] = a0\n 35029: u64 [sp + 696] = 0\n 35033: u64 [sp + 688] = 0\n 35037: u64 [sp + 680] = 0\n 35041: u64 [sp + 672] = 0\n 35045: u32 [sp + 704] = 0x20\n 35050: i32 a1 = sp + 0x280\n 35054: i32 a3 = sp + 0x2a0\n 35058: i32 a4 = sp + 0x2c0\n 35062: a2 = 0xffffffffffffffff\n 35065: a0 = 0\n 35067: ecalli 7 // 'get_storage'\n 35069: a0 = u64 [sp + 0x2a0]\n 35073: u64 [sp + 0x38] = a0\n 35076: a0 = u64 [sp + 0x2a8]\n 35080: u64 [sp + 0x30] = a0\n 35083: a0 = u64 [sp + 0x2b0]\n 35087: u64 [sp + 0x28] = a0\n 35090: a0 = u64 [sp + 0x2b8]\n 35094: u64 [sp + 0x20] = a0\n 35097: a0 = u64 [sp + 0xe8]\n 35101: a1 = a0 + 0x6\n 35104: a0 = a1 <u a0\n 35107: a2 = a1\n 35109: u64 [sp + 0xd8] = a1\n 35113: a1 = u64 [sp + 0xf0]\n 35117: a3 = a1 + a0\n 35120: u64 [sp + 0xe8] = a3\n 35124: a1 = a3 <u a1\n 35127: a1 = a0 if a0 == 0\n 35130: a0 = u64 [sp + 0xe0]\n 35134: a4 = a0 + a1\n 35137: u64 [sp + 0xf0] = a4\n 35141: a0 = a4 <u a0\n 35144: a1 = u64 [sp + 0xf8]\n 35148: a0 = a0 + a1\n 35151: u64 [sp + 0xf8] = a0\n 35155: u64 [sp + 0x298] = a0\n 35159: u64 [sp + 0x290] = a4\n 35163: u64 [sp + 0x288] = a3\n 35167: u64 [sp + 0x280] = a2\n 35171: u64 [sp + 696] = 0\n 35175: u64 [sp + 688] = 0\n 35179: u64 [sp + 680] = 0\n 35183: u64 [sp + 672] = 0\n 35187: u32 [sp + 704] = 0x20\n 35192: i32 a1 = sp + 0x280\n 35196: i32 a3 = sp + 0x2a0\n 35200: i32 a4 = sp + 0x2c0\n 35204: a2 = 0xffffffffffffffff\n 35207: a0 = 0\n 35209: ecalli 7 // 'get_storage'\n 35211: a0 = u8 [sp + 0x2a0]\n 35215: u64 [sp + 0xe0] = a0\n 35219: a0 = u64 [sp + 0xf8]\n 35223: u64 [sp + 0x298] = a0\n 35227: a0 = u64 [sp + 0xf0]\n 35231: u64 [sp + 0x290] = a0\n 35235: a0 = u64 [sp + 0xe8]\n 35239: u64 [sp + 0x288] = a0\n 35243: a0 = u64 [sp + 0xd8]\n 35247: u64 [sp + 0x280] = a0\n 35251: u64 [sp + 696] = 0\n 35255: u64 [sp + 688] = 0\n 35259: u64 [sp + 680] = 0\n 35263: u64 [sp + 672] = 0\n 35267: u32 [sp + 704] = 0x20\n 35272: i32 a1 = sp + 0x280\n 35276: i32 a3 = sp + 0x2a0\n 35280: i32 a4 = sp + 0x2c0\n 35284: a2 = 0xffffffffffffffff\n 35287: a0 = 0\n 35289: ecalli 7 // 'get_storage'\n 35291: a0 = u8 [sp + 0x2a1]\n 35295: u64 [sp + 0x18] = a0\n 35298: a0 = u64 [sp + 0xf8]\n 35302: u64 [sp + 0x298] = a0\n 35306: a0 = u64 [sp + 0xf0]\n 35310: u64 [sp + 0x290] = a0\n 35314: a0 = u64 [sp + 0xe8]\n 35318: u64 [sp + 0x288] = a0\n 35322: a0 = u64 [sp + 0xd8]\n 35326: u64 [sp + 0x280] = a0\n 35330: u64 [sp + 696] = 0\n 35334: u64 [sp + 688] = 0\n 35338: u64 [sp + 680] = 0\n 35342: u64 [sp + 672] = 0\n 35346: u32 [sp + 704] = 0x20\n 35351: i32 a1 = sp + 0x280\n 35355: i32 a3 = sp + 0x2a0\n 35359: i32 a4 = sp + 0x2c0\n 35363: a2 = 0xffffffffffffffff\n 35366: a0 = 0\n 35368: ecalli 7 // 'get_storage'\n 35370: a0 = u8 [sp + 0x2a2]\n 35374: u64 [sp + 0x10] = a0\n 35377: a0 = u64 [sp + 0xf8]\n 35381: u64 [sp + 0x298] = a0\n 35385: a0 = u64 [sp + 0xf0]\n 35389: u64 [sp + 0x290] = a0\n 35393: a0 = u64 [sp + 0xe8]\n 35397: u64 [sp + 0x288] = a0\n 35401: a0 = u64 [sp + 0xd8]\n 35405: u64 [sp + 0x280] = a0\n 35409: u64 [sp + 696] = 0\n 35413: u64 [sp + 688] = 0\n 35417: u64 [sp + 680] = 0\n 35421: u64 [sp + 672] = 0\n 35425: u32 [sp + 704] = 0x20\n 35430: i32 a1 = sp + 0x280\n 35434: i32 a3 = sp + 0x2a0\n 35438: i32 a4 = sp + 0x2c0\n 35442: a2 = 0xffffffffffffffff\n 35445: a0 = 0\n 35447: ecalli 7 // 'get_storage'\n 35449: a0 = u8 [sp + 0x2a3]\n 35453: u64 [sp + 0x8] = a0\n 35456: a0 = u64 [sp + 0xf8]\n 35460: u64 [sp + 0x298] = a0\n 35464: a0 = u64 [sp + 0xf0]\n 35468: u64 [sp + 0x290] = a0\n 35472: a0 = u64 [sp + 0xe8]\n 35476: u64 [sp + 0x288] = a0\n 35480: a0 = u64 [sp + 0xd8]\n 35484: u64 [sp + 0x280] = a0\n 35488: u64 [sp + 696] = 0\n 35492: u64 [sp + 688] = 0\n 35496: u64 [sp + 680] = 0\n 35500: u64 [sp + 672] = 0\n 35504: u32 [sp + 704] = 0x20\n 35509: i32 a1 = sp + 0x280\n 35513: i32 a3 = sp + 0x2a0\n 35517: i32 a4 = sp + 0x2c0\n 35521: a2 = 0xffffffffffffffff\n 35524: a0 = 0\n 35526: ecalli 7 // 'get_storage'\n 35528: a0 = u64 [sp + 0x2a8]\n 35532: a1 = u32 [sp + 0x2a4]\n 35536: a2 = u64 [sp + 0x2b0]\n 35540: a3 = a0 << 0x20\n 35543: a1 = a1 | a3\n 35546: a0 = a0 >> 0x20\n 35549: a3 = a2 << 0x20\n 35552: a0 = a0 | a3\n 35555: a2 = a2 >> 0x20\n 35558: u64 [s1 + 0x150] = a2\n 35562: u64 [s1 + 0x148] = a0\n 35566: u64 [s1 + 0x140] = a1\n 35570: a0 = u64 [sp + 0x8]\n 35573: u64 [s1 + 0x120] = a0\n 35577: a0 = u64 [sp + 0x10]\n 35580: u64 [s1 + 0x100] = a0\n 35584: a0 = u64 [sp + 0x18]\n 35587: u64 [s1 + 0xe0] = a0\n 35591: a0 = u64 [sp + 0xe0]\n 35595: u64 [s1 + 0xc0] = a0\n 35599: a0 = u64 [sp + 0x20]\n 35602: u64 [s1 + 0xb8] = a0\n 35606: a0 = u64 [sp + 0x28]\n 35609: u64 [s1 + 0xb0] = a0\n 35613: a0 = u64 [sp + 0x30]\n 35616: u64 [s1 + 0xa8] = a0\n 35620: a0 = u64 [sp + 0x38]\n 35623: u64 [s1 + 0xa0] = a0\n 35627: a0 = u64 [sp + 0x40]\n 35630: u64 [s1 + 0x98] = a0\n 35634: a0 = u64 [sp + 0x48]\n 35637: u64 [s1 + 0x90] = a0\n 35641: a0 = u64 [sp + 0x50]\n 35644: u64 [s1 + 0x88] = a0\n 35648: a0 = u64 [sp + 0x58]\n 35651: u64 [s1 + 0x80] = a0\n 35655: a0 = u64 [sp + 0x60]\n 35658: u64 [s1 + 0x78] = a0\n 35661: a0 = u64 [sp + 0x68]\n 35664: u64 [s1 + 0x70] = a0\n 35667: a0 = u64 [sp + 0x70]\n 35670: u64 [s1 + 0x68] = a0\n 35673: a0 = u64 [sp + 0x78]\n 35676: u64 [s1 + 0x60] = a0\n 35679: a0 = u64 [sp + 0x80]\n 35683: u64 [s1 + 0x58] = a0\n 35686: a0 = u64 [sp + 0x88]\n 35690: u64 [s1 + 0x50] = a0\n 35693: a0 = u64 [sp + 0x90]\n 35697: u64 [s1 + 0x48] = a0\n 35700: a0 = u64 [sp + 0x98]\n 35704: u64 [s1 + 0x40] = a0\n 35707: a0 = u64 [sp + 0xa0]\n 35711: u64 [s1 + 0x38] = a0\n 35714: a0 = u64 [sp + 0xa8]\n 35718: u64 [s1 + 0x30] = a0\n 35721: a0 = u64 [sp + 0xb0]\n 35725: u64 [s1 + 0x28] = a0\n 35728: a0 = u64 [sp + 0xb8]\n 35732: u64 [s1 + 0x20] = a0\n 35735: a0 = u64 [sp + 0xc0]\n 35739: u64 [s1 + 0x10] = a0\n 35742: a0 = u64 [sp + 0xc8]\n 35746: u64 [s1 + 0x8] = a0\n 35749: a0 = u64 [sp + 0xd0]\n 35753: u64 [s1] = a0\n 35755: u64 [s1 + 344] = 0\n 35759: u64 [s1 + 312] = 0\n 35763: u64 [s1 + 304] = 0\n 35767: u64 [s1 + 296] = 0\n 35771: u64 [s1 + 280] = 0\n 35775: u64 [s1 + 272] = 0\n 35779: u64 [s1 + 264] = 0\n 35783: u64 [s1 + 248] = 0\n 35787: u64 [s1 + 240] = 0\n 35791: u64 [s1 + 232] = 0\n 35795: u64 [s1 + 216] = 0\n 35799: u64 [s1 + 208] = 0\n 35803: u64 [s1 + 200] = 0\n 35807: u64 [s1 + 24] = 0\n 35810: sp = s0 + 0xfffffffffffffd20\n 35814: ra = u64 [sp + 0x2d8]\n 35818: s0 = u64 [sp + 0x2d0]\n 35822: s1 = u64 [sp + 0x2c8]\n 35826: sp = sp + 0x2e0\n 35830: ret\n      : @532 (gas: 2)\n 35832: a0 = 0\n 35834: ra = 468, jump @0\n      : @533 [@dyn 234] (gas: 6)\n 35841: i32 a1 = a0 + 0\n 35843: a0 = 0x1\n 35846: a2 = 0\n 35848: ra = 0x1d6\n 35852: ecalli 11 // 'seal_return'\n 35854: fallthrough\n      : @534 [@dyn 235] (gas: 13)\n 35855: sp = sp + 0xfffffffffffffac0\n 35859: u64 [sp + 0x538] = ra\n 35863: u64 [sp + 0x530] = s0\n 35867: u64 [sp + 0x528] = s1\n 35871: s0 = sp + 0x540\n 35875: sp = sp & 0xffffffffffffffe0\n 35878: u64 [sp + 1272] = 0\n 35882: u64 [sp + 1264] = 0\n 35886: u64 [sp + 1256] = 0\n 35890: u64 [sp + 1248] = 0\n 35894: i32 a0 = sp + 0x4e0\n 35898: ecalli 14 // 'value_transferred'\n 35900: fallthrough\n      : @535 (gas: 8)\n 35901: a0 = u64 [sp + 0x4f0]\n 35905: a1 = u64 [sp + 0x4f8]\n 35909: a2 = u64 [sp + 0x4e8]\n 35913: a3 = u64 [sp + 0x4e0]\n 35917: a1 = a1 | a2\n 35920: a0 = a0 | a3\n 35923: a0 = a0 | a1\n 35926: jump @543 if a0 != 0\n      : @536 (gas: 2)\n 35930: a0 = i32 [0x200a4]\n 35935: jump @543 if a0 <=u 35\n      : @537 (gas: 45)\n 35940: i32 a0 = sp + 0x500\n 35944: a1 = 0x4\n 35947: ecalli 2 // 'call_data_load'\n 35949: a2 = u64 [sp + 0x500]\n 35953: a0 = u64 [sp + 0x508]\n 35957: a1 = u64 [sp + 0x510]\n 35961: a3 = u64 [sp + 0x518]\n 35965: u64 [sp + 0x378] = a3\n 35969: u64 [sp + 0x370] = a1\n 35973: u64 [sp + 0x368] = a0\n 35977: a0 = sp + 0x380\n 35981: a1 = sp + 0x360\n 35985: u64 [sp + 0x360] = a2\n 35989: ra = 0x1d8\n 35993: sp = sp + 0xfffffffffffffd20\n 35997: u64 [sp + 0x2d8] = ra\n 36001: u64 [sp + 0x2d0] = s0\n 36005: u64 [sp + 0x2c8] = s1\n 36009: s0 = sp + 0x2e0\n 36013: sp = sp & 0xffffffffffffffe0\n 36016: s1 = a0\n 36018: a0 = u64 [a1]\n 36020: u64 [sp + 0xf0] = a0\n 36024: a0 = u64 [a1 + 0x8]\n 36027: u64 [sp + 0xe8] = a0\n 36031: a0 = u64 [a1 + 0x10]\n 36034: u64 [sp + 0xf8] = a0\n 36038: a0 = u64 [a1 + 0x18]\n 36041: u64 [sp + 0xe0] = a0\n 36045: u64 [sp + 664] = 0\n 36049: u64 [sp + 656] = 0\n 36053: u64 [sp + 648] = 0\n 36057: u64 [sp + 640] = 0x1\n 36062: u64 [sp + 696] = 0\n 36066: u64 [sp + 688] = 0\n 36070: u64 [sp + 680] = 0\n 36074: u64 [sp + 672] = 0\n 36078: u32 [sp + 704] = 0x20\n 36083: i32 a1 = sp + 0x280\n 36087: i32 a3 = sp + 0x2a0\n 36091: i32 a4 = sp + 0x2c0\n 36095: a2 = 0xffffffffffffffff\n 36098: a0 = 0\n 36100: ecalli 7 // 'get_storage'\n 36102: jump @525\n      : @538 [@dyn 236] (gas: 91)\n 36105: a0 = u64 [sp + 0x380]\n 36109: u64 [sp + 0x1b0] = a0\n 36113: a0 = u64 [sp + 0x388]\n 36117: u64 [sp + 0x1a8] = a0\n 36121: a0 = u64 [sp + 0x390]\n 36125: u64 [sp + 0x1a0] = a0\n 36129: a0 = u64 [sp + 0x398]\n 36133: u64 [sp + 0x198] = a0\n 36137: a0 = u64 [sp + 0x3a0]\n 36141: u64 [sp + 0x190] = a0\n 36145: a0 = u64 [sp + 0x3a8]\n 36149: u64 [sp + 0x188] = a0\n 36153: a0 = u64 [sp + 0x3b0]\n 36157: u64 [sp + 0x180] = a0\n 36161: a0 = u64 [sp + 0x3b8]\n 36165: u64 [sp + 0x178] = a0\n 36169: a0 = u64 [sp + 0x3c0]\n 36173: u64 [sp + 0x170] = a0\n 36177: a0 = u64 [sp + 0x3c8]\n 36181: u64 [sp + 0x168] = a0\n 36185: a0 = u64 [sp + 0x3d0]\n 36189: u64 [sp + 0x160] = a0\n 36193: a0 = u64 [sp + 0x3d8]\n 36197: u64 [sp + 0x158] = a0\n 36201: a0 = u64 [sp + 0x3e0]\n 36205: u64 [sp + 0x150] = a0\n 36209: a0 = u64 [sp + 0x3e8]\n 36213: u64 [sp + 0x148] = a0\n 36217: a0 = u64 [sp + 0x3f0]\n 36221: u64 [sp + 0x140] = a0\n 36225: a0 = u64 [sp + 0x3f8]\n 36229: u64 [sp + 0x138] = a0\n 36233: a0 = u64 [sp + 0x400]\n 36237: u64 [sp + 0x130] = a0\n 36241: a0 = u64 [sp + 0x408]\n 36245: u64 [sp + 0x128] = a0\n 36249: a0 = u64 [sp + 0x410]\n 36253: u64 [sp + 0x120] = a0\n 36257: a0 = u64 [sp + 0x418]\n 36261: u64 [sp + 0x118] = a0\n 36265: a0 = u64 [sp + 0x420]\n 36269: u64 [sp + 0x110] = a0\n 36273: a0 = u64 [sp + 0x428]\n 36277: u64 [sp + 0x108] = a0\n 36281: a0 = u64 [sp + 0x430]\n 36285: u64 [sp + 0x100] = a0\n 36289: a0 = u64 [sp + 0x438]\n 36293: u64 [sp + 0xf8] = a0\n 36297: a0 = u64 [sp + 0x440]\n 36301: u64 [sp + 0xf0] = a0\n 36305: a0 = u64 [sp + 0x448]\n 36309: u64 [sp + 0xe8] = a0\n 36313: a0 = u64 [sp + 0x450]\n 36317: u64 [sp + 0xe0] = a0\n 36321: a0 = u64 [sp + 0x458]\n 36325: u64 [sp + 0xd8] = a0\n 36329: a0 = u64 [sp + 0x460]\n 36333: u64 [sp + 0xd0] = a0\n 36337: a0 = u64 [sp + 0x468]\n 36341: u64 [sp + 0xc8] = a0\n 36345: a0 = u64 [sp + 0x470]\n 36349: u64 [sp + 0xc0] = a0\n 36353: a0 = u64 [sp + 0x478]\n 36357: u64 [sp + 0xb8] = a0\n 36361: a0 = u64 [sp + 0x480]\n 36365: u64 [sp + 0xb0] = a0\n 36369: a0 = u64 [sp + 0x488]\n 36373: u64 [sp + 0xa8] = a0\n 36377: a0 = u64 [sp + 0x490]\n 36381: u64 [sp + 0xa0] = a0\n 36385: a0 = u64 [sp + 0x498]\n 36389: u64 [sp + 0x98] = a0\n 36393: a0 = u64 [sp + 0x4a0]\n 36397: u64 [sp + 0x90] = a0\n 36401: a0 = u64 [sp + 0x4a8]\n 36405: u64 [sp + 0x88] = a0\n 36409: a0 = u64 [sp + 0x4b0]\n 36413: u64 [sp + 0x80] = a0\n 36417: a0 = u64 [sp + 0x4b8]\n 36421: u64 [sp + 0x78] = a0\n 36424: a0 = u64 [sp + 0x4c0]\n 36428: u64 [sp + 0x70] = a0\n 36431: a0 = u64 [sp + 0x4c8]\n 36435: u64 [sp + 0x68] = a0\n 36438: a0 = u64 [sp + 0x4d0]\n 36442: u64 [sp + 0x60] = a0\n 36445: a0 = u64 [sp + 0x4d8]\n 36449: u64 [sp + 0x58] = a0\n 36452: a0 = 0x40\n 36455: a1 = 0x20\n 36458: ra = 474, jump @0\n      : @539 [@dyn 237] (gas: 208)\n 36465: a1 = u8 [a0 + 0x1]\n 36468: a2 = u8 [a0]\n 36470: a3 = u8 [a0 + 0x2]\n 36473: a4 = u8 [a0 + 0x3]\n 36476: a1 = a1 << 0x8\n 36479: a1 = a1 | a2\n 36482: a3 = a3 << 0x10\n 36485: a4 = a4 << 0x18\n 36488: a3 = a3 | a4\n 36491: a1 = a1 | a3\n 36494: a2 = u8 [a0 + 0x5]\n 36497: a3 = u8 [a0 + 0x4]\n 36500: a4 = u8 [a0 + 0x6]\n 36503: a5 = u8 [a0 + 0x7]\n 36506: a2 = a2 << 0x8\n 36509: a2 = a2 | a3\n 36512: a4 = a4 << 0x10\n 36515: a5 = a5 << 0x18\n 36518: a4 = a4 | a5\n 36521: a2 = a2 | a4\n 36524: a2 = a2 << 0x20\n 36527: t0 = a2 | a1\n 36530: a2 = u8 [a0 + 0x9]\n 36533: a3 = u8 [a0 + 0x8]\n 36536: a4 = u8 [a0 + 0xa]\n 36539: a5 = u8 [a0 + 0xb]\n 36542: a2 = a2 << 0x8\n 36545: a2 = a2 | a3\n 36548: a4 = a4 << 0x10\n 36551: a5 = a5 << 0x18\n 36554: a4 = a4 | a5\n 36557: a2 = a2 | a4\n 36560: a3 = u8 [a0 + 0xd]\n 36563: a4 = u8 [a0 + 0xc]\n 36566: a5 = u8 [a0 + 0xe]\n 36569: s1 = u8 [a0 + 0xf]\n 36572: a3 = a3 << 0x8\n 36575: a3 = a3 | a4\n 36578: a5 = a5 << 0x10\n 36581: s1 = s1 << 0x18\n 36584: a5 = a5 | s1\n 36587: a3 = a3 | a5\n 36590: a3 = a3 << 0x20\n 36593: a2 = a2 | a3\n 36596: a3 = u8 [a0 + 0x11]\n 36599: a4 = u8 [a0 + 0x10]\n 36602: a5 = u8 [a0 + 0x12]\n 36605: s1 = u8 [a0 + 0x13]\n 36608: a3 = a3 << 0x8\n 36611: a3 = a3 | a4\n 36614: a5 = a5 << 0x10\n 36617: s1 = s1 << 0x18\n 36620: a5 = a5 | s1\n 36623: a3 = a3 | a5\n 36626: a4 = u8 [a0 + 0x15]\n 36629: a5 = u8 [a0 + 0x14]\n 36632: s1 = u8 [a0 + 0x16]\n 36635: a1 = u8 [a0 + 0x17]\n 36638: a4 = a4 << 0x8\n 36641: a4 = a4 | a5\n 36644: s1 = s1 << 0x10\n 36647: a1 = a1 << 0x18\n 36650: a1 = a1 | s1\n 36653: a1 = a1 | a4\n 36656: a1 = a1 << 0x20\n 36659: a3 = a3 | a1\n 36662: a1 = u8 [a0 + 0x19]\n 36665: a4 = u8 [a0 + 0x18]\n 36668: a5 = u8 [a0 + 0x1a]\n 36671: s1 = u8 [a0 + 0x1b]\n 36674: a1 = a1 << 0x8\n 36677: a1 = a1 | a4\n 36680: a5 = a5 << 0x10\n 36683: s1 = s1 << 0x18\n 36686: a5 = a5 | s1\n 36689: a1 = a1 | a5\n 36692: a4 = u8 [a0 + 0x1d]\n 36695: a5 = u8 [a0 + 0x1c]\n 36698: s1 = u8 [a0 + 0x1e]\n 36701: a0 = u8 [a0 + 0x1f]\n 36704: a4 = a4 << 0x8\n 36707: a4 = a4 | a5\n 36710: s1 = s1 << 0x10\n 36713: a0 = a0 << 0x18\n 36716: a0 = a0 | s1\n 36719: a0 = a0 | a4\n 36722: a0 = a0 << 0x20\n 36725: a0 = a0 | a1\n 36728: t1 = reverse a0\n 36730: u64 [sp + 0x48] = t1\n 36733: a1 = reverse a3\n 36735: u64 [sp + 0x50] = a1\n 36738: s1 = reverse a2\n 36740: a2 = reverse t0\n 36742: u64 [sp + 0x1b8] = a2\n 36746: a0 = sp + 0x1c0\n 36750: u64 [sp + 0x30] = a0\n 36753: a0 = sp + 0x1e0\n 36757: u64 [sp + 0x28] = a0\n 36760: a0 = sp + 0x200\n 36764: u64 [sp + 0x20] = a0\n 36767: a0 = sp + 0x220\n 36771: u64 [sp + 0x18] = a0\n 36774: a0 = sp + 0x240\n 36778: u64 [sp + 0x10] = a0\n 36781: a0 = sp + 0x260\n 36785: u64 [sp + 0x8] = a0\n 36788: a0 = sp + 0x280\n 36792: u64 [sp] = a0\n 36794: a0 = u64 [sp + 0x58]\n 36797: u64 [sp + 0x1d8] = a0\n 36801: a0 = u64 [sp + 0x60]\n 36804: u64 [sp + 0x1d0] = a0\n 36808: a0 = u64 [sp + 0x68]\n 36811: u64 [sp + 0x1c8] = a0\n 36815: a0 = u64 [sp + 0x70]\n 36818: u64 [sp + 0x1c0] = a0\n 36822: a0 = u64 [sp + 0x78]\n 36825: u64 [sp + 0x1f8] = a0\n 36829: a0 = u64 [sp + 0x80]\n 36833: u64 [sp + 0x1f0] = a0\n 36837: a0 = u64 [sp + 0x88]\n 36841: u64 [sp + 0x1e8] = a0\n 36845: a0 = u64 [sp + 0x90]\n 36849: u64 [sp + 0x1e0] = a0\n 36853: a0 = u64 [sp + 0x98]\n 36857: u64 [sp + 0x218] = a0\n 36861: a0 = u64 [sp + 0xa0]\n 36865: u64 [sp + 0x210] = a0\n 36869: a0 = u64 [sp + 0xa8]\n 36873: u64 [sp + 0x208] = a0\n 36877: a0 = u64 [sp + 0xb0]\n 36881: u64 [sp + 0x200] = a0\n 36885: a0 = u64 [sp + 0xb8]\n 36889: u64 [sp + 0x238] = a0\n 36893: a0 = u64 [sp + 0xc0]\n 36897: u64 [sp + 0x230] = a0\n 36901: a0 = u64 [sp + 0xc8]\n 36905: u64 [sp + 0x228] = a0\n 36909: a0 = u64 [sp + 0xd0]\n 36913: u64 [sp + 0x220] = a0\n 36917: a0 = u64 [sp + 0xd8]\n 36921: u64 [sp + 0x258] = a0\n 36925: a0 = u64 [sp + 0xe0]\n 36929: u64 [sp + 0x250] = a0\n 36933: a0 = u64 [sp + 0xe8]\n 36937: u64 [sp + 0x248] = a0\n 36941: a0 = u64 [sp + 0xf0]\n 36945: u64 [sp + 0x240] = a0\n 36949: a0 = u64 [sp + 0xf8]\n 36953: u64 [sp + 0x278] = a0\n 36957: a0 = u64 [sp + 0x100]\n 36961: u64 [sp + 0x270] = a0\n 36965: a0 = u64 [sp + 0x108]\n 36969: u64 [sp + 0x268] = a0\n 36973: a0 = u64 [sp + 0x110]\n 36977: u64 [sp + 0x260] = a0\n 36981: a0 = u64 [sp + 0x118]\n 36985: u64 [sp + 0x298] = a0\n 36989: a0 = u64 [sp + 0x120]\n 36993: u64 [sp + 0x290] = a0\n 36997: a0 = u64 [sp + 0x128]\n 37001: u64 [sp + 0x288] = a0\n 37005: a0 = u64 [sp + 0x130]\n 37009: u64 [sp + 0x280] = a0\n 37013: a0 = u64 [sp + 0x138]\n 37017: u64 [sp + 0x2b8] = a0\n 37021: a0 = u64 [sp + 0x140]\n 37025: u64 [sp + 0x2b0] = a0\n 37029: a0 = u64 [sp + 0x148]\n 37033: u64 [sp + 0x2a8] = a0\n 37037: a0 = u64 [sp + 0x150]\n 37041: u64 [sp + 0x2a0] = a0\n 37045: a0 = u64 [sp + 0x158]\n 37049: u64 [sp + 0x2d8] = a0\n 37053: a0 = u64 [sp + 0x160]\n 37057: u64 [sp + 0x2d0] = a0\n 37061: a0 = u64 [sp + 0x168]\n 37065: u64 [sp + 0x2c8] = a0\n 37069: a0 = u64 [sp + 0x170]\n 37073: u64 [sp + 0x2c0] = a0\n 37077: a0 = u64 [sp + 0x178]\n 37081: u64 [sp + 0x2f8] = a0\n 37085: a0 = u64 [sp + 0x180]\n 37089: u64 [sp + 0x2f0] = a0\n 37093: a0 = u64 [sp + 0x188]\n 37097: u64 [sp + 0x2e8] = a0\n 37101: a0 = u64 [sp + 0x190]\n 37105: u64 [sp + 0x2e0] = a0\n 37109: a0 = u64 [sp + 0x198]\n 37113: u64 [sp + 0x318] = a0\n 37117: a0 = u64 [sp + 0x1a0]\n 37121: u64 [sp + 0x310] = a0\n 37125: a0 = u64 [sp + 0x1a8]\n 37129: u64 [sp + 0x308] = a0\n 37133: a0 = u64 [sp + 0x1b0]\n 37137: u64 [sp + 0x300] = a0\n 37141: u64 [sp + 0x338] = a2\n 37145: u64 [sp + 0x330] = s1\n 37149: u64 [sp + 0x328] = a1\n 37153: a0 = sp + 0x340\n 37157: a1 = sp + 0x320\n 37161: a2 = sp + 0x300\n 37165: a3 = sp + 0x2e0\n 37169: a4 = sp + 0x2c0\n 37173: a5 = sp + 0x2a0\n 37177: u64 [sp + 0x320] = t1\n 37181: ra = 476, jump @275\n      : @540 [@dyn 238] (gas: 11)\n 37187: a4 = u64 [sp + 0x50]\n 37190: a2 = u64 [sp + 0x48]\n 37193: a0 = u64 [sp + 0x1b8]\n 37197: a0 = a0 | a4\n 37200: a1 = a2 | s1\n 37203: a1 = a1 | a0\n 37206: a1 = a1 >> 0x20\n 37209: a0 = a0 | s1\n 37212: a0 = a0 << 0x20\n 37215: a0 = a0 | a1\n 37218: jump @542 if a0 != 0\n      : @541 (gas: 29)\n 37221: a0 = u64 [sp + 0x348]\n 37225: a1 = u64 [sp + 0x358]\n 37229: u64 [sp + 0x1b0] = a1\n 37233: t1 = u64 [sp + 0x340]\n 37237: a1 = u64 [sp + 0x350]\n 37241: t2 = a0 ^ a4\n 37244: a5 = a0 <u a4\n 37247: ra = t1 <u a2\n 37250: a5 = ra if t2 == 0\n 37253: a3 = a1 - s1\n 37256: t2 = a3 - a5\n 37259: t0 = a3 <u a5\n 37262: a3 = a1 <u s1\n 37265: a1 = u64 [sp + 0x1b8]\n 37269: a5 = u64 [sp + 0x1b0]\n 37273: a5 = a5 - a1\n 37276: a5 = a5 - a3\n 37279: a5 = a5 - t0\n 37282: a0 = a0 - a4\n 37285: a0 = a0 - ra\n 37288: a3 = t1 - a2\n 37291: a0 = a0 | a5\n 37294: a1 = a3 | t2\n 37297: a1 = a1 | a0\n 37300: a0 = a0 | t2\n 37303: a1 = a1 >> 0x20\n 37306: a0 = a0 << 0x20\n 37309: a0 = a0 | a1\n 37312: jump @545 if a0 == 0\n      : @542 (gas: 1)\n 37315: trap\n      : @543 (gas: 3)\n 37316: a0 = 0\n 37318: a1 = 0\n 37320: ra = 478, jump @0\n      : @544 [@dyn 239] (gas: 5)\n 37327: i32 a1 = a0 + 0\n 37329: a0 = 0x1\n 37332: a2 = 0\n 37334: ecalli 11 // 'seal_return'\n 37336: fallthrough\n      : @545 (gas: 4)\n 37337: i32 a0 = a2 + 0\n 37339: i32 s1 = a3 + 0\n 37341: a1 = s1\n 37343: ra = 480, jump @0\n      : @546 [@dyn 240] (gas: 6)\n 37350: i32 a1 = a0 + 0\n 37352: a0 = 0\n 37354: a2 = s1\n 37356: ra = 0x1e2\n 37360: ecalli 11 // 'seal_return'\n 37362: fallthrough\n      : @547 [@dyn 241] (gas: 12)\n 37363: a1 = u64 [a0 + 0x10]\n 37366: a2 = u64 [a0 + 0x18]\n 37369: a3 = u64 [a0 + 0x8]\n 37372: a0 = u64 [a0]\n 37374: a2 = a2 | a3\n 37377: a3 = a0 | a1\n 37380: a3 = a3 | a2\n 37383: a3 = a3 >> 0x20\n 37386: a1 = a1 | a2\n 37389: a1 = a1 << 0x20\n 37392: a1 = a1 | a3\n 37395: jump @550 if a1 != 0\n      : @548 (gas: 5)\n 37398: sp = sp + 0xfffffffffffffff8\n 37401: u64 [sp] = ra\n 37403: i32 a0 = a0 + 0\n 37405: a1 = 0x20\n 37408: ra = 484, jump @0\n      : @549 [@dyn 242] (gas: 36)\n 37415: u8 [a0 + 31] = 0\n 37418: u8 [a0 + 30] = 0\n 37421: u8 [a0 + 29] = 0\n 37424: u8 [a0 + 28] = 0\n 37427: u8 [a0 + 27] = 0\n 37430: u8 [a0 + 26] = 0\n 37433: u8 [a0 + 25] = 0\n 37436: u8 [a0 + 24] = 0\n 37439: u8 [a0 + 23] = 0\n 37442: u8 [a0 + 22] = 0\n 37445: u8 [a0 + 21] = 0\n 37448: u8 [a0 + 20] = 0\n 37451: u8 [a0 + 19] = 0\n 37454: u8 [a0 + 18] = 0\n 37457: u8 [a0 + 17] = 0\n 37460: u8 [a0 + 16] = 0\n 37463: u8 [a0 + 15] = 0\n 37466: u8 [a0 + 14] = 0\n 37469: u8 [a0 + 13] = 0\n 37472: u8 [a0 + 12] = 0\n 37475: u8 [a0 + 11] = 0\n 37478: u8 [a0 + 10] = 0\n 37481: u8 [a0 + 9] = 0\n 37484: u8 [a0 + 8] = 0\n 37487: u8 [a0 + 7] = 0\n 37490: u8 [a0 + 6] = 0\n 37493: u8 [a0 + 5] = 0\n 37496: u8 [a0 + 4] = 0\n 37499: u8 [a0 + 3] = 0\n 37502: u8 [a0 + 2] = 0x44\n 37506: u8 [a0 + 1] = 0x4e\n 37510: a1 = 0x57\n 37513: u8 [a0] = a1\n 37515: ra = u64 [sp]\n 37517: sp = sp + 0x8\n 37520: ret\n      : @550 (gas: 1)\n 37522: trap\n      : @551 (gas: 8)\n 37523: a0 = u64 [sp + 0x110]\n 37527: a1 = u64 [sp + 0x118]\n 37531: a2 = u64 [sp + 0x108]\n 37535: a3 = u64 [sp + 0x100]\n 37539: a1 = a1 | a2\n 37542: a0 = a0 | a3\n 37545: a0 = a0 | a1\n 37548: jump @564 if a0 != 0\n      : @552 (gas: 2)\n 37552: a0 = i32 [0x200a4]\n 37557: jump @564 if a0 <=u 3\n      : @553 (gas: 7)\n 37562: u64 [sp + 216] = 0\n 37566: u64 [sp + 208] = 0\n 37570: u64 [sp + 192] = 0x40\n 37575: a0 = sp + 0xe0\n 37579: a1 = sp + 0xc0\n 37583: u64 [sp + 200] = 0\n 37587: ra = 486, jump @106\n      : @554 [@dyn 243] (gas: 12)\n 37594: a4 = u64 [sp + 0xf8]\n 37598: a3 = u64 [sp + 0xf0]\n 37602: a2 = u64 [sp + 0xe8]\n 37606: s1 = u64 [sp + 0xe0]\n 37610: a0 = a2 | a4\n 37613: a1 = s1 | a3\n 37616: a1 = a1 | a0\n 37619: a1 = a1 >> 0x20\n 37622: a0 = a0 | a3\n 37625: a0 = a0 << 0x20\n 37628: a0 = a0 | a1\n 37631: jump @563 if a0 != 0\n      : @555 (gas: 7)\n 37635: i32 a0 = s1 + 0\n 37637: a1 = 0x20\n 37640: u64 [sp + 0x40] = a0\n 37643: u64 [sp + 0x58] = a2\n 37646: u64 [sp + 0x50] = a3\n 37649: u64 [sp + 0x48] = a4\n 37652: ra = 488, jump @0\n      : @556 [@dyn 244] (gas: 42)\n 37659: u8 [a0 + 31] = 0x3\n 37663: a1 = u64 [sp + 0x50]\n 37666: a2 = u64 [sp + 0x48]\n 37669: a2 = a2 | a1\n 37672: a1 = 0xffffffe0\n 37682: u64 [sp + 0x38] = s1\n 37685: a1 = s1 <u a1\n 37688: a3 = u64 [sp + 0x58]\n 37691: a1 = 0 if a3 != 0\n 37693: a1 = 0 if a2 != 0\n 37695: u8 [a0 + 30] = 0\n 37698: u8 [a0 + 29] = 0\n 37701: u8 [a0 + 28] = 0\n 37704: u8 [a0 + 27] = 0\n 37707: u8 [a0 + 26] = 0\n 37710: u8 [a0 + 25] = 0\n 37713: u8 [a0 + 24] = 0\n 37716: u8 [a0 + 23] = 0\n 37719: u8 [a0 + 22] = 0\n 37722: u8 [a0 + 21] = 0\n 37725: u8 [a0 + 20] = 0\n 37728: u8 [a0 + 19] = 0\n 37731: u8 [a0 + 18] = 0\n 37734: u8 [a0 + 17] = 0\n 37737: u8 [a0 + 16] = 0\n 37740: u8 [a0 + 15] = 0\n 37743: u8 [a0 + 14] = 0\n 37746: u8 [a0 + 13] = 0\n 37749: u8 [a0 + 12] = 0\n 37752: u8 [a0 + 11] = 0\n 37755: u8 [a0 + 10] = 0\n 37758: u8 [a0 + 9] = 0\n 37761: u8 [a0 + 8] = 0\n 37764: u8 [a0 + 7] = 0\n 37767: u8 [a0 + 6] = 0\n 37770: u8 [a0 + 5] = 0\n 37773: u8 [a0 + 4] = 0\n 37776: u8 [a0 + 3] = 0\n 37779: u8 [a0 + 2] = 0\n 37782: u8 [a0 + 1] = 0\n 37785: u8 [a0 + 0] = 0\n 37787: jump @563 if a1 == 0\n      : @557 (gas: 4)\n 37791: a0 = u64 [sp + 0x40]\n 37794: i32 a0 = a0 + 0x20\n 37797: a1 = 0x20\n 37800: ra = 490, jump @0\n      : @558 [@dyn 245] (gas: 35)\n 37807: u8 [a0 + 31] = 0\n 37810: u8 [a0 + 30] = 0\n 37813: u8 [a0 + 29] = 0\n 37816: u8 [a0 + 28] = 0\n 37819: u8 [a0 + 27] = 0\n 37822: u8 [a0 + 26] = 0\n 37825: u8 [a0 + 25] = 0\n 37828: u8 [a0 + 24] = 0\n 37831: u8 [a0 + 23] = 0\n 37834: u8 [a0 + 22] = 0\n 37837: u8 [a0 + 21] = 0\n 37840: u8 [a0 + 20] = 0\n 37843: u8 [a0 + 19] = 0\n 37846: u8 [a0 + 18] = 0\n 37849: u8 [a0 + 17] = 0\n 37852: u8 [a0 + 16] = 0\n 37855: u8 [a0 + 15] = 0\n 37858: u8 [a0 + 14] = 0\n 37861: u8 [a0 + 13] = 0\n 37864: u8 [a0 + 12] = 0\n 37867: u8 [a0 + 11] = 0\n 37870: u8 [a0 + 10] = 0\n 37873: u8 [a0 + 9] = 0\n 37876: u8 [a0 + 8] = 0\n 37879: u8 [a0 + 7] = 0\n 37882: u8 [a0 + 6] = 0\n 37885: u8 [a0 + 5] = 0\n 37888: u8 [a0 + 4] = 0\n 37891: u8 [a0 + 3] = 0\n 37894: u8 [a0 + 2] = 0x44\n 37898: u8 [a0 + 1] = 0x4e\n 37902: u8 [a0 + 0] = 0x57\n 37905: a0 = 0x40\n 37908: a1 = 0x20\n 37911: ra = 492, jump @0\n      : @559 [@dyn 246] (gas: 100)\n 37918: a1 = u8 [a0 + 0x11]\n 37921: a2 = u8 [a0 + 0x10]\n 37924: a3 = u8 [a0 + 0x12]\n 37927: a4 = u8 [a0 + 0x13]\n 37930: a1 = a1 << 0x8\n 37933: a1 = a1 | a2\n 37936: a3 = a3 << 0x10\n 37939: a4 = a4 << 0x18\n 37942: a3 = a3 | a4\n 37945: a1 = a1 | a3\n 37948: a2 = u8 [a0 + 0x15]\n 37951: a3 = u8 [a0 + 0x14]\n 37954: a4 = u8 [a0 + 0x16]\n 37957: a5 = u8 [a0 + 0x17]\n 37960: a2 = a2 << 0x8\n 37963: a2 = a2 | a3\n 37966: a4 = a4 << 0x10\n 37969: a5 = a5 << 0x18\n 37972: a4 = a4 | a5\n 37975: a2 = a2 | a4\n 37978: a2 = a2 << 0x20\n 37981: t0 = a2 | a1\n 37984: a2 = u8 [a0 + 0x1]\n 37987: a3 = u8 [a0]\n 37989: a4 = u8 [a0 + 0x2]\n 37992: a5 = u8 [a0 + 0x3]\n 37995: a2 = a2 << 0x8\n 37998: a2 = a2 | a3\n 38001: a4 = a4 << 0x10\n 38004: a5 = a5 << 0x18\n 38007: a4 = a4 | a5\n 38010: a2 = a2 | a4\n 38013: a3 = u8 [a0 + 0x5]\n 38016: a4 = u8 [a0 + 0x4]\n 38019: a5 = u8 [a0 + 0x6]\n 38022: s1 = u8 [a0 + 0x7]\n 38025: a3 = a3 << 0x8\n 38028: a3 = a3 | a4\n 38031: a5 = a5 << 0x10\n 38034: s1 = s1 << 0x18\n 38037: a5 = a5 | s1\n 38040: a3 = a3 | a5\n 38043: a3 = a3 << 0x20\n 38046: a2 = a2 | a3\n 38049: a3 = u8 [a0 + 0x19]\n 38052: a4 = u8 [a0 + 0x18]\n 38055: a5 = u8 [a0 + 0x1a]\n 38058: s1 = u8 [a0 + 0x1b]\n 38061: a3 = a3 << 0x8\n 38064: a3 = a3 | a4\n 38067: a5 = a5 << 0x10\n 38070: s1 = s1 << 0x18\n 38073: a5 = a5 | s1\n 38076: a3 = a3 | a5\n 38079: a4 = u8 [a0 + 0x1d]\n 38082: a5 = u8 [a0 + 0x1c]\n 38085: s1 = u8 [a0 + 0x1e]\n 38088: a1 = u8 [a0 + 0x1f]\n 38091: a4 = a4 << 0x8\n 38094: a4 = a4 | a5\n 38097: s1 = s1 << 0x10\n 38100: a1 = a1 << 0x18\n 38103: a1 = a1 | s1\n 38106: a1 = a1 | a4\n 38109: a1 = a1 << 0x20\n 38112: a3 = a3 | a1\n 38115: a1 = u8 [a0 + 0x9]\n 38118: a4 = u8 [a0 + 0x8]\n 38121: a5 = u8 [a0 + 0xa]\n 38124: s1 = u8 [a0 + 0xb]\n 38127: a1 = a1 << 0x8\n 38130: a1 = a1 | a4\n 38133: a5 = a5 << 0x10\n 38136: s1 = s1 << 0x18\n 38139: a5 = a5 | s1\n 38142: a1 = a1 | a5\n 38145: a4 = u8 [a0 + 0xd]\n 38148: a5 = u8 [a0 + 0xc]\n 38151: s1 = u8 [a0 + 0xe]\n 38154: a0 = u8 [a0 + 0xf]\n 38157: a4 = a4 << 0x8\n 38160: a4 = a4 | a5\n 38163: s1 = s1 << 0x10\n 38166: a0 = a0 << 0x18\n 38169: a0 = a0 | s1\n 38172: a0 = a0 | a4\n 38175: a0 = a0 << 0x20\n 38178: a0 = a0 | a1\n 38181: s1 = reverse a0\n 38183: a3 = reverse a3\n 38185: a4 = reverse a2\n 38187: a2 = reverse t0\n 38189: a0 = a2 | a4\n 38192: a1 = a3 | s1\n 38195: a1 = a1 | a0\n 38198: a1 = a1 >> 0x20\n 38201: a0 = a0 | s1\n 38204: a0 = a0 << 0x20\n 38207: a0 = a0 | a1\n 38210: jump @563 if a0 != 0\n      : @560 (gas: 19)\n 38214: a0 = a3 + 0x20\n 38217: u64 [sp + 0x18] = a0\n 38220: a0 = a0 <u a3\n 38223: a1 = a2 + a0\n 38226: u64 [sp + 0x8] = a1\n 38229: a1 = a1 <u a2\n 38232: a1 = a0 if a0 == 0\n 38235: a1 = a1 + s1\n 38238: u64 [sp + 0x10] = a1\n 38241: a0 = a1 <u s1\n 38244: a0 = a0 + a4\n 38247: u64 [sp + 0x20] = a0\n 38250: i32 a0 = a3 + 0\n 38252: a1 = 0x20\n 38255: u64 [sp] = a0\n 38257: u64 [sp + 0x30] = a3\n 38260: u64 [sp + 0x28] = a2\n 38263: u64 [sp + 0x40] = a4\n 38266: ra = 494, jump @0\n      : @561 [@dyn 247] (gas: 52)\n 38273: u8 [a0 + 31] = 0x20\n 38277: u8 [a0 + 30] = 0\n 38280: u8 [a0 + 29] = 0\n 38283: u8 [a0 + 28] = 0\n 38286: u8 [a0 + 27] = 0\n 38289: u8 [a0 + 26] = 0\n 38292: u8 [a0 + 25] = 0\n 38295: u8 [a0 + 24] = 0\n 38298: u8 [a0 + 23] = 0\n 38301: u8 [a0 + 22] = 0\n 38304: u8 [a0 + 21] = 0\n 38307: u8 [a0 + 20] = 0\n 38310: u8 [a0 + 19] = 0\n 38313: u8 [a0 + 18] = 0\n 38316: u8 [a0 + 17] = 0\n 38319: u8 [a0 + 16] = 0\n 38322: u8 [a0 + 15] = 0\n 38325: u8 [a0 + 14] = 0\n 38328: u8 [a0 + 13] = 0\n 38331: u8 [a0 + 12] = 0\n 38334: u8 [a0 + 11] = 0\n 38337: u8 [a0 + 10] = 0\n 38340: u8 [a0 + 9] = 0\n 38343: u8 [a0 + 8] = 0\n 38346: u8 [a0 + 7] = 0\n 38349: u8 [a0 + 6] = 0\n 38352: u8 [a0 + 5] = 0\n 38355: u8 [a0 + 4] = 0\n 38358: u8 [a0 + 3] = 0\n 38361: u8 [a0 + 2] = 0\n 38364: u8 [a0 + 1] = 0\n 38367: u8 [a0 + 0] = 0\n 38369: a0 = u64 [sp + 0x8]\n 38372: u64 [sp + 0x68] = a0\n 38375: a0 = u64 [sp + 0x18]\n 38378: u64 [sp + 0x60] = a0\n 38381: a0 = u64 [sp + 0x48]\n 38384: u64 [sp + 0x98] = a0\n 38388: a0 = u64 [sp + 0x50]\n 38391: u64 [sp + 0x90] = a0\n 38395: a0 = u64 [sp + 0x58]\n 38398: u64 [sp + 0x88] = a0\n 38402: a0 = u64 [sp + 0x38]\n 38405: u64 [sp + 0x80] = a0\n 38409: a0 = u64 [sp + 0x10]\n 38412: u64 [sp + 0x70] = a0\n 38415: a0 = sp + 0xa0\n 38419: a1 = sp + 0x80\n 38423: a2 = sp + 0x60\n 38426: a3 = u64 [sp + 0x20]\n 38429: u64 [sp + 0x78] = a3\n 38432: ra = 496, jump @224\n      : @562 [@dyn 248] (gas: 30)\n 38438: a0 = u64 [sp + 0xa8]\n 38442: t0 = u64 [sp + 0xb8]\n 38446: t1 = u64 [sp + 0xa0]\n 38450: a3 = u64 [sp + 0xb0]\n 38454: a1 = u64 [sp + 0x28]\n 38457: a4 = a0 ^ a1\n 38460: a5 = a0 <u a1\n 38463: t2 = a1\n 38465: a2 = u64 [sp + 0x30]\n 38468: a1 = t1 <u a2\n 38471: a5 = a1 if a4 == 0\n 38474: a4 = a3 - s1\n 38477: a3 = a3 <u s1\n 38480: s1 = u64 [sp + 0x40]\n 38483: s1 = t0 - s1\n 38486: s1 = s1 - a3\n 38489: a3 = a4 <u a5\n 38492: s1 = s1 - a3\n 38495: a4 = a4 - a5\n 38498: a0 = a0 - t2\n 38501: a1 = a0 - a1\n 38504: a0 = t1 - a2\n 38507: a1 = a1 | s1\n 38510: a2 = a0 | a4\n 38513: a2 = a2 | a1\n 38516: a1 = a1 | a4\n 38519: a2 = a2 >> 0x20\n 38522: a1 = a1 << 0x20\n 38525: a1 = a1 | a2\n 38528: jump @566 if a1 == 0\n      : @563 (gas: 1)\n 38531: trap\n      : @564 (gas: 3)\n 38532: a0 = 0\n 38534: a1 = 0\n 38536: ra = 498, jump @0\n      : @565 [@dyn 249] (gas: 5)\n 38543: i32 a1 = a0 + 0\n 38545: a0 = 0x1\n 38548: a2 = 0\n 38550: ecalli 11 // 'seal_return'\n 38552: fallthrough\n      : @566 (gas: 4)\n 38553: i32 s1 = a0 + 0\n 38555: a0 = u64 [sp]\n 38557: a1 = s1\n 38559: ra = 500, jump @0\n      : @567 [@dyn 250] (gas: 6)\n 38566: i32 a1 = a0 + 0\n 38568: a0 = 0\n 38570: a2 = s1\n 38572: ra = 0x1f6\n 38576: ecalli 11 // 'seal_return'\n 38578: fallthrough\n      : @568 [@dyn 251] (gas: 18)\n 38579: sp = sp + 0xffffffffffffffd0\n 38582: u64 [sp + 0x28] = ra\n 38585: u64 [sp + 0x20] = s0\n 38588: u64 [sp + 0x18] = s1\n 38591: s1 = u64 [a0 + 0x10]\n 38594: a2 = u64 [a0 + 0x18]\n 38597: a1 = u64 [a0 + 0x8]\n 38600: s0 = u64 [a0]\n 38602: u64 [sp + 0x10] = a1\n 38605: u64 [sp + 0x8] = a2\n 38608: a0 = a1 | a2\n 38611: a1 = s0 | s1\n 38614: a1 = a1 | a0\n 38617: a1 = a1 >> 0x20\n 38620: a0 = a0 | s1\n 38623: a0 = a0 << 0x20\n 38626: a0 = a0 | a1\n 38629: jump @573 if a0 != 0\n      : @569 (gas: 4)\n 38633: i32 a0 = s0 + 0\n 38635: a1 = 0x20\n 38638: u64 [sp] = a0\n 38640: ra = 504, jump @0\n      : @570 [@dyn 252] (gas: 43)\n 38647: u8 [a0 + 30] = 0x72\n 38651: u8 [a0 + 24] = 0x62\n 38655: u8 [a0 + 23] = 0x75\n 38659: u8 [a0 + 29] = 0x2d\n 38663: u8 [a0 + 25] = 0x2d\n 38667: u8 [a0 + 21] = 0x2d\n 38671: u8 [a0 + 15] = 0x2d\n 38675: u8 [a0 + 13] = 0x6e\n 38679: u8 [a0 + 26] = 0x65\n 38683: u8 [a0 + 19] = 0x65\n 38687: u8 [a0 + 12] = 0x65\n 38691: u8 [a0 + 9] = 0x65\n 38695: u8 [a0 + 8] = 0x77\n 38699: u8 [a0 + 7] = 0x2f\n 38703: u8 [a0 + 6] = 0x2f\n 38707: u8 [a0 + 5] = 0x3a\n 38711: u8 [a0 + 18] = 0x73\n 38715: u8 [a0 + 17] = 0x73\n 38719: u8 [a0 + 10] = 0x73\n 38723: u8 [a0 + 4] = 0x73\n 38727: u8 [a0 + 28] = 0x68\n 38731: u8 [a0 + 22] = 0x68\n 38735: u8 [a0 + 0] = 0x68\n 38738: a4 = 0x70\n 38741: u8 [a0 + 0x1f] = a4\n 38744: a1 = u64 [sp + 0x8]\n 38747: a1 = a1 | s1\n 38750: a2 = 0xffffffe0\n 38760: a2 = s0 <u a2\n 38763: s0 = 0x74\n 38766: u8 [a0 + 0x1b] = s0\n 38769: u8 [a0 + 0x14] = s0\n 38772: a3 = u64 [sp + 0x10]\n 38775: a2 = 0 if a3 != 0\n 38777: u8 [a0 + 16] = 0x61\n 38781: a2 = 0 if a1 != 0\n 38783: s1 = 0x64\n 38786: u8 [a0 + 0xe] = s1\n 38789: u8 [a0 + 0xb] = s0\n 38792: u8 [a0 + 0x3] = a4\n 38795: u8 [a0 + 0x2] = s0\n 38798: u8 [a0 + 0x1] = s0\n 38801: jump @573 if a2 == 0\n      : @571 (gas: 4)\n 38805: a0 = u64 [sp]\n 38807: i32 a0 = a0 + 0x20\n 38810: a1 = 0x20\n 38813: ra = 506, jump @0\n      : @572 [@dyn 253] (gas: 40)\n 38820: u8 [a0 + 31] = 0\n 38823: u8 [a0 + 30] = 0\n 38826: u8 [a0 + 29] = 0\n 38829: u8 [a0 + 28] = 0\n 38832: u8 [a0 + 27] = 0\n 38835: u8 [a0 + 26] = 0\n 38838: u8 [a0 + 25] = 0\n 38841: u8 [a0 + 24] = 0\n 38844: u8 [a0 + 23] = 0\n 38847: u8 [a0 + 22] = 0\n 38850: u8 [a0 + 21] = 0\n 38853: u8 [a0 + 20] = 0\n 38856: u8 [a0 + 19] = 0\n 38859: u8 [a0 + 18] = 0\n 38862: u8 [a0 + 17] = 0\n 38865: u8 [a0 + 16] = 0\n 38868: u8 [a0 + 15] = 0\n 38871: u8 [a0 + 14] = 0\n 38874: u8 [a0 + 13] = 0\n 38877: u8 [a0 + 12] = 0x6f\n 38881: u8 [a0 + 11] = 0x69\n 38885: a2 = 0x2e\n 38888: u8 [a0 + 0xa] = a2\n 38891: u8 [a0 + 0x9] = s0\n 38894: u8 [a0 + 8] = 0x6f\n 38898: u8 [a0 + 0x7] = s1\n 38901: u8 [a0 + 6] = 0x61\n 38905: u8 [a0 + 5] = 0x6b\n 38909: a3 = 0x6c\n 38912: u8 [a0 + 0x4] = a3\n 38915: u8 [a0 + 3] = 0x6f\n 38919: u8 [a0 + 2] = 0x70\n 38923: u8 [a0 + 0x1] = a2\n 38926: a1 = 0x63\n 38929: u8 [a0] = a1\n 38931: ra = u64 [sp + 0x28]\n 38934: s0 = u64 [sp + 0x20]\n 38937: s1 = u64 [sp + 0x18]\n 38940: sp = sp + 0x30\n 38943: ret\n      : @573 (gas: 1)\n 38945: trap\n      : @574 (gas: 8)\n 38946: a0 = u64 [sp + 0x110]\n 38950: a1 = u64 [sp + 0x118]\n 38954: a2 = u64 [sp + 0x108]\n 38958: a3 = u64 [sp + 0x100]\n 38962: a1 = a1 | a2\n 38965: a0 = a0 | a3\n 38968: a0 = a0 | a1\n 38971: jump @589 if a0 != 0\n      : @575 (gas: 2)\n 38975: a0 = i32 [0x200a4]\n 38980: jump @589 if a0 <=u 3\n      : @576 (gas: 7)\n 38985: u64 [sp + 216] = 0\n 38989: u64 [sp + 208] = 0\n 38993: u64 [sp + 192] = 0x60\n 38998: a0 = sp + 0xe0\n 39002: a1 = sp + 0xc0\n 39006: u64 [sp + 200] = 0\n 39010: ra = 508, jump @106\n      : @577 [@dyn 254] (gas: 12)\n 39017: a4 = u64 [sp + 0xf8]\n 39021: a3 = u64 [sp + 0xf0]\n 39025: a2 = u64 [sp + 0xe8]\n 39029: s1 = u64 [sp + 0xe0]\n 39033: a0 = a2 | a4\n 39036: a1 = s1 | a3\n 39039: a1 = a1 | a0\n 39042: a1 = a1 >> 0x20\n 39045: a0 = a0 | a3\n 39048: a0 = a0 << 0x20\n 39051: a0 = a0 | a1\n 39054: jump @588 if a0 != 0\n      : @578 (gas: 7)\n 39058: i32 a0 = s1 + 0\n 39060: a1 = 0x20\n 39063: u64 [sp + 0x40] = a0\n 39066: u64 [sp + 0x58] = a2\n 39069: u64 [sp + 0x50] = a3\n 39072: u64 [sp + 0x48] = a4\n 39075: ra = 510, jump @0\n      : @579 [@dyn 255] (gas: 43)\n 39082: u8 [a0 + 31] = 0x2d\n 39086: u8 [a0 + 30] = 0\n 39089: u8 [a0 + 29] = 0\n 39092: u8 [a0 + 28] = 0\n 39095: u8 [a0 + 27] = 0\n 39098: u8 [a0 + 26] = 0\n 39101: u8 [a0 + 25] = 0\n 39104: u8 [a0 + 24] = 0\n 39107: u8 [a0 + 23] = 0\n 39110: u8 [a0 + 22] = 0\n 39113: u8 [a0 + 21] = 0\n 39116: u8 [a0 + 20] = 0\n 39119: u8 [a0 + 19] = 0\n 39122: u8 [a0 + 18] = 0\n 39125: u8 [a0 + 17] = 0\n 39128: u8 [a0 + 16] = 0\n 39131: u8 [a0 + 15] = 0\n 39134: u8 [a0 + 14] = 0\n 39137: u8 [a0 + 13] = 0\n 39140: u8 [a0 + 12] = 0\n 39143: u8 [a0 + 11] = 0\n 39146: u8 [a0 + 10] = 0\n 39149: u8 [a0 + 9] = 0\n 39152: u8 [a0 + 8] = 0\n 39155: u8 [a0 + 7] = 0\n 39158: u8 [a0 + 6] = 0\n 39161: u8 [a0 + 5] = 0\n 39164: u8 [a0 + 4] = 0\n 39167: u8 [a0 + 3] = 0\n 39170: u8 [a0 + 2] = 0\n 39173: u8 [a0 + 1] = 0\n 39176: a1 = u64 [sp + 0x50]\n 39179: a2 = u64 [sp + 0x48]\n 39182: a3 = a1 | a2\n 39185: a4 = s1\n 39187: s1 = 0x100000000\n 39197: a1 = 0xffffffe0\n 39207: a1 = a4 <u a1\n 39210: a2 = u64 [sp + 0x58]\n 39213: a1 = 0 if a2 != 0\n 39215: a1 = 0 if a3 != 0\n 39217: u8 [a0 + 0] = 0\n 39219: jump @588 if a1 == 0\n      : @580 (gas: 6)\n 39223: a0 = u64 [sp + 0x40]\n 39226: i32 a0 = a0 + 0x20\n 39229: a1 = 0x20\n 39232: u64 [sp + 0x30] = a3\n 39235: u64 [sp + 0x38] = a4\n 39238: ra = 512, jump @0\n      : @581 [@dyn 256] (gas: 42)\n 39245: u8 [a0 + 31] = 0x70\n 39249: u8 [a0 + 30] = 0x72\n 39253: u8 [a0 + 29] = 0x2d\n 39257: u8 [a0 + 24] = 0x62\n 39261: u8 [a0 + 23] = 0x75\n 39265: u8 [a0 + 28] = 0x68\n 39269: u8 [a0 + 25] = 0x2d\n 39273: u8 [a0 + 21] = 0x2d\n 39277: u8 [a0 + 15] = 0x2d\n 39281: u8 [a0 + 13] = 0x6e\n 39285: u8 [a0 + 26] = 0x65\n 39289: u8 [a0 + 19] = 0x65\n 39293: u8 [a0 + 12] = 0x65\n 39297: u8 [a0 + 9] = 0x65\n 39301: u8 [a0 + 8] = 0x77\n 39305: u8 [a0 + 7] = 0x2f\n 39309: u8 [a0 + 6] = 0x2f\n 39313: u8 [a0 + 5] = 0x3a\n 39317: u8 [a0 + 18] = 0x73\n 39321: u8 [a0 + 17] = 0x73\n 39325: u8 [a0 + 10] = 0x73\n 39329: u8 [a0 + 4] = 0x73\n 39333: a4 = 0x74\n 39336: u8 [a0 + 0x1b] = a4\n 39339: u8 [a0 + 22] = 0x68\n 39343: u8 [a0 + 0x14] = a4\n 39346: u8 [a0 + 0] = 0x68\n 39349: u8 [a0 + 16] = 0x61\n 39353: a1 = s1 + 0xffffffffffffffc0\n 39356: a2 = u64 [sp + 0x38]\n 39359: a1 = a2 <u a1\n 39362: a2 = u64 [sp + 0x58]\n 39365: a1 = 0 if a2 != 0\n 39367: a2 = u64 [sp + 0x30]\n 39370: a1 = 0 if a2 != 0\n 39372: s1 = 0x64\n 39375: u8 [a0 + 0xe] = s1\n 39378: u8 [a0 + 0xb] = a4\n 39381: u8 [a0 + 3] = 0x70\n 39385: u8 [a0 + 0x2] = a4\n 39388: u8 [a0 + 0x1] = a4\n 39391: jump @588 if a1 == 0\n      : @582 (gas: 4)\n 39395: a0 = u64 [sp + 0x40]\n 39398: i32 a0 = a0 + 0x40\n 39401: a1 = 0x20\n 39404: ra = 514, jump @0\n      : @583 [@dyn 257] (gas: 35)\n 39411: u8 [a0 + 31] = 0\n 39414: u8 [a0 + 30] = 0\n 39417: u8 [a0 + 29] = 0\n 39420: u8 [a0 + 28] = 0\n 39423: u8 [a0 + 27] = 0\n 39426: u8 [a0 + 26] = 0\n 39429: u8 [a0 + 25] = 0\n 39432: u8 [a0 + 24] = 0\n 39435: u8 [a0 + 23] = 0\n 39438: u8 [a0 + 22] = 0\n 39441: u8 [a0 + 21] = 0\n 39444: u8 [a0 + 20] = 0\n 39447: u8 [a0 + 19] = 0\n 39450: u8 [a0 + 18] = 0\n 39453: u8 [a0 + 17] = 0\n 39456: u8 [a0 + 16] = 0\n 39459: u8 [a0 + 15] = 0\n 39462: u8 [a0 + 14] = 0\n 39465: u8 [a0 + 13] = 0\n 39468: u8 [a0 + 12] = 0x6f\n 39472: u8 [a0 + 11] = 0x69\n 39476: u8 [a0 + 10] = 0x2e\n 39480: u8 [a0 + 9] = 0x74\n 39484: u8 [a0 + 8] = 0x6f\n 39488: u8 [a0 + 0x7] = s1\n 39491: u8 [a0 + 6] = 0x61\n 39495: u8 [a0 + 5] = 0x6b\n 39499: u8 [a0 + 4] = 0x6c\n 39503: u8 [a0 + 3] = 0x6f\n 39507: u8 [a0 + 2] = 0x70\n 39511: u8 [a0 + 1] = 0x2e\n 39515: u8 [a0 + 0] = 0x63\n 39518: a0 = 0x40\n 39521: a1 = 0x20\n 39524: ra = 516, jump @0\n      : @584 [@dyn 258] (gas: 100)\n 39531: a1 = u8 [a0 + 0x11]\n 39534: a2 = u8 [a0 + 0x10]\n 39537: a3 = u8 [a0 + 0x12]\n 39540: a4 = u8 [a0 + 0x13]\n 39543: a1 = a1 << 0x8\n 39546: a1 = a1 | a2\n 39549: a3 = a3 << 0x10\n 39552: a4 = a4 << 0x18\n 39555: a3 = a3 | a4\n 39558: a1 = a1 | a3\n 39561: a2 = u8 [a0 + 0x15]\n 39564: a3 = u8 [a0 + 0x14]\n 39567: a4 = u8 [a0 + 0x16]\n 39570: a5 = u8 [a0 + 0x17]\n 39573: a2 = a2 << 0x8\n 39576: a2 = a2 | a3\n 39579: a4 = a4 << 0x10\n 39582: a5 = a5 << 0x18\n 39585: a4 = a4 | a5\n 39588: a2 = a2 | a4\n 39591: a2 = a2 << 0x20\n 39594: t0 = a2 | a1\n 39597: a2 = u8 [a0 + 0x1]\n 39600: a3 = u8 [a0]\n 39602: a4 = u8 [a0 + 0x2]\n 39605: a5 = u8 [a0 + 0x3]\n 39608: a2 = a2 << 0x8\n 39611: a2 = a2 | a3\n 39614: a4 = a4 << 0x10\n 39617: a5 = a5 << 0x18\n 39620: a4 = a4 | a5\n 39623: a2 = a2 | a4\n 39626: a3 = u8 [a0 + 0x5]\n 39629: a4 = u8 [a0 + 0x4]\n 39632: a5 = u8 [a0 + 0x6]\n 39635: s1 = u8 [a0 + 0x7]\n 39638: a3 = a3 << 0x8\n 39641: a3 = a3 | a4\n 39644: a5 = a5 << 0x10\n 39647: s1 = s1 << 0x18\n 39650: a5 = a5 | s1\n 39653: a3 = a3 | a5\n 39656: a3 = a3 << 0x20\n 39659: a2 = a2 | a3\n 39662: a3 = u8 [a0 + 0x19]\n 39665: a4 = u8 [a0 + 0x18]\n 39668: a5 = u8 [a0 + 0x1a]\n 39671: s1 = u8 [a0 + 0x1b]\n 39674: a3 = a3 << 0x8\n 39677: a3 = a3 | a4\n 39680: a5 = a5 << 0x10\n 39683: s1 = s1 << 0x18\n 39686: a5 = a5 | s1\n 39689: a3 = a3 | a5\n 39692: a4 = u8 [a0 + 0x1d]\n 39695: a5 = u8 [a0 + 0x1c]\n 39698: s1 = u8 [a0 + 0x1e]\n 39701: a1 = u8 [a0 + 0x1f]\n 39704: a4 = a4 << 0x8\n 39707: a4 = a4 | a5\n 39710: s1 = s1 << 0x10\n 39713: a1 = a1 << 0x18\n 39716: a1 = a1 | s1\n 39719: a1 = a1 | a4\n 39722: a1 = a1 << 0x20\n 39725: a3 = a3 | a1\n 39728: a1 = u8 [a0 + 0x9]\n 39731: a4 = u8 [a0 + 0x8]\n 39734: a5 = u8 [a0 + 0xa]\n 39737: s1 = u8 [a0 + 0xb]\n 39740: a1 = a1 << 0x8\n 39743: a1 = a1 | a4\n 39746: a5 = a5 << 0x10\n 39749: s1 = s1 << 0x18\n 39752: a5 = a5 | s1\n 39755: a1 = a1 | a5\n 39758: a4 = u8 [a0 + 0xd]\n 39761: a5 = u8 [a0 + 0xc]\n 39764: s1 = u8 [a0 + 0xe]\n 39767: a0 = u8 [a0 + 0xf]\n 39770: a4 = a4 << 0x8\n 39773: a4 = a4 | a5\n 39776: s1 = s1 << 0x10\n 39779: a0 = a0 << 0x18\n 39782: a0 = a0 | s1\n 39785: a0 = a0 | a4\n 39788: a0 = a0 << 0x20\n 39791: a0 = a0 | a1\n 39794: a4 = reverse a0\n 39796: a3 = reverse a3\n 39798: a5 = reverse a2\n 39800: a2 = reverse t0\n 39802: a0 = a2 | a5\n 39805: a1 = a3 | a4\n 39808: a1 = a1 | a0\n 39811: a1 = a1 >> 0x20\n 39814: a0 = a0 | a4\n 39817: a0 = a0 << 0x20\n 39820: a0 = a0 | a1\n 39823: jump @588 if a0 != 0\n      : @585 (gas: 19)\n 39827: a0 = a3 + 0x20\n 39830: u64 [sp + 0x10] = a0\n 39833: a0 = a0 <u a3\n 39836: s1 = a2 + a0\n 39839: a1 = s1 <u a2\n 39842: a1 = a0 if a0 == 0\n 39845: a1 = a1 + a4\n 39848: u64 [sp + 0x8] = a1\n 39851: a0 = a1 <u a4\n 39854: a0 = a0 + a5\n 39857: u64 [sp + 0x18] = a0\n 39860: i32 a0 = a3 + 0\n 39862: a1 = 0x20\n 39865: u64 [sp] = a0\n 39867: u64 [sp + 0x28] = a3\n 39870: u64 [sp + 0x20] = a2\n 39873: u64 [sp + 0x30] = a4\n 39876: u64 [sp + 0x40] = a5\n 39879: ra = 518, jump @0\n      : @586 [@dyn 259] (gas: 51)\n 39886: u8 [a0 + 31] = 0x20\n 39890: u8 [a0 + 30] = 0\n 39893: u8 [a0 + 29] = 0\n 39896: u8 [a0 + 28] = 0\n 39899: u8 [a0 + 27] = 0\n 39902: u8 [a0 + 26] = 0\n 39905: u8 [a0 + 25] = 0\n 39908: u8 [a0 + 24] = 0\n 39911: u8 [a0 + 23] = 0\n 39914: u8 [a0 + 22] = 0\n 39917: u8 [a0 + 21] = 0\n 39920: u8 [a0 + 20] = 0\n 39923: u8 [a0 + 19] = 0\n 39926: u8 [a0 + 18] = 0\n 39929: u8 [a0 + 17] = 0\n 39932: u8 [a0 + 16] = 0\n 39935: u8 [a0 + 15] = 0\n 39938: u8 [a0 + 14] = 0\n 39941: u8 [a0 + 13] = 0\n 39944: u8 [a0 + 12] = 0\n 39947: u8 [a0 + 11] = 0\n 39950: u8 [a0 + 10] = 0\n 39953: u8 [a0 + 9] = 0\n 39956: u8 [a0 + 8] = 0\n 39959: u8 [a0 + 7] = 0\n 39962: u8 [a0 + 6] = 0\n 39965: u8 [a0 + 5] = 0\n 39968: u8 [a0 + 4] = 0\n 39971: u8 [a0 + 3] = 0\n 39974: u8 [a0 + 2] = 0\n 39977: u8 [a0 + 1] = 0\n 39980: u8 [a0 + 0] = 0\n 39982: u64 [sp + 0x68] = s1\n 39985: a0 = u64 [sp + 0x10]\n 39988: u64 [sp + 0x60] = a0\n 39991: a0 = u64 [sp + 0x48]\n 39994: u64 [sp + 0x98] = a0\n 39998: a0 = u64 [sp + 0x50]\n 40001: u64 [sp + 0x90] = a0\n 40005: a0 = u64 [sp + 0x58]\n 40008: u64 [sp + 0x88] = a0\n 40012: a0 = u64 [sp + 0x38]\n 40015: u64 [sp + 0x80] = a0\n 40019: a0 = u64 [sp + 0x8]\n 40022: u64 [sp + 0x70] = a0\n 40025: a0 = sp + 0xa0\n 40029: a1 = sp + 0x80\n 40033: a2 = sp + 0x60\n 40036: a3 = u64 [sp + 0x18]\n 40039: u64 [sp + 0x78] = a3\n 40042: ra = 520, jump @224\n      : @587 [@dyn 260] (gas: 31)\n 40048: a0 = u64 [sp + 0xa8]\n 40052: t2 = u64 [sp + 0xb8]\n 40056: t0 = u64 [sp + 0xa0]\n 40060: a3 = u64 [sp + 0xb0]\n 40064: a2 = u64 [sp + 0x20]\n 40067: a4 = a0 ^ a2\n 40070: a5 = a0 <u a2\n 40073: t1 = a2\n 40075: a2 = u64 [sp + 0x28]\n 40078: s1 = t0 <u a2\n 40081: a5 = s1 if a4 == 0\n 40084: a1 = u64 [sp + 0x30]\n 40087: a4 = a3 - a1\n 40090: a3 = a3 <u a1\n 40093: a1 = u64 [sp + 0x40]\n 40096: a1 = t2 - a1\n 40099: a1 = a1 - a3\n 40102: a3 = a4 <u a5\n 40105: a1 = a1 - a3\n 40108: a4 = a4 - a5\n 40111: a0 = a0 - t1\n 40114: a3 = a0 - s1\n 40117: a0 = t0 - a2\n 40120: a1 = a1 | a3\n 40123: a2 = a0 | a4\n 40126: a2 = a2 | a1\n 40129: a1 = a1 | a4\n 40132: a2 = a2 >> 0x20\n 40135: a1 = a1 << 0x20\n 40138: a1 = a1 | a2\n 40141: jump @591 if a1 == 0\n      : @588 (gas: 1)\n 40144: trap\n      : @589 (gas: 3)\n 40145: a0 = 0\n 40147: a1 = 0\n 40149: ra = 522, jump @0\n      : @590 [@dyn 261] (gas: 5)\n 40156: i32 a1 = a0 + 0\n 40158: a0 = 0x1\n 40161: a2 = 0\n 40163: ecalli 11 // 'seal_return'\n 40165: fallthrough\n      : @591 (gas: 4)\n 40166: i32 s1 = a0 + 0\n 40168: a0 = u64 [sp]\n 40170: a1 = s1\n 40172: ra = 524, jump @0\n      : @592 [@dyn 262] (gas: 6)\n 40179: i32 a1 = a0 + 0\n 40181: a0 = 0\n 40183: a2 = s1\n 40185: ra = 0x20e\n 40189: ecalli 11 // 'seal_return'\n 40191: fallthrough\n      : @593 [@dyn 263] (gas: 5)\n 40192: u64 [a0 + 24] = 0\n 40195: u64 [a0 + 16] = 0\n 40198: u64 [a0 + 8] = 0\n 40201: u64 [a0 + 0] = 0\n 40203: ret\n      : @594 (gas: 15)\n 40205: sp = sp + 0xffffffffffffff20\n 40209: u64 [sp + 0xd8] = ra\n 40213: u64 [sp + 0xd0] = s0\n 40217: u64 [sp + 0xc8] = s1\n 40221: s0 = sp + 0xe0\n 40225: sp = sp & 0xffffffffffffffe0\n 40228: t0 = u64 [a1 + 0x18]\n 40231: a5 = u64 [a1 + 0x10]\n 40234: a4 = u64 [a1]\n 40236: s1 = u64 [a1 + 0x8]\n 40239: a1 = a5 | t0\n 40242: a3 = a4 <u 0x20\n 40245: a3 = 0 if s1 != 0\n 40247: a3 = 0 if a1 != 0\n 40249: jump @602 if a3 != 0\n      : @595 (gas: 23)\n 40253: a1 = u64 [a2 + 0x18]\n 40256: u64 [sp + 0x50] = a1\n 40259: a1 = u64 [a2 + 0x10]\n 40262: u64 [sp + 0x40] = a1\n 40265: a1 = u64 [a2 + 0x8]\n 40268: u64 [sp + 0x58] = a1\n 40271: a1 = u64 [a2]\n 40273: u64 [sp + 0x20] = a1\n 40276: a1 = u64 [a0 + 0x18]\n 40279: u64 [sp] = a1\n 40281: a1 = u64 [a0 + 0x10]\n 40284: u64 [sp + 0x8] = a1\n 40287: a1 = u64 [a0 + 0x8]\n 40290: u64 [sp + 0x10] = a1\n 40293: a0 = u64 [a0]\n 40295: u64 [sp + 0x18] = a0\n 40298: a1 = 0x20\n 40301: a0 = 0\n 40303: u64 [sp + 0x28] = t0\n 40306: u64 [sp + 0x48] = a5\n 40309: u64 [sp + 0x38] = s1\n 40312: u64 [sp + 0x30] = a4\n 40315: ra = 528, jump @0\n      : @596 [@dyn 264] (gas: 71)\n 40322: a1 = u64 [sp]\n 40324: a1 = reverse a1\n 40326: a2 = u64 [sp + 0x8]\n 40329: a2 = reverse a2\n 40331: a3 = u64 [sp + 0x10]\n 40334: a3 = reverse a3\n 40336: a4 = u64 [sp + 0x18]\n 40339: a4 = reverse a4\n 40341: a5 = a4 >> 0x38\n 40344: u8 [a0 + 0x1f] = a5\n 40347: a5 = a4 >> 0x30\n 40350: u8 [a0 + 0x1e] = a5\n 40353: a5 = a4 >> 0x28\n 40356: u8 [a0 + 0x1d] = a5\n 40359: a5 = a4 >> 0x20\n 40362: u8 [a0 + 0x1c] = a5\n 40365: a5 = a4 >> 0x18\n 40368: u8 [a0 + 0x1b] = a5\n 40371: a5 = a4 >> 0x10\n 40374: u8 [a0 + 0x1a] = a5\n 40377: a5 = a4 >> 0x8\n 40380: u8 [a0 + 0x19] = a5\n 40383: u8 [a0 + 0x18] = a4\n 40386: u8 [a0 + 0x10] = a3\n 40389: a4 = a3 >> 0x38\n 40392: u8 [a0 + 0x17] = a4\n 40395: a4 = a3 >> 0x30\n 40398: u8 [a0 + 0x16] = a4\n 40401: a4 = a3 >> 0x28\n 40404: u8 [a0 + 0x15] = a4\n 40407: a4 = a3 >> 0x20\n 40410: u8 [a0 + 0x14] = a4\n 40413: a4 = a3 >> 0x18\n 40416: u8 [a0 + 0x13] = a4\n 40419: a4 = a3 >> 0x10\n 40422: u8 [a0 + 0x12] = a4\n 40425: a3 = a3 >> 0x8\n 40428: u8 [a0 + 0x11] = a3\n 40431: u8 [a0 + 0x8] = a2\n 40434: a3 = a2 >> 0x38\n 40437: u8 [a0 + 0xf] = a3\n 40440: a3 = a2 >> 0x30\n 40443: u8 [a0 + 0xe] = a3\n 40446: a3 = a2 >> 0x28\n 40449: u8 [a0 + 0xd] = a3\n 40452: a3 = a2 >> 0x20\n 40455: u8 [a0 + 0xc] = a3\n 40458: a3 = a2 >> 0x18\n 40461: u8 [a0 + 0xb] = a3\n 40464: a3 = a2 >> 0x10\n 40467: u8 [a0 + 0xa] = a3\n 40470: a2 = a2 >> 0x8\n 40473: u8 [a0 + 0x9] = a2\n 40476: u8 [a0] = a1\n 40478: a2 = a1 >> 0x38\n 40481: u8 [a0 + 0x7] = a2\n 40484: a2 = a1 >> 0x30\n 40487: u8 [a0 + 0x6] = a2\n 40490: a2 = a1 >> 0x28\n 40493: u8 [a0 + 0x5] = a2\n 40496: a2 = a1 >> 0x20\n 40499: u8 [a0 + 0x4] = a2\n 40502: a2 = a1 >> 0x18\n 40505: u8 [a0 + 0x3] = a2\n 40508: a2 = a1 >> 0x10\n 40511: u8 [a0 + 0x2] = a2\n 40514: a1 = a1 >> 0x8\n 40517: u8 [a0 + 0x1] = a1\n 40520: a1 = 0x20\n 40523: a0 = 0\n 40525: ra = 530, jump @0\n      : @597 [@dyn 265] (gas: 5)\n 40532: i32 a0 = a0 + 0\n 40534: i32 a2 = sp + 0xa0\n 40538: a1 = 0x20\n 40541: ecalli 8 // 'hash_keccak_256'\n 40543: fallthrough\n      : @598 (gas: 112)\n 40544: a2 = u64 [sp + 0x20]\n 40547: a1 = a2 + 0x1f\n 40550: a0 = a1 <u a2\n 40553: t1 = a2\n 40555: a4 = u64 [sp + 0x58]\n 40558: a3 = a4 + a0\n 40561: a2 = a3 <u a4\n 40564: t0 = a4\n 40566: a2 = a0 if a0 == 0\n 40569: s1 = u64 [sp + 0x40]\n 40572: a2 = a2 + s1\n 40575: u64 [sp + 0x18] = a2\n 40578: a2 = a2 << 0x3b\n 40581: a4 = a3 >> 0x5\n 40584: a2 = a2 | a4\n 40587: a3 = a3 << 0x3b\n 40590: a1 = a1 >> 0x5\n 40593: a5 = a1 | a3\n 40596: a1 = t1 <u 0x20\n 40599: a1 = 0 if t0 != 0\n 40601: a3 = u64 [sp + 0xb8]\n 40605: t1 = u64 [sp + 0xb0]\n 40609: a0 = u64 [sp + 0x50]\n 40612: a4 = s1 | a0\n 40615: a1 = 0 if a4 != 0\n 40617: a4 = reverse a3\n 40619: s1 = reverse t1\n 40621: a2 = 0 if a1 != 0\n 40623: a5 = 0 if a1 != 0\n 40625: a5 = a5 + a4\n 40628: u64 [sp + 0x58] = a5\n 40631: a5 = a5 <u a4\n 40634: a3 = s1 + a5\n 40637: t0 = a3 + a2\n 40640: a3 = t0 ^ s1\n 40643: ra = t0 <u s1\n 40646: ra = a5 if a3 == 0\n 40649: a0 = u64 [sp + 0x30]\n 40652: t2 = a0 + 0x1f\n 40655: a0 = t2 <u a0\n 40658: a2 = u64 [sp + 0x38]\n 40661: a3 = a2 + a0\n 40664: a5 = a3 <u a2\n 40667: a5 = a0 if a0 == 0\n 40670: a0 = u64 [sp + 0x48]\n 40673: a5 = a5 + a0\n 40676: a0 = a5 << 0x3b\n 40679: a2 = a3 >> 0x5\n 40682: a0 = a0 | a2\n 40685: a3 = a3 << 0x3b\n 40688: a2 = t2 >> 0x5\n 40691: a2 = a2 | a3\n 40694: t2 = a4 + a2\n 40697: a2 = t2 <u a4\n 40700: a3 = s1 + a2\n 40703: t1 = a3 + a0\n 40706: a0 = t1 ^ s1\n 40709: a3 = t1 <u s1\n 40712: a3 = a2 if a0 == 0\n 40715: a4 = u64 [sp + 0x18]\n 40718: a0 = u64 [sp + 0x40]\n 40721: a0 = a4 <u a0\n 40724: a2 = u64 [sp + 0x50]\n 40727: a0 = a0 + a2\n 40730: a2 = a4 >> 0x5\n 40733: a4 = a0 << 0x3b\n 40736: a2 = a2 | a4\n 40739: a0 = a0 >> 0x5\n 40742: a4 = u64 [sp + 0xa8]\n 40746: s1 = u64 [sp + 0xa0]\n 40750: a2 = 0 if a1 != 0\n 40752: a0 = 0 if a1 != 0\n 40754: a1 = reverse a4\n 40756: a4 = reverse s1\n 40758: u64 [sp + 0x50] = a4\n 40761: a0 = a0 + a4\n 40764: a2 = a2 + a1\n 40767: s1 = a2 <u a1\n 40770: a0 = a0 + s1\n 40773: a4 = a2 + ra\n 40776: s1 = a4 <u a2\n 40779: s1 = s1 + a0\n 40782: a0 = u64 [sp + 0x48]\n 40785: a0 = a5 <u a0\n 40788: a2 = u64 [sp + 0x28]\n 40791: a0 = a0 + a2\n 40794: a5 = a5 >> 0x5\n 40797: a2 = a0 << 0x3b\n 40800: a2 = a2 | a5\n 40803: a5 = u64 [sp + 0x58]\n 40806: a0 = a0 >> 0x5\n 40809: a2 = a2 + a1\n 40812: ra = a2 + a3\n 40815: a1 = a2 <u a1\n 40818: a2 = ra <u a2\n 40821: a3 = u64 [sp + 0x50]\n 40824: a0 = a0 + a3\n 40827: a0 = a0 + a1\n 40830: a3 = a0 + a2\n 40833: a0 = t0 ^ t1\n 40836: a1 = t0 <u t1\n 40839: a2 = a5 <u t2\n 40842: a2 = a1 if a0 != 0\n 40845: a0 = a4 <u ra\n 40848: a1 = s1 ^ a3\n 40851: u64 [sp + 0x40] = a3\n 40854: a3 = s1 <u a3\n 40857: a3 = a0 if a1 == 0\n 40860: a0 = a4 ^ ra\n 40863: a0 = a0 | a1\n 40866: a2 = a3 if a0 != 0\n 40869: jump @602 if a2 == 0\n      : @599 (gas: 5)\n 40873: a0 = a4\n 40875: u64 [sp + 0x38] = t2\n 40878: u64 [sp + 0x30] = t1\n 40881: u64 [sp + 0x28] = ra\n 40884: fallthrough\n      : @600 (gas: 36)\n 40885: u64 [sp + 0x48] = a0\n 40888: u64 [sp + 0x50] = t0\n 40891: u64 [sp + 0x58] = a5\n 40894: u64 [sp + 0x90] = a0\n 40898: u64 [sp + 0x88] = t0\n 40902: u64 [sp + 0x80] = a5\n 40906: u64 [sp + 0x98] = s1\n 40910: u64 [sp + 184] = 0\n 40914: u64 [sp + 176] = 0\n 40918: u64 [sp + 168] = 0\n 40922: u64 [sp + 160] = 0\n 40926: u32 [sp + 96] = 0x20\n 40930: i32 a1 = sp + 0x80\n 40934: i32 a3 = sp + 0xa0\n 40938: i32 a4 = sp + 0x60\n 40941: a2 = 0xffffffffffffffff\n 40944: a0 = 0\n 40946: ecalli 7 // 'get_storage'\n 40948: u64 [sp + 0x98] = s1\n 40952: a0 = u64 [sp + 0x48]\n 40955: u64 [sp + 0x90] = a0\n 40959: a0 = u64 [sp + 0x50]\n 40962: u64 [sp + 0x88] = a0\n 40966: a0 = u64 [sp + 0x58]\n 40969: u64 [sp + 0x80] = a0\n 40973: u64 [sp + 184] = 0\n 40977: u64 [sp + 176] = 0\n 40981: u64 [sp + 168] = 0\n 40985: u64 [sp + 160] = 0\n 40989: i32 a1 = sp + 0x80\n 40993: i32 a3 = sp + 0xa0\n 40997: a2 = 0xffffffffffffffff\n 41000: a4 = 0x20\n 41003: a0 = 0\n 41005: ecalli 13 // 'set_storage'\n 41007: fallthrough\n      : @601 (gas: 27)\n 41008: ra = u64 [sp + 0x28]\n 41011: t1 = u64 [sp + 0x30]\n 41014: t2 = u64 [sp + 0x38]\n 41017: t0 = u64 [sp + 0x50]\n 41020: a5 = u64 [sp + 0x58]\n 41023: a5 = a5 + 0x1\n 41026: a0 = a5 <u 0x1\n 41029: t0 = t0 + a0\n 41032: a0 = a5 | t0\n 41035: a0 = a0 <u 0x1\n 41038: a1 = u64 [sp + 0x48]\n 41041: a0 = a0 + a1\n 41044: a1 = a0 <u a1\n 41047: s1 = s1 + a1\n 41050: a1 = a5 <u t2\n 41053: a2 = t0 ^ t1\n 41056: a3 = t0 <u t1\n 41059: a3 = a1 if a2 == 0\n 41062: a1 = a0 <u ra\n 41065: a4 = u64 [sp + 0x40]\n 41068: a2 = s1 ^ a4\n 41071: a4 = s1 <u a4\n 41074: a4 = a1 if a2 == 0\n 41077: a1 = a0 ^ ra\n 41080: a1 = a1 | a2\n 41083: a4 = a3 if a1 == 0\n 41086: jump @600 if a4 != 0\n      : @602 (gas: 6)\n 41090: sp = s0 + 0xffffffffffffff20\n 41094: ra = u64 [sp + 0xd8]\n 41098: s0 = u64 [sp + 0xd0]\n 41102: s1 = u64 [sp + 0xc8]\n 41106: sp = sp + 0xe0\n 41110: ret\n      : @603 (gas: 21)\n 41112: sp = sp + 0xfffffffffffffd40\n 41116: u64 [sp + 0x2b8] = ra\n 41120: u64 [sp + 0x2b0] = s0\n 41124: u64 [sp + 0x2a8] = s1\n 41128: s0 = sp + 0x2c0\n 41132: sp = sp & 0xffffffffffffffe0\n 41135: a3 = u64 [a1 + 0x10]\n 41138: a2 = u64 [a1 + 0x18]\n 41141: a4 = u64 [a1 + 0x8]\n 41144: a5 = u64 [a1]\n 41146: u64 [sp + 0x98] = a2\n 41150: u64 [sp + 0x88] = a4\n 41154: a1 = a4 | a2\n 41157: a2 = a5 | a3\n 41160: a2 = a2 | a1\n 41163: a2 = a2 >> 0x20\n 41166: u64 [sp + 0x90] = a3\n 41170: a1 = a1 | a3\n 41173: a1 = a1 << 0x20\n 41176: a1 = a1 | a2\n 41179: jump @633 if a1 != 0\n      : @604 (gas: 13)\n 41183: a1 = u64 [a0 + 0x18]\n 41186: u64 [sp + 0x40] = a1\n 41189: a1 = u64 [a0 + 0x10]\n 41192: u64 [sp + 0x58] = a1\n 41195: a1 = u64 [a0 + 0x8]\n 41198: u64 [sp + 0x48] = a1\n 41201: a0 = u64 [a0]\n 41203: u64 [sp + 0x50] = a0\n 41206: u64 [sp + 0x80] = a5\n 41210: i32 a0 = a5 + 0\n 41212: a1 = 0x20\n 41215: u64 [sp + 0x18] = a0\n 41218: ra = 532, jump @0\n      : @605 [@dyn 266] (gas: 80)\n 41225: a1 = u8 [a0 + 0x9]\n 41228: a2 = u8 [a0 + 0x8]\n 41231: a3 = u8 [a0 + 0xa]\n 41234: a4 = u8 [a0 + 0xb]\n 41237: a1 = a1 << 0x8\n 41240: a1 = a1 | a2\n 41243: a3 = a3 << 0x10\n 41246: a4 = a4 << 0x18\n 41249: a3 = a3 | a4\n 41252: a1 = a1 | a3\n 41255: a2 = u8 [a0 + 0xd]\n 41258: a3 = u8 [a0 + 0xc]\n 41261: a4 = u8 [a0 + 0xe]\n 41264: a5 = u8 [a0 + 0xf]\n 41267: a2 = a2 << 0x8\n 41270: a2 = a2 | a3\n 41273: a4 = a4 << 0x10\n 41276: a5 = a5 << 0x18\n 41279: a4 = a4 | a5\n 41282: a2 = a2 | a4\n 41285: a2 = a2 << 0x20\n 41288: t0 = a2 | a1\n 41291: a1 = u8 [a0 + 0x1]\n 41294: a2 = u8 [a0]\n 41296: a3 = u8 [a0 + 0x2]\n 41299: a4 = u8 [a0 + 0x3]\n 41302: a1 = a1 << 0x8\n 41305: a1 = a1 | a2\n 41308: a3 = a3 << 0x10\n 41311: a4 = a4 << 0x18\n 41314: a3 = a3 | a4\n 41317: a1 = a1 | a3\n 41320: a2 = u8 [a0 + 0x5]\n 41323: a3 = u8 [a0 + 0x4]\n 41326: a4 = u8 [a0 + 0x6]\n 41329: a5 = u8 [a0 + 0x7]\n 41332: a2 = a2 << 0x8\n 41335: a2 = a2 | a3\n 41338: a4 = a4 << 0x10\n 41341: a5 = a5 << 0x18\n 41344: a4 = a4 | a5\n 41347: a2 = a2 | a4\n 41350: a2 = a2 << 0x20\n 41353: s1 = a2 | a1\n 41356: a1 = u8 [a0 + 0x11]\n 41359: a2 = u8 [a0 + 0x10]\n 41362: a3 = u8 [a0 + 0x12]\n 41365: a4 = u8 [a0 + 0x13]\n 41368: a1 = a1 << 0x8\n 41371: a1 = a1 | a2\n 41374: a3 = a3 << 0x10\n 41377: a4 = a4 << 0x18\n 41380: a3 = a3 | a4\n 41383: a1 = a1 | a3\n 41386: a2 = u8 [a0 + 0x15]\n 41389: a3 = u8 [a0 + 0x14]\n 41392: a4 = u8 [a0 + 0x16]\n 41395: a5 = u8 [a0 + 0x17]\n 41398: a2 = a2 << 0x8\n 41401: a2 = a2 | a3\n 41404: a4 = a4 << 0x10\n 41407: a5 = a5 << 0x18\n 41410: a4 = a4 | a5\n 41413: a2 = a2 | a4\n 41416: a2 = a2 << 0x20\n 41419: a1 = a1 | a2\n 41422: u64 [sp + 0x60] = a1\n 41425: a1 = reverse a1\n 41427: u64 [sp + 0x68] = s1\n 41430: a3 = reverse s1\n 41432: u64 [sp + 0x70] = t0\n 41435: a2 = reverse t0\n 41437: u64 [sp + 0x30] = a2\n 41440: u64 [sp + 0x28] = a3\n 41443: a2 = a2 | a3\n 41446: u64 [sp + 0x38] = a1\n 41449: a1 = a1 <u 0x1\n 41452: u64 [sp + 0xd8] = a2\n 41456: a1 = 0 if a2 != 0\n 41458: jump @634 if a1 == 0\n      : @606 (gas: 36)\n 41462: a1 = u8 [a0 + 0x18]\n 41465: u64 [sp + 0xb8] = a1\n 41469: a1 = u8 [a0 + 0x19]\n 41472: u64 [sp + 0x78] = a1\n 41475: a1 = u8 [a0 + 0x1a]\n 41478: u64 [sp + 0xa8] = a1\n 41482: a1 = u8 [a0 + 0x1b]\n 41485: u64 [sp + 0xa0] = a1\n 41489: a1 = u8 [a0 + 0x1c]\n 41492: u64 [sp + 0xd0] = a1\n 41496: a1 = u8 [a0 + 0x1d]\n 41499: u64 [sp + 0xb0] = a1\n 41503: a1 = u8 [a0 + 0x1e]\n 41506: u64 [sp + 0xc8] = a1\n 41510: a0 = u8 [a0 + 0x1f]\n 41513: u64 [sp + 0xc0] = a0\n 41517: u32 [sp + 576] = 0x20\n 41522: a0 = u64 [sp + 0x58]\n 41525: u64 [sp + 0x270] = a0\n 41529: a0 = u64 [sp + 0x48]\n 41532: u64 [sp + 0x268] = a0\n 41536: a0 = u64 [sp + 0x50]\n 41539: u64 [sp + 0x260] = a0\n 41543: s1 = u64 [sp + 0x40]\n 41546: u64 [sp + 0x278] = s1\n 41550: u64 [sp + 664] = 0\n 41554: u64 [sp + 656] = 0\n 41558: u64 [sp + 648] = 0\n 41562: u64 [sp + 640] = 0\n 41566: i32 a1 = sp + 0x260\n 41570: i32 a3 = sp + 0x280\n 41574: i32 a4 = sp + 0x240\n 41578: a2 = 0xffffffffffffffff\n 41581: a0 = 0\n 41583: ecalli 7 // 'get_storage'\n 41585: fallthrough\n      : @607 (gas: 28)\n 41586: a0 = u64 [sp + 0x290]\n 41590: a1 = u64 [sp + 0x288]\n 41594: a2 = u64 [sp + 0x280]\n 41598: a3 = u64 [sp + 0x298]\n 41602: a4 = a0 << 0x3f\n 41605: a5 = a1 >> 0x1\n 41608: a4 = a4 | a5\n 41611: a5 = a3 << 0x3f\n 41614: a0 = a0 >> 0x1\n 41617: t2 = s1\n 41619: s1 = a0 | a5\n 41622: a1 = a1 << 0x3f\n 41625: a5 = a2 >> 0x1\n 41628: a1 = a1 | a5\n 41631: a5 = a3 >> 0x1\n 41634: a2 = a2 & 0x1\n 41637: a0 = -a2\n 41639: t0 = a2 <u 0x1\n 41642: a3 = a1 & 0x7f\n 41645: t1 = a0 & s1\n 41648: a4 = a4 & a0\n 41651: a3 = a1 if a2 != 0\n 41654: a1 = a0 & a5\n 41657: a0 = a3 <u 0x20\n 41660: a0 = 0 if a4 != 0\n 41662: a2 = t1 | a1\n 41665: a0 = 0 if a2 != 0\n 41667: jump @636 if t0 != a0\n      : @608 (gas: 47)\n 41671: a0 = u64 [sp + 0x78]\n 41674: a0 = a0 << 0x8\n 41677: a2 = u64 [sp + 0xb8]\n 41681: a0 = a0 | a2\n 41684: a2 = u64 [sp + 0xa8]\n 41688: a2 = a2 << 0x10\n 41691: a5 = u64 [sp + 0xa0]\n 41695: a5 = a5 << 0x18\n 41698: a2 = a2 | a5\n 41701: a0 = a0 | a2\n 41704: a2 = u64 [sp + 0xb0]\n 41708: a2 = a2 << 0x8\n 41711: a5 = u64 [sp + 0xd0]\n 41715: a2 = a2 | a5\n 41718: a5 = u64 [sp + 0xc8]\n 41722: a5 = a5 << 0x10\n 41725: s1 = u64 [sp + 0xc0]\n 41729: s1 = s1 << 0x18\n 41732: a5 = a5 | s1\n 41735: a2 = a2 | a5\n 41738: a2 = a2 << 0x20\n 41741: a0 = a0 | a2\n 41744: u64 [sp + 0xd0] = a0\n 41748: a0 = reverse a0\n 41750: u64 [sp + 0x20] = a0\n 41753: u64 [sp + 0x1e0] = a0\n 41757: u64 [sp + 0x200] = a3\n 41761: a0 = u64 [sp + 0x50]\n 41764: u64 [sp + 0x220] = a0\n 41768: a0 = u64 [sp + 0x38]\n 41771: u64 [sp + 0x1e8] = a0\n 41775: u64 [sp + 0x208] = a4\n 41779: a0 = u64 [sp + 0x48]\n 41782: u64 [sp + 0x228] = a0\n 41786: a0 = u64 [sp + 0x30]\n 41789: u64 [sp + 0x1f0] = a0\n 41793: u64 [sp + 0x210] = t1\n 41797: a0 = u64 [sp + 0x58]\n 41800: u64 [sp + 0x230] = a0\n 41804: s1 = u64 [sp + 0x28]\n 41807: u64 [sp + 0x1f8] = s1\n 41811: u64 [sp + 0x218] = a1\n 41815: a0 = sp + 0x220\n 41819: a1 = sp + 0x200\n 41823: a2 = sp + 0x1e0\n 41827: u64 [sp + 0x238] = t2\n 41831: ra = 534, jump @594\n      : @609 [@dyn 267] (gas: 16)\n 41837: a3 = u64 [sp + 0x20]\n 41840: a2 = u64 [sp + 0x38]\n 41843: a0 = a2 >u 0\n 41845: a1 = a3 <u 0x20\n 41848: a1 = a1 ^ 0x1\n 41851: a1 = a0 if a2 != 0\n 41854: a0 = u64 [sp + 0x30]\n 41857: a0 = a0 >u 0\n 41859: a2 = s1 >u 0\n 41861: a2 = a0 if s1 == 0\n 41864: a0 = u64 [sp + 0xd8]\n 41868: a2 = a1 if a0 == 0\n 41871: a4 = u64 [sp + 0x40]\n 41874: a5 = u64 [sp + 0x58]\n 41877: s1 = u64 [sp + 0x50]\n 41880: jump @620 if a2 == 0\n      : @610 (gas: 5)\n 41884: a3 = a3 & 0xffffffffffffffe0\n 41887: u64 [sp + 0x18] = a3\n 41890: a1 = 0x20\n 41893: a0 = 0\n 41895: ra = 536, jump @0\n      : @611 [@dyn 268] (gas: 70)\n 41902: a1 = u64 [sp + 0x40]\n 41905: a1 = reverse a1\n 41907: a2 = u64 [sp + 0x58]\n 41910: a2 = reverse a2\n 41912: a3 = u64 [sp + 0x48]\n 41915: a3 = reverse a3\n 41917: a4 = reverse s1\n 41919: a5 = a4 >> 0x38\n 41922: u8 [a0 + 0x1f] = a5\n 41925: a5 = a4 >> 0x30\n 41928: u8 [a0 + 0x1e] = a5\n 41931: a5 = a4 >> 0x28\n 41934: u8 [a0 + 0x1d] = a5\n 41937: a5 = a4 >> 0x20\n 41940: u8 [a0 + 0x1c] = a5\n 41943: a5 = a4 >> 0x18\n 41946: u8 [a0 + 0x1b] = a5\n 41949: a5 = a4 >> 0x10\n 41952: u8 [a0 + 0x1a] = a5\n 41955: a5 = a4 >> 0x8\n 41958: u8 [a0 + 0x19] = a5\n 41961: u8 [a0 + 0x18] = a4\n 41964: u8 [a0 + 0x10] = a3\n 41967: a4 = a3 >> 0x38\n 41970: u8 [a0 + 0x17] = a4\n 41973: a4 = a3 >> 0x30\n 41976: u8 [a0 + 0x16] = a4\n 41979: a4 = a3 >> 0x28\n 41982: u8 [a0 + 0x15] = a4\n 41985: a4 = a3 >> 0x20\n 41988: u8 [a0 + 0x14] = a4\n 41991: a4 = a3 >> 0x18\n 41994: u8 [a0 + 0x13] = a4\n 41997: a4 = a3 >> 0x10\n 42000: u8 [a0 + 0x12] = a4\n 42003: a3 = a3 >> 0x8\n 42006: u8 [a0 + 0x11] = a3\n 42009: u8 [a0 + 0x8] = a2\n 42012: a3 = a2 >> 0x38\n 42015: u8 [a0 + 0xf] = a3\n 42018: a3 = a2 >> 0x30\n 42021: u8 [a0 + 0xe] = a3\n 42024: a3 = a2 >> 0x28\n 42027: u8 [a0 + 0xd] = a3\n 42030: a3 = a2 >> 0x20\n 42033: u8 [a0 + 0xc] = a3\n 42036: a3 = a2 >> 0x18\n 42039: u8 [a0 + 0xb] = a3\n 42042: a3 = a2 >> 0x10\n 42045: u8 [a0 + 0xa] = a3\n 42048: a2 = a2 >> 0x8\n 42051: u8 [a0 + 0x9] = a2\n 42054: u8 [a0] = a1\n 42056: a2 = a1 >> 0x38\n 42059: u8 [a0 + 0x7] = a2\n 42062: a2 = a1 >> 0x30\n 42065: u8 [a0 + 0x6] = a2\n 42068: a2 = a1 >> 0x28\n 42071: u8 [a0 + 0x5] = a2\n 42074: a2 = a1 >> 0x20\n 42077: u8 [a0 + 0x4] = a2\n 42080: a2 = a1 >> 0x18\n 42083: u8 [a0 + 0x3] = a2\n 42086: a2 = a1 >> 0x10\n 42089: u8 [a0 + 0x2] = a2\n 42092: a1 = a1 >> 0x8\n 42095: u8 [a0 + 0x1] = a1\n 42098: a1 = 0x20\n 42101: a0 = 0\n 42103: ra = 538, jump @0\n      : @612 [@dyn 269] (gas: 5)\n 42110: i32 a0 = a0 + 0\n 42112: i32 a2 = sp + 0x280\n 42116: a1 = 0x20\n 42119: ecalli 8 // 'hash_keccak_256'\n 42121: fallthrough\n      : @613 (gas: 13)\n 42122: a0 = u64 [sp + 0x280]\n 42126: a1 = u64 [sp + 0x288]\n 42130: a2 = u64 [sp + 0x290]\n 42134: a3 = u64 [sp + 0x298]\n 42138: a0 = reverse a0\n 42140: u64 [sp + 0xd0] = a0\n 42144: t0 = reverse a1\n 42146: a0 = reverse a2\n 42148: u64 [sp + 0xd8] = a0\n 42152: a0 = reverse a3\n 42154: u64 [sp + 0xc0] = a0\n 42158: a0 = u64 [sp + 0x18]\n 42161: jump @624 if a0 == 0\n      : @614 (gas: 118)\n 42165: u64 [sp + 176] = 0\n 42169: u64 [sp + 184] = 0\n 42173: u64 [sp + 168] = 0\n 42177: ra = u64 [sp + 0x80]\n 42181: s1 = ra + 0x20\n 42184: a0 = s1 <u ra\n 42187: t2 = u64 [sp + 0x88]\n 42191: a2 = t2 + a0\n 42194: a3 = a2 <u t2\n 42197: a3 = a0 if a0 == 0\n 42200: t1 = u64 [sp + 0x90]\n 42204: a3 = a3 + t1\n 42207: a0 = a3 <u t1\n 42210: u64 [sp + 0xc8] = t0\n 42214: t0 = u64 [sp + 0x98]\n 42218: t0 = t0 + a0\n 42221: a4 = a3 >u 0\n 42223: a5 = t0 >u 0\n 42225: a5 = a4 if t0 == 0\n 42228: a4 = 0x100000000\n 42238: a1 = s1\n 42240: a0 = maxu(s1, a4)\n 42243: s1 = a4 if a5 == 0\n 42246: a1 = a4 if a2 == 0\n 42249: a0 = a1 if a2 != 0\n 42252: a1 = a3 | t0\n 42255: a0 = s1 if a1 != 0\n 42258: a4 = a2\n 42260: a4 = 0 if a5 == 0\n 42262: a4 = a2 if a1 == 0\n 42265: a1 = a3\n 42267: a1 = 0 if t0 == 0\n 42269: a1 = a3 if t0 == 0\n 42272: a2 = t2 ^ 0xffffffffffffffff\n 42275: a4 = a4 + a2\n 42278: a3 = ra ^ 0xffffffffffffffff\n 42281: a0 = a0 + a3\n 42284: a3 = a0 <u a3\n 42287: a4 = a4 + a3\n 42290: a5 = a4 ^ a2\n 42293: a2 = a4 <u a2\n 42296: a2 = a3 if a5 == 0\n 42299: a5 = t1 ^ 0xffffffffffffffff\n 42302: u64 [sp + 0x78] = a5\n 42305: a5 = a5 + a1\n 42308: s1 = a5 + a2\n 42311: a1 = s1 << 0x3b\n 42314: a2 = a4 >> 0x5\n 42317: a1 = a1 | a2\n 42320: a4 = a4 << 0x3b\n 42323: a0 = a0 >> 0x5\n 42326: a2 = a0 | a4\n 42329: u64 [sp + 0xa0] = a2\n 42333: a4 = u64 [sp + 0x18]\n 42336: a0 = a4 <u 0x1\n 42339: a3 = -a0\n 42341: ra = a0 << 0x3b\n 42344: a4 = a4 + 0xffffffffffffffff\n 42347: a4 = a4 >> 0x5\n 42350: a0 = a4 - ra\n 42353: t2 = a1 ^ a3\n 42356: a4 = a1 <u a3\n 42359: t1 = a2 <u a0\n 42362: t1 = a4 if t2 != 0\n 42365: a2 = u64 [sp + 0x98]\n 42369: a4 = a2 ^ 0xffffffffffffffff\n 42372: t0 = t0 + a4\n 42375: a2 = u64 [sp + 0x78]\n 42378: a4 = a5 <u a2\n 42381: a4 = a4 + t0\n 42384: a5 = s1 <u a5\n 42387: a4 = a4 + a5\n 42390: s1 = s1 >> 0x5\n 42393: a5 = a4 << 0x3b\n 42396: a5 = a5 | s1\n 42399: a4 = a4 >> 0x5\n 42402: s1 = a3 >> 0x5\n 42405: t0 = s1 - ra\n 42408: a2 = a5 <u t0\n 42411: t2 = a4 ^ s1\n 42414: ra = a4 <u s1\n 42417: ra = a2 if t2 == 0\n 42420: a2 = a5 ^ t0\n 42423: a2 = a2 | t2\n 42426: ra = t1 if a2 == 0\n 42429: a2 = u64 [sp + 0xa0]\n 42433: a2 = a0 if ra == 0\n 42436: a1 = a3 if ra == 0\n 42439: a4 = s1 if ra == 0\n 42442: a5 = t0 if ra == 0\n 42445: a0 = a5 >> 0x3b\n 42448: a4 = a4 << 0x5\n 42451: t0 = a4 | a0\n 42454: a4 = u64 [sp + 0xb0]\n 42458: a0 = a1 >> 0x3b\n 42461: a5 = a5 << 0x5\n 42464: t2 = a5 | a0\n 42467: a5 = u64 [sp + 0xb8]\n 42471: a3 = a2 >> 0x3b\n 42474: a1 = a1 << 0x5\n 42477: a0 = a1 | a3\n 42480: t1 = a2 << 0x5\n 42483: a3 = t1 + 0x40\n 42486: u64 [sp + 0x78] = a3\n 42489: a3 = a3 <u t1\n 42492: s1 = u64 [sp + 0xa8]\n 42496: a1 = a0 + a3\n 42499: u64 [sp + 0x70] = a1\n 42502: a1 = a1 <u a0\n 42505: a1 = a3 if a3 == 0\n 42508: a1 = a1 + t2\n 42511: u64 [sp + 0x68] = a1\n 42514: a1 = a1 <u t2\n 42517: a1 = a1 + t0\n 42520: u64 [sp + 0x60] = a1\n 42523: a2 = 0x20\n 42526: a3 = u64 [sp + 0xc8]\n 42530: fallthrough\n      : @615 (gas: 31)\n 42531: u64 [sp + 0xa8] = s1\n 42535: u64 [sp + 0xc8] = a3\n 42539: a0 = u64 [sp + 0x80]\n 42543: a0 = a0 + a2\n 42546: u64 [sp + 0xa0] = a2\n 42550: a1 = a0 <u a2\n 42553: a2 = u64 [sp + 0x88]\n 42557: a2 = a2 + a4\n 42560: a2 = a2 + a1\n 42563: a3 = a2 ^ a4\n 42566: u64 [sp + 0xb0] = a4\n 42570: a4 = a2 <u a4\n 42573: a4 = a1 if a3 == 0\n 42576: a1 = u64 [sp + 0x90]\n 42580: a1 = a1 + a5\n 42583: u64 [sp + 0xb8] = a5\n 42587: a3 = a1 <u a5\n 42590: a5 = u64 [sp + 0x98]\n 42594: a5 = a5 + s1\n 42597: a3 = a3 + a5\n 42600: a4 = a4 + a1\n 42603: a1 = a4 <u a1\n 42606: a1 = a1 + a3\n 42609: a1 = a1 | a2\n 42612: a2 = a0 | a4\n 42615: a2 = a2 | a1\n 42618: a1 = a1 | a4\n 42621: a2 = a2 >> 0x20\n 42624: a1 = a1 << 0x20\n 42627: a1 = a1 | a2\n 42630: jump @633 if a1 != 0\n      : @616 (gas: 3)\n 42634: i32 a0 = a0 + 0\n 42636: a1 = 0x20\n 42639: ra = 540, jump @0\n      : @617 [@dyn 270] (gas: 111)\n 42646: a1 = u8 [a0 + 0x1]\n 42649: a2 = u8 [a0]\n 42651: a3 = u8 [a0 + 0x2]\n 42654: a4 = u8 [a0 + 0x3]\n 42657: a1 = a1 << 0x8\n 42660: a1 = a1 | a2\n 42663: a3 = a3 << 0x10\n 42666: a4 = a4 << 0x18\n 42669: a3 = a3 | a4\n 42672: a1 = a1 | a3\n 42675: a2 = u8 [a0 + 0x5]\n 42678: a3 = u8 [a0 + 0x4]\n 42681: a4 = u8 [a0 + 0x6]\n 42684: a5 = u8 [a0 + 0x7]\n 42687: a2 = a2 << 0x8\n 42690: a2 = a2 | a3\n 42693: a4 = a4 << 0x10\n 42696: a5 = a5 << 0x18\n 42699: a4 = a4 | a5\n 42702: a2 = a2 | a4\n 42705: a2 = a2 << 0x20\n 42708: t0 = a2 | a1\n 42711: a2 = u8 [a0 + 0x9]\n 42714: a3 = u8 [a0 + 0x8]\n 42717: a4 = u8 [a0 + 0xa]\n 42720: a5 = u8 [a0 + 0xb]\n 42723: a2 = a2 << 0x8\n 42726: a2 = a2 | a3\n 42729: a4 = a4 << 0x10\n 42732: a5 = a5 << 0x18\n 42735: a4 = a4 | a5\n 42738: a2 = a2 | a4\n 42741: a3 = u8 [a0 + 0xd]\n 42744: a4 = u8 [a0 + 0xc]\n 42747: a5 = u8 [a0 + 0xe]\n 42750: s1 = u8 [a0 + 0xf]\n 42753: a3 = a3 << 0x8\n 42756: a3 = a3 | a4\n 42759: a5 = a5 << 0x10\n 42762: s1 = s1 << 0x18\n 42765: a5 = a5 | s1\n 42768: a3 = a3 | a5\n 42771: a3 = a3 << 0x20\n 42774: a2 = a2 | a3\n 42777: a3 = u8 [a0 + 0x11]\n 42780: a4 = u8 [a0 + 0x10]\n 42783: a5 = u8 [a0 + 0x12]\n 42786: s1 = u8 [a0 + 0x13]\n 42789: a3 = a3 << 0x8\n 42792: a3 = a3 | a4\n 42795: a5 = a5 << 0x10\n 42798: s1 = s1 << 0x18\n 42801: a5 = a5 | s1\n 42804: a3 = a3 | a5\n 42807: a4 = u8 [a0 + 0x15]\n 42810: a5 = u8 [a0 + 0x14]\n 42813: s1 = u8 [a0 + 0x16]\n 42816: a1 = u8 [a0 + 0x17]\n 42819: a4 = a4 << 0x8\n 42822: a4 = a4 | a5\n 42825: s1 = s1 << 0x10\n 42828: a1 = a1 << 0x18\n 42831: a1 = a1 | s1\n 42834: a1 = a1 | a4\n 42837: a1 = a1 << 0x20\n 42840: a3 = a3 | a1\n 42843: a1 = u8 [a0 + 0x19]\n 42846: a4 = u8 [a0 + 0x18]\n 42849: a5 = u8 [a0 + 0x1a]\n 42852: s1 = u8 [a0 + 0x1b]\n 42855: a1 = a1 << 0x8\n 42858: a1 = a1 | a4\n 42861: a5 = a5 << 0x10\n 42864: s1 = s1 << 0x18\n 42867: a5 = a5 | s1\n 42870: a1 = a1 | a5\n 42873: a4 = u8 [a0 + 0x1d]\n 42876: a5 = u8 [a0 + 0x1c]\n 42879: s1 = u8 [a0 + 0x1e]\n 42882: a0 = u8 [a0 + 0x1f]\n 42885: a4 = a4 << 0x8\n 42888: a4 = a4 | a5\n 42891: s1 = s1 << 0x10\n 42894: a0 = a0 << 0x18\n 42897: a0 = a0 | s1\n 42900: a0 = a0 | a4\n 42903: a0 = a0 << 0x20\n 42906: a0 = a0 | a1\n 42909: a0 = reverse a0\n 42911: a1 = reverse a3\n 42913: a2 = reverse a2\n 42915: a3 = reverse t0\n 42917: a4 = u64 [sp + 0xd0]\n 42921: u64 [sp + 0x278] = a4\n 42925: a4 = u64 [sp + 0xc8]\n 42929: u64 [sp + 0x270] = a4\n 42933: a4 = u64 [sp + 0xd8]\n 42937: u64 [sp + 0x268] = a4\n 42941: s1 = u64 [sp + 0xc0]\n 42945: u64 [sp + 0x260] = s1\n 42949: u64 [sp + 0x298] = a3\n 42953: u64 [sp + 0x290] = a2\n 42957: u64 [sp + 0x288] = a1\n 42961: u64 [sp + 0x280] = a0\n 42965: i32 a1 = sp + 0x260\n 42969: i32 a3 = sp + 0x280\n 42973: a2 = 0xffffffffffffffff\n 42976: a4 = 0x20\n 42979: a0 = 0\n 42981: ecalli 13 // 'set_storage'\n 42983: fallthrough\n      : @618 (gas: 42)\n 42984: s1 = s1 + 0x1\n 42987: a0 = s1 <u 0x1\n 42990: a1 = u64 [sp + 0xd8]\n 42994: a1 = a1 + a0\n 42997: u64 [sp + 0xc0] = s1\n 43001: u64 [sp + 0xd8] = a1\n 43005: a0 = s1 | a1\n 43008: a0 = a0 <u 0x1\n 43011: a1 = u64 [sp + 0xc8]\n 43015: t0 = a1 + a0\n 43018: a2 = t0 <u a1\n 43021: a0 = u64 [sp + 0xa0]\n 43025: a1 = a0 + 0x20\n 43028: a0 = a1 <u a0\n 43031: a3 = u64 [sp + 0xb0]\n 43035: t2 = a3 + a0\n 43038: a3 = t2 <u a3\n 43041: a3 = a0 if a0 == 0\n 43044: a4 = u64 [sp + 0xb8]\n 43048: a0 = a4 + a3\n 43051: a3 = a0 <u a4\n 43054: s1 = u64 [sp + 0xa8]\n 43058: s1 = s1 + a3\n 43061: a3 = u64 [sp + 0x68]\n 43064: a3 = a3 ^ a0\n 43067: a4 = u64 [sp + 0x78]\n 43070: a4 = a4 ^ a1\n 43073: a3 = a3 | a4\n 43076: a4 = u64 [sp + 0x60]\n 43079: a4 = a4 ^ s1\n 43082: a5 = u64 [sp + 0x70]\n 43085: a5 = t2 ^ a5\n 43088: a4 = a4 | a5\n 43091: t1 = a3 | a4\n 43094: a3 = u64 [sp + 0xd0]\n 43098: a3 = a3 + a2\n 43101: u64 [sp + 0xd0] = a3\n 43105: a2 = a1\n 43107: a4 = t2\n 43109: a5 = a0\n 43111: a3 = t0\n 43113: jump @615 if t1 != 0\n      : @619 (gas: 1)\n 43117: jump @625\n      : @620 (gas: 8)\n 43120: a0 = u64 [sp + 0x68]\n 43123: a1 = u64 [sp + 0x60]\n 43126: a0 = a0 | a1\n 43129: a1 = u64 [sp + 0x70]\n 43132: a2 = u64 [sp + 0xd0]\n 43136: a1 = a1 | a2\n 43139: a0 = a0 | a1\n 43142: jump @630 if a0 == 0\n      : @621 (gas: 10)\n 43146: a0 = u64 [sp + 0x98]\n 43150: a1 = u64 [sp + 0x90]\n 43154: a0 = a0 | a1\n 43157: a1 = 0xffffffe0\n 43167: a2 = u64 [sp + 0x80]\n 43171: a1 = a2 <u a1\n 43174: a2 = u64 [sp + 0x88]\n 43178: a1 = 0 if a2 != 0\n 43180: a1 = 0 if a0 != 0\n 43182: jump @633 if a1 == 0\n      : @622 (gas: 4)\n 43186: a0 = u64 [sp + 0x18]\n 43189: i32 a0 = a0 + 0x20\n 43192: a1 = 0x20\n 43195: ra = 542, jump @0\n      : @623 [@dyn 271] (gas: 280)\n 43202: a1 = u8 [a0 + 0x19]\n 43205: a2 = u8 [a0 + 0x18]\n 43208: a3 = u8 [a0 + 0x1a]\n 43211: a4 = u8 [a0 + 0x1b]\n 43214: a1 = a1 << 0x8\n 43217: a1 = a1 | a2\n 43220: a3 = a3 << 0x10\n 43223: a4 = a4 << 0x18\n 43226: a3 = a3 | a4\n 43229: a1 = a1 | a3\n 43232: a2 = u8 [a0 + 0x1d]\n 43235: a3 = u8 [a0 + 0x1c]\n 43238: a4 = u8 [a0 + 0x1e]\n 43241: a5 = u8 [a0 + 0x1f]\n 43244: a2 = a2 << 0x8\n 43247: a2 = a2 | a3\n 43250: a4 = a4 << 0x10\n 43253: a5 = a5 << 0x18\n 43256: a4 = a4 | a5\n 43259: a2 = a2 | a4\n 43262: a2 = a2 << 0x20\n 43265: t0 = a2 | a1\n 43268: a1 = u8 [a0 + 0x11]\n 43271: a2 = u8 [a0 + 0x10]\n 43274: a3 = u8 [a0 + 0x12]\n 43277: a4 = u8 [a0 + 0x13]\n 43280: a1 = a1 << 0x8\n 43283: a1 = a1 | a2\n 43286: a3 = a3 << 0x10\n 43289: a4 = a4 << 0x18\n 43292: a3 = a3 | a4\n 43295: a1 = a1 | a3\n 43298: a2 = u8 [a0 + 0x15]\n 43301: a3 = u8 [a0 + 0x14]\n 43304: a4 = u8 [a0 + 0x16]\n 43307: a5 = u8 [a0 + 0x17]\n 43310: a2 = a2 << 0x8\n 43313: a2 = a2 | a3\n 43316: a4 = a4 << 0x10\n 43319: a5 = a5 << 0x18\n 43322: a4 = a4 | a5\n 43325: a2 = a2 | a4\n 43328: a2 = a2 << 0x20\n 43331: a1 = a1 | a2\n 43334: u64 [sp + 0xd8] = a1\n 43338: a1 = u8 [a0 + 0x9]\n 43341: a3 = u8 [a0 + 0x8]\n 43344: a4 = u8 [a0 + 0xa]\n 43347: a5 = u8 [a0 + 0xb]\n 43350: a1 = a1 << 0x8\n 43353: a1 = a1 | a3\n 43356: a4 = a4 << 0x10\n 43359: a5 = a5 << 0x18\n 43362: a4 = a4 | a5\n 43365: a1 = a1 | a4\n 43368: a3 = u8 [a0 + 0xd]\n 43371: a4 = u8 [a0 + 0xc]\n 43374: a5 = u8 [a0 + 0xe]\n 43377: s1 = u8 [a0 + 0xf]\n 43380: a3 = a3 << 0x8\n 43383: a3 = a3 | a4\n 43386: a5 = a5 << 0x10\n 43389: s1 = s1 << 0x18\n 43392: a5 = a5 | s1\n 43395: a3 = a3 | a5\n 43398: a3 = a3 << 0x20\n 43401: a1 = a1 | a3\n 43404: u64 [sp + 0xd0] = a1\n 43408: a1 = u8 [a0 + 0x1]\n 43411: a4 = u8 [a0]\n 43413: a5 = u8 [a0 + 0x2]\n 43416: s1 = u8 [a0 + 0x3]\n 43419: a1 = a1 << 0x8\n 43422: a1 = a1 | a4\n 43425: a5 = a5 << 0x10\n 43428: s1 = s1 << 0x18\n 43431: a5 = a5 | s1\n 43434: a1 = a1 | a5\n 43437: a4 = u8 [a0 + 0x5]\n 43440: a5 = u8 [a0 + 0x4]\n 43443: s1 = u8 [a0 + 0x6]\n 43446: a0 = u8 [a0 + 0x7]\n 43449: a4 = a4 << 0x8\n 43452: a4 = a4 | a5\n 43455: s1 = s1 << 0x10\n 43458: a0 = a0 << 0x18\n 43461: a0 = a0 | s1\n 43464: a0 = a0 | a4\n 43467: a0 = a0 << 0x20\n 43470: ra = a0 | a1\n 43473: u8 [sp + 479] = 0\n 43477: u8 [sp + 478] = 0\n 43481: u8 [sp + 477] = 0\n 43485: u8 [sp + 476] = 0\n 43489: u8 [sp + 475] = 0\n 43493: u8 [sp + 474] = 0\n 43497: u8 [sp + 473] = 0\n 43501: u8 [sp + 472] = 0\n 43505: u8 [sp + 471] = 0\n 43509: u8 [sp + 470] = 0\n 43513: u8 [sp + 469] = 0\n 43517: u8 [sp + 468] = 0\n 43521: u8 [sp + 467] = 0\n 43525: u8 [sp + 466] = 0\n 43529: u8 [sp + 465] = 0\n 43533: u8 [sp + 464] = 0\n 43537: u8 [sp + 463] = 0\n 43541: u8 [sp + 462] = 0\n 43545: u8 [sp + 461] = 0\n 43549: u8 [sp + 460] = 0\n 43553: u8 [sp + 459] = 0\n 43557: u8 [sp + 458] = 0\n 43561: u8 [sp + 457] = 0\n 43565: u8 [sp + 456] = 0\n 43569: u8 [sp + 455] = 0\n 43573: u8 [sp + 454] = 0\n 43577: u8 [sp + 453] = 0\n 43581: u8 [sp + 452] = 0\n 43585: u8 [sp + 451] = 0\n 43589: u8 [sp + 450] = 0\n 43593: u8 [sp + 449] = 0\n 43597: u8 [sp + 448] = 0\n 43601: u8 [sp + 447] = 0xff\n 43607: u8 [sp + 446] = 0xff\n 43613: u8 [sp + 445] = 0xff\n 43619: u8 [sp + 443] = 0xff\n 43625: u8 [sp + 440] = 0xffffffffffffffff\n 43630: u8 [sp + 439] = 0xff\n 43636: u8 [sp + 438] = 0xff\n 43642: u8 [sp + 437] = 0xff\n 43648: u8 [sp + 435] = 0xff\n 43654: u8 [sp + 432] = 0xffffffffffffffff\n 43659: u8 [sp + 431] = 0xff\n 43665: u8 [sp + 430] = 0xff\n 43671: u8 [sp + 429] = 0xff\n 43677: u8 [sp + 427] = 0xff\n 43683: u8 [sp + 424] = 0xffffffffffffffff\n 43688: u8 [sp + 423] = 0xff\n 43694: u8 [sp + 422] = 0xff\n 43700: u8 [sp + 421] = 0xff\n 43706: u8 [sp + 419] = 0xff\n 43712: u8 [sp + 416] = 0xffffffffffffffff\n 43717: a1 = 0xffffffff\n 43727: u8 [sp + 0x1bc] = a1\n 43731: a5 = 0xffffffffffff\n 43741: u8 [sp + 0x1ba] = a5\n 43745: a4 = 0xffffffffffffff\n 43755: u8 [sp + 0x1b9] = a4\n 43759: u8 [sp + 0x1b4] = a1\n 43763: u8 [sp + 0x1b2] = a5\n 43767: u8 [sp + 0x1b1] = a4\n 43771: u8 [sp + 0x1ac] = a1\n 43775: u8 [sp + 0x1aa] = a5\n 43779: u8 [sp + 0x1a9] = a4\n 43783: u8 [sp + 0x1a4] = a1\n 43787: u8 [sp + 0x1a2] = a5\n 43791: u8 [sp + 0x1a1] = a4\n 43795: t2 = u64 [sp + 0x20]\n 43798: a4 = t2 & 0x1f\n 43801: a1 = sp + 0x1a0\n 43805: a4 = a4 + a1\n 43808: a1 = u8 [a4 + 0x19]\n 43811: a5 = u8 [a4 + 0x18]\n 43814: s1 = u8 [a4 + 0x1a]\n 43817: a2 = u8 [a4 + 0x1b]\n 43820: a1 = a1 << 0x8\n 43823: a1 = a1 | a5\n 43826: s1 = s1 << 0x10\n 43829: a2 = a2 << 0x18\n 43832: a2 = a2 | s1\n 43835: a1 = a1 | a2\n 43838: a2 = u8 [a4 + 0x1d]\n 43841: a5 = u8 [a4 + 0x1c]\n 43844: s1 = u8 [a4 + 0x1e]\n 43847: a3 = u8 [a4 + 0x1f]\n 43850: a2 = a2 << 0x8\n 43853: a2 = a2 | a5\n 43856: s1 = s1 << 0x10\n 43859: a3 = a3 << 0x18\n 43862: a3 = a3 | s1\n 43865: a2 = a2 | a3\n 43868: a2 = a2 << 0x20\n 43871: t1 = a2 | a1\n 43874: a1 = u8 [a4 + 0x11]\n 43877: a2 = u8 [a4 + 0x10]\n 43880: a3 = u8 [a4 + 0x12]\n 43883: s1 = u8 [a4 + 0x13]\n 43886: a1 = a1 << 0x8\n 43889: a1 = a1 | a2\n 43892: a3 = a3 << 0x10\n 43895: s1 = s1 << 0x18\n 43898: a3 = a3 | s1\n 43901: a1 = a1 | a3\n 43904: a2 = u8 [a4 + 0x15]\n 43907: a3 = u8 [a4 + 0x14]\n 43910: s1 = u8 [a4 + 0x16]\n 43913: a0 = u8 [a4 + 0x17]\n 43916: a2 = a2 << 0x8\n 43919: a2 = a2 | a3\n 43922: s1 = s1 << 0x10\n 43925: a0 = a0 << 0x18\n 43928: a0 = a0 | s1\n 43931: a0 = a0 | a2\n 43934: a0 = a0 << 0x20\n 43937: s1 = a0 | a1\n 43940: a0 = u8 [a4 + 0x9]\n 43943: a1 = u8 [a4 + 0x8]\n 43946: a2 = u8 [a4 + 0xa]\n 43949: a3 = u8 [a4 + 0xb]\n 43952: a0 = a0 << 0x8\n 43955: a0 = a0 | a1\n 43958: a2 = a2 << 0x10\n 43961: a3 = a3 << 0x18\n 43964: a2 = a2 | a3\n 43967: a5 = a2 | a0\n 43970: a1 = u8 [a4 + 0xd]\n 43973: a2 = u8 [a4 + 0xc]\n 43976: a3 = u8 [a4 + 0xe]\n 43979: a0 = u8 [a4 + 0xf]\n 43982: a1 = a1 << 0x8\n 43985: a1 = a1 | a2\n 43988: a3 = a3 << 0x10\n 43991: a0 = a0 << 0x18\n 43994: a0 = a0 | a3\n 43997: a0 = a0 | a1\n 44000: a0 = a0 << 0x20\n 44003: a1 = a0 | a5\n 44006: a0 = u8 [a4 + 0x1]\n 44009: a2 = u8 [a4]\n 44011: a3 = u8 [a4 + 0x2]\n 44014: a5 = u8 [a4 + 0x3]\n 44017: a0 = a0 << 0x8\n 44020: a0 = a0 | a2\n 44023: a3 = a3 << 0x10\n 44026: a5 = a5 << 0x18\n 44029: a3 = a3 | a5\n 44032: a0 = a0 | a3\n 44035: a2 = u8 [a4 + 0x5]\n 44038: a3 = u8 [a4 + 0x4]\n 44041: a5 = u8 [a4 + 0x6]\n 44044: a4 = u8 [a4 + 0x7]\n 44047: a2 = a2 << 0x8\n 44050: a2 = a2 | a3\n 44053: a5 = a5 << 0x10\n 44056: a4 = a4 << 0x18\n 44059: a4 = a4 | a5\n 44062: a2 = a2 | a4\n 44065: a2 = a2 << 0x20\n 44068: a0 = a0 | a2\n 44071: a2 = reverse t0\n 44073: t0 = a2 & ~a0\n 44076: a0 = u64 [sp + 0xd8]\n 44080: a0 = reverse a0\n 44082: a2 = a0 & ~a1\n 44085: a0 = reverse ra\n 44087: a1 = u64 [sp + 0xd0]\n 44091: a1 = reverse a1\n 44093: a1 = a1 & ~s1\n 44096: a0 = a0 & ~t1\n 44099: a4 = t2 >> 0x3f\n 44102: a3 = u64 [sp + 0x38]\n 44105: a5 = a3 << 0x1\n 44108: a4 = a4 | a5\n 44111: a5 = a3 >> 0x3f\n 44114: a3 = u64 [sp + 0x30]\n 44117: s1 = a3 << 0x1\n 44120: a5 = a5 | s1\n 44123: s1 = a3 >> 0x3f\n 44126: a3 = u64 [sp + 0x28]\n 44129: a3 = a3 << 0x1\n 44132: a3 = a3 | s1\n 44135: t1 = a0 | a3\n 44138: a1 = a1 | a5\n 44141: a2 = a2 | a4\n 44144: a3 = t2 << 0x1\n 44147: a3 = t0 | a3\n 44150: a4 = u64 [sp + 0x40]\n 44153: a5 = u64 [sp + 0x58]\n 44156: s1 = u64 [sp + 0x50]\n 44159: jump @631\n      : @624 (gas: 4)\n 44162: t2 = 0\n 44164: s1 = 0\n 44166: a1 = 0x20\n 44169: fallthrough\n      : @625 (gas: 10)\n 44170: a5 = u64 [sp + 0x20]\n 44173: a2 = u64 [sp + 0x18]\n 44176: a2 = a2 ^ a5\n 44179: a3 = u64 [sp + 0x30]\n 44182: a2 = a2 | a3\n 44185: a3 = u64 [sp + 0x38]\n 44188: a4 = u64 [sp + 0x28]\n 44191: a3 = a3 | a4\n 44194: a2 = a2 | a3\n 44197: jump @629 if a2 == 0\n      : @626 (gas: 27)\n 44201: u64 [sp + 0xc8] = t0\n 44205: a2 = u64 [sp + 0x80]\n 44209: a2 = a2 + a1\n 44212: a3 = a2 <u a1\n 44215: a4 = u64 [sp + 0x88]\n 44219: a4 = a4 + t2\n 44222: a4 = a4 + a3\n 44225: a5 = a4 ^ t2\n 44228: a1 = a4 <u t2\n 44231: a1 = a3 if a5 == 0\n 44234: a3 = u64 [sp + 0x90]\n 44238: a3 = a3 + a0\n 44241: a1 = a1 + a3\n 44244: a5 = a1 <u a3\n 44247: a0 = a3 <u a0\n 44250: a3 = u64 [sp + 0x98]\n 44254: a3 = a3 + s1\n 44257: a0 = a0 + a3\n 44260: a0 = a0 + a5\n 44263: a3 = a2 | a1\n 44266: a0 = a0 | a4\n 44269: a3 = a3 | a0\n 44272: a3 = a3 >> 0x20\n 44275: a0 = a0 | a1\n 44278: a0 = a0 << 0x20\n 44281: a0 = a0 | a3\n 44284: jump @633 if a0 != 0\n      : @627 (gas: 3)\n 44288: i32 a0 = a2 + 0\n 44290: a1 = 0x20\n 44293: ra = 544, jump @0\n      : @628 [@dyn 272] (gas: 277)\n 44300: a1 = u8 [a0 + 0x19]\n 44303: a2 = u8 [a0 + 0x18]\n 44306: a3 = u8 [a0 + 0x1a]\n 44309: a4 = u8 [a0 + 0x1b]\n 44312: a1 = a1 << 0x8\n 44315: a1 = a1 | a2\n 44318: a3 = a3 << 0x10\n 44321: a4 = a4 << 0x18\n 44324: a3 = a3 | a4\n 44327: a1 = a1 | a3\n 44330: a2 = u8 [a0 + 0x1d]\n 44333: a3 = u8 [a0 + 0x1c]\n 44336: a4 = u8 [a0 + 0x1e]\n 44339: a5 = u8 [a0 + 0x1f]\n 44342: a2 = a2 << 0x8\n 44345: a2 = a2 | a3\n 44348: a4 = a4 << 0x10\n 44351: a5 = a5 << 0x18\n 44354: a4 = a4 | a5\n 44357: a2 = a2 | a4\n 44360: a2 = a2 << 0x20\n 44363: a1 = a1 | a2\n 44366: u64 [sp + 0xb8] = a1\n 44370: a1 = u8 [a0 + 0x11]\n 44373: a2 = u8 [a0 + 0x10]\n 44376: a3 = u8 [a0 + 0x12]\n 44379: a4 = u8 [a0 + 0x13]\n 44382: a1 = a1 << 0x8\n 44385: a1 = a1 | a2\n 44388: a3 = a3 << 0x10\n 44391: a4 = a4 << 0x18\n 44394: a3 = a3 | a4\n 44397: a1 = a1 | a3\n 44400: a2 = u8 [a0 + 0x15]\n 44403: a3 = u8 [a0 + 0x14]\n 44406: a4 = u8 [a0 + 0x16]\n 44409: a5 = u8 [a0 + 0x17]\n 44412: a2 = a2 << 0x8\n 44415: a2 = a2 | a3\n 44418: a4 = a4 << 0x10\n 44421: a5 = a5 << 0x18\n 44424: a4 = a4 | a5\n 44427: a2 = a2 | a4\n 44430: a2 = a2 << 0x20\n 44433: t1 = a2 | a1\n 44436: a1 = u8 [a0 + 0x9]\n 44439: a3 = u8 [a0 + 0x8]\n 44442: a4 = u8 [a0 + 0xa]\n 44445: a5 = u8 [a0 + 0xb]\n 44448: a1 = a1 << 0x8\n 44451: a1 = a1 | a3\n 44454: a4 = a4 << 0x10\n 44457: a5 = a5 << 0x18\n 44460: a4 = a4 | a5\n 44463: a1 = a1 | a4\n 44466: a3 = u8 [a0 + 0xd]\n 44469: a4 = u8 [a0 + 0xc]\n 44472: a5 = u8 [a0 + 0xe]\n 44475: s1 = u8 [a0 + 0xf]\n 44478: a3 = a3 << 0x8\n 44481: a3 = a3 | a4\n 44484: a5 = a5 << 0x10\n 44487: s1 = s1 << 0x18\n 44490: a5 = a5 | s1\n 44493: a3 = a3 | a5\n 44496: a3 = a3 << 0x20\n 44499: t2 = a3 | a1\n 44502: a1 = u8 [a0 + 0x1]\n 44505: a4 = u8 [a0]\n 44507: a5 = u8 [a0 + 0x2]\n 44510: s1 = u8 [a0 + 0x3]\n 44513: a1 = a1 << 0x8\n 44516: a1 = a1 | a4\n 44519: a5 = a5 << 0x10\n 44522: s1 = s1 << 0x18\n 44525: a5 = a5 | s1\n 44528: a1 = a1 | a5\n 44531: a4 = u8 [a0 + 0x5]\n 44534: a5 = u8 [a0 + 0x4]\n 44537: s1 = u8 [a0 + 0x6]\n 44540: a0 = u8 [a0 + 0x7]\n 44543: a4 = a4 << 0x8\n 44546: a4 = a4 | a5\n 44549: s1 = s1 << 0x10\n 44552: a0 = a0 << 0x18\n 44555: a0 = a0 | s1\n 44558: a0 = a0 | a4\n 44561: a0 = a0 << 0x20\n 44564: ra = a0 | a1\n 44567: u8 [sp + 415] = 0\n 44571: u8 [sp + 414] = 0\n 44575: u8 [sp + 413] = 0\n 44579: u8 [sp + 412] = 0\n 44583: u8 [sp + 411] = 0\n 44587: u8 [sp + 410] = 0\n 44591: u8 [sp + 409] = 0\n 44595: u8 [sp + 408] = 0\n 44599: u8 [sp + 407] = 0\n 44603: u8 [sp + 406] = 0\n 44607: u8 [sp + 405] = 0\n 44611: u8 [sp + 404] = 0\n 44615: u8 [sp + 403] = 0\n 44619: u8 [sp + 402] = 0\n 44623: u8 [sp + 401] = 0\n 44627: u8 [sp + 400] = 0\n 44631: u8 [sp + 399] = 0\n 44635: u8 [sp + 398] = 0\n 44639: u8 [sp + 397] = 0\n 44643: u8 [sp + 396] = 0\n 44647: u8 [sp + 395] = 0\n 44651: u8 [sp + 394] = 0\n 44655: u8 [sp + 393] = 0\n 44659: u8 [sp + 392] = 0\n 44663: u8 [sp + 391] = 0\n 44667: u8 [sp + 390] = 0\n 44671: u8 [sp + 389] = 0\n 44675: u8 [sp + 388] = 0\n 44679: u8 [sp + 387] = 0\n 44683: u8 [sp + 386] = 0\n 44687: u8 [sp + 385] = 0\n 44691: u8 [sp + 384] = 0\n 44695: u8 [sp + 383] = 0xff\n 44701: u8 [sp + 382] = 0xff\n 44707: u8 [sp + 381] = 0xff\n 44713: u8 [sp + 379] = 0xff\n 44719: u8 [sp + 376] = 0xffffffffffffffff\n 44724: u8 [sp + 375] = 0xff\n 44730: u8 [sp + 374] = 0xff\n 44736: u8 [sp + 373] = 0xff\n 44742: u8 [sp + 371] = 0xff\n 44748: u8 [sp + 368] = 0xffffffffffffffff\n 44753: u8 [sp + 367] = 0xff\n 44759: u8 [sp + 366] = 0xff\n 44765: u8 [sp + 365] = 0xff\n 44771: u8 [sp + 363] = 0xff\n 44777: u8 [sp + 360] = 0xffffffffffffffff\n 44782: u8 [sp + 359] = 0xff\n 44788: u8 [sp + 358] = 0xff\n 44794: u8 [sp + 357] = 0xff\n 44800: u8 [sp + 355] = 0xff\n 44806: u8 [sp + 352] = 0xffffffffffffffff\n 44811: a1 = 0xffffffff\n 44821: u8 [sp + 0x17c] = a1\n 44825: a5 = 0xffffffffffff\n 44835: u8 [sp + 0x17a] = a5\n 44839: a4 = 0xffffffffffffff\n 44849: u8 [sp + 0x179] = a4\n 44853: u8 [sp + 0x174] = a1\n 44857: u8 [sp + 0x172] = a5\n 44861: u8 [sp + 0x171] = a4\n 44865: u8 [sp + 0x16c] = a1\n 44869: u8 [sp + 0x16a] = a5\n 44873: u8 [sp + 0x169] = a4\n 44877: u8 [sp + 0x164] = a1\n 44881: u8 [sp + 0x162] = a5\n 44885: u8 [sp + 0x161] = a4\n 44889: a4 = u64 [sp + 0x20]\n 44892: a4 = a4 & 0x1f\n 44895: a1 = sp + 0x160\n 44899: a4 = a4 + a1\n 44902: a1 = u8 [a4 + 0x19]\n 44905: a5 = u8 [a4 + 0x18]\n 44908: s1 = u8 [a4 + 0x1a]\n 44911: a2 = u8 [a4 + 0x1b]\n 44914: a1 = a1 << 0x8\n 44917: a1 = a1 | a5\n 44920: s1 = s1 << 0x10\n 44923: a2 = a2 << 0x18\n 44926: a2 = a2 | s1\n 44929: a1 = a1 | a2\n 44932: a2 = u8 [a4 + 0x1d]\n 44935: a5 = u8 [a4 + 0x1c]\n 44938: s1 = u8 [a4 + 0x1e]\n 44941: a3 = u8 [a4 + 0x1f]\n 44944: a2 = a2 << 0x8\n 44947: a2 = a2 | a5\n 44950: s1 = s1 << 0x10\n 44953: a3 = a3 << 0x18\n 44956: a3 = a3 | s1\n 44959: a2 = a2 | a3\n 44962: a2 = a2 << 0x20\n 44965: t0 = a2 | a1\n 44968: a1 = u8 [a4 + 0x11]\n 44971: a2 = u8 [a4 + 0x10]\n 44974: a3 = u8 [a4 + 0x12]\n 44977: s1 = u8 [a4 + 0x13]\n 44980: a1 = a1 << 0x8\n 44983: a1 = a1 | a2\n 44986: a3 = a3 << 0x10\n 44989: s1 = s1 << 0x18\n 44992: a3 = a3 | s1\n 44995: a1 = a1 | a3\n 44998: a2 = u8 [a4 + 0x15]\n 45001: a3 = u8 [a4 + 0x14]\n 45004: s1 = u8 [a4 + 0x16]\n 45007: a0 = u8 [a4 + 0x17]\n 45010: a2 = a2 << 0x8\n 45013: a2 = a2 | a3\n 45016: s1 = s1 << 0x10\n 45019: a0 = a0 << 0x18\n 45022: a0 = a0 | s1\n 45025: a0 = a0 | a2\n 45028: a0 = a0 << 0x20\n 45031: s1 = a0 | a1\n 45034: a0 = u8 [a4 + 0x9]\n 45037: a1 = u8 [a4 + 0x8]\n 45040: a2 = u8 [a4 + 0xa]\n 45043: a3 = u8 [a4 + 0xb]\n 45046: a0 = a0 << 0x8\n 45049: a0 = a0 | a1\n 45052: a2 = a2 << 0x10\n 45055: a3 = a3 << 0x18\n 45058: a2 = a2 | a3\n 45061: a5 = a2 | a0\n 45064: a1 = u8 [a4 + 0xd]\n 45067: a2 = u8 [a4 + 0xc]\n 45070: a3 = u8 [a4 + 0xe]\n 45073: a0 = u8 [a4 + 0xf]\n 45076: a1 = a1 << 0x8\n 45079: a1 = a1 | a2\n 45082: a3 = a3 << 0x10\n 45085: a0 = a0 << 0x18\n 45088: a0 = a0 | a3\n 45091: a0 = a0 | a1\n 45094: a0 = a0 << 0x20\n 45097: a1 = a0 | a5\n 45100: a0 = u8 [a4 + 0x1]\n 45103: a2 = u8 [a4]\n 45105: a3 = u8 [a4 + 0x2]\n 45108: a5 = u8 [a4 + 0x3]\n 45111: a0 = a0 << 0x8\n 45114: a0 = a0 | a2\n 45117: a3 = a3 << 0x10\n 45120: a5 = a5 << 0x18\n 45123: a3 = a3 | a5\n 45126: a0 = a0 | a3\n 45129: a2 = u8 [a4 + 0x5]\n 45132: a3 = u8 [a4 + 0x4]\n 45135: a5 = u8 [a4 + 0x6]\n 45138: a4 = u8 [a4 + 0x7]\n 45141: a2 = a2 << 0x8\n 45144: a2 = a2 | a3\n 45147: a5 = a5 << 0x10\n 45150: a4 = a4 << 0x18\n 45153: a4 = a4 | a5\n 45156: a2 = a2 | a4\n 45159: a2 = a2 << 0x20\n 45162: a0 = a0 | a2\n 45165: a2 = u64 [sp + 0xb8]\n 45169: a2 = reverse a2\n 45171: a0 = a2 & ~a0\n 45174: a2 = reverse t1\n 45176: a1 = a2 & ~a1\n 45179: a2 = reverse t2\n 45181: a2 = a2 & ~s1\n 45184: a3 = reverse ra\n 45186: a3 = a3 & ~t0\n 45189: a4 = u64 [sp + 0xd0]\n 45193: u64 [sp + 0x278] = a4\n 45197: a4 = u64 [sp + 0xc8]\n 45201: u64 [sp + 0x270] = a4\n 45205: a4 = u64 [sp + 0xd8]\n 45209: u64 [sp + 0x268] = a4\n 45213: a4 = u64 [sp + 0xc0]\n 45217: u64 [sp + 0x260] = a4\n 45221: u64 [sp + 0x298] = a3\n 45225: u64 [sp + 0x290] = a2\n 45229: u64 [sp + 0x288] = a1\n 45233: u64 [sp + 0x280] = a0\n 45237: i32 a1 = sp + 0x260\n 45241: i32 a3 = sp + 0x280\n 45245: a2 = 0xffffffffffffffff\n 45248: a4 = 0x20\n 45251: a0 = 0\n 45253: ecalli 13 // 'set_storage'\n 45255: a5 = u64 [sp + 0x20]\n 45258: fallthrough\n      : @629 (gas: 27)\n 45259: a2 = u64 [sp + 0x30]\n 45262: a0 = a2 >> 0x3f\n 45265: a1 = u64 [sp + 0x28]\n 45268: a1 = a1 << 0x1\n 45271: a0 = a0 | a1\n 45274: a3 = u64 [sp + 0x38]\n 45277: a1 = a3 >> 0x3f\n 45280: a2 = a2 << 0x1\n 45283: a1 = a1 | a2\n 45286: a2 = a5 >> 0x3f\n 45289: a3 = a3 << 0x1\n 45292: a2 = a2 | a3\n 45295: a3 = a5 << 0x1\n 45298: a3 = a3 + 0x1\n 45301: a4 = u64 [sp + 0x48]\n 45304: u64 [sp + 0x268] = a4\n 45308: a4 = u64 [sp + 0x50]\n 45311: u64 [sp + 0x260] = a4\n 45315: a4 = u64 [sp + 0x58]\n 45318: u64 [sp + 0x270] = a4\n 45322: a4 = u64 [sp + 0x40]\n 45325: u64 [sp + 0x278] = a4\n 45329: u64 [sp + 0x280] = a3\n 45333: u64 [sp + 0x288] = a2\n 45337: u64 [sp + 0x290] = a1\n 45341: u64 [sp + 0x298] = a0\n 45345: jump @632\n      : @630 (gas: 5)\n 45347: a3 = 0\n 45349: a2 = 0\n 45351: a1 = 0\n 45353: t1 = 0\n 45355: fallthrough\n      : @631 (gas: 10)\n 45356: a0 = u64 [sp + 0x48]\n 45359: u64 [sp + 0x268] = a0\n 45363: u64 [sp + 0x260] = s1\n 45367: u64 [sp + 0x270] = a5\n 45371: u64 [sp + 0x278] = a4\n 45375: u64 [sp + 0x280] = a3\n 45379: u64 [sp + 0x288] = a2\n 45383: u64 [sp + 0x290] = a1\n 45387: u64 [sp + 0x298] = t1\n 45391: fallthrough\n      : @632 (gas: 12)\n 45392: i32 a1 = sp + 0x260\n 45396: i32 a3 = sp + 0x280\n 45400: a2 = 0xffffffffffffffff\n 45403: a4 = 0x20\n 45406: a0 = 0\n 45408: ecalli 13 // 'set_storage'\n 45410: sp = s0 + 0xfffffffffffffd40\n 45414: ra = u64 [sp + 0x2b8]\n 45418: s0 = u64 [sp + 0x2b0]\n 45422: s1 = u64 [sp + 0x2a8]\n 45426: sp = sp + 0x2c0\n 45430: ret\n      : @633 (gas: 1)\n 45432: trap\n      : @634 (gas: 8)\n 45433: u64 [sp + 272] = 0\n 45437: u64 [sp + 264] = 0\n 45441: u64 [sp + 256] = 0\n 45445: a0 = 0x4e487b7100000000\n 45455: a1 = sp + 0x100\n 45459: u64 [sp + 0x118] = a0\n 45463: a0 = 0\n 45465: ra = 546, jump @23\n      : @635 [@dyn 273] (gas: 8)\n 45472: u64 [sp + 248] = 0\n 45476: u64 [sp + 240] = 0\n 45480: u64 [sp + 224] = 0x41\n 45485: a0 = 0x4\n 45488: a1 = sp + 0xe0\n 45492: u64 [sp + 232] = 0\n 45496: ra = 0x226\n 45500: jump @23\n      : @636 (gas: 8)\n 45504: u64 [sp + 336] = 0\n 45508: u64 [sp + 328] = 0\n 45512: u64 [sp + 320] = 0\n 45516: a0 = 0x4e487b7100000000\n 45526: a1 = sp + 0x140\n 45530: u64 [sp + 0x158] = a0\n 45534: a0 = 0\n 45536: ra = 548, jump @23\n      : @637 [@dyn 274] (gas: 7)\n 45543: u64 [sp + 312] = 0\n 45547: u64 [sp + 304] = 0\n 45551: u64 [sp + 288] = 0x22\n 45556: a0 = 0x4\n 45559: a1 = sp + 0x120\n 45563: u64 [sp + 296] = 0\n 45567: ra = 550, jump @23\n      : @638 [@dyn 275] (gas: 3)\n 45574: a1 = 0x24\n 45577: a0 = 0\n 45579: ra = 552, jump @0\n      : @639 [@dyn 276] (gas: 6)\n 45586: i32 a1 = a0 + 0\n 45588: a0 = 0x1\n 45591: a2 = 0x24\n 45594: ra = 0x22a\n 45598: ecalli 11 // 'seal_return'\n 45600: fallthrough\n      : @640 [@dyn 277] (gas: 24)\n 45601: sp = sp + 0xffffffffffffffb0\n 45604: u64 [sp + 0x48] = ra\n 45607: u64 [sp + 0x40] = s0\n 45610: s0 = sp + 0x50\n 45613: sp = sp & 0xfffffffffffffff0\n 45616: t0 = u64 [a0]\n 45618: t1 = u64 [a0 + 0x8]\n 45621: a4 = u64 [a0 + 0x10]\n 45624: a0 = u64 [a0 + 0x18]\n 45627: a5 = u64 [a1]\n 45629: a2 = u64 [a1 + 0x8]\n 45632: a3 = u64 [a1 + 0x10]\n 45635: a1 = u64 [a1 + 0x18]\n 45638: u64 [sp + 0x18] = a1\n 45641: u64 [sp + 0x10] = a3\n 45644: u64 [sp + 0x8] = a2\n 45647: u64 [sp] = a5\n 45649: u64 [sp + 0x38] = a0\n 45652: u64 [sp + 0x30] = a4\n 45655: u64 [sp + 0x28] = t1\n 45658: a0 = sp + 0x20\n 45661: a1 = sp\n 45663: u64 [sp + 0x20] = t0\n 45666: ra = 556, jump @603\n      : @641 [@dyn 278] (gas: 5)\n 45672: sp = s0 + 0xffffffffffffffb0\n 45675: ra = u64 [sp + 0x48]\n 45678: s0 = u64 [sp + 0x40]\n 45681: sp = sp + 0x50\n 45684: ret\n      : @642 (gas: 22)\n 45686: sp = sp + 0xfffffffffffffde0\n 45690: u64 [sp + 0x218] = ra\n 45694: u64 [sp + 0x210] = s0\n 45698: u64 [sp + 0x208] = s1\n 45702: s0 = sp + 0x220\n 45706: sp = sp & 0xffffffffffffffe0\n 45709: a4 = u64 [a1 + 0x10]\n 45712: a5 = u64 [a1 + 0x18]\n 45715: a2 = u64 [a1 + 0x8]\n 45718: a3 = u64 [a1]\n 45720: u64 [sp + 0x90] = a2\n 45724: u64 [sp + 0x60] = a5\n 45727: a1 = a2 | a5\n 45730: u64 [sp + 0x98] = a3\n 45734: a2 = a3 | a4\n 45737: a2 = a2 | a1\n 45740: a2 = a2 >> 0x20\n 45743: u64 [sp + 0x68] = a4\n 45746: a1 = a1 | a4\n 45749: a1 = a1 << 0x20\n 45752: a1 = a1 | a2\n 45755: jump @644 if a1 == 0\n      : @643 (gas: 1)\n 45758: jump @677\n      : @644 (gas: 12)\n 45761: a1 = u64 [a0 + 0x18]\n 45764: u64 [sp + 0x58] = a1\n 45767: a1 = u64 [a0 + 0x10]\n 45770: u64 [sp + 0x70] = a1\n 45773: a1 = u64 [a0 + 0x8]\n 45776: u64 [sp + 0x78] = a1\n 45779: a0 = u64 [a0]\n 45781: u64 [sp + 0x80] = a0\n 45785: a0 = i32 [sp + 0x98]\n 45789: a1 = 0x20\n 45792: u64 [sp + 0x88] = a0\n 45796: ra = 558, jump @0\n      : @645 [@dyn 279] (gas: 105)\n 45803: a1 = u8 [a0 + 0x11]\n 45806: a2 = u8 [a0 + 0x10]\n 45809: a3 = u8 [a0 + 0x12]\n 45812: a4 = u8 [a0 + 0x13]\n 45815: a1 = a1 << 0x8\n 45818: a1 = a1 | a2\n 45821: a3 = a3 << 0x10\n 45824: a4 = a4 << 0x18\n 45827: a3 = a3 | a4\n 45830: a1 = a1 | a3\n 45833: a2 = u8 [a0 + 0x15]\n 45836: a3 = u8 [a0 + 0x14]\n 45839: a4 = u8 [a0 + 0x16]\n 45842: a5 = u8 [a0 + 0x17]\n 45845: a2 = a2 << 0x8\n 45848: a2 = a2 | a3\n 45851: a4 = a4 << 0x10\n 45854: a5 = a5 << 0x18\n 45857: a4 = a4 | a5\n 45860: a2 = a2 | a4\n 45863: a2 = a2 << 0x20\n 45866: a1 = a1 | a2\n 45869: a2 = u8 [a0 + 0x19]\n 45872: a3 = u8 [a0 + 0x18]\n 45875: a4 = u8 [a0 + 0x1a]\n 45878: a5 = u8 [a0 + 0x1b]\n 45881: a2 = a2 << 0x8\n 45884: a2 = a2 | a3\n 45887: a4 = a4 << 0x10\n 45890: a5 = a5 << 0x18\n 45893: a4 = a4 | a5\n 45896: a2 = a2 | a4\n 45899: a3 = u8 [a0 + 0x1d]\n 45902: a4 = u8 [a0 + 0x1c]\n 45905: a5 = u8 [a0 + 0x1e]\n 45908: s1 = u8 [a0 + 0x1f]\n 45911: a3 = a3 << 0x8\n 45914: a3 = a3 | a4\n 45917: a5 = a5 << 0x10\n 45920: s1 = s1 << 0x18\n 45923: a5 = a5 | s1\n 45926: a3 = a3 | a5\n 45929: a3 = a3 << 0x20\n 45932: a2 = a2 | a3\n 45935: a3 = u8 [a0 + 0xd]\n 45938: a4 = u8 [a0 + 0xc]\n 45941: a5 = u8 [a0 + 0xe]\n 45944: a0 = u8 [a0 + 0xf]\n 45947: a3 = a3 << 0x8\n 45950: a3 = a3 | a4\n 45953: a5 = a5 << 0x10\n 45956: a0 = a0 << 0x18\n 45959: a0 = a0 | a5\n 45962: a0 = a0 | a3\n 45965: a2 = reverse a2\n 45967: u64 [sp + 0x50] = a2\n 45970: a1 = reverse a1\n 45972: u64 [sp + 0x48] = a1\n 45975: s1 = reverse a0\n 45977: s1 = s1 >> 0x20\n 45980: u64 [sp + 0x40] = s1\n 45983: s1 = u64 [sp + 0x58]\n 45986: u64 [sp + 0x1d8] = s1\n 45990: a0 = u64 [sp + 0x70]\n 45993: u64 [sp + 0x1d0] = a0\n 45997: a0 = u64 [sp + 0x78]\n 46000: u64 [sp + 0x1c8] = a0\n 46004: a0 = u64 [sp + 0x80]\n 46008: u64 [sp + 0x1c0] = a0\n 46012: u64 [sp + 504] = 0\n 46016: u64 [sp + 496] = 0\n 46020: u64 [sp + 488] = 0\n 46024: u64 [sp + 480] = 0\n 46028: u32 [sp + 416] = 0x20\n 46033: i32 a1 = sp + 0x1c0\n 46037: i32 a3 = sp + 0x1e0\n 46041: i32 a4 = sp + 0x1a0\n 46045: a2 = 0xffffffffffffffff\n 46048: a0 = 0\n 46050: ecalli 7 // 'get_storage'\n 46052: a0 = u32 [sp + 0x1f4]\n 46056: a0 = a0 << 0x20\n 46059: a1 = u64 [sp + 0x1f8]\n 46063: a2 = u64 [sp + 0x40]\n 46066: a0 = a0 | a2\n 46069: u64 [sp + 0x1d8] = s1\n 46073: a2 = u64 [sp + 0x70]\n 46076: u64 [sp + 0x1d0] = a2\n 46080: a2 = u64 [sp + 0x78]\n 46083: u64 [sp + 0x1c8] = a2\n 46087: a2 = u64 [sp + 0x80]\n 46091: u64 [sp + 0x1c0] = a2\n 46095: u64 [sp + 0x1f8] = a1\n 46099: u64 [sp + 0x1f0] = a0\n 46103: a0 = u64 [sp + 0x48]\n 46106: u64 [sp + 0x1e8] = a0\n 46110: a0 = u64 [sp + 0x50]\n 46113: u64 [sp + 0x1e0] = a0\n 46117: i32 a1 = sp + 0x1c0\n 46121: i32 a3 = sp + 0x1e0\n 46125: a2 = 0xffffffffffffffff\n 46128: a4 = 0x20\n 46131: a0 = 0\n 46133: ecalli 13 // 'set_storage'\n 46135: fallthrough\n      : @646 (gas: 13)\n 46136: a0 = u64 [sp + 0x68]\n 46139: a2 = u64 [sp + 0x60]\n 46142: a2 = a2 | a0\n 46145: a0 = 0x100000000\n 46155: u64 [sp + 0x60] = a0\n 46158: a0 = 0xffffffe0\n 46168: a1 = u64 [sp + 0x98]\n 46172: a0 = a1 <u a0\n 46175: a1 = u64 [sp + 0x90]\n 46179: a0 = 0 if a1 != 0\n 46181: u64 [sp + 0x68] = a2\n 46184: a0 = 0 if a2 != 0\n 46186: jump @648 if a0 != 0\n      : @647 (gas: 1)\n 46189: jump @677\n      : @648 (gas: 19)\n 46192: s1 = u64 [sp + 0x80]\n 46196: s1 = s1 + 0x1\n 46199: a0 = s1 <u 0x1\n 46202: a1 = u64 [sp + 0x78]\n 46205: a0 = a0 + a1\n 46208: u64 [sp + 0x50] = a0\n 46211: a0 = a0 | s1\n 46214: a0 = a0 <u 0x1\n 46217: a1 = u64 [sp + 0x70]\n 46220: a0 = a0 + a1\n 46223: u64 [sp + 0x40] = a0\n 46226: a0 = a0 <u a1\n 46229: a1 = u64 [sp + 0x58]\n 46232: a0 = a0 + a1\n 46235: u64 [sp + 0x48] = a0\n 46238: a0 = u64 [sp + 0x88]\n 46242: i32 a0 = a0 + 0x20\n 46245: a1 = 0x20\n 46248: ra = 560, jump @0\n      : @649 [@dyn 280] (gas: 106)\n 46255: a1 = u8 [a0 + 0x1]\n 46258: a2 = u8 [a0]\n 46260: a3 = u8 [a0 + 0x2]\n 46263: a4 = u8 [a0 + 0x3]\n 46266: a1 = a1 << 0x8\n 46269: a1 = a1 | a2\n 46272: a3 = a3 << 0x10\n 46275: a4 = a4 << 0x18\n 46278: a3 = a3 | a4\n 46281: a1 = a1 | a3\n 46284: a2 = u8 [a0 + 0x5]\n 46287: a3 = u8 [a0 + 0x4]\n 46290: a4 = u8 [a0 + 0x6]\n 46293: a5 = u8 [a0 + 0x7]\n 46296: a2 = a2 << 0x8\n 46299: a2 = a2 | a3\n 46302: a4 = a4 << 0x10\n 46305: a5 = a5 << 0x18\n 46308: a4 = a4 | a5\n 46311: a2 = a2 | a4\n 46314: a2 = a2 << 0x20\n 46317: t0 = a2 | a1\n 46320: a2 = u8 [a0 + 0x9]\n 46323: a3 = u8 [a0 + 0x8]\n 46326: a4 = u8 [a0 + 0xa]\n 46329: a5 = u8 [a0 + 0xb]\n 46332: a2 = a2 << 0x8\n 46335: a2 = a2 | a3\n 46338: a4 = a4 << 0x10\n 46341: a5 = a5 << 0x18\n 46344: a4 = a4 | a5\n 46347: a2 = a2 | a4\n 46350: a3 = u8 [a0 + 0xd]\n 46353: a4 = u8 [a0 + 0xc]\n 46356: a5 = u8 [a0 + 0xe]\n 46359: a1 = u8 [a0 + 0xf]\n 46362: a3 = a3 << 0x8\n 46365: a3 = a3 | a4\n 46368: a5 = a5 << 0x10\n 46371: a1 = a1 << 0x18\n 46374: a1 = a1 | a5\n 46377: a1 = a1 | a3\n 46380: a1 = a1 << 0x20\n 46383: t1 = a1 | a2\n 46386: a1 = u8 [a0 + 0x11]\n 46389: a3 = u8 [a0 + 0x10]\n 46392: a4 = u8 [a0 + 0x12]\n 46395: a5 = u8 [a0 + 0x13]\n 46398: a1 = a1 << 0x8\n 46401: a1 = a1 | a3\n 46404: a4 = a4 << 0x10\n 46407: a5 = a5 << 0x18\n 46410: a4 = a4 | a5\n 46413: a1 = a1 | a4\n 46416: a3 = u8 [a0 + 0x15]\n 46419: a4 = u8 [a0 + 0x14]\n 46422: a5 = u8 [a0 + 0x16]\n 46425: a2 = u8 [a0 + 0x17]\n 46428: a3 = a3 << 0x8\n 46431: a3 = a3 | a4\n 46434: a5 = a5 << 0x10\n 46437: a2 = a2 << 0x18\n 46440: a2 = a2 | a5\n 46443: a2 = a2 | a3\n 46446: a2 = a2 << 0x20\n 46449: a3 = a2 | a1\n 46452: a1 = u8 [a0 + 0x19]\n 46455: a2 = u8 [a0 + 0x18]\n 46458: a4 = u8 [a0 + 0x1a]\n 46461: a5 = u8 [a0 + 0x1b]\n 46464: a1 = a1 << 0x8\n 46467: a1 = a1 | a2\n 46470: a4 = a4 << 0x10\n 46473: a5 = a5 << 0x18\n 46476: a4 = a4 | a5\n 46479: a1 = a1 | a4\n 46482: a2 = u8 [a0 + 0x1d]\n 46485: a4 = u8 [a0 + 0x1c]\n 46488: a5 = u8 [a0 + 0x1e]\n 46491: a0 = u8 [a0 + 0x1f]\n 46494: a2 = a2 << 0x8\n 46497: a2 = a2 | a4\n 46500: a5 = a5 << 0x10\n 46503: a0 = a0 << 0x18\n 46506: a0 = a0 | a5\n 46509: a0 = a0 | a2\n 46512: a0 = a0 << 0x20\n 46515: a0 = a0 | a1\n 46518: a2 = reverse a0\n 46520: a0 = reverse a3\n 46522: a1 = reverse t1\n 46524: a3 = reverse t0\n 46526: a4 = u64 [sp + 0x50]\n 46529: u64 [sp + 0x188] = a4\n 46533: u64 [sp + 0x180] = s1\n 46537: a4 = u64 [sp + 0x40]\n 46540: u64 [sp + 0x190] = a4\n 46544: a4 = u64 [sp + 0x48]\n 46547: u64 [sp + 0x198] = a4\n 46551: u64 [sp + 0x178] = a3\n 46555: u64 [sp + 0x170] = a1\n 46559: u64 [sp + 0x168] = a0\n 46563: a0 = sp + 0x180\n 46567: a1 = sp + 0x160\n 46571: u64 [sp + 0x160] = a2\n 46575: ra = 562, jump @603\n      : @650 [@dyn 281] (gas: 9)\n 46581: a0 = u64 [sp + 0x60]\n 46584: a0 = a0 + 0xffffffffffffffc0\n 46587: a1 = u64 [sp + 0x98]\n 46591: a0 = a1 <u a0\n 46594: a1 = u64 [sp + 0x90]\n 46598: a0 = 0 if a1 != 0\n 46600: a1 = u64 [sp + 0x68]\n 46603: a0 = 0 if a1 != 0\n 46605: jump @677 if a0 == 0\n      : @651 (gas: 20)\n 46609: a0 = u64 [sp + 0x80]\n 46613: a1 = a0 + 0x2\n 46616: u64 [sp + 0x60] = a1\n 46619: a0 = a1 <u a0\n 46622: a1 = u64 [sp + 0x78]\n 46625: a2 = a1 + a0\n 46628: u64 [sp + 0x50] = a2\n 46631: s1 = a2 <u a1\n 46634: s1 = a0 if a0 == 0\n 46637: a0 = u64 [sp + 0x70]\n 46640: s1 = s1 + a0\n 46643: u64 [sp + 0x40] = s1\n 46646: a0 = s1 <u a0\n 46649: a1 = u64 [sp + 0x58]\n 46652: a0 = a0 + a1\n 46655: u64 [sp + 0x48] = a0\n 46658: a0 = u64 [sp + 0x88]\n 46662: i32 a0 = a0 + 0x40\n 46665: a1 = 0x20\n 46668: ra = 564, jump @0\n      : @652 [@dyn 282] (gas: 107)\n 46675: a1 = u8 [a0 + 0x1]\n 46678: a2 = u8 [a0]\n 46680: a3 = u8 [a0 + 0x2]\n 46683: a4 = u8 [a0 + 0x3]\n 46686: a1 = a1 << 0x8\n 46689: a1 = a1 | a2\n 46692: a3 = a3 << 0x10\n 46695: a4 = a4 << 0x18\n 46698: a3 = a3 | a4\n 46701: a1 = a1 | a3\n 46704: a2 = u8 [a0 + 0x5]\n 46707: a3 = u8 [a0 + 0x4]\n 46710: a4 = u8 [a0 + 0x6]\n 46713: a5 = u8 [a0 + 0x7]\n 46716: a2 = a2 << 0x8\n 46719: a2 = a2 | a3\n 46722: a4 = a4 << 0x10\n 46725: a5 = a5 << 0x18\n 46728: a4 = a4 | a5\n 46731: a2 = a2 | a4\n 46734: a2 = a2 << 0x20\n 46737: t0 = a2 | a1\n 46740: a2 = u8 [a0 + 0x9]\n 46743: a3 = u8 [a0 + 0x8]\n 46746: a4 = u8 [a0 + 0xa]\n 46749: a5 = u8 [a0 + 0xb]\n 46752: a2 = a2 << 0x8\n 46755: a2 = a2 | a3\n 46758: a4 = a4 << 0x10\n 46761: a5 = a5 << 0x18\n 46764: a4 = a4 | a5\n 46767: a2 = a2 | a4\n 46770: a3 = u8 [a0 + 0xd]\n 46773: a4 = u8 [a0 + 0xc]\n 46776: a5 = u8 [a0 + 0xe]\n 46779: a1 = u8 [a0 + 0xf]\n 46782: a3 = a3 << 0x8\n 46785: a3 = a3 | a4\n 46788: a5 = a5 << 0x10\n 46791: a1 = a1 << 0x18\n 46794: a1 = a1 | a5\n 46797: a1 = a1 | a3\n 46800: a1 = a1 << 0x20\n 46803: a2 = a2 | a1\n 46806: a1 = u8 [a0 + 0x11]\n 46809: a3 = u8 [a0 + 0x10]\n 46812: a4 = u8 [a0 + 0x12]\n 46815: a5 = u8 [a0 + 0x13]\n 46818: a1 = a1 << 0x8\n 46821: a1 = a1 | a3\n 46824: a4 = a4 << 0x10\n 46827: a5 = a5 << 0x18\n 46830: a4 = a4 | a5\n 46833: a1 = a1 | a4\n 46836: a3 = u8 [a0 + 0x15]\n 46839: a4 = u8 [a0 + 0x14]\n 46842: a5 = u8 [a0 + 0x16]\n 46845: s1 = u8 [a0 + 0x17]\n 46848: a3 = a3 << 0x8\n 46851: a3 = a3 | a4\n 46854: a5 = a5 << 0x10\n 46857: s1 = s1 << 0x18\n 46860: a5 = a5 | s1\n 46863: a3 = a3 | a5\n 46866: a3 = a3 << 0x20\n 46869: a3 = a3 | a1\n 46872: a1 = u8 [a0 + 0x19]\n 46875: a4 = u8 [a0 + 0x18]\n 46878: a5 = u8 [a0 + 0x1a]\n 46881: s1 = u8 [a0 + 0x1b]\n 46884: a1 = a1 << 0x8\n 46887: a1 = a1 | a4\n 46890: a5 = a5 << 0x10\n 46893: s1 = s1 << 0x18\n 46896: a5 = a5 | s1\n 46899: a1 = a1 | a5\n 46902: a4 = u8 [a0 + 0x1d]\n 46905: a5 = u8 [a0 + 0x1c]\n 46908: s1 = u8 [a0 + 0x1e]\n 46911: a0 = u8 [a0 + 0x1f]\n 46914: a4 = a4 << 0x8\n 46917: a4 = a4 | a5\n 46920: s1 = s1 << 0x10\n 46923: a0 = a0 << 0x18\n 46926: a0 = a0 | s1\n 46929: a0 = a0 | a4\n 46932: a0 = a0 << 0x20\n 46935: a0 = a0 | a1\n 46938: a4 = reverse a0\n 46940: a0 = reverse a3\n 46942: a1 = reverse a2\n 46944: a2 = reverse t0\n 46946: a3 = u64 [sp + 0x50]\n 46949: u64 [sp + 0x148] = a3\n 46953: a3 = u64 [sp + 0x60]\n 46956: u64 [sp + 0x140] = a3\n 46960: a3 = u64 [sp + 0x40]\n 46963: u64 [sp + 0x150] = a3\n 46967: a3 = u64 [sp + 0x48]\n 46970: u64 [sp + 0x158] = a3\n 46974: u64 [sp + 0x138] = a2\n 46978: u64 [sp + 0x130] = a1\n 46982: u64 [sp + 0x128] = a0\n 46986: a0 = sp + 0x140\n 46990: a1 = sp + 0x120\n 46994: u64 [sp + 0x120] = a4\n 46998: ra = 566, jump @603\n      : @653 [@dyn 283] (gas: 10)\n 47004: a0 = 0x100000000\n 47014: u64 [sp + 0x60] = a0\n 47017: a0 = 0xffffffa0\n 47027: a1 = u64 [sp + 0x98]\n 47031: a0 = a1 <u a0\n 47034: a1 = u64 [sp + 0x90]\n 47038: a0 = 0 if a1 != 0\n 47040: a1 = u64 [sp + 0x68]\n 47043: a0 = 0 if a1 != 0\n 47045: jump @677 if a0 == 0\n      : @654 (gas: 20)\n 47049: a0 = u64 [sp + 0x80]\n 47053: a1 = a0 + 0x3\n 47056: u64 [sp + 0x50] = a1\n 47059: a0 = a1 <u a0\n 47062: a1 = u64 [sp + 0x78]\n 47065: a2 = a1 + a0\n 47068: u64 [sp + 0x48] = a2\n 47071: s1 = a2 <u a1\n 47074: s1 = a0 if a0 == 0\n 47077: a0 = u64 [sp + 0x70]\n 47080: s1 = s1 + a0\n 47083: u64 [sp + 0x38] = s1\n 47086: a0 = s1 <u a0\n 47089: a1 = u64 [sp + 0x58]\n 47092: a0 = a0 + a1\n 47095: u64 [sp + 0x40] = a0\n 47098: a0 = u64 [sp + 0x88]\n 47102: i32 a0 = a0 + 0x60\n 47105: a1 = 0x20\n 47108: ra = 568, jump @0\n      : @655 [@dyn 284] (gas: 107)\n 47115: a1 = u8 [a0 + 0x1]\n 47118: a2 = u8 [a0]\n 47120: a3 = u8 [a0 + 0x2]\n 47123: a4 = u8 [a0 + 0x3]\n 47126: a1 = a1 << 0x8\n 47129: a1 = a1 | a2\n 47132: a3 = a3 << 0x10\n 47135: a4 = a4 << 0x18\n 47138: a3 = a3 | a4\n 47141: a1 = a1 | a3\n 47144: a2 = u8 [a0 + 0x5]\n 47147: a3 = u8 [a0 + 0x4]\n 47150: a4 = u8 [a0 + 0x6]\n 47153: a5 = u8 [a0 + 0x7]\n 47156: a2 = a2 << 0x8\n 47159: a2 = a2 | a3\n 47162: a4 = a4 << 0x10\n 47165: a5 = a5 << 0x18\n 47168: a4 = a4 | a5\n 47171: a2 = a2 | a4\n 47174: a2 = a2 << 0x20\n 47177: t0 = a2 | a1\n 47180: a2 = u8 [a0 + 0x9]\n 47183: a3 = u8 [a0 + 0x8]\n 47186: a4 = u8 [a0 + 0xa]\n 47189: a5 = u8 [a0 + 0xb]\n 47192: a2 = a2 << 0x8\n 47195: a2 = a2 | a3\n 47198: a4 = a4 << 0x10\n 47201: a5 = a5 << 0x18\n 47204: a4 = a4 | a5\n 47207: a2 = a2 | a4\n 47210: a3 = u8 [a0 + 0xd]\n 47213: a4 = u8 [a0 + 0xc]\n 47216: a5 = u8 [a0 + 0xe]\n 47219: a1 = u8 [a0 + 0xf]\n 47222: a3 = a3 << 0x8\n 47225: a3 = a3 | a4\n 47228: a5 = a5 << 0x10\n 47231: a1 = a1 << 0x18\n 47234: a1 = a1 | a5\n 47237: a1 = a1 | a3\n 47240: a1 = a1 << 0x20\n 47243: a2 = a2 | a1\n 47246: a1 = u8 [a0 + 0x11]\n 47249: a3 = u8 [a0 + 0x10]\n 47252: a4 = u8 [a0 + 0x12]\n 47255: a5 = u8 [a0 + 0x13]\n 47258: a1 = a1 << 0x8\n 47261: a1 = a1 | a3\n 47264: a4 = a4 << 0x10\n 47267: a5 = a5 << 0x18\n 47270: a4 = a4 | a5\n 47273: a1 = a1 | a4\n 47276: a3 = u8 [a0 + 0x15]\n 47279: a4 = u8 [a0 + 0x14]\n 47282: a5 = u8 [a0 + 0x16]\n 47285: s1 = u8 [a0 + 0x17]\n 47288: a3 = a3 << 0x8\n 47291: a3 = a3 | a4\n 47294: a5 = a5 << 0x10\n 47297: s1 = s1 << 0x18\n 47300: a5 = a5 | s1\n 47303: a3 = a3 | a5\n 47306: a3 = a3 << 0x20\n 47309: a3 = a3 | a1\n 47312: a1 = u8 [a0 + 0x19]\n 47315: a4 = u8 [a0 + 0x18]\n 47318: a5 = u8 [a0 + 0x1a]\n 47321: s1 = u8 [a0 + 0x1b]\n 47324: a1 = a1 << 0x8\n 47327: a1 = a1 | a4\n 47330: a5 = a5 << 0x10\n 47333: s1 = s1 << 0x18\n 47336: a5 = a5 | s1\n 47339: a1 = a1 | a5\n 47342: a4 = u8 [a0 + 0x1d]\n 47345: a5 = u8 [a0 + 0x1c]\n 47348: s1 = u8 [a0 + 0x1e]\n 47351: a0 = u8 [a0 + 0x1f]\n 47354: a4 = a4 << 0x8\n 47357: a4 = a4 | a5\n 47360: s1 = s1 << 0x10\n 47363: a0 = a0 << 0x18\n 47366: a0 = a0 | s1\n 47369: a0 = a0 | a4\n 47372: a0 = a0 << 0x20\n 47375: a0 = a0 | a1\n 47378: a4 = reverse a0\n 47380: a0 = reverse a3\n 47382: a1 = reverse a2\n 47384: a2 = reverse t0\n 47386: a3 = u64 [sp + 0x48]\n 47389: u64 [sp + 0x108] = a3\n 47393: a3 = u64 [sp + 0x50]\n 47396: u64 [sp + 0x100] = a3\n 47400: a3 = u64 [sp + 0x38]\n 47403: u64 [sp + 0x110] = a3\n 47407: a3 = u64 [sp + 0x40]\n 47410: u64 [sp + 0x118] = a3\n 47414: u64 [sp + 0xf8] = a2\n 47418: u64 [sp + 0xf0] = a1\n 47422: u64 [sp + 0xe8] = a0\n 47426: a0 = sp + 0x100\n 47430: a1 = sp + 0xe0\n 47434: u64 [sp + 0xe0] = a4\n 47438: ra = 570, jump @603\n      : @656 [@dyn 285] (gas: 9)\n 47444: a0 = u64 [sp + 0x60]\n 47447: a0 = a0 + 0xffffffffffffff80\n 47450: a1 = u64 [sp + 0x98]\n 47454: a0 = a1 <u a0\n 47457: a1 = u64 [sp + 0x90]\n 47461: a0 = 0 if a1 != 0\n 47463: a1 = u64 [sp + 0x68]\n 47466: a0 = 0 if a1 != 0\n 47468: jump @677 if a0 == 0\n      : @657 (gas: 20)\n 47472: a0 = u64 [sp + 0x80]\n 47476: a1 = a0 + 0x4\n 47479: u64 [sp + 0x60] = a1\n 47482: a0 = a1 <u a0\n 47485: a1 = u64 [sp + 0x78]\n 47488: a2 = a1 + a0\n 47491: u64 [sp + 0x50] = a2\n 47494: s1 = a2 <u a1\n 47497: s1 = a0 if a0 == 0\n 47500: a0 = u64 [sp + 0x70]\n 47503: s1 = s1 + a0\n 47506: u64 [sp + 0x40] = s1\n 47509: a0 = s1 <u a0\n 47512: a1 = u64 [sp + 0x58]\n 47515: a0 = a0 + a1\n 47518: u64 [sp + 0x48] = a0\n 47521: a0 = u64 [sp + 0x88]\n 47525: i32 a0 = a0 + 0x80\n 47529: a1 = 0x20\n 47532: ra = 572, jump @0\n      : @658 [@dyn 286] (gas: 107)\n 47539: a1 = u8 [a0 + 0x1]\n 47542: a2 = u8 [a0]\n 47544: a3 = u8 [a0 + 0x2]\n 47547: a4 = u8 [a0 + 0x3]\n 47550: a1 = a1 << 0x8\n 47553: a1 = a1 | a2\n 47556: a3 = a3 << 0x10\n 47559: a4 = a4 << 0x18\n 47562: a3 = a3 | a4\n 47565: a1 = a1 | a3\n 47568: a2 = u8 [a0 + 0x5]\n 47571: a3 = u8 [a0 + 0x4]\n 47574: a4 = u8 [a0 + 0x6]\n 47577: a5 = u8 [a0 + 0x7]\n 47580: a2 = a2 << 0x8\n 47583: a2 = a2 | a3\n 47586: a4 = a4 << 0x10\n 47589: a5 = a5 << 0x18\n 47592: a4 = a4 | a5\n 47595: a2 = a2 | a4\n 47598: a2 = a2 << 0x20\n 47601: t0 = a2 | a1\n 47604: a2 = u8 [a0 + 0x9]\n 47607: a3 = u8 [a0 + 0x8]\n 47610: a4 = u8 [a0 + 0xa]\n 47613: a5 = u8 [a0 + 0xb]\n 47616: a2 = a2 << 0x8\n 47619: a2 = a2 | a3\n 47622: a4 = a4 << 0x10\n 47625: a5 = a5 << 0x18\n 47628: a4 = a4 | a5\n 47631: a2 = a2 | a4\n 47634: a3 = u8 [a0 + 0xd]\n 47637: a4 = u8 [a0 + 0xc]\n 47640: a5 = u8 [a0 + 0xe]\n 47643: a1 = u8 [a0 + 0xf]\n 47646: a3 = a3 << 0x8\n 47649: a3 = a3 | a4\n 47652: a5 = a5 << 0x10\n 47655: a1 = a1 << 0x18\n 47658: a1 = a1 | a5\n 47661: a1 = a1 | a3\n 47664: a1 = a1 << 0x20\n 47667: a2 = a2 | a1\n 47670: a1 = u8 [a0 + 0x11]\n 47673: a3 = u8 [a0 + 0x10]\n 47676: a4 = u8 [a0 + 0x12]\n 47679: a5 = u8 [a0 + 0x13]\n 47682: a1 = a1 << 0x8\n 47685: a1 = a1 | a3\n 47688: a4 = a4 << 0x10\n 47691: a5 = a5 << 0x18\n 47694: a4 = a4 | a5\n 47697: a1 = a1 | a4\n 47700: a3 = u8 [a0 + 0x15]\n 47703: a4 = u8 [a0 + 0x14]\n 47706: a5 = u8 [a0 + 0x16]\n 47709: s1 = u8 [a0 + 0x17]\n 47712: a3 = a3 << 0x8\n 47715: a3 = a3 | a4\n 47718: a5 = a5 << 0x10\n 47721: s1 = s1 << 0x18\n 47724: a5 = a5 | s1\n 47727: a3 = a3 | a5\n 47730: a3 = a3 << 0x20\n 47733: a3 = a3 | a1\n 47736: a1 = u8 [a0 + 0x19]\n 47739: a4 = u8 [a0 + 0x18]\n 47742: a5 = u8 [a0 + 0x1a]\n 47745: s1 = u8 [a0 + 0x1b]\n 47748: a1 = a1 << 0x8\n 47751: a1 = a1 | a4\n 47754: a5 = a5 << 0x10\n 47757: s1 = s1 << 0x18\n 47760: a5 = a5 | s1\n 47763: a1 = a1 | a5\n 47766: a4 = u8 [a0 + 0x1d]\n 47769: a5 = u8 [a0 + 0x1c]\n 47772: s1 = u8 [a0 + 0x1e]\n 47775: a0 = u8 [a0 + 0x1f]\n 47778: a4 = a4 << 0x8\n 47781: a4 = a4 | a5\n 47784: s1 = s1 << 0x10\n 47787: a0 = a0 << 0x18\n 47790: a0 = a0 | s1\n 47793: a0 = a0 | a4\n 47796: a0 = a0 << 0x20\n 47799: a0 = a0 | a1\n 47802: a4 = reverse a0\n 47804: a0 = reverse a3\n 47806: a1 = reverse a2\n 47808: a2 = reverse t0\n 47810: a3 = u64 [sp + 0x50]\n 47813: u64 [sp + 0xc8] = a3\n 47817: a3 = u64 [sp + 0x60]\n 47820: u64 [sp + 0xc0] = a3\n 47824: a3 = u64 [sp + 0x40]\n 47827: u64 [sp + 0xd0] = a3\n 47831: a3 = u64 [sp + 0x48]\n 47834: u64 [sp + 0xd8] = a3\n 47838: u64 [sp + 0xb8] = a2\n 47842: u64 [sp + 0xb0] = a1\n 47846: u64 [sp + 0xa8] = a0\n 47850: a0 = sp + 0xc0\n 47854: a1 = sp + 0xa0\n 47858: u64 [sp + 0xa0] = a4\n 47862: ra = 574, jump @603\n      : @659 [@dyn 287] (gas: 10)\n 47868: a0 = 0x100000000\n 47878: u64 [sp + 0x40] = a0\n 47881: a0 = 0xffffff60\n 47891: a1 = u64 [sp + 0x98]\n 47895: a0 = a1 <u a0\n 47898: a1 = u64 [sp + 0x90]\n 47902: a0 = 0 if a1 != 0\n 47904: a1 = u64 [sp + 0x68]\n 47907: a0 = 0 if a1 != 0\n 47909: jump @677 if a0 == 0\n      : @660 (gas: 20)\n 47913: a0 = u64 [sp + 0x80]\n 47917: a1 = a0 + 0x5\n 47920: u64 [sp + 0x48] = a1\n 47923: a0 = a1 <u a0\n 47926: a1 = u64 [sp + 0x78]\n 47929: a2 = a1 + a0\n 47932: u64 [sp + 0x60] = a2\n 47935: a1 = a2 <u a1\n 47938: a1 = a0 if a0 == 0\n 47941: a0 = u64 [sp + 0x70]\n 47944: a1 = a1 + a0\n 47947: u64 [sp + 0x50] = a1\n 47950: a0 = a1 <u a0\n 47953: a1 = u64 [sp + 0x58]\n 47956: a0 = a0 + a1\n 47959: u64 [sp + 0x38] = a0\n 47962: a0 = u64 [sp + 0x88]\n 47966: i32 a0 = a0 + 0xa0\n 47970: a1 = 0x20\n 47973: ra = 576, jump @0\n      : @661 [@dyn 288] (gas: 137)\n 47980: a1 = u8 [a0 + 0x1]\n 47983: a2 = u8 [a0]\n 47985: a3 = u8 [a0 + 0x2]\n 47988: a4 = u8 [a0 + 0x3]\n 47991: a1 = a1 << 0x8\n 47994: a1 = a1 | a2\n 47997: a3 = a3 << 0x10\n 48000: a4 = a4 << 0x18\n 48003: a3 = a3 | a4\n 48006: a1 = a1 | a3\n 48009: a2 = u8 [a0 + 0x5]\n 48012: a3 = u8 [a0 + 0x4]\n 48015: a4 = u8 [a0 + 0x6]\n 48018: a5 = u8 [a0 + 0x7]\n 48021: a2 = a2 << 0x8\n 48024: a2 = a2 | a3\n 48027: a4 = a4 << 0x10\n 48030: a5 = a5 << 0x18\n 48033: a4 = a4 | a5\n 48036: a2 = a2 | a4\n 48039: a2 = a2 << 0x20\n 48042: t0 = a2 | a1\n 48045: a2 = u8 [a0 + 0x9]\n 48048: a3 = u8 [a0 + 0x8]\n 48051: a4 = u8 [a0 + 0xa]\n 48054: a5 = u8 [a0 + 0xb]\n 48057: a2 = a2 << 0x8\n 48060: a2 = a2 | a3\n 48063: a4 = a4 << 0x10\n 48066: a5 = a5 << 0x18\n 48069: a4 = a4 | a5\n 48072: a2 = a2 | a4\n 48075: a3 = u8 [a0 + 0xd]\n 48078: a4 = u8 [a0 + 0xc]\n 48081: a5 = u8 [a0 + 0xe]\n 48084: s1 = u8 [a0 + 0xf]\n 48087: a3 = a3 << 0x8\n 48090: a3 = a3 | a4\n 48093: a5 = a5 << 0x10\n 48096: s1 = s1 << 0x18\n 48099: a5 = a5 | s1\n 48102: a3 = a3 | a5\n 48105: a3 = a3 << 0x20\n 48108: a2 = a2 | a3\n 48111: a3 = u8 [a0 + 0x11]\n 48114: a4 = u8 [a0 + 0x10]\n 48117: a5 = u8 [a0 + 0x12]\n 48120: s1 = u8 [a0 + 0x13]\n 48123: a3 = a3 << 0x8\n 48126: a3 = a3 | a4\n 48129: a5 = a5 << 0x10\n 48132: s1 = s1 << 0x18\n 48135: a5 = a5 | s1\n 48138: a3 = a3 | a5\n 48141: a4 = u8 [a0 + 0x15]\n 48144: a5 = u8 [a0 + 0x14]\n 48147: s1 = u8 [a0 + 0x16]\n 48150: a1 = u8 [a0 + 0x17]\n 48153: a4 = a4 << 0x8\n 48156: a4 = a4 | a5\n 48159: s1 = s1 << 0x10\n 48162: a1 = a1 << 0x18\n 48165: a1 = a1 | s1\n 48168: a1 = a1 | a4\n 48171: a1 = a1 << 0x20\n 48174: a3 = a3 | a1\n 48177: a1 = u8 [a0 + 0x19]\n 48180: a4 = u8 [a0 + 0x18]\n 48183: a5 = u8 [a0 + 0x1a]\n 48186: s1 = u8 [a0 + 0x1b]\n 48189: a1 = a1 << 0x8\n 48192: a1 = a1 | a4\n 48195: a5 = a5 << 0x10\n 48198: s1 = s1 << 0x18\n 48201: a5 = a5 | s1\n 48204: a1 = a1 | a5\n 48207: a4 = u8 [a0 + 0x1d]\n 48210: a5 = u8 [a0 + 0x1c]\n 48213: s1 = u8 [a0 + 0x1e]\n 48216: a0 = u8 [a0 + 0x1f]\n 48219: a4 = a4 << 0x8\n 48222: a4 = a4 | a5\n 48225: s1 = s1 << 0x10\n 48228: a0 = a0 << 0x18\n 48231: a0 = a0 | s1\n 48234: a0 = a0 | a4\n 48237: a0 = a0 << 0x20\n 48240: a0 = a0 | a1\n 48243: u32 [sp + 416] = 0x20\n 48248: a0 = reverse a0\n 48250: u64 [sp + 0x30] = a0\n 48253: a0 = reverse a3\n 48255: u64 [sp + 0x28] = a0\n 48258: a0 = reverse a2\n 48260: u64 [sp + 0x20] = a0\n 48263: a0 = reverse t0\n 48265: u64 [sp + 0x18] = a0\n 48268: a0 = u64 [sp + 0x50]\n 48271: u64 [sp + 0x1d0] = a0\n 48275: a0 = u64 [sp + 0x60]\n 48278: u64 [sp + 0x1c8] = a0\n 48282: a0 = u64 [sp + 0x48]\n 48285: u64 [sp + 0x1c0] = a0\n 48289: s1 = u64 [sp + 0x38]\n 48292: u64 [sp + 0x1d8] = s1\n 48296: u64 [sp + 504] = 0\n 48300: u64 [sp + 496] = 0\n 48304: u64 [sp + 488] = 0\n 48308: u64 [sp + 480] = 0\n 48312: i32 a1 = sp + 0x1c0\n 48316: i32 a3 = sp + 0x1e0\n 48320: i32 a4 = sp + 0x1a0\n 48324: a2 = 0xffffffffffffffff\n 48327: a0 = 0\n 48329: ecalli 7 // 'get_storage'\n 48331: u64 [sp + 0x1d8] = s1\n 48335: a0 = u64 [sp + 0x50]\n 48338: u64 [sp + 0x1d0] = a0\n 48342: a0 = u64 [sp + 0x60]\n 48345: u64 [sp + 0x1c8] = a0\n 48349: a0 = u64 [sp + 0x48]\n 48352: u64 [sp + 0x1c0] = a0\n 48356: a0 = u64 [sp + 0x18]\n 48359: u64 [sp + 0x1f8] = a0\n 48363: a0 = u64 [sp + 0x20]\n 48366: u64 [sp + 0x1f0] = a0\n 48370: a0 = u64 [sp + 0x28]\n 48373: u64 [sp + 0x1e8] = a0\n 48377: a0 = u64 [sp + 0x30]\n 48380: u64 [sp + 0x1e0] = a0\n 48384: i32 a1 = sp + 0x1c0\n 48388: i32 a3 = sp + 0x1e0\n 48392: a2 = 0xffffffffffffffff\n 48395: a4 = 0x20\n 48398: a0 = 0\n 48400: ecalli 13 // 'set_storage'\n 48402: fallthrough\n      : @662 (gas: 9)\n 48403: a0 = u64 [sp + 0x40]\n 48406: a0 = a0 + 0xffffffffffffff40\n 48410: a1 = u64 [sp + 0x98]\n 48414: a0 = a1 <u a0\n 48417: a1 = u64 [sp + 0x90]\n 48421: a0 = 0 if a1 != 0\n 48423: a1 = u64 [sp + 0x68]\n 48426: a0 = 0 if a1 != 0\n 48428: jump @677 if a0 == 0\n      : @663 (gas: 20)\n 48432: a0 = u64 [sp + 0x80]\n 48436: a1 = a0 + 0x6\n 48439: u64 [sp + 0x60] = a1\n 48442: a0 = a1 <u a0\n 48445: a1 = u64 [sp + 0x78]\n 48448: a2 = a1 + a0\n 48451: u64 [sp + 0x80] = a2\n 48455: a1 = a2 <u a1\n 48458: a1 = a0 if a0 == 0\n 48461: a0 = u64 [sp + 0x70]\n 48464: a1 = a1 + a0\n 48467: u64 [sp + 0x78] = a1\n 48470: a0 = a1 <u a0\n 48473: a1 = u64 [sp + 0x58]\n 48476: a0 = a0 + a1\n 48479: u64 [sp + 0x70] = a0\n 48482: a0 = u64 [sp + 0x88]\n 48486: i32 a0 = a0 + 0xc0\n 48490: a1 = 0x20\n 48493: ra = 578, jump @0\n      : @664 [@dyn 289] (gas: 135)\n 48500: a1 = u8 [a0 + 0x11]\n 48503: a2 = u8 [a0 + 0x10]\n 48506: a3 = u8 [a0 + 0x12]\n 48509: a4 = u8 [a0 + 0x13]\n 48512: a1 = a1 << 0x8\n 48515: a1 = a1 | a2\n 48518: a3 = a3 << 0x10\n 48521: a4 = a4 << 0x18\n 48524: a3 = a3 | a4\n 48527: t0 = a3 | a1\n 48530: a2 = u8 [a0 + 0x1]\n 48533: a3 = u8 [a0]\n 48535: a4 = u8 [a0 + 0x2]\n 48538: a5 = u8 [a0 + 0x3]\n 48541: a2 = a2 << 0x8\n 48544: a2 = a2 | a3\n 48547: a4 = a4 << 0x10\n 48550: a5 = a5 << 0x18\n 48553: a4 = a4 | a5\n 48556: t1 = a4 | a2\n 48559: a3 = u8 [a0 + 0x15]\n 48562: a4 = u8 [a0 + 0x14]\n 48565: a5 = u8 [a0 + 0x16]\n 48568: s1 = u8 [a0 + 0x17]\n 48571: a3 = a3 << 0x8\n 48574: a3 = a3 | a4\n 48577: a5 = a5 << 0x10\n 48580: s1 = s1 << 0x18\n 48583: a5 = a5 | s1\n 48586: t2 = a5 | a3\n 48589: a4 = u8 [a0 + 0x5]\n 48592: a5 = u8 [a0 + 0x4]\n 48595: s1 = u8 [a0 + 0x6]\n 48598: a1 = u8 [a0 + 0x7]\n 48601: a4 = a4 << 0x8\n 48604: a4 = a4 | a5\n 48607: s1 = s1 << 0x10\n 48610: a1 = a1 << 0x18\n 48613: a1 = a1 | s1\n 48616: ra = a1 | a4\n 48619: a1 = u8 [a0 + 0x19]\n 48622: a5 = u8 [a0 + 0x18]\n 48625: s1 = u8 [a0 + 0x1a]\n 48628: a2 = u8 [a0 + 0x1b]\n 48631: a1 = a1 << 0x8\n 48634: a1 = a1 | a5\n 48637: s1 = s1 << 0x10\n 48640: a2 = a2 << 0x18\n 48643: a2 = a2 | s1\n 48646: a5 = a2 | a1\n 48649: a1 = u8 [a0 + 0x9]\n 48652: a2 = u8 [a0 + 0x8]\n 48655: s1 = u8 [a0 + 0xa]\n 48658: a3 = u8 [a0 + 0xb]\n 48661: a1 = a1 << 0x8\n 48664: a1 = a1 | a2\n 48667: s1 = s1 << 0x10\n 48670: a3 = a3 << 0x18\n 48673: a3 = a3 | s1\n 48676: s1 = a3 | a1\n 48679: a1 = u8 [a0 + 0x1d]\n 48682: a2 = u8 [a0 + 0x1c]\n 48685: a3 = u8 [a0 + 0x1e]\n 48688: a4 = u8 [a0 + 0x1f]\n 48691: a1 = a1 << 0x8\n 48694: a1 = a1 | a2\n 48697: a3 = a3 << 0x10\n 48700: a4 = a4 << 0x18\n 48703: a3 = a3 | a4\n 48706: a1 = a1 | a3\n 48709: a2 = u8 [a0 + 0xd]\n 48712: a3 = u8 [a0 + 0xc]\n 48715: a4 = u8 [a0 + 0xe]\n 48718: a0 = u8 [a0 + 0xf]\n 48721: a2 = a2 << 0x8\n 48724: a2 = a2 | a3\n 48727: a4 = a4 << 0x10\n 48730: a0 = a0 << 0x18\n 48733: a0 = a0 | a4\n 48736: a0 = a0 | a2\n 48739: a0 = a0 | a1\n 48742: a5 = a5 | s1\n 48745: a0 = a0 << 0x20\n 48748: a0 = a0 | a5\n 48751: a1 = ra | t2\n 48754: a2 = t1 | t0\n 48757: a1 = a1 << 0x20\n 48760: a1 = a1 | a2\n 48763: a0 = a0 | a1\n 48766: a0 = a0 >u 0\n 48768: u64 [sp + 0x58] = a0\n 48771: a0 = u64 [sp + 0x70]\n 48774: u64 [sp + 0x1d8] = a0\n 48778: a0 = u64 [sp + 0x78]\n 48781: u64 [sp + 0x1d0] = a0\n 48785: a0 = u64 [sp + 0x80]\n 48789: u64 [sp + 0x1c8] = a0\n 48793: s1 = u64 [sp + 0x60]\n 48796: u64 [sp + 0x1c0] = s1\n 48800: u64 [sp + 504] = 0\n 48804: u64 [sp + 496] = 0\n 48808: u64 [sp + 488] = 0\n 48812: u64 [sp + 480] = 0\n 48816: u32 [sp + 416] = 0x20\n 48821: i32 a1 = sp + 0x1c0\n 48825: i32 a3 = sp + 0x1e0\n 48829: i32 a4 = sp + 0x1a0\n 48833: a2 = 0xffffffffffffffff\n 48836: a0 = 0\n 48838: ecalli 7 // 'get_storage'\n 48840: a0 = u64 [sp + 0x1e0]\n 48844: a1 = u64 [sp + 0x1e8]\n 48848: a2 = u64 [sp + 0x1f0]\n 48852: a3 = u64 [sp + 0x1f8]\n 48856: a0 = a0 & 0xffffffffffffff00\n 48860: a4 = u64 [sp + 0x58]\n 48863: a0 = a0 | a4\n 48866: a4 = u64 [sp + 0x70]\n 48869: u64 [sp + 0x1d8] = a4\n 48873: a4 = u64 [sp + 0x78]\n 48876: u64 [sp + 0x1d0] = a4\n 48880: a4 = u64 [sp + 0x80]\n 48884: u64 [sp + 0x1c8] = a4\n 48888: u64 [sp + 0x1c0] = s1\n 48892: u64 [sp + 0x1f8] = a3\n 48896: u64 [sp + 0x1f0] = a2\n 48900: u64 [sp + 0x1e8] = a1\n 48904: u64 [sp + 0x1e0] = a0\n 48908: i32 a1 = sp + 0x1c0\n 48912: i32 a3 = sp + 0x1e0\n 48916: a2 = 0xffffffffffffffff\n 48919: a4 = 0x20\n 48922: a0 = 0\n 48924: ecalli 13 // 'set_storage'\n 48926: fallthrough\n      : @665 (gas: 10)\n 48927: a0 = 0x100000000\n 48937: u64 [sp + 0x58] = a0\n 48940: a0 = 0xffffff20\n 48950: a1 = u64 [sp + 0x98]\n 48954: a0 = a1 <u a0\n 48957: a1 = u64 [sp + 0x90]\n 48961: a0 = 0 if a1 != 0\n 48963: a1 = u64 [sp + 0x68]\n 48966: a0 = 0 if a1 != 0\n 48968: jump @677 if a0 == 0\n      : @666 (gas: 4)\n 48972: a0 = u64 [sp + 0x88]\n 48976: i32 a0 = a0 + 0xe0\n 48980: a1 = 0x20\n 48983: ra = 580, jump @0\n      : @667 [@dyn 290] (gas: 135)\n 48990: a1 = u8 [a0 + 0x1d]\n 48993: a2 = u8 [a0 + 0x1c]\n 48996: a3 = u8 [a0 + 0x1e]\n 48999: a4 = u8 [a0 + 0x1f]\n 49002: a1 = a1 << 0x8\n 49005: a1 = a1 | a2\n 49008: a3 = a3 << 0x10\n 49011: a4 = a4 << 0x18\n 49014: a3 = a3 | a4\n 49017: a1 = a1 | a3\n 49020: a2 = u8 [a0 + 0xd]\n 49023: a3 = u8 [a0 + 0xc]\n 49026: a4 = u8 [a0 + 0xe]\n 49029: a5 = u8 [a0 + 0xf]\n 49032: a2 = a2 << 0x8\n 49035: a2 = a2 | a3\n 49038: a4 = a4 << 0x10\n 49041: a5 = a5 << 0x18\n 49044: a4 = a4 | a5\n 49047: a2 = a2 | a4\n 49050: a1 = a1 | a2\n 49053: a1 = a1 << 0x20\n 49056: a2 = u8 [a0 + 0x9]\n 49059: a3 = u8 [a0 + 0x8]\n 49062: a4 = u8 [a0 + 0xa]\n 49065: a5 = u8 [a0 + 0xb]\n 49068: a2 = a2 << 0x8\n 49071: a2 = a2 | a3\n 49074: a4 = a4 << 0x10\n 49077: a5 = a5 << 0x18\n 49080: a4 = a4 | a5\n 49083: a2 = a2 | a4\n 49086: a3 = u8 [a0 + 0x19]\n 49089: a4 = u8 [a0 + 0x18]\n 49092: a5 = u8 [a0 + 0x1a]\n 49095: s1 = u8 [a0 + 0x1b]\n 49098: a3 = a3 << 0x8\n 49101: a3 = a3 | a4\n 49104: a5 = a5 << 0x10\n 49107: s1 = s1 << 0x18\n 49110: a5 = a5 | s1\n 49113: a3 = a3 | a5\n 49116: a2 = a2 | a3\n 49119: a1 = a1 | a2\n 49122: a2 = u8 [a0 + 0x15]\n 49125: a3 = u8 [a0 + 0x14]\n 49128: a4 = u8 [a0 + 0x16]\n 49131: a5 = u8 [a0 + 0x17]\n 49134: a2 = a2 << 0x8\n 49137: a2 = a2 | a3\n 49140: a4 = a4 << 0x10\n 49143: a5 = a5 << 0x18\n 49146: a4 = a4 | a5\n 49149: a2 = a2 | a4\n 49152: a3 = u8 [a0 + 0x5]\n 49155: a4 = u8 [a0 + 0x4]\n 49158: a5 = u8 [a0 + 0x6]\n 49161: s1 = u8 [a0 + 0x7]\n 49164: a3 = a3 << 0x8\n 49167: a3 = a3 | a4\n 49170: a5 = a5 << 0x10\n 49173: s1 = s1 << 0x18\n 49176: a5 = a5 | s1\n 49179: a3 = a3 | a5\n 49182: a2 = a2 | a3\n 49185: a3 = u8 [a0 + 0x1]\n 49188: a4 = u8 [a0]\n 49190: a5 = u8 [a0 + 0x2]\n 49193: s1 = u8 [a0 + 0x3]\n 49196: a3 = a3 << 0x8\n 49199: a3 = a3 | a4\n 49202: a5 = a5 << 0x10\n 49205: s1 = s1 << 0x18\n 49208: a4 = u8 [a0 + 0x11]\n 49211: a5 = a5 | s1\n 49214: a3 = a3 | a5\n 49217: a5 = u8 [a0 + 0x10]\n 49220: a4 = a4 << 0x8\n 49223: s1 = u8 [a0 + 0x12]\n 49226: a0 = u8 [a0 + 0x13]\n 49229: a4 = a4 | a5\n 49232: a2 = a2 << 0x20\n 49235: s1 = s1 << 0x10\n 49238: a0 = a0 << 0x18\n 49241: a0 = a0 | s1\n 49244: a0 = a0 | a4\n 49247: a0 = a0 | a3\n 49250: a0 = a0 | a2\n 49253: a0 = a0 | a1\n 49256: s1 = a0 >u 0\n 49258: a0 = u64 [sp + 0x70]\n 49261: u64 [sp + 0x1d8] = a0\n 49265: a0 = u64 [sp + 0x78]\n 49268: u64 [sp + 0x1d0] = a0\n 49272: a0 = u64 [sp + 0x80]\n 49276: u64 [sp + 0x1c8] = a0\n 49280: a0 = u64 [sp + 0x60]\n 49283: u64 [sp + 0x1c0] = a0\n 49287: u64 [sp + 504] = 0\n 49291: u64 [sp + 496] = 0\n 49295: u64 [sp + 488] = 0\n 49299: u64 [sp + 480] = 0\n 49303: u32 [sp + 416] = 0x20\n 49308: i32 a1 = sp + 0x1c0\n 49312: i32 a3 = sp + 0x1e0\n 49316: i32 a4 = sp + 0x1a0\n 49320: a2 = 0xffffffffffffffff\n 49323: a0 = 0\n 49325: ecalli 7 // 'get_storage'\n 49327: a0 = u64 [sp + 0x1e8]\n 49331: a1 = u64 [sp + 0x1f0]\n 49335: a2 = u64 [sp + 0x1f8]\n 49339: a3 = u64 [sp + 0x1e0]\n 49343: s1 = s1 << 0x8\n 49346: a3 = a3 & 0xffffffffffff00ff\n 49351: a3 = a3 | s1\n 49354: a4 = u64 [sp + 0x70]\n 49357: u64 [sp + 0x1d8] = a4\n 49361: a4 = u64 [sp + 0x78]\n 49364: u64 [sp + 0x1d0] = a4\n 49368: a4 = u64 [sp + 0x80]\n 49372: u64 [sp + 0x1c8] = a4\n 49376: a4 = u64 [sp + 0x60]\n 49379: u64 [sp + 0x1c0] = a4\n 49383: u64 [sp + 0x1f8] = a2\n 49387: u64 [sp + 0x1f0] = a1\n 49391: u64 [sp + 0x1e8] = a0\n 49395: u64 [sp + 0x1e0] = a3\n 49399: i32 a1 = sp + 0x1c0\n 49403: i32 a3 = sp + 0x1e0\n 49407: a2 = 0xffffffffffffffff\n 49410: a4 = 0x20\n 49413: a0 = 0\n 49415: ecalli 13 // 'set_storage'\n 49417: fallthrough\n      : @668 (gas: 9)\n 49418: a0 = u64 [sp + 0x58]\n 49421: a0 = a0 + 0xffffffffffffff00\n 49425: a1 = u64 [sp + 0x98]\n 49429: a0 = a1 <u a0\n 49432: a1 = u64 [sp + 0x90]\n 49436: a0 = 0 if a1 != 0\n 49438: a1 = u64 [sp + 0x68]\n 49441: a0 = 0 if a1 != 0\n 49443: jump @677 if a0 == 0\n      : @669 (gas: 4)\n 49447: a0 = u64 [sp + 0x88]\n 49451: i32 a0 = a0 + 0x100\n 49455: a1 = 0x20\n 49458: ra = 582, jump @0\n      : @670 [@dyn 291] (gas: 135)\n 49465: a1 = u8 [a0 + 0x1d]\n 49468: a2 = u8 [a0 + 0x1c]\n 49471: a3 = u8 [a0 + 0x1e]\n 49474: a4 = u8 [a0 + 0x1f]\n 49477: a1 = a1 << 0x8\n 49480: a1 = a1 | a2\n 49483: a3 = a3 << 0x10\n 49486: a4 = a4 << 0x18\n 49489: a3 = a3 | a4\n 49492: a1 = a1 | a3\n 49495: a2 = u8 [a0 + 0xd]\n 49498: a3 = u8 [a0 + 0xc]\n 49501: a4 = u8 [a0 + 0xe]\n 49504: a5 = u8 [a0 + 0xf]\n 49507: a2 = a2 << 0x8\n 49510: a2 = a2 | a3\n 49513: a4 = a4 << 0x10\n 49516: a5 = a5 << 0x18\n 49519: a4 = a4 | a5\n 49522: a2 = a2 | a4\n 49525: a1 = a1 | a2\n 49528: a1 = a1 << 0x20\n 49531: a2 = u8 [a0 + 0x9]\n 49534: a3 = u8 [a0 + 0x8]\n 49537: a4 = u8 [a0 + 0xa]\n 49540: a5 = u8 [a0 + 0xb]\n 49543: a2 = a2 << 0x8\n 49546: a2 = a2 | a3\n 49549: a4 = a4 << 0x10\n 49552: a5 = a5 << 0x18\n 49555: a4 = a4 | a5\n 49558: a2 = a2 | a4\n 49561: a3 = u8 [a0 + 0x19]\n 49564: a4 = u8 [a0 + 0x18]\n 49567: a5 = u8 [a0 + 0x1a]\n 49570: s1 = u8 [a0 + 0x1b]\n 49573: a3 = a3 << 0x8\n 49576: a3 = a3 | a4\n 49579: a5 = a5 << 0x10\n 49582: s1 = s1 << 0x18\n 49585: a5 = a5 | s1\n 49588: a3 = a3 | a5\n 49591: a2 = a2 | a3\n 49594: a1 = a1 | a2\n 49597: a2 = u8 [a0 + 0x15]\n 49600: a3 = u8 [a0 + 0x14]\n 49603: a4 = u8 [a0 + 0x16]\n 49606: a5 = u8 [a0 + 0x17]\n 49609: a2 = a2 << 0x8\n 49612: a2 = a2 | a3\n 49615: a4 = a4 << 0x10\n 49618: a5 = a5 << 0x18\n 49621: a4 = a4 | a5\n 49624: a2 = a2 | a4\n 49627: a3 = u8 [a0 + 0x5]\n 49630: a4 = u8 [a0 + 0x4]\n 49633: a5 = u8 [a0 + 0x6]\n 49636: s1 = u8 [a0 + 0x7]\n 49639: a3 = a3 << 0x8\n 49642: a3 = a3 | a4\n 49645: a5 = a5 << 0x10\n 49648: s1 = s1 << 0x18\n 49651: a5 = a5 | s1\n 49654: a3 = a3 | a5\n 49657: a2 = a2 | a3\n 49660: a3 = u8 [a0 + 0x1]\n 49663: a4 = u8 [a0]\n 49665: a5 = u8 [a0 + 0x2]\n 49668: s1 = u8 [a0 + 0x3]\n 49671: a3 = a3 << 0x8\n 49674: a3 = a3 | a4\n 49677: a5 = a5 << 0x10\n 49680: s1 = s1 << 0x18\n 49683: a4 = u8 [a0 + 0x11]\n 49686: a5 = a5 | s1\n 49689: a3 = a3 | a5\n 49692: a5 = u8 [a0 + 0x10]\n 49695: a4 = a4 << 0x8\n 49698: s1 = u8 [a0 + 0x12]\n 49701: a0 = u8 [a0 + 0x13]\n 49704: a4 = a4 | a5\n 49707: a2 = a2 << 0x20\n 49710: s1 = s1 << 0x10\n 49713: a0 = a0 << 0x18\n 49716: a0 = a0 | s1\n 49719: a0 = a0 | a4\n 49722: a0 = a0 | a3\n 49725: a0 = a0 | a2\n 49728: a0 = a0 | a1\n 49731: s1 = a0 >u 0\n 49733: a0 = u64 [sp + 0x70]\n 49736: u64 [sp + 0x1d8] = a0\n 49740: a0 = u64 [sp + 0x78]\n 49743: u64 [sp + 0x1d0] = a0\n 49747: a0 = u64 [sp + 0x80]\n 49751: u64 [sp + 0x1c8] = a0\n 49755: a0 = u64 [sp + 0x60]\n 49758: u64 [sp + 0x1c0] = a0\n 49762: u64 [sp + 504] = 0\n 49766: u64 [sp + 496] = 0\n 49770: u64 [sp + 488] = 0\n 49774: u64 [sp + 480] = 0\n 49778: u32 [sp + 416] = 0x20\n 49783: i32 a1 = sp + 0x1c0\n 49787: i32 a3 = sp + 0x1e0\n 49791: i32 a4 = sp + 0x1a0\n 49795: a2 = 0xffffffffffffffff\n 49798: a0 = 0\n 49800: ecalli 7 // 'get_storage'\n 49802: a0 = u64 [sp + 0x1e8]\n 49806: a1 = u64 [sp + 0x1f0]\n 49810: a2 = u64 [sp + 0x1f8]\n 49814: a3 = u64 [sp + 0x1e0]\n 49818: s1 = s1 << 0x10\n 49821: a3 = a3 & 0xffffffffff00ffff\n 49827: a3 = a3 | s1\n 49830: a4 = u64 [sp + 0x70]\n 49833: u64 [sp + 0x1d8] = a4\n 49837: a4 = u64 [sp + 0x78]\n 49840: u64 [sp + 0x1d0] = a4\n 49844: a4 = u64 [sp + 0x80]\n 49848: u64 [sp + 0x1c8] = a4\n 49852: a4 = u64 [sp + 0x60]\n 49855: u64 [sp + 0x1c0] = a4\n 49859: u64 [sp + 0x1f8] = a2\n 49863: u64 [sp + 0x1f0] = a1\n 49867: u64 [sp + 0x1e8] = a0\n 49871: u64 [sp + 0x1e0] = a3\n 49875: i32 a1 = sp + 0x1c0\n 49879: i32 a3 = sp + 0x1e0\n 49883: a2 = 0xffffffffffffffff\n 49886: a4 = 0x20\n 49889: a0 = 0\n 49891: ecalli 13 // 'set_storage'\n 49893: fallthrough\n      : @671 (gas: 10)\n 49894: a0 = 0x100000000\n 49904: u64 [sp + 0x58] = a0\n 49907: a0 = 0xfffffee0\n 49917: a1 = u64 [sp + 0x98]\n 49921: a0 = a1 <u a0\n 49924: a1 = u64 [sp + 0x90]\n 49928: a0 = 0 if a1 != 0\n 49930: a1 = u64 [sp + 0x68]\n 49933: a0 = 0 if a1 != 0\n 49935: jump @677 if a0 == 0\n      : @672 (gas: 4)\n 49939: a0 = u64 [sp + 0x88]\n 49943: i32 a0 = a0 + 0x120\n 49947: a1 = 0x20\n 49950: ra = 584, jump @0\n      : @673 [@dyn 292] (gas: 136)\n 49957: a1 = u8 [a0 + 0x1d]\n 49960: a2 = u8 [a0 + 0x1c]\n 49963: a3 = u8 [a0 + 0x1e]\n 49966: a4 = u8 [a0 + 0x1f]\n 49969: a1 = a1 << 0x8\n 49972: a1 = a1 | a2\n 49975: a3 = a3 << 0x10\n 49978: a4 = a4 << 0x18\n 49981: a3 = a3 | a4\n 49984: a1 = a1 | a3\n 49987: a2 = u8 [a0 + 0xd]\n 49990: a3 = u8 [a0 + 0xc]\n 49993: a4 = u8 [a0 + 0xe]\n 49996: a5 = u8 [a0 + 0xf]\n 49999: a2 = a2 << 0x8\n 50002: a2 = a2 | a3\n 50005: a4 = a4 << 0x10\n 50008: a5 = a5 << 0x18\n 50011: a4 = a4 | a5\n 50014: a2 = a2 | a4\n 50017: a1 = a1 | a2\n 50020: a1 = a1 << 0x20\n 50023: a2 = u8 [a0 + 0x9]\n 50026: a3 = u8 [a0 + 0x8]\n 50029: a4 = u8 [a0 + 0xa]\n 50032: a5 = u8 [a0 + 0xb]\n 50035: a2 = a2 << 0x8\n 50038: a2 = a2 | a3\n 50041: a4 = a4 << 0x10\n 50044: a5 = a5 << 0x18\n 50047: a4 = a4 | a5\n 50050: a2 = a2 | a4\n 50053: a3 = u8 [a0 + 0x19]\n 50056: a4 = u8 [a0 + 0x18]\n 50059: a5 = u8 [a0 + 0x1a]\n 50062: s1 = u8 [a0 + 0x1b]\n 50065: a3 = a3 << 0x8\n 50068: a3 = a3 | a4\n 50071: a5 = a5 << 0x10\n 50074: s1 = s1 << 0x18\n 50077: a5 = a5 | s1\n 50080: a3 = a3 | a5\n 50083: a2 = a2 | a3\n 50086: a1 = a1 | a2\n 50089: a2 = u8 [a0 + 0x15]\n 50092: a3 = u8 [a0 + 0x14]\n 50095: a4 = u8 [a0 + 0x16]\n 50098: a5 = u8 [a0 + 0x17]\n 50101: a2 = a2 << 0x8\n 50104: a2 = a2 | a3\n 50107: a4 = a4 << 0x10\n 50110: a5 = a5 << 0x18\n 50113: a4 = a4 | a5\n 50116: a2 = a2 | a4\n 50119: a3 = u8 [a0 + 0x5]\n 50122: a4 = u8 [a0 + 0x4]\n 50125: a5 = u8 [a0 + 0x6]\n 50128: s1 = u8 [a0 + 0x7]\n 50131: a3 = a3 << 0x8\n 50134: a3 = a3 | a4\n 50137: a5 = a5 << 0x10\n 50140: s1 = s1 << 0x18\n 50143: a5 = a5 | s1\n 50146: a3 = a3 | a5\n 50149: a2 = a2 | a3\n 50152: a3 = u8 [a0 + 0x1]\n 50155: a4 = u8 [a0]\n 50157: a5 = u8 [a0 + 0x2]\n 50160: s1 = u8 [a0 + 0x3]\n 50163: a3 = a3 << 0x8\n 50166: a3 = a3 | a4\n 50169: a5 = a5 << 0x10\n 50172: s1 = s1 << 0x18\n 50175: a4 = u8 [a0 + 0x11]\n 50178: a5 = a5 | s1\n 50181: a3 = a3 | a5\n 50184: a5 = u8 [a0 + 0x10]\n 50187: a4 = a4 << 0x8\n 50190: s1 = u8 [a0 + 0x12]\n 50193: a0 = u8 [a0 + 0x13]\n 50196: a4 = a4 | a5\n 50199: a2 = a2 << 0x20\n 50202: s1 = s1 << 0x10\n 50205: a0 = a0 << 0x18\n 50208: a0 = a0 | s1\n 50211: a0 = a0 | a4\n 50214: a0 = a0 | a3\n 50217: a0 = a0 | a2\n 50220: a0 = a0 | a1\n 50223: s1 = a0 >u 0\n 50225: a0 = u64 [sp + 0x70]\n 50228: u64 [sp + 0x1d8] = a0\n 50232: a0 = u64 [sp + 0x78]\n 50235: u64 [sp + 0x1d0] = a0\n 50239: a0 = u64 [sp + 0x80]\n 50243: u64 [sp + 0x1c8] = a0\n 50247: a0 = u64 [sp + 0x60]\n 50250: u64 [sp + 0x1c0] = a0\n 50254: u64 [sp + 504] = 0\n 50258: u64 [sp + 496] = 0\n 50262: u64 [sp + 488] = 0\n 50266: u64 [sp + 480] = 0\n 50270: u32 [sp + 416] = 0x20\n 50275: i32 a1 = sp + 0x1c0\n 50279: i32 a3 = sp + 0x1e0\n 50283: i32 a4 = sp + 0x1a0\n 50287: a2 = 0xffffffffffffffff\n 50290: a0 = 0\n 50292: ecalli 7 // 'get_storage'\n 50294: a0 = u64 [sp + 0x1e8]\n 50298: a1 = u64 [sp + 0x1f0]\n 50302: a2 = u64 [sp + 0x1f8]\n 50306: a3 = u64 [sp + 0x1e0]\n 50310: s1 = s1 << 0x18\n 50313: a4 = 0xffffffff00ffffff\n 50323: a3 = a3 & a4\n 50326: a3 = a3 | s1\n 50329: a4 = u64 [sp + 0x70]\n 50332: u64 [sp + 0x1d8] = a4\n 50336: a4 = u64 [sp + 0x78]\n 50339: u64 [sp + 0x1d0] = a4\n 50343: a4 = u64 [sp + 0x80]\n 50347: u64 [sp + 0x1c8] = a4\n 50351: a4 = u64 [sp + 0x60]\n 50354: u64 [sp + 0x1c0] = a4\n 50358: u64 [sp + 0x1f8] = a2\n 50362: u64 [sp + 0x1f0] = a1\n 50366: u64 [sp + 0x1e8] = a0\n 50370: u64 [sp + 0x1e0] = a3\n 50374: i32 a1 = sp + 0x1c0\n 50378: i32 a3 = sp + 0x1e0\n 50382: a2 = 0xffffffffffffffff\n 50385: a4 = 0x20\n 50388: a0 = 0\n 50390: ecalli 13 // 'set_storage'\n 50392: fallthrough\n      : @674 (gas: 9)\n 50393: a0 = u64 [sp + 0x58]\n 50396: a0 = a0 + 0xfffffffffffffec0\n 50400: a1 = u64 [sp + 0x98]\n 50404: a0 = a1 <u a0\n 50407: a1 = u64 [sp + 0x90]\n 50411: a0 = 0 if a1 != 0\n 50413: a1 = u64 [sp + 0x68]\n 50416: a0 = 0 if a1 != 0\n 50418: jump @677 if a0 == 0\n      : @675 (gas: 6)\n 50422: a0 = 0xffffffff00000000\n 50432: u64 [sp + 0x98] = a0\n 50436: a0 = u64 [sp + 0x88]\n 50440: i32 a0 = a0 + 0x140\n 50444: a1 = 0x20\n 50447: ra = 586, jump @0\n      : @676 [@dyn 293] (gas: 132)\n 50454: a1 = u8 [a0 + 0x9]\n 50457: a2 = u8 [a0 + 0x8]\n 50460: a3 = u8 [a0 + 0xa]\n 50463: a4 = u8 [a0 + 0xb]\n 50466: a1 = a1 << 0x8\n 50469: a1 = a1 | a2\n 50472: a3 = a3 << 0x10\n 50475: a4 = a4 << 0x18\n 50478: a3 = a3 | a4\n 50481: a1 = a1 | a3\n 50484: a2 = u8 [a0 + 0xd]\n 50487: a3 = u8 [a0 + 0xc]\n 50490: a4 = u8 [a0 + 0xe]\n 50493: a5 = u8 [a0 + 0xf]\n 50496: a2 = a2 << 0x8\n 50499: a2 = a2 | a3\n 50502: a4 = a4 << 0x10\n 50505: a5 = a5 << 0x18\n 50508: a4 = a4 | a5\n 50511: a2 = a2 | a4\n 50514: a2 = a2 << 0x20\n 50517: a1 = a1 | a2\n 50520: a2 = u8 [a0 + 0x11]\n 50523: a3 = u8 [a0 + 0x10]\n 50526: a4 = u8 [a0 + 0x12]\n 50529: a5 = u8 [a0 + 0x13]\n 50532: a2 = a2 << 0x8\n 50535: a2 = a2 | a3\n 50538: a4 = a4 << 0x10\n 50541: a5 = a5 << 0x18\n 50544: a4 = a4 | a5\n 50547: a2 = a2 | a4\n 50550: a3 = u8 [a0 + 0x15]\n 50553: a4 = u8 [a0 + 0x14]\n 50556: a5 = u8 [a0 + 0x16]\n 50559: s1 = u8 [a0 + 0x17]\n 50562: a3 = a3 << 0x8\n 50565: a3 = a3 | a4\n 50568: a5 = a5 << 0x10\n 50571: s1 = s1 << 0x18\n 50574: a5 = a5 | s1\n 50577: a3 = a3 | a5\n 50580: a3 = a3 << 0x20\n 50583: a2 = a2 | a3\n 50586: a3 = u8 [a0 + 0x19]\n 50589: a4 = u8 [a0 + 0x18]\n 50592: a5 = u8 [a0 + 0x1a]\n 50595: s1 = u8 [a0 + 0x1b]\n 50598: a3 = a3 << 0x8\n 50601: a3 = a3 | a4\n 50604: a5 = a5 << 0x10\n 50607: s1 = s1 << 0x18\n 50610: a5 = a5 | s1\n 50613: a3 = a3 | a5\n 50616: a4 = u8 [a0 + 0x1d]\n 50619: a5 = u8 [a0 + 0x1c]\n 50622: s1 = u8 [a0 + 0x1e]\n 50625: a0 = u8 [a0 + 0x1f]\n 50628: a4 = a4 << 0x8\n 50631: a4 = a4 | a5\n 50634: s1 = s1 << 0x10\n 50637: a0 = a0 << 0x18\n 50640: a0 = a0 | s1\n 50643: a0 = a0 | a4\n 50646: a0 = a0 << 0x20\n 50649: a0 = a0 | a3\n 50652: a0 = a0 & 0xffffffffffffffff\n 50655: a2 = a2 & 0xffffffffffffffff\n 50658: a3 = u64 [sp + 0x98]\n 50662: a1 = a1 & a3\n 50665: u32 [sp + 416] = 0x20\n 50670: a1 = reverse a1\n 50672: u64 [sp + 0x98] = a1\n 50676: s1 = reverse a2\n 50678: a0 = reverse a0\n 50680: u64 [sp + 0x90] = a0\n 50684: a0 = u64 [sp + 0x70]\n 50687: u64 [sp + 0x1d8] = a0\n 50691: a0 = u64 [sp + 0x78]\n 50694: u64 [sp + 0x1d0] = a0\n 50698: a0 = u64 [sp + 0x80]\n 50702: u64 [sp + 0x1c8] = a0\n 50706: a0 = u64 [sp + 0x60]\n 50709: u64 [sp + 0x1c0] = a0\n 50713: u64 [sp + 504] = 0\n 50717: u64 [sp + 496] = 0\n 50721: u64 [sp + 488] = 0\n 50725: u64 [sp + 480] = 0\n 50729: i32 a1 = sp + 0x1c0\n 50733: i32 a3 = sp + 0x1e0\n 50737: i32 a4 = sp + 0x1a0\n 50741: a2 = 0xffffffffffffffff\n 50744: a0 = 0\n 50746: ecalli 7 // 'get_storage'\n 50748: a0 = u64 [sp + 0x1f8]\n 50752: a1 = u32 [sp + 0x1e0]\n 50756: a5 = u64 [sp + 0x90]\n 50760: a2 = a5 >> 0x20\n 50763: a3 = s1 << 0x20\n 50766: a2 = a2 | a3\n 50769: s1 = s1 >> 0x20\n 50772: a4 = u64 [sp + 0x98]\n 50776: a3 = a4 << 0x20\n 50779: a3 = a3 | s1\n 50782: a4 = a4 >> 0x20\n 50785: a5 = a5 << 0x20\n 50788: a1 = a1 | a5\n 50791: a0 = a0 | a4\n 50794: a4 = u64 [sp + 0x70]\n 50797: u64 [sp + 0x1d8] = a4\n 50801: a4 = u64 [sp + 0x78]\n 50804: u64 [sp + 0x1d0] = a4\n 50808: a4 = u64 [sp + 0x80]\n 50812: u64 [sp + 0x1c8] = a4\n 50816: a4 = u64 [sp + 0x60]\n 50819: u64 [sp + 0x1c0] = a4\n 50823: u64 [sp + 0x1f8] = a0\n 50827: u64 [sp + 0x1f0] = a3\n 50831: u64 [sp + 0x1e8] = a2\n 50835: u64 [sp + 0x1e0] = a1\n 50839: i32 a1 = sp + 0x1c0\n 50843: i32 a3 = sp + 0x1e0\n 50847: a2 = 0xffffffffffffffff\n 50850: a4 = 0x20\n 50853: a0 = 0\n 50855: ecalli 13 // 'set_storage'\n 50857: sp = s0 + 0xfffffffffffffde0\n 50861: ra = u64 [sp + 0x218]\n 50865: s0 = u64 [sp + 0x210]\n 50869: s1 = u64 [sp + 0x208]\n 50873: sp = sp + 0x220\n 50877: ret\n      : @677 (gas: 1)\n 50879: trap\n      : @678 (gas: 7)\n 50880: a3 = u64 [sp + 0x1f8]\n 50884: s1 = u64 [sp + 0x1f0]\n 50888: a2 = u64 [sp + 0x1e8]\n 50892: a0 = s1 | a3\n 50895: a1 = a2 <u 0x1\n 50898: a1 = 0 if a0 != 0\n 50900: jump @683 if a1 == 0\n      : @679 (gas: 49)\n 50904: a0 = u64 [sp + 0x1e0]\n 50908: u64 [sp + 0x18] = a0\n 50911: a0 = a0 + 0x1\n 50914: a1 = a0 <u 0x1\n 50917: a1 = a1 + a2\n 50920: u64 [sp + 0x1e0] = a0\n 50924: a0 = a0 | a1\n 50927: u64 [sp + 0x1e8] = a1\n 50931: a0 = a0 <u 0x1\n 50934: a0 = a0 + s1\n 50937: u64 [sp + 0x1f0] = a0\n 50941: a0 = a0 <u s1\n 50944: a0 = a0 + a3\n 50947: u64 [sp + 0x1f8] = a0\n 50951: a0 = u64 [sp + 0x50]\n 50954: u64 [sp + 0x1c8] = a0\n 50958: a0 = u64 [sp + 0x58]\n 50961: u64 [sp + 0x1c0] = a0\n 50965: a0 = u64 [sp + 0x48]\n 50968: u64 [sp + 0x1d0] = a0\n 50972: a0 = u64 [sp + 0x40]\n 50975: u64 [sp + 0x1d8] = a0\n 50979: i32 a1 = sp + 0x1c0\n 50983: u64 [sp + 0x10] = a3\n 50986: i32 a3 = sp + 0x1e0\n 50990: u64 [sp + 0x8] = a2\n 50993: a2 = 0xffffffffffffffff\n 50996: a4 = 0x20\n 50999: a0 = 0\n 51001: ecalli 13 // 'set_storage'\n 51003: a0 = u64 [sp + 0x10]\n 51006: u64 [sp + 0x138] = a0\n 51010: u64 [sp + 0x130] = s1\n 51014: a0 = u64 [sp + 0x8]\n 51017: u64 [sp + 0x128] = a0\n 51021: a0 = u64 [sp + 0x18]\n 51024: u64 [sp + 0x120] = a0\n 51028: a0 = u64 [sp + 0x40]\n 51031: u64 [sp + 0x158] = a0\n 51035: a0 = u64 [sp + 0x48]\n 51038: u64 [sp + 0x150] = a0\n 51042: a0 = u64 [sp + 0x50]\n 51045: u64 [sp + 0x148] = a0\n 51049: a0 = sp + 0x160\n 51053: a1 = sp + 0x140\n 51057: a2 = sp + 0x120\n 51061: a3 = u64 [sp + 0x58]\n 51064: u64 [sp + 0x140] = a3\n 51068: ra = 588, jump @478\n      : @680 [@dyn 294] (gas: 8)\n 51074: a0 = u64 [sp + 0x198]\n 51078: a1 = u64 [sp + 0x190]\n 51082: a2 = u64 [sp + 0x188]\n 51086: a3 = u64 [sp + 0x180]\n 51090: a0 = a0 | a2\n 51093: a1 = a1 | a3\n 51096: a0 = a0 | a1\n 51099: jump @685 if a0 != 0\n      : @681 (gas: 19)\n 51103: a2 = u64 [sp + 0x178]\n 51107: a0 = u64 [sp + 0x170]\n 51111: a1 = u64 [sp + 0x168]\n 51115: a3 = u64 [sp + 0x160]\n 51119: a4 = u64 [sp + 0x20]\n 51122: u64 [sp + 0xa0] = a4\n 51126: u64 [sp + 0xc0] = a3\n 51130: a3 = u64 [sp + 0x28]\n 51133: u64 [sp + 0xa8] = a3\n 51137: u64 [sp + 0xc8] = a1\n 51141: a1 = u64 [sp + 0x30]\n 51144: u64 [sp + 0xb0] = a1\n 51148: u64 [sp + 0xd0] = a0\n 51152: a0 = u64 [sp + 0x38]\n 51155: u64 [sp + 0xb8] = a0\n 51159: a0 = sp + 0xc0\n 51163: a1 = sp + 0xa0\n 51167: u64 [sp + 0xd8] = a2\n 51171: ra = 590, jump @642\n      : @682 [@dyn 295] (gas: 6)\n 51177: sp = s0 + 0xfffffffffffffde0\n 51181: ra = u64 [sp + 0x218]\n 51185: s0 = u64 [sp + 0x210]\n 51189: s1 = u64 [sp + 0x208]\n 51193: sp = sp + 0x220\n 51197: ret\n      : @683 (gas: 8)\n 51199: u64 [sp + 144] = 0\n 51203: u64 [sp + 136] = 0\n 51207: u64 [sp + 128] = 0\n 51211: a0 = 0x4e487b7100000000\n 51221: a1 = sp + 0x80\n 51225: u64 [sp + 0x98] = a0\n 51229: a0 = 0\n 51231: ra = 592, jump @23\n      : @684 [@dyn 296] (gas: 8)\n 51238: u64 [sp + 120] = 0\n 51241: u64 [sp + 112] = 0\n 51244: u64 [sp + 96] = 0x41\n 51248: a0 = 0x4\n 51251: a1 = sp + 0x60\n 51254: u64 [sp + 104] = 0\n 51257: ra = 0x254\n 51261: jump @23\n      : @685 (gas: 8)\n 51265: u64 [sp + 272] = 0\n 51269: u64 [sp + 264] = 0\n 51273: u64 [sp + 256] = 0\n 51277: a0 = 0x4e487b7100000000\n 51287: a1 = sp + 0x100\n 51291: u64 [sp + 0x118] = a0\n 51295: a0 = 0\n 51297: ra = 594, jump @23\n      : @686 [@dyn 297] (gas: 7)\n 51304: u64 [sp + 248] = 0\n 51308: u64 [sp + 240] = 0\n 51312: u64 [sp + 232] = 0\n 51316: a0 = 0x4\n 51319: a1 = sp + 0xe0\n 51323: u64 [sp + 224] = 0\n 51327: ra = 596, jump @23\n      : @687 [@dyn 298] (gas: 3)\n 51334: a1 = 0x24\n 51337: a0 = 0\n 51339: ra = 598, jump @0\n      : @688 [@dyn 299] (gas: 6)\n 51346: i32 a1 = a0 + 0\n 51348: a0 = 0x1\n 51351: a2 = 0x24\n 51354: ra = 0x258\n 51358: ecalli 11 // 'seal_return'\n 51360: fallthrough\n      : @689 [@dyn 300] (gas: 9)\n 51361: a2 = u64 [a1 + 0x18]\n 51364: a3 = u64 [a1 + 0x10]\n 51367: a4 = u64 [a1 + 0x8]\n 51370: a1 = u64 [a1]\n 51372: u64 [a0 + 0x18] = a2\n 51375: u64 [a0 + 0x10] = a3\n 51378: u64 [a0 + 0x8] = a4\n 51381: u64 [a0] = a1\n 51383: ret\n      : @690 (gas: 7)\n 51385: a4 = u64 [sp + 0x218]\n 51389: a3 = u64 [sp + 0x210]\n 51393: a2 = u64 [sp + 0x208]\n 51397: a0 = a3 | a4\n 51400: a1 = a2 <u 0x1\n 51403: a1 = 0 if a0 != 0\n 51405: jump @693 if a1 == 0\n      : @691 (gas: 50)\n 51409: a0 = u64 [sp + 0x200]\n 51413: u64 [sp + 0x58] = a0\n 51416: a0 = a0 + 0x1\n 51419: a1 = a0 <u 0x1\n 51422: a1 = a1 + a2\n 51425: u64 [sp + 0x200] = a0\n 51429: a0 = a0 | a1\n 51432: u64 [sp + 0x208] = a1\n 51436: a0 = a0 <u 0x1\n 51439: a0 = a0 + a3\n 51442: u64 [sp + 0x210] = a0\n 51446: a0 = a0 <u a3\n 51449: a0 = a0 + a4\n 51452: u64 [sp + 0x218] = a0\n 51456: a0 = u64 [sp + 0x70]\n 51459: u64 [sp + 0x1e8] = a0\n 51463: a0 = u64 [sp + 0x78]\n 51466: u64 [sp + 0x1e0] = a0\n 51470: a0 = u64 [sp + 0x68]\n 51473: u64 [sp + 0x1f0] = a0\n 51477: s1 = u64 [sp + 0x60]\n 51480: u64 [sp + 0x1f8] = s1\n 51484: i32 a1 = sp + 0x1e0\n 51488: u64 [sp + 0x48] = a3\n 51491: i32 a3 = sp + 0x200\n 51495: u64 [sp + 0x40] = a2\n 51498: a2 = 0xffffffffffffffff\n 51501: u64 [sp + 0x38] = a4\n 51504: a4 = 0x20\n 51507: a0 = 0\n 51509: ecalli 13 // 'set_storage'\n 51511: a0 = u64 [sp + 0x38]\n 51514: u64 [sp + 0x158] = a0\n 51518: a0 = u64 [sp + 0x48]\n 51521: u64 [sp + 0x150] = a0\n 51525: a0 = u64 [sp + 0x40]\n 51528: u64 [sp + 0x148] = a0\n 51532: a0 = u64 [sp + 0x58]\n 51535: u64 [sp + 0x140] = a0\n 51539: u64 [sp + 0x178] = s1\n 51543: a0 = u64 [sp + 0x68]\n 51546: u64 [sp + 0x170] = a0\n 51550: a0 = u64 [sp + 0x70]\n 51553: u64 [sp + 0x168] = a0\n 51557: a0 = sp + 0x180\n 51561: a1 = sp + 0x160\n 51565: a2 = sp + 0x140\n 51569: a3 = u64 [sp + 0x78]\n 51572: u64 [sp + 0x160] = a3\n 51576: ra = 602, jump @447\n      : @692 [@dyn 301] (gas: 453)\n 51582: a0 = u64 [sp + 0x1b8]\n 51586: u64 [sp + 0x58] = a0\n 51589: a0 = u64 [sp + 0x1b0]\n 51593: u64 [sp + 0x48] = a0\n 51596: s1 = u64 [sp + 0x1a8]\n 51600: a0 = u64 [sp + 0x1a0]\n 51604: u64 [sp + 0x18] = a0\n 51607: a3 = u64 [sp + 0x198]\n 51611: u64 [sp + 0x60] = a3\n 51614: a2 = u64 [sp + 0x190]\n 51618: u64 [sp + 0x68] = a2\n 51621: a1 = u64 [sp + 0x188]\n 51625: u64 [sp + 0x70] = a1\n 51628: a0 = u64 [sp + 0x180]\n 51632: u64 [sp + 0x78] = a0\n 51635: u64 [sp + 0x1f8] = a3\n 51639: u64 [sp + 0x1f0] = a2\n 51643: u64 [sp + 0x1e8] = a1\n 51647: u64 [sp + 0x1e0] = a0\n 51651: u64 [sp + 536] = 0\n 51655: u64 [sp + 528] = 0\n 51659: u64 [sp + 520] = 0\n 51663: u64 [sp + 512] = 0\n 51667: u32 [sp + 448] = 0x20\n 51672: i32 a1 = sp + 0x1e0\n 51676: i32 a3 = sp + 0x200\n 51680: i32 a4 = sp + 0x1c0\n 51684: a2 = 0xffffffffffffffff\n 51687: a0 = 0\n 51689: ecalli 7 // 'get_storage'\n 51691: a2 = u64 [sp + 0x18]\n 51694: a0 = a2 >> 0x3d\n 51697: a1 = s1 << 0x3\n 51700: a0 = a0 | a1\n 51703: a1 = a2 << 0x3\n 51706: a1 = a1 <u 0x100\n 51710: t1 = a1 ^ 0x1\n 51713: a1 = a0 >u 0\n 51715: t1 = a1 if a0 != 0\n 51718: s1 = s1 >> 0x3d\n 51721: a1 = u64 [sp + 0x48]\n 51724: a0 = a1 << 0x3\n 51727: a0 = a0 | s1\n 51730: a1 = a1 >> 0x3d\n 51733: a3 = u64 [sp + 0x58]\n 51736: a3 = a3 << 0x3\n 51739: a1 = a1 | a3\n 51742: a3 = a1 >u 0\n 51744: a4 = a0 >u 0\n 51746: a4 = a3 if a1 != 0\n 51749: a0 = a0 | a1\n 51752: t1 = a4 if a0 != 0\n 51755: a0 = u64 [sp + 0x200]\n 51759: u64 [sp + 0x58] = a0\n 51762: a0 = u64 [sp + 0x208]\n 51766: u64 [sp + 0x48] = a0\n 51769: a0 = u64 [sp + 0x210]\n 51773: u64 [sp + 0x40] = a0\n 51776: a0 = u64 [sp + 0x218]\n 51780: u64 [sp + 0x38] = a0\n 51783: u8 [sp + 319] = 0xff\n 51789: u8 [sp + 318] = 0xff\n 51795: u8 [sp + 317] = 0xff\n 51801: u8 [sp + 316] = 0xff\n 51807: u8 [sp + 315] = 0xff\n 51813: u8 [sp + 314] = 0xff\n 51819: u8 [sp + 313] = 0xff\n 51825: u8 [sp + 312] = 0xff\n 51831: u8 [sp + 311] = 0xff\n 51837: u8 [sp + 310] = 0xff\n 51843: u8 [sp + 309] = 0xff\n 51849: u8 [sp + 308] = 0xff\n 51855: u8 [sp + 307] = 0xff\n 51861: u8 [sp + 306] = 0xff\n 51867: u8 [sp + 305] = 0xff\n 51873: u8 [sp + 304] = 0xff\n 51879: u8 [sp + 303] = 0xff\n 51885: u8 [sp + 302] = 0xff\n 51891: u8 [sp + 301] = 0xff\n 51897: u8 [sp + 300] = 0xff\n 51903: u8 [sp + 299] = 0xff\n 51909: u8 [sp + 298] = 0xff\n 51915: u8 [sp + 297] = 0xff\n 51921: u8 [sp + 296] = 0xff\n 51927: u8 [sp + 295] = 0xff\n 51933: u8 [sp + 294] = 0xff\n 51939: u8 [sp + 293] = 0xff\n 51945: u8 [sp + 292] = 0xff\n 51951: u8 [sp + 291] = 0xff\n 51957: u8 [sp + 290] = 0xff\n 51963: u8 [sp + 289] = 0xff\n 51969: u8 [sp + 288] = 0xff\n 51975: u8 [sp + 287] = 0\n 51979: u8 [sp + 286] = 0\n 51983: u8 [sp + 285] = 0\n 51987: u8 [sp + 284] = 0\n 51991: u8 [sp + 283] = 0\n 51995: u8 [sp + 282] = 0\n 51999: u8 [sp + 281] = 0\n 52003: u8 [sp + 280] = 0\n 52007: u8 [sp + 279] = 0\n 52011: u8 [sp + 278] = 0\n 52015: u8 [sp + 277] = 0\n 52019: u8 [sp + 276] = 0\n 52023: u8 [sp + 275] = 0\n 52027: u8 [sp + 274] = 0\n 52031: u8 [sp + 273] = 0\n 52035: u8 [sp + 272] = 0\n 52039: u8 [sp + 271] = 0\n 52043: u8 [sp + 270] = 0\n 52047: u8 [sp + 269] = 0\n 52051: u8 [sp + 268] = 0\n 52055: u8 [sp + 267] = 0\n 52059: u8 [sp + 266] = 0\n 52063: u8 [sp + 265] = 0\n 52067: u8 [sp + 264] = 0\n 52071: u8 [sp + 263] = 0\n 52075: u8 [sp + 262] = 0\n 52079: u8 [sp + 261] = 0\n 52083: u8 [sp + 260] = 0\n 52087: u8 [sp + 259] = 0\n 52091: u8 [sp + 258] = 0\n 52095: u8 [sp + 257] = 0\n 52099: u8 [sp + 256] = 0\n 52103: a4 = a2 & 0x1f\n 52106: a3 = sp + 0x120\n 52110: a3 = a3 - a4\n 52113: a0 = u8 [a3 + 0x19]\n 52116: a1 = u8 [a3 + 0x18]\n 52119: a5 = u8 [a3 + 0x1a]\n 52122: s1 = u8 [a3 + 0x1b]\n 52125: a0 = a0 << 0x8\n 52128: a0 = a0 | a1\n 52131: a5 = a5 << 0x10\n 52134: s1 = s1 << 0x18\n 52137: a5 = a5 | s1\n 52140: t0 = a5 | a0\n 52143: a1 = u8 [a3 + 0x1d]\n 52146: a5 = u8 [a3 + 0x1c]\n 52149: s1 = u8 [a3 + 0x1e]\n 52152: a0 = u8 [a3 + 0x1f]\n 52155: a1 = a1 << 0x8\n 52158: a1 = a1 | a5\n 52161: s1 = s1 << 0x10\n 52164: a0 = a0 << 0x18\n 52167: a0 = a0 | s1\n 52170: a0 = a0 | a1\n 52173: a0 = a0 << 0x20\n 52176: a0 = a0 | t0\n 52179: u64 [sp + 0x18] = a0\n 52182: a0 = u8 [a3 + 0x11]\n 52185: a1 = u8 [a3 + 0x10]\n 52188: a5 = u8 [a3 + 0x12]\n 52191: s1 = u8 [a3 + 0x13]\n 52194: a0 = a0 << 0x8\n 52197: a0 = a0 | a1\n 52200: a5 = a5 << 0x10\n 52203: s1 = s1 << 0x18\n 52206: a5 = a5 | s1\n 52209: t0 = a5 | a0\n 52212: a1 = u8 [a3 + 0x15]\n 52215: a5 = u8 [a3 + 0x14]\n 52218: s1 = u8 [a3 + 0x16]\n 52221: a0 = u8 [a3 + 0x17]\n 52224: a1 = a1 << 0x8\n 52227: a1 = a1 | a5\n 52230: s1 = s1 << 0x10\n 52233: a0 = a0 << 0x18\n 52236: a0 = a0 | s1\n 52239: a0 = a0 | a1\n 52242: a0 = a0 << 0x20\n 52245: a0 = a0 | t0\n 52248: u64 [sp + 0x10] = a0\n 52251: a0 = u8 [a3 + 0x9]\n 52254: a1 = u8 [a3 + 0x8]\n 52257: a5 = u8 [a3 + 0xa]\n 52260: s1 = u8 [a3 + 0xb]\n 52263: a0 = a0 << 0x8\n 52266: a0 = a0 | a1\n 52269: a5 = a5 << 0x10\n 52272: s1 = s1 << 0x18\n 52275: a5 = a5 | s1\n 52278: a2 = a5 | a0\n 52281: a1 = u8 [a3 + 0xd]\n 52284: a5 = u8 [a3 + 0xc]\n 52287: s1 = u8 [a3 + 0xe]\n 52290: a0 = u8 [a3 + 0xf]\n 52293: a1 = a1 << 0x8\n 52296: a1 = a1 | a5\n 52299: s1 = s1 << 0x10\n 52302: a0 = a0 << 0x18\n 52305: a0 = a0 | s1\n 52308: a0 = a0 | a1\n 52311: a0 = a0 << 0x20\n 52314: ra = a0 | a2\n 52317: a0 = u8 [a3 + 0x1]\n 52320: a1 = u8 [a3]\n 52322: a2 = u8 [a3 + 0x2]\n 52325: s1 = u8 [a3 + 0x3]\n 52328: a0 = a0 << 0x8\n 52331: a0 = a0 | a1\n 52334: a2 = a2 << 0x10\n 52337: s1 = s1 << 0x18\n 52340: a2 = a2 | s1\n 52343: a0 = a0 | a2\n 52346: a1 = u8 [a3 + 0x5]\n 52349: a2 = u8 [a3 + 0x4]\n 52352: s1 = u8 [a3 + 0x6]\n 52355: a3 = u8 [a3 + 0x7]\n 52358: a1 = a1 << 0x8\n 52361: a1 = a1 | a2\n 52364: s1 = s1 << 0x10\n 52367: a3 = a3 << 0x18\n 52370: a3 = a3 | s1\n 52373: a1 = a1 | a3\n 52376: a1 = a1 << 0x20\n 52379: t2 = a1 | a0\n 52382: a1 = u64 [sp + 0x20]\n 52385: a0 = a1 >> 0x38\n 52388: u8 [sp + 0xe7] = a0\n 52392: a0 = a1 >> 0x30\n 52395: u8 [sp + 0xe6] = a0\n 52399: a0 = a1 >> 0x28\n 52402: u8 [sp + 0xe5] = a0\n 52406: a0 = a1 >> 0x20\n 52409: u8 [sp + 0xe4] = a0\n 52413: a0 = a1 >> 0x18\n 52416: u8 [sp + 0xe3] = a0\n 52420: a0 = a1 >> 0x10\n 52423: u8 [sp + 0xe2] = a0\n 52427: u8 [sp + 0xe0] = a1\n 52431: a0 = a1 >> 0x8\n 52434: u8 [sp + 0xe1] = a0\n 52438: a1 = u64 [sp + 0x28]\n 52441: a0 = a1 >> 0x38\n 52444: u8 [sp + 0xef] = a0\n 52448: a0 = a1 >> 0x30\n 52451: u8 [sp + 0xee] = a0\n 52455: a0 = a1 >> 0x28\n 52458: u8 [sp + 0xed] = a0\n 52462: a0 = a1 >> 0x20\n 52465: u8 [sp + 0xec] = a0\n 52469: a0 = a1 >> 0x18\n 52472: u8 [sp + 0xeb] = a0\n 52476: a0 = a1 >> 0x10\n 52479: u8 [sp + 0xea] = a0\n 52483: u8 [sp + 0xe8] = a1\n 52487: a0 = a1 >> 0x8\n 52490: u8 [sp + 0xe9] = a0\n 52494: a1 = u64 [sp + 0x30]\n 52497: a0 = a1 >> 0x38\n 52500: u8 [sp + 0xf7] = a0\n 52504: a0 = a1 >> 0x30\n 52507: u8 [sp + 0xf6] = a0\n 52511: a0 = a1 >> 0x28\n 52514: u8 [sp + 0xf5] = a0\n 52518: a0 = a1 >> 0x20\n 52521: u8 [sp + 0xf4] = a0\n 52525: a0 = a1 >> 0x18\n 52528: u8 [sp + 0xf3] = a0\n 52532: a0 = a1 >> 0x10\n 52535: u8 [sp + 0xf2] = a0\n 52539: u8 [sp + 0xf0] = a1\n 52543: a0 = a1 >> 0x8\n 52546: u8 [sp + 0xf1] = a0\n 52550: a1 = u64 [sp + 0x50]\n 52553: a0 = a1 >> 0x38\n 52556: u8 [sp + 0xff] = a0\n 52560: a0 = a1 >> 0x30\n 52563: u8 [sp + 0xfe] = a0\n 52567: a0 = a1 >> 0x28\n 52570: u8 [sp + 0xfd] = a0\n 52574: a0 = a1 >> 0x20\n 52577: u8 [sp + 0xfc] = a0\n 52581: a0 = a1 >> 0x18\n 52584: u8 [sp + 0xfb] = a0\n 52588: a0 = a1 >> 0x10\n 52591: u8 [sp + 0xfa] = a0\n 52595: u8 [sp + 0xf8] = a1\n 52599: a0 = a1 >> 0x8\n 52602: u8 [sp + 0xf9] = a0\n 52606: a0 = sp + 0xe0\n 52610: a4 = a0 - a4\n 52613: u8 [sp + 223] = 0\n 52617: u8 [sp + 222] = 0\n 52621: u8 [sp + 221] = 0\n 52625: u8 [sp + 220] = 0\n 52629: u8 [sp + 219] = 0\n 52633: u8 [sp + 218] = 0\n 52637: u8 [sp + 217] = 0\n 52641: u8 [sp + 216] = 0\n 52645: u8 [sp + 215] = 0\n 52649: u8 [sp + 214] = 0\n 52653: u8 [sp + 213] = 0\n 52657: u8 [sp + 212] = 0\n 52661: u8 [sp + 211] = 0\n 52665: u8 [sp + 210] = 0\n 52669: u8 [sp + 209] = 0\n 52673: u8 [sp + 208] = 0\n 52677: u8 [sp + 207] = 0\n 52681: u8 [sp + 206] = 0\n 52685: u8 [sp + 205] = 0\n 52689: u8 [sp + 204] = 0\n 52693: u8 [sp + 203] = 0\n 52697: u8 [sp + 202] = 0\n 52701: u8 [sp + 201] = 0\n 52705: u8 [sp + 200] = 0\n 52709: u8 [sp + 199] = 0\n 52713: u8 [sp + 198] = 0\n 52717: u8 [sp + 197] = 0\n 52721: u8 [sp + 196] = 0\n 52725: u8 [sp + 195] = 0\n 52729: u8 [sp + 194] = 0\n 52733: u8 [sp + 193] = 0\n 52737: u8 [sp + 192] = 0\n 52741: a0 = u8 [a4 + 0x19]\n 52744: a1 = u8 [a4 + 0x18]\n 52747: a2 = u8 [a4 + 0x1a]\n 52750: s1 = u8 [a4 + 0x1b]\n 52753: a0 = a0 << 0x8\n 52756: a0 = a0 | a1\n 52759: a2 = a2 << 0x10\n 52762: s1 = s1 << 0x18\n 52765: a2 = a2 | s1\n 52768: a3 = a2 | a0\n 52771: a1 = u8 [a4 + 0x1d]\n 52774: a2 = u8 [a4 + 0x1c]\n 52777: s1 = u8 [a4 + 0x1e]\n 52780: a0 = u8 [a4 + 0x1f]\n 52783: a1 = a1 << 0x8\n 52786: a1 = a1 | a2\n 52789: s1 = s1 << 0x10\n 52792: a0 = a0 << 0x18\n 52795: a0 = a0 | s1\n 52798: a0 = a0 | a1\n 52801: a0 = a0 << 0x20\n 52804: s1 = a0 | a3\n 52807: a0 = u8 [a4 + 0x11]\n 52810: a1 = u8 [a4 + 0x10]\n 52813: a2 = u8 [a4 + 0x12]\n 52816: a3 = u8 [a4 + 0x13]\n 52819: a0 = a0 << 0x8\n 52822: a0 = a0 | a1\n 52825: a2 = a2 << 0x10\n 52828: a3 = a3 << 0x18\n 52831: a2 = a2 | a3\n 52834: a5 = a2 | a0\n 52837: a1 = u8 [a4 + 0x15]\n 52840: a2 = u8 [a4 + 0x14]\n 52843: a3 = u8 [a4 + 0x16]\n 52846: a0 = u8 [a4 + 0x17]\n 52849: a1 = a1 << 0x8\n 52852: a1 = a1 | a2\n 52855: a3 = a3 << 0x10\n 52858: a0 = a0 << 0x18\n 52861: a0 = a0 | a3\n 52864: a0 = a0 | a1\n 52867: a0 = a0 << 0x20\n 52870: t0 = a0 | a5\n 52873: a0 = u8 [a4 + 0x9]\n 52876: a2 = u8 [a4 + 0x8]\n 52879: a3 = u8 [a4 + 0xa]\n 52882: a5 = u8 [a4 + 0xb]\n 52885: a0 = a0 << 0x8\n 52888: a0 = a0 | a2\n 52891: a3 = a3 << 0x10\n 52894: a5 = a5 << 0x18\n 52897: a3 = a3 | a5\n 52900: a1 = a3 | a0\n 52903: a2 = u8 [a4 + 0xd]\n 52906: a3 = u8 [a4 + 0xc]\n 52909: a5 = u8 [a4 + 0xe]\n 52912: a0 = u8 [a4 + 0xf]\n 52915: a2 = a2 << 0x8\n 52918: a2 = a2 | a3\n 52921: a5 = a5 << 0x10\n 52924: a0 = a0 << 0x18\n 52927: a0 = a0 | a5\n 52930: a0 = a0 | a2\n 52933: a0 = a0 << 0x20\n 52936: a0 = a0 | a1\n 52939: a1 = u8 [a4 + 0x1]\n 52942: a2 = u8 [a4]\n 52944: a3 = u8 [a4 + 0x2]\n 52947: a5 = u8 [a4 + 0x3]\n 52950: a1 = a1 << 0x8\n 52953: a1 = a1 | a2\n 52956: a3 = a3 << 0x10\n 52959: a5 = a5 << 0x18\n 52962: a3 = a3 | a5\n 52965: a1 = a1 | a3\n 52968: a2 = u8 [a4 + 0x5]\n 52971: a3 = u8 [a4 + 0x4]\n 52974: a5 = u8 [a4 + 0x6]\n 52977: a4 = u8 [a4 + 0x7]\n 52980: a2 = a2 << 0x8\n 52983: a2 = a2 | a3\n 52986: a5 = a5 << 0x10\n 52989: a4 = a4 << 0x18\n 52992: a4 = a4 | a5\n 52995: a2 = a2 | a4\n 52998: a2 = a2 << 0x20\n 53001: a4 = a2 | a1\n 53004: t2 = 0 if t1 != 0\n 53006: ra = 0 if t1 != 0\n 53008: a5 = u64 [sp + 0x10]\n 53011: a5 = 0 if t1 != 0\n 53013: a2 = u64 [sp + 0x18]\n 53016: a2 = 0 if t1 != 0\n 53018: a4 = 0 if t1 != 0\n 53020: a0 = 0 if t1 != 0\n 53022: t0 = 0 if t1 != 0\n 53024: s1 = 0 if t1 != 0\n 53026: a1 = u64 [sp + 0x38]\n 53029: t1 = a1 & ~a2\n 53032: a2 = a2 & s1\n 53035: a1 = u64 [sp + 0x40]\n 53038: a3 = a1 & ~a5\n 53041: a5 = t0 & a5\n 53044: a1 = u64 [sp + 0x48]\n 53047: s1 = a1 & ~ra\n 53050: a0 = a0 & ra\n 53053: a1 = u64 [sp + 0x58]\n 53056: a1 = a1 & ~t2\n 53059: a4 = a4 & t2\n 53062: a1 = a1 | a4\n 53065: a0 = a0 | s1\n 53068: a3 = a3 | a5\n 53071: a2 = t1 | a2\n 53074: a4 = u64 [sp + 0x60]\n 53077: u64 [sp + 0x1f8] = a4\n 53081: a4 = u64 [sp + 0x68]\n 53084: u64 [sp + 0x1f0] = a4\n 53088: a4 = u64 [sp + 0x70]\n 53091: u64 [sp + 0x1e8] = a4\n 53095: a4 = u64 [sp + 0x78]\n 53098: u64 [sp + 0x1e0] = a4\n 53102: u64 [sp + 0x218] = a2\n 53106: u64 [sp + 0x210] = a3\n 53110: u64 [sp + 0x208] = a0\n 53114: u64 [sp + 0x200] = a1\n 53118: i32 a1 = sp + 0x1e0\n 53122: i32 a3 = sp + 0x200\n 53126: a2 = 0xffffffffffffffff\n 53129: a4 = 0x20\n 53132: a0 = 0\n 53134: ecalli 13 // 'set_storage'\n 53136: sp = s0 + 0xfffffffffffffdc0\n 53140: ra = u64 [sp + 0x238]\n 53144: s0 = u64 [sp + 0x230]\n 53148: s1 = u64 [sp + 0x228]\n 53152: sp = sp + 0x240\n 53156: ret\n      : @693 (gas: 8)\n 53158: u64 [sp + 176] = 0\n 53162: u64 [sp + 168] = 0\n 53166: u64 [sp + 160] = 0\n 53170: a0 = 0x4e487b7100000000\n 53180: a1 = sp + 0xa0\n 53184: u64 [sp + 0xb8] = a0\n 53188: a0 = 0\n 53190: ra = 604, jump @23\n      : @694 [@dyn 302] (gas: 7)\n 53197: u64 [sp + 152] = 0\n 53201: u64 [sp + 144] = 0\n 53205: u64 [sp + 128] = 0x41\n 53210: a0 = 0x4\n 53213: a1 = sp + 0x80\n 53217: u64 [sp + 136] = 0\n 53221: ra = 606, jump @23\n      : @695 [@dyn 303] (gas: 3)\n 53228: a1 = 0x24\n 53231: a0 = 0\n 53233: ra = 608, jump @0\n      : @696 [@dyn 304] (gas: 6)\n 53240: i32 a1 = a0 + 0\n 53242: a0 = 0x1\n 53245: a2 = 0x24\n 53248: ra = 0x262\n 53252: ecalli 11 // 'seal_return'\n 53254: fallthrough\n      : @697 [@dyn 305] (gas: 84)\n 53255: sp = sp + 0xfffffffffffffcc0\n 53259: u64 [sp + 0x338] = ra\n 53263: u64 [sp + 0x330] = s0\n 53267: u64 [sp + 0x328] = s1\n 53271: s0 = sp + 0x340\n 53275: sp = sp & 0xffffffffffffffe0\n 53278: u64 [sp + 0x60] = a0\n 53281: a0 = u64 [a5 + 0x18]\n 53284: u64 [sp + 0x68] = a0\n 53287: a0 = u64 [a5 + 0x10]\n 53290: u64 [sp + 0x70] = a0\n 53293: a0 = u64 [a5 + 0x8]\n 53296: u64 [sp + 0x78] = a0\n 53299: a0 = u64 [a5]\n 53301: u64 [sp + 0x80] = a0\n 53305: a0 = u64 [a4 + 0x18]\n 53308: u64 [sp + 0x88] = a0\n 53312: a0 = u64 [a4 + 0x10]\n 53315: u64 [sp + 0x90] = a0\n 53319: a0 = u64 [a4 + 0x8]\n 53322: u64 [sp + 0x98] = a0\n 53326: a0 = u64 [a4]\n 53328: u64 [sp + 0xa0] = a0\n 53332: a0 = u64 [a3 + 0x18]\n 53335: u64 [sp + 0xa8] = a0\n 53339: a0 = u64 [a3 + 0x10]\n 53342: u64 [sp + 0xb0] = a0\n 53346: a0 = u64 [a3 + 0x8]\n 53349: u64 [sp + 0xb8] = a0\n 53353: a0 = u64 [a3]\n 53355: u64 [sp + 0xc0] = a0\n 53359: a0 = u64 [a2 + 0x18]\n 53362: u64 [sp + 0xc8] = a0\n 53366: a0 = u64 [a2 + 0x10]\n 53369: u64 [sp + 0xd0] = a0\n 53373: a0 = u64 [a2 + 0x8]\n 53376: u64 [sp + 0xd8] = a0\n 53380: a0 = u64 [a2]\n 53382: u64 [sp + 0xe0] = a0\n 53386: a0 = u64 [a1 + 0x18]\n 53389: u64 [sp + 0xf0] = a0\n 53393: a0 = u64 [a1 + 0x10]\n 53396: u64 [sp + 0xf8] = a0\n 53400: a0 = u64 [a1 + 0x8]\n 53403: u64 [sp + 0x100] = a0\n 53407: a0 = u64 [a1]\n 53409: u64 [sp + 0x108] = a0\n 53413: u32 [sp + 672] = 0x20\n 53418: u64 [sp + 664] = 0\n 53422: u64 [sp + 656] = 0\n 53426: u64 [sp + 648] = 0\n 53430: u64 [sp + 640] = 0x1\n 53435: u64 [sp + 728] = 0\n 53439: u64 [sp + 720] = 0\n 53443: u64 [sp + 712] = 0\n 53447: u64 [sp + 704] = 0\n 53451: i32 a1 = sp + 0x280\n 53455: i32 a3 = sp + 0x2c0\n 53459: i32 a4 = sp + 0x2a0\n 53463: a2 = 0xffffffffffffffff\n 53466: a0 = 0\n 53468: ecalli 7 // 'get_storage'\n 53470: a0 = u64 [sp + 0x2d8]\n 53474: u64 [sp + 0x110] = a0\n 53478: a0 = u64 [sp + 0x2d0]\n 53482: u64 [sp + 0x128] = a0\n 53486: a0 = u64 [sp + 0x2c8]\n 53490: u64 [sp + 0x130] = a0\n 53494: a0 = u64 [sp + 0x2c0]\n 53498: u64 [sp + 0x138] = a0\n 53502: i32 a0 = sp + 0x220\n 53506: ecalli 4 // 'caller'\n 53508: a0 = u32 [sp + 0x230]\n 53512: u64 [sp + 0x148] = a0\n 53516: a0 = u64 [sp + 0x228]\n 53520: u64 [sp + 0x140] = a0\n 53524: s1 = u64 [sp + 0x220]\n 53528: u64 [sp + 504] = 0\n 53532: u64 [sp + 496] = 0\n 53536: u64 [sp + 480] = 0x160\n 53542: a0 = sp + 0x200\n 53546: a1 = sp + 0x1e0\n 53550: u64 [sp + 488] = 0\n 53554: ra = 612, jump @106\n      : @698 [@dyn 306] (gas: 16)\n 53561: a2 = u64 [sp + 0x218]\n 53565: a3 = u64 [sp + 0x210]\n 53569: a0 = u64 [sp + 0x208]\n 53573: a1 = u64 [sp + 0x200]\n 53577: u64 [sp + 0x150] = a0\n 53581: u64 [sp + 0x118] = a2\n 53585: a0 = a0 | a2\n 53588: u64 [sp + 0x158] = a1\n 53592: a1 = a1 | a3\n 53595: a1 = a1 | a0\n 53598: a1 = a1 >> 0x20\n 53601: u64 [sp + 0x120] = a3\n 53605: a0 = a0 | a3\n 53608: a0 = a0 << 0x20\n 53611: a0 = a0 | a1\n 53614: jump @730 if a0 != 0\n      : @699 (gas: 17)\n 53618: a0 = reverse s1\n 53620: a0 = a0 << 0x20\n 53623: a1 = u64 [sp + 0x140]\n 53627: a1 = reverse a1\n 53629: a2 = a1 >> 0x20\n 53632: a0 = a0 | a2\n 53635: u64 [sp + 0x140] = a0\n 53639: a1 = a1 << 0x20\n 53642: a0 = u64 [sp + 0x148]\n 53646: a0 = reverse a0\n 53648: a0 = a0 >> 0x20\n 53651: a0 = a0 | a1\n 53654: u64 [sp + 0xe8] = a0\n 53658: a0 = i32 [sp + 0x158]\n 53662: a1 = 0x20\n 53665: u64 [sp + 0x148] = a0\n 53669: ra = 614, jump @0\n      : @700 [@dyn 307] (gas: 64)\n 53676: a1 = u64 [sp + 0xe8]\n 53680: a1 = reverse a1\n 53682: a2 = u64 [sp + 0x140]\n 53686: a2 = reverse a2\n 53688: a3 = s1 >> 0x18\n 53691: u8 [a0 + 0xf] = a3\n 53694: a3 = s1 >> 0x10\n 53697: u8 [a0 + 0xe] = a3\n 53700: a3 = s1 >> 0x8\n 53703: u8 [a0 + 0xd] = a3\n 53706: u8 [a0 + 0xc] = s1\n 53709: u8 [a0 + 11] = 0\n 53712: u8 [a0 + 10] = 0\n 53715: u8 [a0 + 9] = 0\n 53718: u8 [a0 + 8] = 0\n 53721: u8 [a0 + 7] = 0\n 53724: u8 [a0 + 6] = 0\n 53727: u8 [a0 + 5] = 0\n 53730: u8 [a0 + 4] = 0\n 53733: u8 [a0 + 3] = 0\n 53736: u8 [a0 + 2] = 0\n 53739: u8 [a0 + 1] = 0\n 53742: u8 [a0 + 0] = 0\n 53744: u8 [a0 + 0x10] = a2\n 53747: u8 [a0 + 0x18] = a1\n 53750: a3 = a2 >> 0x38\n 53753: u8 [a0 + 0x17] = a3\n 53756: a3 = a2 >> 0x30\n 53759: u8 [a0 + 0x16] = a3\n 53762: a3 = a2 >> 0x28\n 53765: u8 [a0 + 0x15] = a3\n 53768: a3 = a2 >> 0x20\n 53771: u8 [a0 + 0x14] = a3\n 53774: a3 = a2 >> 0x18\n 53777: u8 [a0 + 0x13] = a3\n 53780: a3 = a2 >> 0x10\n 53783: u8 [a0 + 0x12] = a3\n 53786: a2 = a2 >> 0x8\n 53789: u8 [a0 + 0x11] = a2\n 53792: a2 = a1 >> 0x38\n 53795: u8 [a0 + 0x1f] = a2\n 53798: a2 = a1 >> 0x30\n 53801: u8 [a0 + 0x1e] = a2\n 53804: a2 = a1 >> 0x28\n 53807: u8 [a0 + 0x1d] = a2\n 53810: a2 = a1 >> 0x20\n 53813: u8 [a0 + 0x1c] = a2\n 53816: a2 = a1 >> 0x18\n 53819: u8 [a0 + 0x1b] = a2\n 53822: a2 = a1 >> 0x10\n 53825: u8 [a0 + 0x1a] = a2\n 53828: a1 = a1 >> 0x8\n 53831: a2 = u64 [sp + 0x118]\n 53835: a4 = u64 [sp + 0x120]\n 53839: a4 = a4 | a2\n 53842: a2 = 0xffffffe0\n 53852: a3 = u64 [sp + 0x158]\n 53856: a2 = a3 <u a2\n 53859: a3 = u64 [sp + 0x150]\n 53863: a2 = 0 if a3 != 0\n 53865: u64 [sp + 0x140] = a4\n 53869: a2 = 0 if a4 != 0\n 53871: u8 [a0 + 0x19] = a1\n 53874: jump @730 if a2 == 0\n      : @701 (gas: 4)\n 53878: a0 = u64 [sp + 0x148]\n 53882: i32 a0 = a0 + 0x20\n 53885: a1 = 0x20\n 53888: ra = 616, jump @0\n      : @702 [@dyn 308] (gas: 77)\n 53895: a1 = u64 [sp + 0xf0]\n 53899: a1 = reverse a1\n 53901: a2 = u64 [sp + 0xf8]\n 53905: a2 = reverse a2\n 53907: a3 = u64 [sp + 0x100]\n 53911: a3 = reverse a3\n 53913: a4 = u64 [sp + 0x108]\n 53917: a4 = reverse a4\n 53919: a5 = a4 >> 0x38\n 53922: u8 [a0 + 0x1f] = a5\n 53925: a5 = a4 >> 0x30\n 53928: u8 [a0 + 0x1e] = a5\n 53931: a5 = a4 >> 0x28\n 53934: u8 [a0 + 0x1d] = a5\n 53937: a5 = a4 >> 0x20\n 53940: u8 [a0 + 0x1c] = a5\n 53943: a5 = a4 >> 0x18\n 53946: u8 [a0 + 0x1b] = a5\n 53949: a5 = a4 >> 0x10\n 53952: u8 [a0 + 0x1a] = a5\n 53955: a5 = a4 >> 0x8\n 53958: u8 [a0 + 0x19] = a5\n 53961: u8 [a0 + 0x18] = a4\n 53964: u8 [a0 + 0x10] = a3\n 53967: a4 = a3 >> 0x38\n 53970: u8 [a0 + 0x17] = a4\n 53973: a4 = a3 >> 0x30\n 53976: u8 [a0 + 0x16] = a4\n 53979: a4 = a3 >> 0x28\n 53982: u8 [a0 + 0x15] = a4\n 53985: a4 = a3 >> 0x20\n 53988: u8 [a0 + 0x14] = a4\n 53991: a4 = a3 >> 0x18\n 53994: u8 [a0 + 0x13] = a4\n 53997: a4 = a3 >> 0x10\n 54000: u8 [a0 + 0x12] = a4\n 54003: a3 = a3 >> 0x8\n 54006: u8 [a0 + 0x11] = a3\n 54009: u8 [a0 + 0x8] = a2\n 54012: a3 = a2 >> 0x38\n 54015: u8 [a0 + 0xf] = a3\n 54018: a3 = a2 >> 0x30\n 54021: u8 [a0 + 0xe] = a3\n 54024: a3 = a2 >> 0x28\n 54027: u8 [a0 + 0xd] = a3\n 54030: a3 = a2 >> 0x20\n 54033: u8 [a0 + 0xc] = a3\n 54036: a3 = a2 >> 0x18\n 54039: u8 [a0 + 0xb] = a3\n 54042: a3 = a2 >> 0x10\n 54045: u8 [a0 + 0xa] = a3\n 54048: a2 = a2 >> 0x8\n 54051: u8 [a0 + 0x9] = a2\n 54054: u8 [a0] = a1\n 54056: a2 = a1 >> 0x38\n 54059: u8 [a0 + 0x7] = a2\n 54062: a2 = a1 >> 0x30\n 54065: u8 [a0 + 0x6] = a2\n 54068: a2 = a1 >> 0x28\n 54071: u8 [a0 + 0x5] = a2\n 54074: a2 = a1 >> 0x20\n 54077: u8 [a0 + 0x4] = a2\n 54080: a2 = a1 >> 0x18\n 54083: u8 [a0 + 0x3] = a2\n 54086: a2 = a1 >> 0x10\n 54089: u8 [a0 + 0x2] = a2\n 54092: a1 = a1 >> 0x8\n 54095: s1 = 0x100000000\n 54105: a2 = 0xffffffc0\n 54115: a3 = u64 [sp + 0x158]\n 54119: a2 = a3 <u a2\n 54122: a3 = u64 [sp + 0x150]\n 54126: a2 = 0 if a3 != 0\n 54128: a3 = u64 [sp + 0x140]\n 54132: a2 = 0 if a3 != 0\n 54134: u8 [a0 + 0x1] = a1\n 54137: jump @730 if a2 == 0\n      : @703 (gas: 4)\n 54141: a0 = u64 [sp + 0x148]\n 54145: i32 a0 = a0 + 0x40\n 54148: a1 = 0x20\n 54151: ra = 618, jump @0\n      : @704 [@dyn 309] (gas: 76)\n 54158: a1 = u64 [sp + 0xc8]\n 54162: a1 = reverse a1\n 54164: a2 = u64 [sp + 0xd0]\n 54168: a2 = reverse a2\n 54170: a3 = u64 [sp + 0xd8]\n 54174: a3 = reverse a3\n 54176: a4 = u64 [sp + 0xe0]\n 54180: a4 = reverse a4\n 54182: a5 = a4 >> 0x38\n 54185: u8 [a0 + 0x1f] = a5\n 54188: a5 = a4 >> 0x30\n 54191: u8 [a0 + 0x1e] = a5\n 54194: a5 = a4 >> 0x28\n 54197: u8 [a0 + 0x1d] = a5\n 54200: a5 = a4 >> 0x20\n 54203: u8 [a0 + 0x1c] = a5\n 54206: a5 = a4 >> 0x18\n 54209: u8 [a0 + 0x1b] = a5\n 54212: a5 = a4 >> 0x10\n 54215: u8 [a0 + 0x1a] = a5\n 54218: a5 = a4 >> 0x8\n 54221: u8 [a0 + 0x19] = a5\n 54224: u8 [a0 + 0x18] = a4\n 54227: u8 [a0 + 0x10] = a3\n 54230: a4 = a3 >> 0x38\n 54233: u8 [a0 + 0x17] = a4\n 54236: a4 = a3 >> 0x30\n 54239: u8 [a0 + 0x16] = a4\n 54242: a4 = a3 >> 0x28\n 54245: u8 [a0 + 0x15] = a4\n 54248: a4 = a3 >> 0x20\n 54251: u8 [a0 + 0x14] = a4\n 54254: a4 = a3 >> 0x18\n 54257: u8 [a0 + 0x13] = a4\n 54260: a4 = a3 >> 0x10\n 54263: u8 [a0 + 0x12] = a4\n 54266: a3 = a3 >> 0x8\n 54269: u8 [a0 + 0x11] = a3\n 54272: u8 [a0 + 0x8] = a2\n 54275: a3 = a2 >> 0x38\n 54278: u8 [a0 + 0xf] = a3\n 54281: a3 = a2 >> 0x30\n 54284: u8 [a0 + 0xe] = a3\n 54287: a3 = a2 >> 0x28\n 54290: u8 [a0 + 0xd] = a3\n 54293: a3 = a2 >> 0x20\n 54296: u8 [a0 + 0xc] = a3\n 54299: a3 = a2 >> 0x18\n 54302: u8 [a0 + 0xb] = a3\n 54305: a3 = a2 >> 0x10\n 54308: u8 [a0 + 0xa] = a3\n 54311: a2 = a2 >> 0x8\n 54314: u8 [a0 + 0x9] = a2\n 54317: u8 [a0] = a1\n 54319: a2 = a1 >> 0x38\n 54322: u8 [a0 + 0x7] = a2\n 54325: a2 = a1 >> 0x30\n 54328: u8 [a0 + 0x6] = a2\n 54331: a2 = a1 >> 0x28\n 54334: u8 [a0 + 0x5] = a2\n 54337: a2 = a1 >> 0x20\n 54340: u8 [a0 + 0x4] = a2\n 54343: a2 = a1 >> 0x18\n 54346: u8 [a0 + 0x3] = a2\n 54349: a2 = a1 >> 0x10\n 54352: u8 [a0 + 0x2] = a2\n 54355: a1 = a1 >> 0x8\n 54358: a2 = s1 + 0xffffffffffffffa0\n 54361: a3 = u64 [sp + 0x158]\n 54365: a2 = a3 <u a2\n 54368: a3 = u64 [sp + 0x150]\n 54372: a2 = 0 if a3 != 0\n 54374: a3 = u64 [sp + 0x140]\n 54378: a2 = 0 if a3 != 0\n 54380: u8 [a0 + 0x1] = a1\n 54383: jump @730 if a2 == 0\n      : @705 (gas: 4)\n 54387: a0 = u64 [sp + 0x148]\n 54391: i32 a0 = a0 + 0x60\n 54394: a1 = 0x20\n 54397: ra = 620, jump @0\n      : @706 [@dyn 310] (gas: 77)\n 54404: a1 = u64 [sp + 0xa8]\n 54408: a1 = reverse a1\n 54410: a2 = u64 [sp + 0xb0]\n 54414: a2 = reverse a2\n 54416: a3 = u64 [sp + 0xb8]\n 54420: a3 = reverse a3\n 54422: a4 = u64 [sp + 0xc0]\n 54426: a4 = reverse a4\n 54428: a5 = a4 >> 0x38\n 54431: u8 [a0 + 0x1f] = a5\n 54434: a5 = a4 >> 0x30\n 54437: u8 [a0 + 0x1e] = a5\n 54440: a5 = a4 >> 0x28\n 54443: u8 [a0 + 0x1d] = a5\n 54446: a5 = a4 >> 0x20\n 54449: u8 [a0 + 0x1c] = a5\n 54452: a5 = a4 >> 0x18\n 54455: u8 [a0 + 0x1b] = a5\n 54458: a5 = a4 >> 0x10\n 54461: u8 [a0 + 0x1a] = a5\n 54464: a5 = a4 >> 0x8\n 54467: u8 [a0 + 0x19] = a5\n 54470: u8 [a0 + 0x18] = a4\n 54473: u8 [a0 + 0x10] = a3\n 54476: a4 = a3 >> 0x38\n 54479: u8 [a0 + 0x17] = a4\n 54482: a4 = a3 >> 0x30\n 54485: u8 [a0 + 0x16] = a4\n 54488: a4 = a3 >> 0x28\n 54491: u8 [a0 + 0x15] = a4\n 54494: a4 = a3 >> 0x20\n 54497: u8 [a0 + 0x14] = a4\n 54500: a4 = a3 >> 0x18\n 54503: u8 [a0 + 0x13] = a4\n 54506: a4 = a3 >> 0x10\n 54509: u8 [a0 + 0x12] = a4\n 54512: a3 = a3 >> 0x8\n 54515: u8 [a0 + 0x11] = a3\n 54518: u8 [a0 + 0x8] = a2\n 54521: a3 = a2 >> 0x38\n 54524: u8 [a0 + 0xf] = a3\n 54527: a3 = a2 >> 0x30\n 54530: u8 [a0 + 0xe] = a3\n 54533: a3 = a2 >> 0x28\n 54536: u8 [a0 + 0xd] = a3\n 54539: a3 = a2 >> 0x20\n 54542: u8 [a0 + 0xc] = a3\n 54545: a3 = a2 >> 0x18\n 54548: u8 [a0 + 0xb] = a3\n 54551: a3 = a2 >> 0x10\n 54554: u8 [a0 + 0xa] = a3\n 54557: a2 = a2 >> 0x8\n 54560: u8 [a0 + 0x9] = a2\n 54563: u8 [a0] = a1\n 54565: a2 = a1 >> 0x38\n 54568: u8 [a0 + 0x7] = a2\n 54571: a2 = a1 >> 0x30\n 54574: u8 [a0 + 0x6] = a2\n 54577: a2 = a1 >> 0x28\n 54580: u8 [a0 + 0x5] = a2\n 54583: a2 = a1 >> 0x20\n 54586: u8 [a0 + 0x4] = a2\n 54589: a2 = a1 >> 0x18\n 54592: u8 [a0 + 0x3] = a2\n 54595: a2 = a1 >> 0x10\n 54598: u8 [a0 + 0x2] = a2\n 54601: a1 = a1 >> 0x8\n 54604: s1 = 0x100000000\n 54614: a2 = 0xffffff80\n 54624: a3 = u64 [sp + 0x158]\n 54628: a2 = a3 <u a2\n 54631: a3 = u64 [sp + 0x150]\n 54635: a2 = 0 if a3 != 0\n 54637: a3 = u64 [sp + 0x140]\n 54641: a2 = 0 if a3 != 0\n 54643: u8 [a0 + 0x1] = a1\n 54646: jump @730 if a2 == 0\n      : @707 (gas: 4)\n 54650: a0 = u64 [sp + 0x148]\n 54654: i32 a0 = a0 + 0x80\n 54658: a1 = 0x20\n 54661: ra = 622, jump @0\n      : @708 [@dyn 311] (gas: 76)\n 54668: a1 = u64 [sp + 0x88]\n 54672: a1 = reverse a1\n 54674: a2 = u64 [sp + 0x90]\n 54678: a2 = reverse a2\n 54680: a3 = u64 [sp + 0x98]\n 54684: a3 = reverse a3\n 54686: a4 = u64 [sp + 0xa0]\n 54690: a4 = reverse a4\n 54692: a5 = a4 >> 0x38\n 54695: u8 [a0 + 0x1f] = a5\n 54698: a5 = a4 >> 0x30\n 54701: u8 [a0 + 0x1e] = a5\n 54704: a5 = a4 >> 0x28\n 54707: u8 [a0 + 0x1d] = a5\n 54710: a5 = a4 >> 0x20\n 54713: u8 [a0 + 0x1c] = a5\n 54716: a5 = a4 >> 0x18\n 54719: u8 [a0 + 0x1b] = a5\n 54722: a5 = a4 >> 0x10\n 54725: u8 [a0 + 0x1a] = a5\n 54728: a5 = a4 >> 0x8\n 54731: u8 [a0 + 0x19] = a5\n 54734: u8 [a0 + 0x18] = a4\n 54737: u8 [a0 + 0x10] = a3\n 54740: a4 = a3 >> 0x38\n 54743: u8 [a0 + 0x17] = a4\n 54746: a4 = a3 >> 0x30\n 54749: u8 [a0 + 0x16] = a4\n 54752: a4 = a3 >> 0x28\n 54755: u8 [a0 + 0x15] = a4\n 54758: a4 = a3 >> 0x20\n 54761: u8 [a0 + 0x14] = a4\n 54764: a4 = a3 >> 0x18\n 54767: u8 [a0 + 0x13] = a4\n 54770: a4 = a3 >> 0x10\n 54773: u8 [a0 + 0x12] = a4\n 54776: a3 = a3 >> 0x8\n 54779: u8 [a0 + 0x11] = a3\n 54782: u8 [a0 + 0x8] = a2\n 54785: a3 = a2 >> 0x38\n 54788: u8 [a0 + 0xf] = a3\n 54791: a3 = a2 >> 0x30\n 54794: u8 [a0 + 0xe] = a3\n 54797: a3 = a2 >> 0x28\n 54800: u8 [a0 + 0xd] = a3\n 54803: a3 = a2 >> 0x20\n 54806: u8 [a0 + 0xc] = a3\n 54809: a3 = a2 >> 0x18\n 54812: u8 [a0 + 0xb] = a3\n 54815: a3 = a2 >> 0x10\n 54818: u8 [a0 + 0xa] = a3\n 54821: a2 = a2 >> 0x8\n 54824: u8 [a0 + 0x9] = a2\n 54827: u8 [a0] = a1\n 54829: a2 = a1 >> 0x38\n 54832: u8 [a0 + 0x7] = a2\n 54835: a2 = a1 >> 0x30\n 54838: u8 [a0 + 0x6] = a2\n 54841: a2 = a1 >> 0x28\n 54844: u8 [a0 + 0x5] = a2\n 54847: a2 = a1 >> 0x20\n 54850: u8 [a0 + 0x4] = a2\n 54853: a2 = a1 >> 0x18\n 54856: u8 [a0 + 0x3] = a2\n 54859: a2 = a1 >> 0x10\n 54862: u8 [a0 + 0x2] = a2\n 54865: a1 = a1 >> 0x8\n 54868: a2 = s1 + 0xffffffffffffff60\n 54872: a3 = u64 [sp + 0x158]\n 54876: a2 = a3 <u a2\n 54879: a3 = u64 [sp + 0x150]\n 54883: a2 = 0 if a3 != 0\n 54885: a3 = u64 [sp + 0x140]\n 54889: a2 = 0 if a3 != 0\n 54891: u8 [a0 + 0x1] = a1\n 54894: jump @730 if a2 == 0\n      : @709 (gas: 4)\n 54898: a0 = u64 [sp + 0x148]\n 54902: i32 a0 = a0 + 0xa0\n 54906: a1 = 0x20\n 54909: ra = 624, jump @0\n      : @710 [@dyn 312] (gas: 109)\n 54916: a1 = u64 [sp + 0x68]\n 54919: a3 = reverse a1\n 54921: a1 = u64 [sp + 0x70]\n 54924: a4 = reverse a1\n 54926: a1 = u64 [sp + 0x78]\n 54929: a5 = reverse a1\n 54931: a1 = u64 [sp + 0x80]\n 54935: a2 = reverse a1\n 54937: a1 = a2 >> 0x38\n 54940: u64 [sp + 0x108] = a1\n 54944: u8 [a0 + 0x1f] = a1\n 54947: a1 = a2 >> 0x30\n 54950: u64 [sp + 0x100] = a1\n 54954: u8 [a0 + 0x1e] = a1\n 54957: a1 = a2 >> 0x28\n 54960: u64 [sp + 0xf8] = a1\n 54964: u8 [a0 + 0x1d] = a1\n 54967: a1 = a2 >> 0x20\n 54970: u64 [sp + 0xf0] = a1\n 54974: u8 [a0 + 0x1c] = a1\n 54977: a1 = a2 >> 0x18\n 54980: u64 [sp + 0xe8] = a1\n 54984: u8 [a0 + 0x1b] = a1\n 54987: a1 = a2 >> 0x10\n 54990: u64 [sp + 0xd8] = a1\n 54994: u8 [a0 + 0x1a] = a1\n 54997: a1 = a2 >> 0x8\n 55000: u64 [sp + 0xd0] = a1\n 55004: u8 [a0 + 0x19] = a1\n 55007: u64 [sp + 0xc8] = a2\n 55011: u8 [a0 + 0x18] = a2\n 55014: u8 [a0 + 0x10] = a5\n 55017: a1 = a5 >> 0x38\n 55020: u64 [sp + 0xb0] = a1\n 55024: u8 [a0 + 0x17] = a1\n 55027: a1 = a5 >> 0x30\n 55030: u64 [sp + 0xa8] = a1\n 55034: u8 [a0 + 0x16] = a1\n 55037: a1 = a5 >> 0x28\n 55040: u64 [sp + 0xa0] = a1\n 55044: u8 [a0 + 0x15] = a1\n 55047: a1 = a5 >> 0x20\n 55050: u64 [sp + 0x98] = a1\n 55054: u8 [a0 + 0x14] = a1\n 55057: a1 = a5 >> 0x18\n 55060: u64 [sp + 0x90] = a1\n 55064: u8 [a0 + 0x13] = a1\n 55067: a1 = a5 >> 0x10\n 55070: u64 [sp + 0x88] = a1\n 55074: u8 [a0 + 0x12] = a1\n 55077: u64 [sp + 0xb8] = a5\n 55081: a5 = a5 >> 0x8\n 55084: u64 [sp + 0x80] = a5\n 55088: u8 [a0 + 0x11] = a5\n 55091: u8 [a0 + 0x8] = a4\n 55094: a1 = a4 >> 0x38\n 55097: u64 [sp + 0x78] = a1\n 55100: u8 [a0 + 0xf] = a1\n 55103: a1 = a4 >> 0x30\n 55106: u64 [sp + 0x70] = a1\n 55109: u8 [a0 + 0xe] = a1\n 55112: a1 = a4 >> 0x28\n 55115: u64 [sp + 0x68] = a1\n 55118: u8 [a0 + 0xd] = a1\n 55121: a1 = a4 >> 0x20\n 55124: u64 [sp + 0x58] = a1\n 55127: u8 [a0 + 0xc] = a1\n 55130: a1 = a4 >> 0x18\n 55133: u64 [sp + 0x50] = a1\n 55136: u8 [a0 + 0xb] = a1\n 55139: a1 = a4 >> 0x10\n 55142: u64 [sp + 0x48] = a1\n 55145: u8 [a0 + 0xa] = a1\n 55148: u64 [sp + 0xc0] = a4\n 55152: a4 = a4 >> 0x8\n 55155: u64 [sp + 0x40] = a4\n 55158: u8 [a0 + 0x9] = a4\n 55161: u8 [a0] = a3\n 55163: a1 = a3 >> 0x38\n 55166: u64 [sp + 0x38] = a1\n 55169: u8 [a0 + 0x7] = a1\n 55172: a1 = a3 >> 0x30\n 55175: u64 [sp + 0x30] = a1\n 55178: u8 [a0 + 0x6] = a1\n 55181: a1 = a3 >> 0x28\n 55184: u64 [sp + 0x28] = a1\n 55187: u8 [a0 + 0x5] = a1\n 55190: a1 = a3 >> 0x20\n 55193: u64 [sp + 0x20] = a1\n 55196: u8 [a0 + 0x4] = a1\n 55199: a1 = a3 >> 0x18\n 55202: u64 [sp + 0x18] = a1\n 55205: u8 [a0 + 0x3] = a1\n 55208: a1 = a3 >> 0x10\n 55211: u64 [sp + 0x10] = a1\n 55214: u8 [a0 + 0x2] = a1\n 55217: s1 = 0x100000000\n 55227: a1 = 0xffffff40\n 55237: a2 = u64 [sp + 0x158]\n 55241: a1 = a2 <u a1\n 55244: a2 = u64 [sp + 0x150]\n 55248: a1 = 0 if a2 != 0\n 55250: a2 = u64 [sp + 0x140]\n 55254: a1 = 0 if a2 != 0\n 55256: u64 [sp + 0xe0] = a3\n 55260: a3 = a3 >> 0x8\n 55263: u64 [sp + 0x8] = a3\n 55266: u8 [a0 + 0x1] = a3\n 55269: jump @730 if a1 == 0\n      : @711 (gas: 4)\n 55273: a0 = u64 [sp + 0x148]\n 55277: i32 a0 = a0 + 0xc0\n 55281: a1 = 0x20\n 55284: ra = 626, jump @0\n      : @712 [@dyn 313] (gas: 40)\n 55291: u8 [a0 + 31] = 0\n 55294: u8 [a0 + 30] = 0\n 55297: u8 [a0 + 29] = 0\n 55300: u8 [a0 + 28] = 0\n 55303: u8 [a0 + 27] = 0\n 55306: u8 [a0 + 26] = 0\n 55309: u8 [a0 + 25] = 0\n 55312: u8 [a0 + 24] = 0\n 55315: u8 [a0 + 23] = 0\n 55318: u8 [a0 + 22] = 0\n 55321: u8 [a0 + 21] = 0\n 55324: u8 [a0 + 20] = 0\n 55327: u8 [a0 + 19] = 0\n 55330: u8 [a0 + 18] = 0\n 55333: u8 [a0 + 17] = 0\n 55336: u8 [a0 + 16] = 0\n 55339: u8 [a0 + 15] = 0\n 55342: u8 [a0 + 14] = 0\n 55345: u8 [a0 + 13] = 0\n 55348: u8 [a0 + 12] = 0\n 55351: u8 [a0 + 11] = 0\n 55354: u8 [a0 + 10] = 0\n 55357: u8 [a0 + 9] = 0\n 55360: u8 [a0 + 8] = 0\n 55363: u8 [a0 + 7] = 0\n 55366: u8 [a0 + 6] = 0\n 55369: u8 [a0 + 5] = 0\n 55372: u8 [a0 + 4] = 0\n 55375: u8 [a0 + 3] = 0\n 55378: u8 [a0 + 2] = 0\n 55381: u8 [a0 + 1] = 0\n 55384: a1 = s1 + 0xffffffffffffff20\n 55388: a2 = u64 [sp + 0x158]\n 55392: a1 = a2 <u a1\n 55395: a2 = u64 [sp + 0x150]\n 55399: a1 = 0 if a2 != 0\n 55401: a2 = u64 [sp + 0x140]\n 55405: a1 = 0 if a2 != 0\n 55407: u8 [a0 + 0] = 0\n 55409: jump @730 if a1 == 0\n      : @713 (gas: 4)\n 55413: a0 = u64 [sp + 0x148]\n 55417: i32 a0 = a0 + 0xe0\n 55421: a1 = 0x20\n 55424: ra = 628, jump @0\n      : @714 [@dyn 314] (gas: 41)\n 55431: u8 [a0 + 31] = 0\n 55434: u8 [a0 + 30] = 0\n 55437: u8 [a0 + 29] = 0\n 55440: u8 [a0 + 28] = 0\n 55443: u8 [a0 + 27] = 0\n 55446: u8 [a0 + 26] = 0\n 55449: u8 [a0 + 25] = 0\n 55452: u8 [a0 + 24] = 0\n 55455: u8 [a0 + 23] = 0\n 55458: u8 [a0 + 22] = 0\n 55461: u8 [a0 + 21] = 0\n 55464: u8 [a0 + 20] = 0\n 55467: u8 [a0 + 19] = 0\n 55470: u8 [a0 + 18] = 0\n 55473: u8 [a0 + 17] = 0\n 55476: u8 [a0 + 16] = 0\n 55479: u8 [a0 + 15] = 0\n 55482: u8 [a0 + 14] = 0\n 55485: u8 [a0 + 13] = 0\n 55488: u8 [a0 + 12] = 0\n 55491: u8 [a0 + 11] = 0\n 55494: u8 [a0 + 10] = 0\n 55497: u8 [a0 + 9] = 0\n 55500: u8 [a0 + 8] = 0\n 55503: u8 [a0 + 7] = 0\n 55506: u8 [a0 + 6] = 0\n 55509: u8 [a0 + 5] = 0\n 55512: u8 [a0 + 4] = 0\n 55515: u8 [a0 + 3] = 0\n 55518: u8 [a0 + 2] = 0\n 55521: u8 [a0 + 1] = 0\n 55524: s1 = 0x100000000\n 55534: a1 = 0xffffff00\n 55544: a2 = u64 [sp + 0x158]\n 55548: a1 = a2 <u a1\n 55551: a2 = u64 [sp + 0x150]\n 55555: a1 = 0 if a2 != 0\n 55557: a2 = u64 [sp + 0x140]\n 55561: a1 = 0 if a2 != 0\n 55563: u8 [a0 + 0] = 0\n 55565: jump @730 if a1 == 0\n      : @715 (gas: 4)\n 55569: a0 = u64 [sp + 0x148]\n 55573: i32 a0 = a0 + 0x100\n 55577: a1 = 0x20\n 55580: ra = 630, jump @0\n      : @716 [@dyn 315] (gas: 40)\n 55587: u8 [a0 + 31] = 0\n 55590: u8 [a0 + 30] = 0\n 55593: u8 [a0 + 29] = 0\n 55596: u8 [a0 + 28] = 0\n 55599: u8 [a0 + 27] = 0\n 55602: u8 [a0 + 26] = 0\n 55605: u8 [a0 + 25] = 0\n 55608: u8 [a0 + 24] = 0\n 55611: u8 [a0 + 23] = 0\n 55614: u8 [a0 + 22] = 0\n 55617: u8 [a0 + 21] = 0\n 55620: u8 [a0 + 20] = 0\n 55623: u8 [a0 + 19] = 0\n 55626: u8 [a0 + 18] = 0\n 55629: u8 [a0 + 17] = 0\n 55632: u8 [a0 + 16] = 0\n 55635: u8 [a0 + 15] = 0\n 55638: u8 [a0 + 14] = 0\n 55641: u8 [a0 + 13] = 0\n 55644: u8 [a0 + 12] = 0\n 55647: u8 [a0 + 11] = 0\n 55650: u8 [a0 + 10] = 0\n 55653: u8 [a0 + 9] = 0\n 55656: u8 [a0 + 8] = 0\n 55659: u8 [a0 + 7] = 0\n 55662: u8 [a0 + 6] = 0\n 55665: u8 [a0 + 5] = 0\n 55668: u8 [a0 + 4] = 0\n 55671: u8 [a0 + 3] = 0\n 55674: u8 [a0 + 2] = 0\n 55677: u8 [a0 + 1] = 0\n 55680: a1 = s1 + 0xfffffffffffffee0\n 55684: a2 = u64 [sp + 0x158]\n 55688: a1 = a2 <u a1\n 55691: a2 = u64 [sp + 0x150]\n 55695: a1 = 0 if a2 != 0\n 55697: a2 = u64 [sp + 0x140]\n 55701: a1 = 0 if a2 != 0\n 55703: u8 [a0 + 0] = 0\n 55705: jump @730 if a1 == 0\n      : @717 (gas: 4)\n 55709: a0 = u64 [sp + 0x148]\n 55713: i32 a0 = a0 + 0x120\n 55717: a1 = 0x20\n 55720: ra = 632, jump @0\n      : @718 [@dyn 316] (gas: 41)\n 55727: a1 = 0xfffffec0\n 55737: a2 = u64 [sp + 0x158]\n 55741: a1 = a2 <u a1\n 55744: a2 = u64 [sp + 0x150]\n 55748: a1 = 0 if a2 != 0\n 55750: a2 = u64 [sp + 0x140]\n 55754: a1 = 0 if a2 != 0\n 55756: u8 [a0 + 31] = 0\n 55759: u8 [a0 + 30] = 0\n 55762: u8 [a0 + 29] = 0\n 55765: u8 [a0 + 28] = 0\n 55768: u8 [a0 + 27] = 0\n 55771: u8 [a0 + 26] = 0\n 55774: u8 [a0 + 25] = 0\n 55777: u8 [a0 + 24] = 0\n 55780: u8 [a0 + 23] = 0\n 55783: u8 [a0 + 22] = 0\n 55786: u8 [a0 + 21] = 0\n 55789: u8 [a0 + 20] = 0\n 55792: u8 [a0 + 19] = 0\n 55795: u8 [a0 + 18] = 0\n 55798: u8 [a0 + 17] = 0\n 55801: u8 [a0 + 16] = 0\n 55804: u8 [a0 + 15] = 0\n 55807: u8 [a0 + 14] = 0\n 55810: u8 [a0 + 13] = 0\n 55813: u8 [a0 + 12] = 0\n 55816: u8 [a0 + 11] = 0\n 55819: u8 [a0 + 10] = 0\n 55822: u8 [a0 + 9] = 0\n 55825: u8 [a0 + 8] = 0\n 55828: u8 [a0 + 7] = 0\n 55831: u8 [a0 + 6] = 0\n 55834: u8 [a0 + 5] = 0\n 55837: u8 [a0 + 4] = 0\n 55840: u8 [a0 + 3] = 0\n 55843: u8 [a0 + 2] = 0\n 55846: u8 [a0 + 1] = 0\n 55849: u8 [a0 + 0] = 0\n 55851: s1 = u64 [sp + 0x120]\n 55855: jump @730 if a1 == 0\n      : @719 (gas: 4)\n 55859: a0 = u64 [sp + 0x148]\n 55863: i32 a0 = a0 + 0x140\n 55867: a1 = 0x20\n 55870: ra = 634, jump @0\n      : @720 [@dyn 317] (gas: 84)\n 55877: u8 [a0 + 31] = 0\n 55880: u8 [a0 + 30] = 0\n 55883: u8 [a0 + 29] = 0\n 55886: u8 [a0 + 28] = 0\n 55889: u8 [a0 + 27] = 0\n 55892: u8 [a0 + 26] = 0\n 55895: u8 [a0 + 25] = 0\n 55898: u8 [a0 + 24] = 0\n 55901: u8 [a0 + 23] = 0\n 55904: u8 [a0 + 22] = 0\n 55907: u8 [a0 + 21] = 0\n 55910: u8 [a0 + 20] = 0\n 55913: u8 [a0 + 19] = 0\n 55916: u8 [a0 + 18] = 0\n 55919: u8 [a0 + 17] = 0\n 55922: u8 [a0 + 16] = 0\n 55925: u8 [a0 + 15] = 0\n 55928: u8 [a0 + 14] = 0\n 55931: u8 [a0 + 13] = 0\n 55934: u8 [a0 + 12] = 0\n 55937: u8 [a0 + 11] = 0\n 55940: u8 [a0 + 10] = 0\n 55943: u8 [a0 + 9] = 0\n 55946: u8 [a0 + 8] = 0\n 55949: u8 [a0 + 7] = 0\n 55952: u8 [a0 + 6] = 0\n 55955: u8 [a0 + 5] = 0\n 55958: u8 [a0 + 4] = 0\n 55961: u8 [a0 + 3] = 0\n 55964: u8 [a0 + 2] = 0\n 55967: u8 [a0 + 1] = 0\n 55970: u8 [a0 + 0] = 0\n 55972: a0 = u64 [sp + 0x118]\n 55976: u64 [sp + 0x1b8] = a0\n 55980: u64 [sp + 0x1b0] = s1\n 55984: a0 = u64 [sp + 0x150]\n 55988: u64 [sp + 0x1a8] = a0\n 55992: a0 = u64 [sp + 0x158]\n 55996: u64 [sp + 0x1a0] = a0\n 56000: u64 [sp + 472] = 0\n 56004: u64 [sp + 464] = 0\n 56008: u64 [sp + 456] = 0\n 56012: a0 = sp + 0x1c0\n 56016: a1 = sp + 0x1a0\n 56020: u64 [sp + 448] = 0x1\n 56025: ra = 0x27c\n 56029: sp = sp + 0xfffffffffffffde0\n 56033: u64 [sp + 0x218] = ra\n 56037: u64 [sp + 0x210] = s0\n 56041: u64 [sp + 0x208] = s1\n 56045: s0 = sp + 0x220\n 56049: sp = sp & 0xffffffffffffffe0\n 56052: a2 = u64 [a1 + 0x18]\n 56055: u64 [sp + 0x38] = a2\n 56058: a2 = u64 [a1 + 0x10]\n 56061: u64 [sp + 0x30] = a2\n 56064: a2 = u64 [a1 + 0x8]\n 56067: u64 [sp + 0x28] = a2\n 56070: a1 = u64 [a1]\n 56072: u64 [sp + 0x20] = a1\n 56075: a3 = u64 [a0 + 0x18]\n 56078: a2 = u64 [a0 + 0x10]\n 56081: a1 = u64 [a0 + 0x8]\n 56084: a0 = u64 [a0]\n 56086: u64 [sp + 0x40] = a3\n 56089: u64 [sp + 0x1d8] = a3\n 56093: u64 [sp + 0x48] = a2\n 56096: u64 [sp + 0x1d0] = a2\n 56100: u64 [sp + 0x50] = a1\n 56103: u64 [sp + 0x1c8] = a1\n 56107: u64 [sp + 0x58] = a0\n 56110: u64 [sp + 0x1c0] = a0\n 56114: u64 [sp + 504] = 0\n 56118: u64 [sp + 496] = 0\n 56122: u64 [sp + 488] = 0\n 56126: u64 [sp + 480] = 0\n 56130: u32 [sp + 416] = 0x20\n 56135: i32 a1 = sp + 0x1c0\n 56139: i32 a3 = sp + 0x1e0\n 56143: i32 a4 = sp + 0x1a0\n 56147: a2 = 0xffffffffffffffff\n 56150: a0 = 0\n 56152: ecalli 7 // 'get_storage'\n 56154: jump @678\n      : @721 [@dyn 318] (gas: 19)\n 56157: i32 a0 = sp + 0x240\n 56161: ecalli 4 // 'caller'\n 56163: a0 = u64 [sp + 0x248]\n 56167: a1 = i32 [sp + 0x250]\n 56171: s1 = u64 [sp + 0x240]\n 56175: a0 = reverse a0\n 56177: a2 = a0 << 0x20\n 56180: a1 = reverse a1\n 56182: a1 = a1 >> 0x20\n 56185: a1 = a1 | a2\n 56188: u64 [sp + 0x158] = a1\n 56192: a0 = a0 >> 0x20\n 56195: a1 = reverse s1\n 56197: a1 = a1 << 0x20\n 56200: a0 = a0 | a1\n 56203: u64 [sp + 0x150] = a0\n 56207: a1 = 0x20\n 56210: a0 = 0\n 56212: ra = 638, jump @0\n      : @722 [@dyn 319] (gas: 56)\n 56219: a1 = u64 [sp + 0x150]\n 56223: a1 = reverse a1\n 56225: a2 = u64 [sp + 0x158]\n 56229: a2 = reverse a2\n 56231: a3 = s1 >> 0x18\n 56234: u8 [a0 + 0xf] = a3\n 56237: a3 = s1 >> 0x10\n 56240: u8 [a0 + 0xe] = a3\n 56243: a3 = s1 >> 0x8\n 56246: u8 [a0 + 0xd] = a3\n 56249: u8 [a0 + 0xc] = s1\n 56252: u8 [a0 + 11] = 0\n 56255: u8 [a0 + 10] = 0\n 56258: u8 [a0 + 9] = 0\n 56261: u8 [a0 + 8] = 0\n 56264: u8 [a0 + 7] = 0\n 56267: u8 [a0 + 6] = 0\n 56270: u8 [a0 + 5] = 0\n 56273: u8 [a0 + 4] = 0\n 56276: u8 [a0 + 3] = 0\n 56279: u8 [a0 + 2] = 0\n 56282: u8 [a0 + 1] = 0\n 56285: u8 [a0 + 0] = 0\n 56287: u8 [a0 + 0x18] = a2\n 56290: u8 [a0 + 0x10] = a1\n 56293: a3 = a2 >> 0x38\n 56296: u8 [a0 + 0x1f] = a3\n 56299: a3 = a2 >> 0x30\n 56302: u8 [a0 + 0x1e] = a3\n 56305: a3 = a2 >> 0x28\n 56308: u8 [a0 + 0x1d] = a3\n 56311: a3 = a2 >> 0x20\n 56314: u8 [a0 + 0x1c] = a3\n 56317: a3 = a2 >> 0x18\n 56320: u8 [a0 + 0x1b] = a3\n 56323: a3 = a2 >> 0x10\n 56326: u8 [a0 + 0x1a] = a3\n 56329: a2 = a2 >> 0x8\n 56332: u8 [a0 + 0x19] = a2\n 56335: a2 = a1 >> 0x38\n 56338: u8 [a0 + 0x17] = a2\n 56341: a2 = a1 >> 0x30\n 56344: u8 [a0 + 0x16] = a2\n 56347: a2 = a1 >> 0x28\n 56350: u8 [a0 + 0x15] = a2\n 56353: a2 = a1 >> 0x20\n 56356: u8 [a0 + 0x14] = a2\n 56359: a2 = a1 >> 0x18\n 56362: u8 [a0 + 0x13] = a2\n 56365: a2 = a1 >> 0x10\n 56368: u8 [a0 + 0x12] = a2\n 56371: a1 = a1 >> 0x8\n 56374: u8 [a0 + 0x11] = a1\n 56377: a0 = 0x20\n 56380: a1 = 0x20\n 56383: ra = 640, jump @0\n      : @723 [@dyn 320] (gas: 35)\n 56390: u8 [a0 + 31] = 0x2\n 56394: u8 [a0 + 30] = 0\n 56397: u8 [a0 + 29] = 0\n 56400: u8 [a0 + 28] = 0\n 56403: u8 [a0 + 27] = 0\n 56406: u8 [a0 + 26] = 0\n 56409: u8 [a0 + 25] = 0\n 56412: u8 [a0 + 24] = 0\n 56415: u8 [a0 + 23] = 0\n 56418: u8 [a0 + 22] = 0\n 56421: u8 [a0 + 21] = 0\n 56424: u8 [a0 + 20] = 0\n 56427: u8 [a0 + 19] = 0\n 56430: u8 [a0 + 18] = 0\n 56433: u8 [a0 + 17] = 0\n 56436: u8 [a0 + 16] = 0\n 56439: u8 [a0 + 15] = 0\n 56442: u8 [a0 + 14] = 0\n 56445: u8 [a0 + 13] = 0\n 56448: u8 [a0 + 12] = 0\n 56451: u8 [a0 + 11] = 0\n 56454: u8 [a0 + 10] = 0\n 56457: u8 [a0 + 9] = 0\n 56460: u8 [a0 + 8] = 0\n 56463: u8 [a0 + 7] = 0\n 56466: u8 [a0 + 6] = 0\n 56469: u8 [a0 + 5] = 0\n 56472: u8 [a0 + 4] = 0\n 56475: u8 [a0 + 3] = 0\n 56478: u8 [a0 + 2] = 0\n 56481: u8 [a0 + 1] = 0\n 56484: u8 [a0 + 0] = 0\n 56486: a1 = 0x40\n 56489: a0 = 0\n 56491: ra = 642, jump @0\n      : @724 [@dyn 321] (gas: 65)\n 56498: i32 a0 = a0 + 0\n 56500: i32 a2 = sp + 0x2c0\n 56504: a1 = 0x40\n 56507: ecalli 8 // 'hash_keccak_256'\n 56509: a0 = u64 [sp + 0x2d8]\n 56513: a1 = u64 [sp + 0x2d0]\n 56517: a2 = u64 [sp + 0x2c8]\n 56521: a3 = u64 [sp + 0x2c0]\n 56525: a4 = reverse a0\n 56527: a0 = reverse a1\n 56529: a1 = reverse a2\n 56531: a2 = reverse a3\n 56533: a3 = u64 [sp + 0x110]\n 56537: u64 [sp + 0x178] = a3\n 56541: a3 = u64 [sp + 0x128]\n 56545: u64 [sp + 0x170] = a3\n 56549: a3 = u64 [sp + 0x130]\n 56553: u64 [sp + 0x168] = a3\n 56557: a3 = u64 [sp + 0x138]\n 56561: u64 [sp + 0x160] = a3\n 56565: u64 [sp + 0x198] = a2\n 56569: u64 [sp + 0x190] = a1\n 56573: u64 [sp + 0x188] = a0\n 56577: a0 = sp + 0x180\n 56581: a1 = sp + 0x160\n 56585: u64 [sp + 0x180] = a4\n 56589: ra = 0x284\n 56593: sp = sp + 0xfffffffffffffdc0\n 56597: u64 [sp + 0x238] = ra\n 56601: u64 [sp + 0x230] = s0\n 56605: u64 [sp + 0x228] = s1\n 56609: s0 = sp + 0x240\n 56613: sp = sp & 0xffffffffffffffe0\n 56616: a2 = u64 [a1 + 0x18]\n 56619: u64 [sp + 0x50] = a2\n 56622: a2 = u64 [a1 + 0x10]\n 56625: u64 [sp + 0x30] = a2\n 56628: a2 = u64 [a1 + 0x8]\n 56631: u64 [sp + 0x28] = a2\n 56634: a1 = u64 [a1]\n 56636: u64 [sp + 0x20] = a1\n 56639: a3 = u64 [a0 + 0x18]\n 56642: a2 = u64 [a0 + 0x10]\n 56645: a1 = u64 [a0 + 0x8]\n 56648: a0 = u64 [a0]\n 56650: u64 [sp + 0x60] = a3\n 56653: u64 [sp + 0x1f8] = a3\n 56657: u64 [sp + 0x68] = a2\n 56660: u64 [sp + 0x1f0] = a2\n 56664: u64 [sp + 0x70] = a1\n 56667: u64 [sp + 0x1e8] = a1\n 56671: u64 [sp + 0x78] = a0\n 56674: u64 [sp + 0x1e0] = a0\n 56678: u64 [sp + 536] = 0\n 56682: u64 [sp + 528] = 0\n 56686: u64 [sp + 520] = 0\n 56690: u64 [sp + 512] = 0\n 56694: u32 [sp + 448] = 0x20\n 56699: i32 a1 = sp + 0x1e0\n 56703: i32 a3 = sp + 0x200\n 56707: i32 a4 = sp + 0x1c0\n 56711: a2 = 0xffffffffffffffff\n 56714: a0 = 0\n 56716: ecalli 7 // 'get_storage'\n 56718: jump @690\n      : @725 [@dyn 322] (gas: 11)\n 56721: i32 a0 = sp + 0x260\n 56725: ecalli 4 // 'caller'\n 56727: a0 = u32 [sp + 0x270]\n 56731: u64 [sp + 0x150] = a0\n 56735: a0 = u64 [sp + 0x268]\n 56739: u64 [sp + 0x148] = a0\n 56743: a0 = u64 [sp + 0x260]\n 56747: u64 [sp + 0x158] = a0\n 56751: a0 = 0x40\n 56754: a1 = 0x20\n 56757: ra = 646, jump @0\n      : @726 [@dyn 323] (gas: 100)\n 56764: a1 = u8 [a0 + 0x11]\n 56767: a2 = u8 [a0 + 0x10]\n 56770: a3 = u8 [a0 + 0x12]\n 56773: a4 = u8 [a0 + 0x13]\n 56776: a1 = a1 << 0x8\n 56779: a1 = a1 | a2\n 56782: a3 = a3 << 0x10\n 56785: a4 = a4 << 0x18\n 56788: a3 = a3 | a4\n 56791: a1 = a1 | a3\n 56794: a2 = u8 [a0 + 0x15]\n 56797: a3 = u8 [a0 + 0x14]\n 56800: a4 = u8 [a0 + 0x16]\n 56803: a5 = u8 [a0 + 0x17]\n 56806: a2 = a2 << 0x8\n 56809: a2 = a2 | a3\n 56812: a4 = a4 << 0x10\n 56815: a5 = a5 << 0x18\n 56818: a4 = a4 | a5\n 56821: a2 = a2 | a4\n 56824: a2 = a2 << 0x20\n 56827: t0 = a2 | a1\n 56830: a2 = u8 [a0 + 0x1]\n 56833: a3 = u8 [a0]\n 56835: a4 = u8 [a0 + 0x2]\n 56838: a5 = u8 [a0 + 0x3]\n 56841: a2 = a2 << 0x8\n 56844: a2 = a2 | a3\n 56847: a4 = a4 << 0x10\n 56850: a5 = a5 << 0x18\n 56853: a4 = a4 | a5\n 56856: a2 = a2 | a4\n 56859: a3 = u8 [a0 + 0x5]\n 56862: a4 = u8 [a0 + 0x4]\n 56865: a5 = u8 [a0 + 0x6]\n 56868: s1 = u8 [a0 + 0x7]\n 56871: a3 = a3 << 0x8\n 56874: a3 = a3 | a4\n 56877: a5 = a5 << 0x10\n 56880: s1 = s1 << 0x18\n 56883: a5 = a5 | s1\n 56886: a3 = a3 | a5\n 56889: a3 = a3 << 0x20\n 56892: a2 = a2 | a3\n 56895: a3 = u8 [a0 + 0x19]\n 56898: a4 = u8 [a0 + 0x18]\n 56901: a5 = u8 [a0 + 0x1a]\n 56904: s1 = u8 [a0 + 0x1b]\n 56907: a3 = a3 << 0x8\n 56910: a3 = a3 | a4\n 56913: a5 = a5 << 0x10\n 56916: s1 = s1 << 0x18\n 56919: a5 = a5 | s1\n 56922: a3 = a3 | a5\n 56925: a4 = u8 [a0 + 0x1d]\n 56928: a5 = u8 [a0 + 0x1c]\n 56931: s1 = u8 [a0 + 0x1e]\n 56934: a1 = u8 [a0 + 0x1f]\n 56937: a4 = a4 << 0x8\n 56940: a4 = a4 | a5\n 56943: s1 = s1 << 0x10\n 56946: a1 = a1 << 0x18\n 56949: a1 = a1 | s1\n 56952: a1 = a1 | a4\n 56955: a1 = a1 << 0x20\n 56958: a3 = a3 | a1\n 56961: a1 = u8 [a0 + 0x9]\n 56964: a4 = u8 [a0 + 0x8]\n 56967: a5 = u8 [a0 + 0xa]\n 56970: s1 = u8 [a0 + 0xb]\n 56973: a1 = a1 << 0x8\n 56976: a1 = a1 | a4\n 56979: a5 = a5 << 0x10\n 56982: s1 = s1 << 0x18\n 56985: a5 = a5 | s1\n 56988: a1 = a1 | a5\n 56991: a4 = u8 [a0 + 0xd]\n 56994: a5 = u8 [a0 + 0xc]\n 56997: s1 = u8 [a0 + 0xe]\n 57000: a0 = u8 [a0 + 0xf]\n 57003: a4 = a4 << 0x8\n 57006: a4 = a4 | a5\n 57009: s1 = s1 << 0x10\n 57012: a0 = a0 << 0x18\n 57015: a0 = a0 | s1\n 57018: a0 = a0 | a4\n 57021: a0 = a0 << 0x20\n 57024: a0 = a0 | a1\n 57027: a1 = reverse a0\n 57029: a0 = reverse a3\n 57031: a2 = reverse a2\n 57033: a3 = reverse t0\n 57035: a2 = a2 | a3\n 57038: a3 = a0 | a1\n 57041: a3 = a3 | a2\n 57044: a3 = a3 >> 0x20\n 57047: a1 = a1 | a2\n 57050: a1 = a1 << 0x20\n 57053: a1 = a1 | a3\n 57056: jump @730 if a1 != 0\n      : @727 (gas: 18)\n 57060: a1 = u64 [sp + 0x148]\n 57064: a1 = reverse a1\n 57066: a2 = a1 << 0x20\n 57069: a3 = u64 [sp + 0x150]\n 57073: a3 = reverse a3\n 57075: a3 = a3 >> 0x20\n 57078: a2 = a2 | a3\n 57081: u64 [sp + 0x150] = a2\n 57085: a2 = u64 [sp + 0x158]\n 57089: a2 = reverse a2\n 57091: a2 = a2 << 0x20\n 57094: a1 = a1 >> 0x20\n 57097: a1 = a1 | a2\n 57100: u64 [sp + 0x148] = a1\n 57104: i32 s1 = a0 + 0\n 57106: a1 = 0x20\n 57109: a0 = s1\n 57111: ra = 648, jump @0\n      : @728 [@dyn 324] (gas: 67)\n 57118: a1 = u64 [sp + 0xb8]\n 57122: u8 [a0 + 0x10] = a1\n 57125: a1 = u64 [sp + 0x78]\n 57128: u8 [a0 + 0xf] = a1\n 57131: a1 = u64 [sp + 0x70]\n 57134: u8 [a0 + 0xe] = a1\n 57137: a1 = u64 [sp + 0x68]\n 57140: u8 [a0 + 0xd] = a1\n 57143: a1 = u64 [sp + 0x58]\n 57146: u8 [a0 + 0xc] = a1\n 57149: a1 = u64 [sp + 0x50]\n 57152: u8 [a0 + 0xb] = a1\n 57155: a1 = u64 [sp + 0x48]\n 57158: u8 [a0 + 0xa] = a1\n 57161: a1 = u64 [sp + 0x40]\n 57164: u8 [a0 + 0x9] = a1\n 57167: a1 = u64 [sp + 0xc0]\n 57171: u8 [a0 + 0x8] = a1\n 57174: a1 = u64 [sp + 0x38]\n 57177: u8 [a0 + 0x7] = a1\n 57180: a1 = u64 [sp + 0x30]\n 57183: u8 [a0 + 0x6] = a1\n 57186: a1 = u64 [sp + 0x28]\n 57189: u8 [a0 + 0x5] = a1\n 57192: a1 = u64 [sp + 0x20]\n 57195: u8 [a0 + 0x4] = a1\n 57198: a1 = u64 [sp + 0x18]\n 57201: u8 [a0 + 0x3] = a1\n 57204: a1 = u64 [sp + 0x10]\n 57207: u8 [a0 + 0x2] = a1\n 57210: a1 = u64 [sp + 0x8]\n 57213: u8 [a0 + 0x1] = a1\n 57216: a1 = u64 [sp + 0xe0]\n 57220: u8 [a0] = a1\n 57222: a1 = u64 [sp + 0xc8]\n 57226: u8 [a0 + 0x18] = a1\n 57229: a1 = u64 [sp + 0xb0]\n 57233: u8 [a0 + 0x17] = a1\n 57236: a1 = u64 [sp + 0xa8]\n 57240: u8 [a0 + 0x16] = a1\n 57243: a1 = u64 [sp + 0xa0]\n 57247: u8 [a0 + 0x15] = a1\n 57250: a1 = u64 [sp + 0x98]\n 57254: u8 [a0 + 0x14] = a1\n 57257: a1 = u64 [sp + 0x90]\n 57261: u8 [a0 + 0x13] = a1\n 57264: a1 = u64 [sp + 0x88]\n 57268: u8 [a0 + 0x12] = a1\n 57271: a1 = u64 [sp + 0x80]\n 57275: u8 [a0 + 0x11] = a1\n 57278: a1 = u64 [sp + 0x108]\n 57282: u8 [a0 + 0x1f] = a1\n 57285: a1 = u64 [sp + 0x100]\n 57289: u8 [a0 + 0x1e] = a1\n 57292: a1 = u64 [sp + 0xf8]\n 57296: u8 [a0 + 0x1d] = a1\n 57299: a1 = u64 [sp + 0xf0]\n 57303: u8 [a0 + 0x1c] = a1\n 57306: a1 = u64 [sp + 0xe8]\n 57310: u8 [a0 + 0x1b] = a1\n 57313: a1 = u64 [sp + 0xd8]\n 57317: u8 [a0 + 0x1a] = a1\n 57320: a1 = u64 [sp + 0xd0]\n 57324: u8 [a0 + 0x19] = a1\n 57327: a1 = 0x20\n 57330: a0 = s1\n 57332: ra = 650, jump @0\n      : @729 [@dyn 325] (gas: 49)\n 57339: a1 = u64 [0x20000]\n 57344: a2 = u64 [0x20008]\n 57349: a3 = u64 [0x20010]\n 57354: a4 = u64 [0x20018]\n 57359: u64 [sp + 0x2d8] = a1\n 57363: u64 [sp + 0x2d0] = a2\n 57367: u64 [sp + 0x2c8] = a3\n 57371: u64 [sp + 0x2c0] = a4\n 57375: a1 = u64 [sp + 0x138]\n 57379: a1 = reverse a1\n 57381: u64 [sp + 0x2f8] = a1\n 57385: a1 = u64 [sp + 0x130]\n 57389: a1 = reverse a1\n 57391: u64 [sp + 0x2f0] = a1\n 57395: a1 = u64 [sp + 0x128]\n 57399: a1 = reverse a1\n 57401: u64 [sp + 0x2e8] = a1\n 57405: s1 = u64 [sp + 0x110]\n 57409: a1 = reverse s1\n 57411: u64 [sp + 0x2e0] = a1\n 57415: a1 = u64 [sp + 0x150]\n 57419: a1 = reverse a1\n 57421: u64 [sp + 0x318] = a1\n 57425: a1 = u64 [sp + 0x148]\n 57429: a1 = reverse a1\n 57431: u64 [sp + 0x310] = a1\n 57435: a1 = u64 [sp + 0x158]\n 57439: a1 = a1 << 0x20\n 57442: u64 [sp + 0x308] = a1\n 57446: u64 [sp + 768] = 0\n 57450: i32 a2 = a0 + 0\n 57452: i32 a0 = sp + 0x2c0\n 57456: a1 = 0x3\n 57459: a3 = 0x20\n 57462: ecalli 6 // 'deposit_event'\n 57464: a0 = u64 [sp + 0x60]\n 57467: u64 [a0 + 0x18] = s1\n 57470: a1 = u64 [sp + 0x128]\n 57474: u64 [a0 + 0x10] = a1\n 57477: a1 = u64 [sp + 0x130]\n 57481: u64 [a0 + 0x8] = a1\n 57484: a1 = u64 [sp + 0x138]\n 57488: u64 [a0] = a1\n 57490: sp = s0 + 0xfffffffffffffcc0\n 57494: ra = u64 [sp + 0x338]\n 57498: s0 = u64 [sp + 0x330]\n 57502: s1 = u64 [sp + 0x328]\n 57506: sp = sp + 0x340\n 57510: ret\n      : @730 (gas: 1)\n 57512: trap\n      : @731 (gas: 17)\n 57513: sp = sp + 0xffffffffffffffa0\n 57516: u64 [sp + 0x58] = ra\n 57519: u64 [sp + 0x50] = s0\n 57522: u64 [sp + 0x48] = s1\n 57525: a3 = u64 [a1 + 0x18]\n 57528: a4 = u64 [a1 + 0x10]\n 57531: a5 = u64 [a1 + 0x8]\n 57534: s1 = u64 [a1]\n 57536: a1 = a5 | a3\n 57539: a2 = s1 | a4\n 57542: a2 = a2 | a1\n 57545: a2 = a2 >> 0x20\n 57548: a1 = a1 | a4\n 57551: a1 = a1 << 0x20\n 57554: a1 = a1 | a2\n 57557: u64 [sp + 0x28] = a0\n 57560: jump @738 if a1 != 0\n      : @732 (gas: 19)\n 57564: a0 = s1 + 0x20\n 57567: u64 [sp + 0x30] = a0\n 57570: a0 = a0 <u s1\n 57573: a1 = a5 + a0\n 57576: u64 [sp + 0x40] = a1\n 57579: u64 [sp + 0x8] = a5\n 57582: s0 = a1 <u a5\n 57585: s0 = a0 if a0 == 0\n 57588: s0 = s0 + a4\n 57591: u64 [sp + 0x10] = a4\n 57594: a0 = s0 <u a4\n 57597: u64 [sp + 0x18] = a3\n 57600: a0 = a0 + a3\n 57603: u64 [sp + 0x38] = a0\n 57606: u64 [sp] = s1\n 57608: i32 a0 = s1 + 0\n 57610: a1 = 0x20\n 57613: s1 = 0x20\n 57616: ra = 652, jump @0\n      : @733 [@dyn 326] (gas: 45)\n 57623: u8 [a0 + 0x1f] = s1\n 57626: a1 = u64 [sp + 0x30]\n 57629: s1 = a1\n 57631: a1 = a1 | s0\n 57634: a2 = u64 [sp + 0x40]\n 57637: a4 = u64 [sp + 0x38]\n 57640: a2 = a2 | a4\n 57643: a1 = a1 | a2\n 57646: a1 = a1 >> 0x20\n 57649: u64 [sp + 0x20] = s0\n 57652: a2 = a2 | s0\n 57655: a2 = a2 << 0x20\n 57658: a1 = a1 | a2\n 57661: u8 [a0 + 30] = 0\n 57664: u8 [a0 + 29] = 0\n 57667: u8 [a0 + 28] = 0\n 57670: u8 [a0 + 27] = 0\n 57673: u8 [a0 + 26] = 0\n 57676: u8 [a0 + 25] = 0\n 57679: u8 [a0 + 24] = 0\n 57682: u8 [a0 + 23] = 0\n 57685: u8 [a0 + 22] = 0\n 57688: u8 [a0 + 21] = 0\n 57691: u8 [a0 + 20] = 0\n 57694: u8 [a0 + 19] = 0\n 57697: u8 [a0 + 18] = 0\n 57700: u8 [a0 + 17] = 0\n 57703: u8 [a0 + 16] = 0\n 57706: u8 [a0 + 15] = 0\n 57709: u8 [a0 + 14] = 0\n 57712: u8 [a0 + 13] = 0\n 57715: u8 [a0 + 12] = 0\n 57718: u8 [a0 + 11] = 0\n 57721: u8 [a0 + 10] = 0\n 57724: u8 [a0 + 9] = 0\n 57727: u8 [a0 + 8] = 0\n 57730: u8 [a0 + 7] = 0\n 57733: u8 [a0 + 6] = 0\n 57736: u8 [a0 + 5] = 0\n 57739: u8 [a0 + 4] = 0\n 57742: u8 [a0 + 3] = 0\n 57745: u8 [a0 + 2] = 0\n 57748: u8 [a0 + 1] = 0\n 57751: u8 [a0 + 0] = 0\n 57753: jump @738 if a1 != 0\n      : @734 (gas: 4)\n 57757: i32 s0 = s1 + 0\n 57759: a1 = 0x20\n 57762: a0 = s0\n 57764: ra = 654, jump @0\n      : @735 [@dyn 327] (gas: 41)\n 57771: u8 [a0 + 31] = 0x14\n 57775: u8 [a0 + 30] = 0\n 57778: u8 [a0 + 29] = 0\n 57781: u8 [a0 + 28] = 0\n 57784: u8 [a0 + 27] = 0\n 57787: u8 [a0 + 26] = 0\n 57790: u8 [a0 + 25] = 0\n 57793: u8 [a0 + 24] = 0\n 57796: u8 [a0 + 23] = 0\n 57799: u8 [a0 + 22] = 0\n 57802: u8 [a0 + 21] = 0\n 57805: u8 [a0 + 20] = 0\n 57808: u8 [a0 + 19] = 0\n 57811: u8 [a0 + 18] = 0\n 57814: u8 [a0 + 17] = 0\n 57817: u8 [a0 + 16] = 0\n 57820: u8 [a0 + 15] = 0\n 57823: u8 [a0 + 14] = 0\n 57826: u8 [a0 + 13] = 0\n 57829: u8 [a0 + 12] = 0\n 57832: u8 [a0 + 11] = 0\n 57835: u8 [a0 + 10] = 0\n 57838: u8 [a0 + 9] = 0\n 57841: u8 [a0 + 8] = 0\n 57844: u8 [a0 + 7] = 0\n 57847: u8 [a0 + 6] = 0\n 57850: u8 [a0 + 5] = 0\n 57853: u8 [a0 + 4] = 0\n 57856: u8 [a0 + 3] = 0\n 57859: u8 [a0 + 2] = 0\n 57862: u8 [a0 + 1] = 0\n 57865: a1 = u64 [sp + 0x20]\n 57868: a2 = u64 [sp + 0x38]\n 57871: a1 = a1 | a2\n 57874: a2 = 0xffffffe0\n 57884: a2 = s1 <u a2\n 57887: a3 = u64 [sp + 0x40]\n 57890: a2 = 0 if a3 != 0\n 57892: a2 = 0 if a1 != 0\n 57894: u8 [a0 + 0] = 0\n 57896: jump @738 if a2 == 0\n      : @736 (gas: 3)\n 57900: i32 a0 = s0 + 0x20\n 57903: a1 = 0x20\n 57906: ra = 656, jump @0\n      : @737 [@dyn 328] (gas: 55)\n 57913: u8 [a0 + 31] = 0\n 57916: u8 [a0 + 30] = 0\n 57919: u8 [a0 + 29] = 0\n 57922: u8 [a0 + 28] = 0\n 57925: u8 [a0 + 27] = 0\n 57928: u8 [a0 + 26] = 0\n 57931: u8 [a0 + 25] = 0\n 57934: u8 [a0 + 24] = 0\n 57937: u8 [a0 + 23] = 0\n 57940: u8 [a0 + 22] = 0\n 57943: u8 [a0 + 21] = 0\n 57946: u8 [a0 + 20] = 0\n 57949: u8 [a0 + 19] = 0x74\n 57953: u8 [a0 + 18] = 0x73\n 57957: u8 [a0 + 17] = 0x69\n 57961: u8 [a0 + 16] = 0x78\n 57965: u8 [a0 + 15] = 0x65\n 57969: a5 = 0x20\n 57972: u8 [a0 + 0xe] = a5\n 57975: u8 [a0 + 13] = 0x74\n 57979: u8 [a0 + 12] = 0x6f\n 57983: u8 [a0 + 11] = 0x6e\n 57987: u8 [a0 + 0xa] = a5\n 57990: u8 [a0 + 9] = 0x73\n 57994: u8 [a0 + 8] = 0x65\n 57998: u8 [a0 + 7] = 0x6f\n 58002: u8 [a0 + 6] = 0x64\n 58006: u8 [a0 + 0x5] = a5\n 58009: u8 [a0 + 4] = 0x65\n 58013: u8 [a0 + 3] = 0x6e\n 58017: u8 [a0 + 2] = 0x6f\n 58021: u8 [a0 + 1] = 0x68\n 58025: u8 [a0 + 0] = 0x50\n 58028: a1 = u64 [sp]\n 58030: a0 = a1 + 0x60\n 58033: a1 = a0 <u a1\n 58036: a3 = u64 [sp + 0x8]\n 58039: a2 = a3 + a1\n 58042: a3 = a2 <u a3\n 58045: a3 = a1 if a1 == 0\n 58048: a1 = u64 [sp + 0x10]\n 58051: a3 = a3 + a1\n 58054: a1 = a3 <u a1\n 58057: a4 = u64 [sp + 0x18]\n 58060: a1 = a1 + a4\n 58063: a4 = u64 [sp + 0x28]\n 58066: u64 [a4] = a0\n 58068: u64 [a4 + 0x8] = a2\n 58071: u64 [a4 + 0x10] = a3\n 58074: u64 [a4 + 0x18] = a1\n 58077: ra = u64 [sp + 0x58]\n 58080: s0 = u64 [sp + 0x50]\n 58083: s1 = u64 [sp + 0x48]\n 58086: sp = sp + 0x60\n 58089: ret\n      : @738 (gas: 1)\n 58091: trap\n      : @739 (gas: 17)\n 58092: sp = sp + 0xffffffffffffffa0\n 58095: u64 [sp + 0x58] = ra\n 58098: u64 [sp + 0x50] = s0\n 58101: u64 [sp + 0x48] = s1\n 58104: a3 = u64 [a1 + 0x18]\n 58107: a4 = u64 [a1 + 0x10]\n 58110: a5 = u64 [a1 + 0x8]\n 58113: s1 = u64 [a1]\n 58115: a1 = a5 | a3\n 58118: a2 = s1 | a4\n 58121: a2 = a2 | a1\n 58124: a2 = a2 >> 0x20\n 58127: a1 = a1 | a4\n 58130: a1 = a1 << 0x20\n 58133: a1 = a1 | a2\n 58136: u64 [sp + 0x28] = a0\n 58139: jump @746 if a1 != 0\n      : @740 (gas: 19)\n 58143: a0 = s1 + 0x20\n 58146: u64 [sp + 0x30] = a0\n 58149: a0 = a0 <u s1\n 58152: a1 = a5 + a0\n 58155: u64 [sp + 0x40] = a1\n 58158: u64 [sp + 0x8] = a5\n 58161: s0 = a1 <u a5\n 58164: s0 = a0 if a0 == 0\n 58167: s0 = s0 + a4\n 58170: u64 [sp + 0x10] = a4\n 58173: a0 = s0 <u a4\n 58176: u64 [sp + 0x18] = a3\n 58179: a0 = a0 + a3\n 58182: u64 [sp + 0x38] = a0\n 58185: u64 [sp] = s1\n 58187: i32 a0 = s1 + 0\n 58189: a1 = 0x20\n 58192: s1 = 0x20\n 58195: ra = 658, jump @0\n      : @741 [@dyn 329] (gas: 45)\n 58202: u8 [a0 + 0x1f] = s1\n 58205: a1 = u64 [sp + 0x30]\n 58208: s1 = a1\n 58210: a1 = a1 | s0\n 58213: a2 = u64 [sp + 0x40]\n 58216: a4 = u64 [sp + 0x38]\n 58219: a2 = a2 | a4\n 58222: a1 = a1 | a2\n 58225: a1 = a1 >> 0x20\n 58228: u64 [sp + 0x20] = s0\n 58231: a2 = a2 | s0\n 58234: a2 = a2 << 0x20\n 58237: a1 = a1 | a2\n 58240: u8 [a0 + 30] = 0\n 58243: u8 [a0 + 29] = 0\n 58246: u8 [a0 + 28] = 0\n 58249: u8 [a0 + 27] = 0\n 58252: u8 [a0 + 26] = 0\n 58255: u8 [a0 + 25] = 0\n 58258: u8 [a0 + 24] = 0\n 58261: u8 [a0 + 23] = 0\n 58264: u8 [a0 + 22] = 0\n 58267: u8 [a0 + 21] = 0\n 58270: u8 [a0 + 20] = 0\n 58273: u8 [a0 + 19] = 0\n 58276: u8 [a0 + 18] = 0\n 58279: u8 [a0 + 17] = 0\n 58282: u8 [a0 + 16] = 0\n 58285: u8 [a0 + 15] = 0\n 58288: u8 [a0 + 14] = 0\n 58291: u8 [a0 + 13] = 0\n 58294: u8 [a0 + 12] = 0\n 58297: u8 [a0 + 11] = 0\n 58300: u8 [a0 + 10] = 0\n 58303: u8 [a0 + 9] = 0\n 58306: u8 [a0 + 8] = 0\n 58309: u8 [a0 + 7] = 0\n 58312: u8 [a0 + 6] = 0\n 58315: u8 [a0 + 5] = 0\n 58318: u8 [a0 + 4] = 0\n 58321: u8 [a0 + 3] = 0\n 58324: u8 [a0 + 2] = 0\n 58327: u8 [a0 + 1] = 0\n 58330: u8 [a0 + 0] = 0\n 58332: jump @746 if a1 != 0\n      : @742 (gas: 4)\n 58336: i32 s0 = s1 + 0\n 58338: a1 = 0x20\n 58341: a0 = s0\n 58343: ra = 660, jump @0\n      : @743 [@dyn 330] (gas: 41)\n 58350: u8 [a0 + 31] = 0x16\n 58354: u8 [a0 + 30] = 0\n 58357: u8 [a0 + 29] = 0\n 58360: u8 [a0 + 28] = 0\n 58363: u8 [a0 + 27] = 0\n 58366: u8 [a0 + 26] = 0\n 58369: u8 [a0 + 25] = 0\n 58372: u8 [a0 + 24] = 0\n 58375: u8 [a0 + 23] = 0\n 58378: u8 [a0 + 22] = 0\n 58381: u8 [a0 + 21] = 0\n 58384: u8 [a0 + 20] = 0\n 58387: u8 [a0 + 19] = 0\n 58390: u8 [a0 + 18] = 0\n 58393: u8 [a0 + 17] = 0\n 58396: u8 [a0 + 16] = 0\n 58399: u8 [a0 + 15] = 0\n 58402: u8 [a0 + 14] = 0\n 58405: u8 [a0 + 13] = 0\n 58408: u8 [a0 + 12] = 0\n 58411: u8 [a0 + 11] = 0\n 58414: u8 [a0 + 10] = 0\n 58417: u8 [a0 + 9] = 0\n 58420: u8 [a0 + 8] = 0\n 58423: u8 [a0 + 7] = 0\n 58426: u8 [a0 + 6] = 0\n 58429: u8 [a0 + 5] = 0\n 58432: u8 [a0 + 4] = 0\n 58435: u8 [a0 + 3] = 0\n 58438: u8 [a0 + 2] = 0\n 58441: u8 [a0 + 1] = 0\n 58444: a1 = u64 [sp + 0x20]\n 58447: a2 = u64 [sp + 0x38]\n 58450: a1 = a1 | a2\n 58453: a2 = 0xffffffe0\n 58463: a2 = s1 <u a2\n 58466: a3 = u64 [sp + 0x40]\n 58469: a2 = 0 if a3 != 0\n 58471: a2 = 0 if a1 != 0\n 58473: u8 [a0 + 0] = 0\n 58475: jump @746 if a2 == 0\n      : @744 (gas: 3)\n 58479: i32 a0 = s0 + 0x20\n 58482: a1 = 0x20\n 58485: ra = 662, jump @0\n      : @745 [@dyn 331] (gas: 55)\n 58492: u8 [a0 + 31] = 0\n 58495: u8 [a0 + 30] = 0\n 58498: u8 [a0 + 29] = 0\n 58501: u8 [a0 + 28] = 0\n 58504: u8 [a0 + 27] = 0\n 58507: u8 [a0 + 26] = 0\n 58510: u8 [a0 + 25] = 0\n 58513: u8 [a0 + 24] = 0\n 58516: u8 [a0 + 23] = 0\n 58519: u8 [a0 + 22] = 0\n 58522: u8 [a0 + 21] = 0x6d\n 58526: u8 [a0 + 20] = 0x72\n 58530: u8 [a0 + 19] = 0x69\n 58534: u8 [a0 + 18] = 0x66\n 58538: u8 [a0 + 17] = 0x6e\n 58542: u8 [a0 + 16] = 0x6f\n 58546: u8 [a0 + 15] = 0x63\n 58550: a5 = 0x20\n 58553: u8 [a0 + 0xe] = a5\n 58556: u8 [a0 + 13] = 0x6e\n 58560: u8 [a0 + 12] = 0x61\n 58564: u8 [a0 + 11] = 0x63\n 58568: u8 [a0 + 0xa] = a5\n 58571: u8 [a0 + 9] = 0x72\n 58575: u8 [a0 + 8] = 0x65\n 58579: u8 [a0 + 7] = 0x79\n 58583: u8 [a0 + 6] = 0x75\n 58587: u8 [a0 + 5] = 0x62\n 58591: u8 [a0 + 0x4] = a5\n 58594: u8 [a0 + 3] = 0x79\n 58598: u8 [a0 + 2] = 0x6c\n 58602: u8 [a0 + 1] = 0x6e\n 58606: u8 [a0 + 0] = 0x4f\n 58609: a1 = u64 [sp]\n 58611: a0 = a1 + 0x60\n 58614: a1 = a0 <u a1\n 58617: a3 = u64 [sp + 0x8]\n 58620: a2 = a3 + a1\n 58623: a3 = a2 <u a3\n 58626: a3 = a1 if a1 == 0\n 58629: a1 = u64 [sp + 0x10]\n 58632: a3 = a3 + a1\n 58635: a1 = a3 <u a1\n 58638: a4 = u64 [sp + 0x18]\n 58641: a1 = a1 + a4\n 58644: a4 = u64 [sp + 0x28]\n 58647: u64 [a4] = a0\n 58649: u64 [a4 + 0x8] = a2\n 58652: u64 [a4 + 0x10] = a3\n 58655: u64 [a4 + 0x18] = a1\n 58658: ra = u64 [sp + 0x58]\n 58661: s0 = u64 [sp + 0x50]\n 58664: s1 = u64 [sp + 0x48]\n 58667: sp = sp + 0x60\n 58670: ret\n      : @746 (gas: 1)\n 58672: trap\n      : @747 (gas: 17)\n 58673: sp = sp + 0xffffffffffffffa0\n 58676: u64 [sp + 0x58] = ra\n 58679: u64 [sp + 0x50] = s0\n 58682: u64 [sp + 0x48] = s1\n 58685: a3 = u64 [a1 + 0x18]\n 58688: a4 = u64 [a1 + 0x10]\n 58691: a5 = u64 [a1 + 0x8]\n 58694: s1 = u64 [a1]\n 58696: a1 = a5 | a3\n 58699: a2 = s1 | a4\n 58702: a2 = a2 | a1\n 58705: a2 = a2 >> 0x20\n 58708: a1 = a1 | a4\n 58711: a1 = a1 << 0x20\n 58714: a1 = a1 | a2\n 58717: u64 [sp + 0x28] = a0\n 58720: jump @754 if a1 != 0\n      : @748 (gas: 19)\n 58724: a0 = s1 + 0x20\n 58727: u64 [sp + 0x30] = a0\n 58730: a0 = a0 <u s1\n 58733: a1 = a5 + a0\n 58736: u64 [sp + 0x40] = a1\n 58739: u64 [sp + 0x8] = a5\n 58742: s0 = a1 <u a5\n 58745: s0 = a0 if a0 == 0\n 58748: s0 = s0 + a4\n 58751: u64 [sp + 0x10] = a4\n 58754: a0 = s0 <u a4\n 58757: u64 [sp + 0x18] = a3\n 58760: a0 = a0 + a3\n 58763: u64 [sp + 0x38] = a0\n 58766: u64 [sp] = s1\n 58768: i32 a0 = s1 + 0\n 58770: a1 = 0x20\n 58773: s1 = 0x20\n 58776: ra = 664, jump @0\n      : @749 [@dyn 332] (gas: 45)\n 58783: u8 [a0 + 0x1f] = s1\n 58786: a1 = u64 [sp + 0x30]\n 58789: s1 = a1\n 58791: a1 = a1 | s0\n 58794: a2 = u64 [sp + 0x40]\n 58797: a4 = u64 [sp + 0x38]\n 58800: a2 = a2 | a4\n 58803: a1 = a1 | a2\n 58806: a1 = a1 >> 0x20\n 58809: u64 [sp + 0x20] = s0\n 58812: a2 = a2 | s0\n 58815: a2 = a2 << 0x20\n 58818: a1 = a1 | a2\n 58821: u8 [a0 + 30] = 0\n 58824: u8 [a0 + 29] = 0\n 58827: u8 [a0 + 28] = 0\n 58830: u8 [a0 + 27] = 0\n 58833: u8 [a0 + 26] = 0\n 58836: u8 [a0 + 25] = 0\n 58839: u8 [a0 + 24] = 0\n 58842: u8 [a0 + 23] = 0\n 58845: u8 [a0 + 22] = 0\n 58848: u8 [a0 + 21] = 0\n 58851: u8 [a0 + 20] = 0\n 58854: u8 [a0 + 19] = 0\n 58857: u8 [a0 + 18] = 0\n 58860: u8 [a0 + 17] = 0\n 58863: u8 [a0 + 16] = 0\n 58866: u8 [a0 + 15] = 0\n 58869: u8 [a0 + 14] = 0\n 58872: u8 [a0 + 13] = 0\n 58875: u8 [a0 + 12] = 0\n 58878: u8 [a0 + 11] = 0\n 58881: u8 [a0 + 10] = 0\n 58884: u8 [a0 + 9] = 0\n 58887: u8 [a0 + 8] = 0\n 58890: u8 [a0 + 7] = 0\n 58893: u8 [a0 + 6] = 0\n 58896: u8 [a0 + 5] = 0\n 58899: u8 [a0 + 4] = 0\n 58902: u8 [a0 + 3] = 0\n 58905: u8 [a0 + 2] = 0\n 58908: u8 [a0 + 1] = 0\n 58911: u8 [a0 + 0] = 0\n 58913: jump @754 if a1 != 0\n      : @750 (gas: 4)\n 58917: i32 s0 = s1 + 0\n 58919: a1 = 0x20\n 58922: a0 = s0\n 58924: ra = 666, jump @0\n      : @751 [@dyn 333] (gas: 41)\n 58931: u8 [a0 + 31] = 0x12\n 58935: u8 [a0 + 30] = 0\n 58938: u8 [a0 + 29] = 0\n 58941: u8 [a0 + 28] = 0\n 58944: u8 [a0 + 27] = 0\n 58947: u8 [a0 + 26] = 0\n 58950: u8 [a0 + 25] = 0\n 58953: u8 [a0 + 24] = 0\n 58956: u8 [a0 + 23] = 0\n 58959: u8 [a0 + 22] = 0\n 58962: u8 [a0 + 21] = 0\n 58965: u8 [a0 + 20] = 0\n 58968: u8 [a0 + 19] = 0\n 58971: u8 [a0 + 18] = 0\n 58974: u8 [a0 + 17] = 0\n 58977: u8 [a0 + 16] = 0\n 58980: u8 [a0 + 15] = 0\n 58983: u8 [a0 + 14] = 0\n 58986: u8 [a0 + 13] = 0\n 58989: u8 [a0 + 12] = 0\n 58992: u8 [a0 + 11] = 0\n 58995: u8 [a0 + 10] = 0\n 58998: u8 [a0 + 9] = 0\n 59001: u8 [a0 + 8] = 0\n 59004: u8 [a0 + 7] = 0\n 59007: u8 [a0 + 6] = 0\n 59010: u8 [a0 + 5] = 0\n 59013: u8 [a0 + 4] = 0\n 59016: u8 [a0 + 3] = 0\n 59019: u8 [a0 + 2] = 0\n 59022: u8 [a0 + 1] = 0\n 59025: a1 = u64 [sp + 0x20]\n 59028: a2 = u64 [sp + 0x38]\n 59031: a1 = a1 | a2\n 59034: a2 = 0xffffffe0\n 59044: a2 = s1 <u a2\n 59047: a3 = u64 [sp + 0x40]\n 59050: a2 = 0 if a3 != 0\n 59052: a2 = 0 if a1 != 0\n 59054: u8 [a0 + 0] = 0\n 59056: jump @754 if a2 == 0\n      : @752 (gas: 3)\n 59060: i32 a0 = s0 + 0x20\n 59063: a1 = 0x20\n 59066: ra = 668, jump @0\n      : @753 [@dyn 334] (gas: 55)\n 59073: u8 [a0 + 31] = 0\n 59076: u8 [a0 + 30] = 0\n 59079: u8 [a0 + 29] = 0\n 59082: u8 [a0 + 28] = 0\n 59085: u8 [a0 + 27] = 0\n 59088: u8 [a0 + 26] = 0\n 59091: u8 [a0 + 25] = 0\n 59094: u8 [a0 + 24] = 0\n 59097: u8 [a0 + 23] = 0\n 59100: u8 [a0 + 22] = 0\n 59103: u8 [a0 + 21] = 0\n 59106: u8 [a0 + 20] = 0\n 59109: u8 [a0 + 19] = 0\n 59112: u8 [a0 + 18] = 0\n 59115: u8 [a0 + 17] = 0x74\n 59119: u8 [a0 + 16] = 0x65\n 59123: u8 [a0 + 15] = 0x79\n 59127: a5 = 0x20\n 59130: u8 [a0 + 0xe] = a5\n 59133: u8 [a0 + 13] = 0x64\n 59137: u8 [a0 + 12] = 0x6c\n 59141: u8 [a0 + 11] = 0x6f\n 59145: u8 [a0 + 10] = 0x73\n 59149: u8 [a0 + 0x9] = a5\n 59152: u8 [a0 + 8] = 0x74\n 59156: u8 [a0 + 7] = 0x6f\n 59160: u8 [a0 + 6] = 0x6e\n 59164: u8 [a0 + 0x5] = a5\n 59167: u8 [a0 + 4] = 0x65\n 59171: u8 [a0 + 3] = 0x6e\n 59175: u8 [a0 + 2] = 0x6f\n 59179: u8 [a0 + 1] = 0x68\n 59183: u8 [a0 + 0] = 0x50\n 59186: a1 = u64 [sp]\n 59188: a0 = a1 + 0x60\n 59191: a1 = a0 <u a1\n 59194: a3 = u64 [sp + 0x8]\n 59197: a2 = a3 + a1\n 59200: a3 = a2 <u a3\n 59203: a3 = a1 if a1 == 0\n 59206: a1 = u64 [sp + 0x10]\n 59209: a3 = a3 + a1\n 59212: a1 = a3 <u a1\n 59215: a4 = u64 [sp + 0x18]\n 59218: a1 = a1 + a4\n 59221: a4 = u64 [sp + 0x28]\n 59224: u64 [a4] = a0\n 59226: u64 [a4 + 0x8] = a2\n 59229: u64 [a4 + 0x10] = a3\n 59232: u64 [a4 + 0x18] = a1\n 59235: ra = u64 [sp + 0x58]\n 59238: s0 = u64 [sp + 0x50]\n 59241: s1 = u64 [sp + 0x48]\n 59244: sp = sp + 0x60\n 59247: ret\n      : @754 (gas: 1)\n 59249: trap\n      : @755 (gas: 17)\n 59250: sp = sp + 0xffffffffffffffa0\n 59253: u64 [sp + 0x58] = ra\n 59256: u64 [sp + 0x50] = s0\n 59259: u64 [sp + 0x48] = s1\n 59262: a3 = u64 [a1 + 0x18]\n 59265: a4 = u64 [a1 + 0x10]\n 59268: a5 = u64 [a1 + 0x8]\n 59271: s1 = u64 [a1]\n 59273: a1 = a5 | a3\n 59276: a2 = s1 | a4\n 59279: a2 = a2 | a1\n 59282: a2 = a2 >> 0x20\n 59285: a1 = a1 | a4\n 59288: a1 = a1 << 0x20\n 59291: a1 = a1 | a2\n 59294: u64 [sp + 0x28] = a0\n 59297: jump @762 if a1 != 0\n      : @756 (gas: 19)\n 59301: a0 = s1 + 0x20\n 59304: u64 [sp + 0x30] = a0\n 59307: a0 = a0 <u s1\n 59310: a1 = a5 + a0\n 59313: u64 [sp + 0x40] = a1\n 59316: u64 [sp + 0x8] = a5\n 59319: s0 = a1 <u a5\n 59322: s0 = a0 if a0 == 0\n 59325: s0 = s0 + a4\n 59328: u64 [sp + 0x10] = a4\n 59331: a0 = s0 <u a4\n 59334: u64 [sp + 0x18] = a3\n 59337: a0 = a0 + a3\n 59340: u64 [sp + 0x38] = a0\n 59343: u64 [sp] = s1\n 59345: i32 a0 = s1 + 0\n 59347: a1 = 0x20\n 59350: s1 = 0x20\n 59353: ra = 670, jump @0\n      : @757 [@dyn 335] (gas: 45)\n 59360: u8 [a0 + 0x1f] = s1\n 59363: a1 = u64 [sp + 0x30]\n 59366: s1 = a1\n 59368: a1 = a1 | s0\n 59371: a2 = u64 [sp + 0x40]\n 59374: a4 = u64 [sp + 0x38]\n 59377: a2 = a2 | a4\n 59380: a1 = a1 | a2\n 59383: a1 = a1 >> 0x20\n 59386: u64 [sp + 0x20] = s0\n 59389: a2 = a2 | s0\n 59392: a2 = a2 << 0x20\n 59395: a1 = a1 | a2\n 59398: u8 [a0 + 30] = 0\n 59401: u8 [a0 + 29] = 0\n 59404: u8 [a0 + 28] = 0\n 59407: u8 [a0 + 27] = 0\n 59410: u8 [a0 + 26] = 0\n 59413: u8 [a0 + 25] = 0\n 59416: u8 [a0 + 24] = 0\n 59419: u8 [a0 + 23] = 0\n 59422: u8 [a0 + 22] = 0\n 59425: u8 [a0 + 21] = 0\n 59428: u8 [a0 + 20] = 0\n 59431: u8 [a0 + 19] = 0\n 59434: u8 [a0 + 18] = 0\n 59437: u8 [a0 + 17] = 0\n 59440: u8 [a0 + 16] = 0\n 59443: u8 [a0 + 15] = 0\n 59446: u8 [a0 + 14] = 0\n 59449: u8 [a0 + 13] = 0\n 59452: u8 [a0 + 12] = 0\n 59455: u8 [a0 + 11] = 0\n 59458: u8 [a0 + 10] = 0\n 59461: u8 [a0 + 9] = 0\n 59464: u8 [a0 + 8] = 0\n 59467: u8 [a0 + 7] = 0\n 59470: u8 [a0 + 6] = 0\n 59473: u8 [a0 + 5] = 0\n 59476: u8 [a0 + 4] = 0\n 59479: u8 [a0 + 3] = 0\n 59482: u8 [a0 + 2] = 0\n 59485: u8 [a0 + 1] = 0\n 59488: u8 [a0 + 0] = 0\n 59490: jump @762 if a1 != 0\n      : @758 (gas: 4)\n 59494: i32 s0 = s1 + 0\n 59496: a1 = 0x20\n 59499: a0 = s0\n 59501: ra = 672, jump @0\n      : @759 [@dyn 336] (gas: 41)\n 59508: u8 [a0 + 31] = 0x18\n 59512: u8 [a0 + 30] = 0\n 59515: u8 [a0 + 29] = 0\n 59518: u8 [a0 + 28] = 0\n 59521: u8 [a0 + 27] = 0\n 59524: u8 [a0 + 26] = 0\n 59527: u8 [a0 + 25] = 0\n 59530: u8 [a0 + 24] = 0\n 59533: u8 [a0 + 23] = 0\n 59536: u8 [a0 + 22] = 0\n 59539: u8 [a0 + 21] = 0\n 59542: u8 [a0 + 20] = 0\n 59545: u8 [a0 + 19] = 0\n 59548: u8 [a0 + 18] = 0\n 59551: u8 [a0 + 17] = 0\n 59554: u8 [a0 + 16] = 0\n 59557: u8 [a0 + 15] = 0\n 59560: u8 [a0 + 14] = 0\n 59563: u8 [a0 + 13] = 0\n 59566: u8 [a0 + 12] = 0\n 59569: u8 [a0 + 11] = 0\n 59572: u8 [a0 + 10] = 0\n 59575: u8 [a0 + 9] = 0\n 59578: u8 [a0 + 8] = 0\n 59581: u8 [a0 + 7] = 0\n 59584: u8 [a0 + 6] = 0\n 59587: u8 [a0 + 5] = 0\n 59590: u8 [a0 + 4] = 0\n 59593: u8 [a0 + 3] = 0\n 59596: u8 [a0 + 2] = 0\n 59599: u8 [a0 + 1] = 0\n 59602: a1 = u64 [sp + 0x20]\n 59605: a2 = u64 [sp + 0x38]\n 59608: a1 = a1 | a2\n 59611: a2 = 0xffffffe0\n 59621: a2 = s1 <u a2\n 59624: a3 = u64 [sp + 0x40]\n 59627: a2 = 0 if a3 != 0\n 59629: a2 = 0 if a1 != 0\n 59631: u8 [a0 + 0] = 0\n 59633: jump @762 if a2 == 0\n      : @760 (gas: 3)\n 59637: i32 a0 = s0 + 0x20\n 59640: a1 = 0x20\n 59643: ra = 674, jump @0\n      : @761 [@dyn 337] (gas: 55)\n 59650: u8 [a0 + 31] = 0\n 59653: u8 [a0 + 30] = 0\n 59656: u8 [a0 + 29] = 0\n 59659: u8 [a0 + 28] = 0\n 59662: u8 [a0 + 27] = 0\n 59665: u8 [a0 + 26] = 0\n 59668: u8 [a0 + 25] = 0\n 59671: u8 [a0 + 24] = 0\n 59674: u8 [a0 + 23] = 0x74\n 59678: u8 [a0 + 22] = 0x65\n 59682: u8 [a0 + 21] = 0x79\n 59686: u8 [a0 + 20] = 0x20\n 59690: u8 [a0 + 19] = 0x64\n 59694: u8 [a0 + 18] = 0x65\n 59698: u8 [a0 + 17] = 0x68\n 59702: u8 [a0 + 16] = 0x63\n 59706: u8 [a0 + 15] = 0x74\n 59710: u8 [a0 + 14] = 0x61\n 59714: u8 [a0 + 13] = 0x70\n 59718: u8 [a0 + 12] = 0x73\n 59722: a5 = 0x69\n 59725: u8 [a0 + 0xb] = a5\n 59728: u8 [a0 + 10] = 0x64\n 59732: u8 [a0 + 9] = 0x20\n 59736: u8 [a0 + 8] = 0x74\n 59740: u8 [a0 + 7] = 0x6f\n 59744: u8 [a0 + 6] = 0x6e\n 59748: u8 [a0 + 5] = 0x20\n 59752: u8 [a0 + 4] = 0x65\n 59756: u8 [a0 + 3] = 0x6e\n 59760: u8 [a0 + 2] = 0x6f\n 59764: u8 [a0 + 1] = 0x68\n 59768: u8 [a0 + 0] = 0x50\n 59771: a1 = u64 [sp]\n 59773: a0 = a1 + 0x60\n 59776: a1 = a0 <u a1\n 59779: a3 = u64 [sp + 0x8]\n 59782: a2 = a3 + a1\n 59785: a3 = a2 <u a3\n 59788: a3 = a1 if a1 == 0\n 59791: a1 = u64 [sp + 0x10]\n 59794: a3 = a3 + a1\n 59797: a1 = a3 <u a1\n 59800: a4 = u64 [sp + 0x18]\n 59803: a1 = a1 + a4\n 59806: a4 = u64 [sp + 0x28]\n 59809: u64 [a4] = a0\n 59811: u64 [a4 + 0x8] = a2\n 59814: u64 [a4 + 0x10] = a3\n 59817: u64 [a4 + 0x18] = a1\n 59820: ra = u64 [sp + 0x58]\n 59823: s0 = u64 [sp + 0x50]\n 59826: s1 = u64 [sp + 0x48]\n 59829: sp = sp + 0x60\n 59832: ret\n      : @762 (gas: 1)\n 59834: trap\n      : @763 (gas: 17)\n 59835: sp = sp + 0xffffffffffffffa0\n 59838: u64 [sp + 0x58] = ra\n 59841: u64 [sp + 0x50] = s0\n 59844: u64 [sp + 0x48] = s1\n 59847: a3 = u64 [a1 + 0x18]\n 59850: a4 = u64 [a1 + 0x10]\n 59853: a5 = u64 [a1 + 0x8]\n 59856: s1 = u64 [a1]\n 59858: a1 = a5 | a3\n 59861: a2 = s1 | a4\n 59864: a2 = a2 | a1\n 59867: a2 = a2 >> 0x20\n 59870: a1 = a1 | a4\n 59873: a1 = a1 << 0x20\n 59876: a1 = a1 | a2\n 59879: u64 [sp + 0x28] = a0\n 59882: jump @770 if a1 != 0\n      : @764 (gas: 19)\n 59886: a0 = s1 + 0x20\n 59889: u64 [sp + 0x30] = a0\n 59892: a0 = a0 <u s1\n 59895: a1 = a5 + a0\n 59898: u64 [sp + 0x40] = a1\n 59901: u64 [sp + 0x8] = a5\n 59904: s0 = a1 <u a5\n 59907: s0 = a0 if a0 == 0\n 59910: s0 = s0 + a4\n 59913: u64 [sp + 0x10] = a4\n 59916: a0 = s0 <u a4\n 59919: u64 [sp + 0x18] = a3\n 59922: a0 = a0 + a3\n 59925: u64 [sp + 0x38] = a0\n 59928: u64 [sp] = s1\n 59930: i32 a0 = s1 + 0\n 59932: a1 = 0x20\n 59935: s1 = 0x20\n 59938: ra = 676, jump @0\n      : @765 [@dyn 338] (gas: 45)\n 59945: u8 [a0 + 0x1f] = s1\n 59948: a1 = u64 [sp + 0x30]\n 59951: s1 = a1\n 59953: a1 = a1 | s0\n 59956: a2 = u64 [sp + 0x40]\n 59959: a4 = u64 [sp + 0x38]\n 59962: a2 = a2 | a4\n 59965: a1 = a1 | a2\n 59968: a1 = a1 >> 0x20\n 59971: u64 [sp + 0x20] = s0\n 59974: a2 = a2 | s0\n 59977: a2 = a2 << 0x20\n 59980: a1 = a1 | a2\n 59983: u8 [a0 + 30] = 0\n 59986: u8 [a0 + 29] = 0\n 59989: u8 [a0 + 28] = 0\n 59992: u8 [a0 + 27] = 0\n 59995: u8 [a0 + 26] = 0\n 59998: u8 [a0 + 25] = 0\n 60001: u8 [a0 + 24] = 0\n 60004: u8 [a0 + 23] = 0\n 60007: u8 [a0 + 22] = 0\n 60010: u8 [a0 + 21] = 0\n 60013: u8 [a0 + 20] = 0\n 60016: u8 [a0 + 19] = 0\n 60019: u8 [a0 + 18] = 0\n 60022: u8 [a0 + 17] = 0\n 60025: u8 [a0 + 16] = 0\n 60028: u8 [a0 + 15] = 0\n 60031: u8 [a0 + 14] = 0\n 60034: u8 [a0 + 13] = 0\n 60037: u8 [a0 + 12] = 0\n 60040: u8 [a0 + 11] = 0\n 60043: u8 [a0 + 10] = 0\n 60046: u8 [a0 + 9] = 0\n 60049: u8 [a0 + 8] = 0\n 60052: u8 [a0 + 7] = 0\n 60055: u8 [a0 + 6] = 0\n 60058: u8 [a0 + 5] = 0\n 60061: u8 [a0 + 4] = 0\n 60064: u8 [a0 + 3] = 0\n 60067: u8 [a0 + 2] = 0\n 60070: u8 [a0 + 1] = 0\n 60073: u8 [a0 + 0] = 0\n 60075: jump @770 if a1 != 0\n      : @766 (gas: 4)\n 60079: i32 s0 = s1 + 0\n 60081: a1 = 0x20\n 60084: a0 = s0\n 60086: ra = 678, jump @0\n      : @767 [@dyn 339] (gas: 41)\n 60093: u8 [a0 + 31] = 0x11\n 60097: u8 [a0 + 30] = 0\n 60100: u8 [a0 + 29] = 0\n 60103: u8 [a0 + 28] = 0\n 60106: u8 [a0 + 27] = 0\n 60109: u8 [a0 + 26] = 0\n 60112: u8 [a0 + 25] = 0\n 60115: u8 [a0 + 24] = 0\n 60118: u8 [a0 + 23] = 0\n 60121: u8 [a0 + 22] = 0\n 60124: u8 [a0 + 21] = 0\n 60127: u8 [a0 + 20] = 0\n 60130: u8 [a0 + 19] = 0\n 60133: u8 [a0 + 18] = 0\n 60136: u8 [a0 + 17] = 0\n 60139: u8 [a0 + 16] = 0\n 60142: u8 [a0 + 15] = 0\n 60145: u8 [a0 + 14] = 0\n 60148: u8 [a0 + 13] = 0\n 60151: u8 [a0 + 12] = 0\n 60154: u8 [a0 + 11] = 0\n 60157: u8 [a0 + 10] = 0\n 60160: u8 [a0 + 9] = 0\n 60163: u8 [a0 + 8] = 0\n 60166: u8 [a0 + 7] = 0\n 60169: u8 [a0 + 6] = 0\n 60172: u8 [a0 + 5] = 0\n 60175: u8 [a0 + 4] = 0\n 60178: u8 [a0 + 3] = 0\n 60181: u8 [a0 + 2] = 0\n 60184: u8 [a0 + 1] = 0\n 60187: a1 = u64 [sp + 0x20]\n 60190: a2 = u64 [sp + 0x38]\n 60193: a1 = a1 | a2\n 60196: a2 = 0xffffffe0\n 60206: a2 = s1 <u a2\n 60209: a3 = u64 [sp + 0x40]\n 60212: a2 = 0 if a3 != 0\n 60214: a2 = 0 if a1 != 0\n 60216: u8 [a0 + 0] = 0\n 60218: jump @770 if a2 == 0\n      : @768 (gas: 3)\n 60222: i32 a0 = s0 + 0x20\n 60225: a1 = 0x20\n 60228: ra = 680, jump @0\n      : @769 [@dyn 340] (gas: 54)\n 60235: u8 [a0 + 31] = 0\n 60238: u8 [a0 + 30] = 0\n 60241: u8 [a0 + 29] = 0\n 60244: u8 [a0 + 28] = 0\n 60247: u8 [a0 + 27] = 0\n 60250: u8 [a0 + 26] = 0\n 60253: u8 [a0 + 25] = 0\n 60256: u8 [a0 + 24] = 0\n 60259: u8 [a0 + 23] = 0\n 60262: u8 [a0 + 22] = 0\n 60265: u8 [a0 + 21] = 0\n 60268: u8 [a0 + 20] = 0\n 60271: u8 [a0 + 19] = 0\n 60274: u8 [a0 + 18] = 0\n 60277: u8 [a0 + 17] = 0\n 60280: u8 [a0 + 16] = 0x64\n 60284: u8 [a0 + 15] = 0x65\n 60288: u8 [a0 + 14] = 0x6d\n 60292: u8 [a0 + 13] = 0x72\n 60296: u8 [a0 + 12] = 0x69\n 60300: u8 [a0 + 11] = 0x66\n 60304: u8 [a0 + 10] = 0x6e\n 60308: u8 [a0 + 9] = 0x6f\n 60312: u8 [a0 + 8] = 0x63\n 60316: u8 [a0 + 7] = 0x20\n 60320: u8 [a0 + 6] = 0x79\n 60324: u8 [a0 + 5] = 0x64\n 60328: u8 [a0 + 4] = 0x61\n 60332: u8 [a0 + 3] = 0x65\n 60336: u8 [a0 + 2] = 0x72\n 60340: u8 [a0 + 1] = 0x6c\n 60344: u8 [a0 + 0] = 0x41\n 60347: a1 = u64 [sp]\n 60349: a0 = a1 + 0x60\n 60352: a1 = a0 <u a1\n 60355: a3 = u64 [sp + 0x8]\n 60358: a2 = a3 + a1\n 60361: a3 = a2 <u a3\n 60364: a3 = a1 if a1 == 0\n 60367: a1 = u64 [sp + 0x10]\n 60370: a3 = a3 + a1\n 60373: a1 = a3 <u a1\n 60376: a4 = u64 [sp + 0x18]\n 60379: a1 = a1 + a4\n 60382: a4 = u64 [sp + 0x28]\n 60385: u64 [a4] = a0\n 60387: u64 [a4 + 0x8] = a2\n 60390: u64 [a4 + 0x10] = a3\n 60393: u64 [a4 + 0x18] = a1\n 60396: ra = u64 [sp + 0x58]\n 60399: s0 = u64 [sp + 0x50]\n 60402: s1 = u64 [sp + 0x48]\n 60405: sp = sp + 0x60\n 60408: ret\n      : @770 (gas: 1)\n 60410: trap\n      : @771 [@dyn 341] (gas: 97)\n 60411: a1 = u8 [a0 + 0x11]\n 60414: a2 = u8 [a0 + 0x10]\n 60417: a3 = u8 [a0 + 0x12]\n 60420: a4 = u8 [a0 + 0x13]\n 60423: a1 = a1 << 0x8\n 60426: a1 = a1 | a2\n 60429: a3 = a3 << 0x10\n 60432: a4 = a4 << 0x18\n 60435: a3 = a3 | a4\n 60438: a1 = a1 | a3\n 60441: a2 = u8 [a0 + 0x15]\n 60444: a3 = u8 [a0 + 0x14]\n 60447: a4 = u8 [a0 + 0x16]\n 60450: a5 = u8 [a0 + 0x17]\n 60453: a2 = a2 << 0x8\n 60456: a2 = a2 | a3\n 60459: a4 = a4 << 0x10\n 60462: a5 = a5 << 0x18\n 60465: a4 = a4 | a5\n 60468: a2 = a2 | a4\n 60471: a2 = a2 << 0x20\n 60474: t0 = a2 | a1\n 60477: a2 = u8 [a0 + 0x1]\n 60480: a3 = u8 [a0]\n 60482: a4 = u8 [a0 + 0x2]\n 60485: a5 = u8 [a0 + 0x3]\n 60488: a2 = a2 << 0x8\n 60491: a2 = a2 | a3\n 60494: a4 = a4 << 0x10\n 60497: a5 = a5 << 0x18\n 60500: a4 = a4 | a5\n 60503: a2 = a2 | a4\n 60506: a3 = u8 [a0 + 0x5]\n 60509: a4 = u8 [a0 + 0x4]\n 60512: a5 = u8 [a0 + 0x6]\n 60515: s1 = u8 [a0 + 0x7]\n 60518: a3 = a3 << 0x8\n 60521: a3 = a3 | a4\n 60524: a5 = a5 << 0x10\n 60527: s1 = s1 << 0x18\n 60530: a5 = a5 | s1\n 60533: a3 = a3 | a5\n 60536: a3 = a3 << 0x20\n 60539: a2 = a2 | a3\n 60542: a3 = u8 [a0 + 0x19]\n 60545: a4 = u8 [a0 + 0x18]\n 60548: a5 = u8 [a0 + 0x1a]\n 60551: s1 = u8 [a0 + 0x1b]\n 60554: a3 = a3 << 0x8\n 60557: a3 = a3 | a4\n 60560: a5 = a5 << 0x10\n 60563: s1 = s1 << 0x18\n 60566: a5 = a5 | s1\n 60569: a3 = a3 | a5\n 60572: a4 = u8 [a0 + 0x1d]\n 60575: a5 = u8 [a0 + 0x1c]\n 60578: s1 = u8 [a0 + 0x1e]\n 60581: a1 = u8 [a0 + 0x1f]\n 60584: a4 = a4 << 0x8\n 60587: a4 = a4 | a5\n 60590: s1 = s1 << 0x10\n 60593: a1 = a1 << 0x18\n 60596: a1 = a1 | s1\n 60599: a1 = a1 | a4\n 60602: a1 = a1 << 0x20\n 60605: a3 = a3 | a1\n 60608: a1 = u8 [a0 + 0x9]\n 60611: a4 = u8 [a0 + 0x8]\n 60614: a5 = u8 [a0 + 0xa]\n 60617: s1 = u8 [a0 + 0xb]\n 60620: a1 = a1 << 0x8\n 60623: a1 = a1 | a4\n 60626: a5 = a5 << 0x10\n 60629: s1 = s1 << 0x18\n 60632: a5 = a5 | s1\n 60635: a1 = a1 | a5\n 60638: a4 = u8 [a0 + 0xd]\n 60641: a5 = u8 [a0 + 0xc]\n 60644: s1 = u8 [a0 + 0xe]\n 60647: a0 = u8 [a0 + 0xf]\n 60650: a4 = a4 << 0x8\n 60653: a4 = a4 | a5\n 60656: s1 = s1 << 0x10\n 60659: a0 = a0 << 0x18\n 60662: a0 = a0 | s1\n 60665: a0 = a0 | a4\n 60668: a0 = a0 << 0x20\n 60671: a0 = a0 | a1\n 60674: s1 = reverse a0\n 60676: a0 = reverse a3\n 60678: u64 [sp + 0x8] = a0\n 60681: a0 = reverse a2\n 60683: u64 [sp + 0x18] = a0\n 60686: a0 = reverse t0\n 60688: u64 [sp + 0x10] = a0\n 60691: ecalli 10 // 'return_data_size'\n 60693: fallthrough\n      : @772 (gas: 11)\n 60694: a3 = u64 [sp + 0x8]\n 60697: a1 = u64 [sp + 0x18]\n 60700: a2 = u64 [sp + 0x10]\n 60703: a1 = a1 | a2\n 60706: a2 = a3 | s1\n 60709: a2 = a2 | a1\n 60712: a2 = a2 >> 0x20\n 60715: a1 = a1 | s1\n 60718: a1 = a1 << 0x20\n 60721: a1 = a1 | a2\n 60724: jump @779 if a1 != 0\n      : @773 (gas: 3)\n 60727: s1 = a0\n 60729: a0 = a0 >> 0x20\n 60732: jump @779 if a0 != 0\n      : @774 (gas: 5)\n 60735: i32 a0 = a3 + 0\n 60737: i32 a1 = s1 + 0\n 60739: u64 [sp + 0x18] = a1\n 60742: u64 [sp + 0x10] = a0\n 60745: ra = 684, jump @0\n      : @775 [@dyn 342] (gas: 6)\n 60752: u32 [sp + 0x20] = s1\n 60755: i32 a0 = a0 + 0\n 60757: i32 a1 = sp + 0x20\n 60760: a2 = 0\n 60762: ecalli 9 // 'return_data_copy'\n 60764: fallthrough\n      : @776 (gas: 3)\n 60765: a0 = i32 [sp + 0x20]\n 60768: a1 = u64 [sp + 0x18]\n 60771: jump @779 if a0 <u a1\n      : @777 (gas: 2)\n 60774: ecalli 10 // 'return_data_size'\n 60776: fallthrough\n      : @778 (gas: 2)\n 60777: a1 = a0 >> 0x20\n 60780: jump @780 if a1 == 0\n      : @779 (gas: 1)\n 60783: trap\n      : @780 (gas: 4)\n 60784: i32 s1 = a0 + 0\n 60786: a0 = u64 [sp + 0x10]\n 60789: a1 = s1\n 60791: ra = 686, jump @0\n      : @781 [@dyn 343] (gas: 6)\n 60798: i32 a1 = a0 + 0\n 60800: a0 = 0x1\n 60803: a2 = s1\n 60805: ra = 0x2b0\n 60809: ecalli 11 // 'seal_return'\n 60811: fallthrough\n      : @782 [@dyn 344] (gas: 29)\n 60812: sp = sp + 0xfffffffffffffc60\n 60816: u64 [sp + 0x398] = ra\n 60820: u64 [sp + 0x390] = s0\n 60824: u64 [sp + 0x388] = s1\n 60828: s0 = sp + 0x3a0\n 60832: sp = sp & 0xffffffffffffffe0\n 60835: a1 = u64 [a0]\n 60837: u64 [sp + 0x60] = a1\n 60840: a1 = u64 [a0 + 0x8]\n 60843: u64 [sp + 0x58] = a1\n 60846: a1 = u64 [a0 + 0x10]\n 60849: u64 [sp + 0x50] = a1\n 60852: s1 = u64 [a0 + 0x18]\n 60855: u64 [sp + 888] = 0\n 60859: u64 [sp + 880] = 0\n 60863: u64 [sp + 872] = 0\n 60867: u64 [sp + 864] = 0x1\n 60872: u64 [sp + 792] = 0\n 60876: u64 [sp + 784] = 0\n 60880: u64 [sp + 776] = 0\n 60884: u64 [sp + 768] = 0\n 60888: u32 [sp + 896] = 0x20\n 60893: i32 a1 = sp + 0x360\n 60897: i32 a3 = sp + 0x300\n 60901: i32 a4 = sp + 0x380\n 60905: a2 = 0xffffffffffffffff\n 60908: a0 = 0\n 60910: ecalli 7 // 'get_storage'\n 60912: fallthrough\n      : @783 (gas: 21)\n 60913: t1 = s1\n 60915: a2 = u64 [sp + 0x58]\n 60918: t0 = u64 [sp + 0x60]\n 60921: a0 = u64 [sp + 0x318]\n 60925: t2 = u64 [sp + 0x300]\n 60929: s1 = u64 [sp + 0x310]\n 60933: a3 = u64 [sp + 0x308]\n 60937: a4 = a0 ^ t1\n 60940: a1 = t1 <u a0\n 60943: a0 = u64 [sp + 0x50]\n 60946: a5 = a0 <u s1\n 60949: a5 = a1 if a4 != 0\n 60952: ra = a3 ^ a2\n 60955: a3 = a2 <u a3\n 60958: a1 = t0 <u t2\n 60961: a1 = a3 if ra != 0\n 60964: a3 = a0\n 60966: a0 = a0 ^ s1\n 60969: a0 = a0 | a4\n 60972: a1 = a5 if a0 != 0\n 60975: jump @801 if a1 == 0\n      : @784 (gas: 13)\n 60979: u64 [sp + 0x180] = t0\n 60983: u64 [sp + 440] = 0\n 60987: u64 [sp + 432] = 0\n 60991: u64 [sp + 424] = 0\n 60995: u64 [sp + 416] = 0x1\n 61000: u64 [sp + 0x188] = a2\n 61004: u64 [sp + 0x190] = a3\n 61008: a0 = sp + 0x1c0\n 61012: a1 = sp + 0x1a0\n 61016: a2 = sp + 0x180\n 61020: u64 [sp + 0x18] = t1\n 61023: u64 [sp + 0x198] = t1\n 61027: ra = 690, jump @478\n      : @785 [@dyn 345] (gas: 48)\n 61033: a0 = u64 [sp + 0x1c0]\n 61037: a2 = u64 [sp + 0x1d8]\n 61041: a1 = u64 [sp + 0x1c8]\n 61045: a3 = u64 [sp + 0x1d0]\n 61049: a4 = a0 + 0x6\n 61052: u64 [sp + 0x10] = a0\n 61055: a0 = a4 <u a0\n 61058: a5 = a1 + a0\n 61061: u64 [sp + 0x30] = a1\n 61064: a1 = a5 <u a1\n 61067: a1 = a0 if a0 == 0\n 61070: a1 = a1 + a3\n 61073: u64 [sp + 0x38] = a3\n 61076: a0 = a1 <u a3\n 61079: u64 [sp + 0x40] = a2\n 61082: a0 = a0 + a2\n 61085: u64 [sp + 0x70] = a5\n 61088: u64 [sp + 0x368] = a5\n 61092: u64 [sp + 0x78] = a4\n 61095: u64 [sp + 0x360] = a4\n 61099: u64 [sp + 0x48] = a1\n 61102: u64 [sp + 0x370] = a1\n 61106: u64 [sp + 0x68] = a0\n 61109: u64 [sp + 0x378] = a0\n 61113: u64 [sp + 792] = 0\n 61117: u64 [sp + 784] = 0\n 61121: u64 [sp + 776] = 0\n 61125: u64 [sp + 768] = 0\n 61129: u32 [sp + 896] = 0x20\n 61134: i32 a1 = sp + 0x360\n 61138: i32 a3 = sp + 0x300\n 61142: i32 a4 = sp + 0x380\n 61146: a2 = 0xffffffffffffffff\n 61149: a0 = 0\n 61151: ecalli 7 // 'get_storage'\n 61153: a0 = u64 [sp + 0x308]\n 61157: a1 = u32 [sp + 0x304]\n 61161: s1 = u64 [sp + 0x310]\n 61165: a2 = a0 << 0x20\n 61168: a1 = a1 | a2\n 61171: u64 [sp + 0x28] = a1\n 61174: a1 = s1 << 0x20\n 61177: a0 = a0 >> 0x20\n 61180: a0 = a0 | a1\n 61183: u64 [sp + 0x20] = a0\n 61186: i32 a0 = sp + 0x240\n 61190: ecalli 4 // 'caller'\n 61192: fallthrough\n      : @786 (gas: 21)\n 61193: a0 = u64 [sp + 0x248]\n 61197: a1 = i32 [sp + 0x250]\n 61201: a2 = u64 [sp + 0x240]\n 61205: a0 = reverse a0\n 61207: a3 = a0 << 0x20\n 61210: a1 = reverse a1\n 61212: a1 = a1 >> 0x20\n 61215: a1 = a1 | a3\n 61218: a0 = a0 >> 0x20\n 61221: a2 = reverse a2\n 61223: a3 = a2 << 0x20\n 61226: a0 = a0 | a3\n 61229: a3 = u64 [sp + 0x20]\n 61232: a0 = a0 ^ a3\n 61235: a3 = u64 [sp + 0x28]\n 61238: a1 = a1 ^ a3\n 61241: a2 = a2 ^ s1\n 61244: a2 = a2 >> 0x20\n 61247: a1 = a1 | a2\n 61250: a0 = a0 | a1\n 61253: jump @806 if a0 != 0\n      : @787 (gas: 20)\n 61257: s1 = u64 [sp + 0x48]\n 61260: u64 [sp + 0x370] = s1\n 61264: a0 = u64 [sp + 0x70]\n 61267: u64 [sp + 0x368] = a0\n 61271: a0 = u64 [sp + 0x78]\n 61274: u64 [sp + 0x360] = a0\n 61278: a0 = u64 [sp + 0x68]\n 61281: u64 [sp + 0x378] = a0\n 61285: u64 [sp + 792] = 0\n 61289: u64 [sp + 784] = 0\n 61293: u64 [sp + 776] = 0\n 61297: u64 [sp + 768] = 0\n 61301: u32 [sp + 896] = 0x20\n 61306: i32 a1 = sp + 0x360\n 61310: i32 a3 = sp + 0x300\n 61314: i32 a4 = sp + 0x380\n 61318: a2 = 0xffffffffffffffff\n 61321: a0 = 0\n 61323: ecalli 7 // 'get_storage'\n 61325: fallthrough\n      : @788 (gas: 2)\n 61326: a0 = u8 [sp + 0x300]\n 61330: jump @811 if a0 == 0\n      : @789 (gas: 19)\n 61334: u64 [sp + 0x370] = s1\n 61338: a0 = u64 [sp + 0x70]\n 61341: u64 [sp + 0x368] = a0\n 61345: a0 = u64 [sp + 0x78]\n 61348: u64 [sp + 0x360] = a0\n 61352: a0 = u64 [sp + 0x68]\n 61355: u64 [sp + 0x378] = a0\n 61359: u64 [sp + 792] = 0\n 61363: u64 [sp + 784] = 0\n 61367: u64 [sp + 776] = 0\n 61371: u64 [sp + 768] = 0\n 61375: u32 [sp + 896] = 0x20\n 61380: i32 a1 = sp + 0x360\n 61384: i32 a3 = sp + 0x300\n 61388: i32 a4 = sp + 0x380\n 61392: a2 = 0xffffffffffffffff\n 61395: a0 = 0\n 61397: ecalli 7 // 'get_storage'\n 61399: fallthrough\n      : @790 (gas: 2)\n 61400: a0 = u8 [sp + 0x302]\n 61404: jump @816 if a0 == 0\n      : @791 (gas: 19)\n 61408: u64 [sp + 0x370] = s1\n 61412: a0 = u64 [sp + 0x70]\n 61415: u64 [sp + 0x368] = a0\n 61419: a0 = u64 [sp + 0x78]\n 61422: u64 [sp + 0x360] = a0\n 61426: a0 = u64 [sp + 0x68]\n 61429: u64 [sp + 0x378] = a0\n 61433: u64 [sp + 792] = 0\n 61437: u64 [sp + 784] = 0\n 61441: u64 [sp + 776] = 0\n 61445: u64 [sp + 768] = 0\n 61449: u32 [sp + 896] = 0x20\n 61454: i32 a1 = sp + 0x360\n 61458: i32 a3 = sp + 0x300\n 61462: i32 a4 = sp + 0x380\n 61466: a2 = 0xffffffffffffffff\n 61469: a0 = 0\n 61471: ecalli 7 // 'get_storage'\n 61473: fallthrough\n      : @792 (gas: 2)\n 61474: a0 = u8 [sp + 0x303]\n 61478: jump @821 if a0 != 0\n      : @793 (gas: 53)\n 61482: u64 [sp + 0x370] = s1\n 61486: a0 = u64 [sp + 0x70]\n 61489: u64 [sp + 0x368] = a0\n 61493: a0 = u64 [sp + 0x78]\n 61496: u64 [sp + 0x360] = a0\n 61500: s1 = u64 [sp + 0x68]\n 61503: u64 [sp + 0x378] = s1\n 61507: u64 [sp + 792] = 0\n 61511: u64 [sp + 784] = 0\n 61515: u64 [sp + 776] = 0\n 61519: u64 [sp + 768] = 0\n 61523: u32 [sp + 896] = 0x20\n 61528: i32 a1 = sp + 0x360\n 61532: i32 a3 = sp + 0x300\n 61536: i32 a4 = sp + 0x380\n 61540: a2 = 0xffffffffffffffff\n 61543: a0 = 0\n 61545: ecalli 7 // 'get_storage'\n 61547: a0 = u64 [sp + 0x308]\n 61551: a1 = u64 [sp + 0x310]\n 61555: a2 = u64 [sp + 0x300]\n 61559: a3 = u64 [sp + 0x318]\n 61563: a4 = 0xffffffff00ffffff\n 61573: a2 = a2 & a4\n 61576: a2 = a2 | 0x1000000\n 61582: u64 [sp + 0x378] = s1\n 61586: a4 = u64 [sp + 0x48]\n 61589: u64 [sp + 0x370] = a4\n 61593: a4 = u64 [sp + 0x70]\n 61596: u64 [sp + 0x368] = a4\n 61600: a4 = u64 [sp + 0x78]\n 61603: u64 [sp + 0x360] = a4\n 61607: u64 [sp + 0x318] = a3\n 61611: u64 [sp + 0x310] = a1\n 61615: u64 [sp + 0x308] = a0\n 61619: u64 [sp + 0x300] = a2\n 61623: i32 a1 = sp + 0x360\n 61627: i32 a3 = sp + 0x300\n 61631: a2 = 0xffffffffffffffff\n 61634: a4 = 0x20\n 61637: a0 = 0\n 61639: ecalli 13 // 'set_storage'\n 61641: i32 a0 = sp + 0x260\n 61645: ecalli 4 // 'caller'\n 61647: a0 = u32 [sp + 0x270]\n 61651: u64 [sp + 0x70] = a0\n 61654: a0 = u64 [sp + 0x268]\n 61658: u64 [sp + 0x68] = a0\n 61661: a0 = u64 [sp + 0x260]\n 61665: u64 [sp + 0x78] = a0\n 61668: a0 = 0x40\n 61671: a1 = 0x20\n 61674: ra = 692, jump @0\n      : @794 [@dyn 346] (gas: 100)\n 61681: a1 = u8 [a0 + 0x11]\n 61684: a2 = u8 [a0 + 0x10]\n 61687: a3 = u8 [a0 + 0x12]\n 61690: a4 = u8 [a0 + 0x13]\n 61693: a1 = a1 << 0x8\n 61696: a1 = a1 | a2\n 61699: a3 = a3 << 0x10\n 61702: a4 = a4 << 0x18\n 61705: a3 = a3 | a4\n 61708: a1 = a1 | a3\n 61711: a2 = u8 [a0 + 0x15]\n 61714: a3 = u8 [a0 + 0x14]\n 61717: a4 = u8 [a0 + 0x16]\n 61720: a5 = u8 [a0 + 0x17]\n 61723: a2 = a2 << 0x8\n 61726: a2 = a2 | a3\n 61729: a4 = a4 << 0x10\n 61732: a5 = a5 << 0x18\n 61735: a4 = a4 | a5\n 61738: a2 = a2 | a4\n 61741: a2 = a2 << 0x20\n 61744: t0 = a2 | a1\n 61747: a2 = u8 [a0 + 0x1]\n 61750: a3 = u8 [a0]\n 61752: a4 = u8 [a0 + 0x2]\n 61755: a5 = u8 [a0 + 0x3]\n 61758: a2 = a2 << 0x8\n 61761: a2 = a2 | a3\n 61764: a4 = a4 << 0x10\n 61767: a5 = a5 << 0x18\n 61770: a4 = a4 | a5\n 61773: a2 = a2 | a4\n 61776: a3 = u8 [a0 + 0x5]\n 61779: a4 = u8 [a0 + 0x4]\n 61782: a5 = u8 [a0 + 0x6]\n 61785: s1 = u8 [a0 + 0x7]\n 61788: a3 = a3 << 0x8\n 61791: a3 = a3 | a4\n 61794: a5 = a5 << 0x10\n 61797: s1 = s1 << 0x18\n 61800: a5 = a5 | s1\n 61803: a3 = a3 | a5\n 61806: a3 = a3 << 0x20\n 61809: a2 = a2 | a3\n 61812: a3 = u8 [a0 + 0x19]\n 61815: a4 = u8 [a0 + 0x18]\n 61818: a5 = u8 [a0 + 0x1a]\n 61821: s1 = u8 [a0 + 0x1b]\n 61824: a3 = a3 << 0x8\n 61827: a3 = a3 | a4\n 61830: a5 = a5 << 0x10\n 61833: s1 = s1 << 0x18\n 61836: a5 = a5 | s1\n 61839: a3 = a3 | a5\n 61842: a4 = u8 [a0 + 0x1d]\n 61845: a5 = u8 [a0 + 0x1c]\n 61848: s1 = u8 [a0 + 0x1e]\n 61851: a1 = u8 [a0 + 0x1f]\n 61854: a4 = a4 << 0x8\n 61857: a4 = a4 | a5\n 61860: s1 = s1 << 0x10\n 61863: a1 = a1 << 0x18\n 61866: a1 = a1 | s1\n 61869: a1 = a1 | a4\n 61872: a1 = a1 << 0x20\n 61875: a3 = a3 | a1\n 61878: a1 = u8 [a0 + 0x9]\n 61881: a4 = u8 [a0 + 0x8]\n 61884: a5 = u8 [a0 + 0xa]\n 61887: s1 = u8 [a0 + 0xb]\n 61890: a1 = a1 << 0x8\n 61893: a1 = a1 | a4\n 61896: a5 = a5 << 0x10\n 61899: s1 = s1 << 0x18\n 61902: a5 = a5 | s1\n 61905: a1 = a1 | a5\n 61908: a4 = u8 [a0 + 0xd]\n 61911: a5 = u8 [a0 + 0xc]\n 61914: s1 = u8 [a0 + 0xe]\n 61917: a0 = u8 [a0 + 0xf]\n 61920: a4 = a4 << 0x8\n 61923: a4 = a4 | a5\n 61926: s1 = s1 << 0x10\n 61929: a0 = a0 << 0x18\n 61932: a0 = a0 | s1\n 61935: a0 = a0 | a4\n 61938: a0 = a0 << 0x20\n 61941: a0 = a0 | a1\n 61944: a1 = reverse a0\n 61946: a0 = reverse a3\n 61948: a2 = reverse a2\n 61950: a3 = reverse t0\n 61952: a2 = a2 | a3\n 61955: a3 = a0 | a1\n 61958: a3 = a3 | a2\n 61961: a3 = a3 >> 0x20\n 61964: a1 = a1 | a2\n 61967: a1 = a1 << 0x20\n 61970: a1 = a1 | a3\n 61973: jump @827 if a1 != 0\n      : @795 (gas: 17)\n 61977: s1 = u64 [sp + 0x78]\n 61980: a1 = reverse s1\n 61982: a1 = a1 << 0x20\n 61985: a2 = u64 [sp + 0x68]\n 61988: a2 = reverse a2\n 61990: a3 = a2 >> 0x20\n 61993: a1 = a1 | a3\n 61996: u64 [sp + 0x68] = a1\n 61999: a2 = a2 << 0x20\n 62002: a1 = u64 [sp + 0x70]\n 62005: a1 = reverse a1\n 62007: a1 = a1 >> 0x20\n 62010: a1 = a1 | a2\n 62013: u64 [sp + 0x70] = a1\n 62016: i32 a0 = a0 + 0\n 62018: a1 = 0\n 62020: ra = 694, jump @0\n      : @796 [@dyn 347] (gas: 112)\n 62027: a1 = u64 [0x20020]\n 62032: a2 = u64 [0x20028]\n 62037: a3 = u64 [0x20030]\n 62042: a4 = u64 [0x20038]\n 62047: u64 [sp + 0x318] = a1\n 62051: u64 [sp + 0x310] = a2\n 62055: u64 [sp + 0x308] = a3\n 62059: u64 [sp + 0x300] = a4\n 62063: a1 = u64 [sp + 0x18]\n 62066: a1 = reverse a1\n 62068: a2 = u64 [sp + 0x50]\n 62071: a2 = reverse a2\n 62073: a3 = u64 [sp + 0x58]\n 62076: a3 = reverse a3\n 62078: a4 = u64 [sp + 0x60]\n 62081: a4 = reverse a4\n 62083: u64 [sp + 0x338] = a4\n 62087: u64 [sp + 0x330] = a3\n 62091: u64 [sp + 0x328] = a2\n 62095: u64 [sp + 0x320] = a1\n 62099: a1 = u64 [sp + 0x70]\n 62102: a1 = reverse a1\n 62104: a2 = u64 [sp + 0x68]\n 62107: a2 = reverse a2\n 62109: a3 = s1 << 0x20\n 62112: u64 [sp + 0x348] = a3\n 62116: u64 [sp + 832] = 0\n 62120: u64 [sp + 0x350] = a2\n 62124: u64 [sp + 0x358] = a1\n 62128: i32 a2 = a0 + 0\n 62130: i32 a0 = sp + 0x300\n 62134: a1 = 0x3\n 62137: a3 = 0\n 62139: ecalli 6 // 'deposit_event'\n 62141: a0 = u64 [sp + 0x40]\n 62144: u64 [sp + 0x378] = a0\n 62148: a0 = u64 [sp + 0x38]\n 62151: u64 [sp + 0x370] = a0\n 62155: a0 = u64 [sp + 0x30]\n 62158: u64 [sp + 0x368] = a0\n 62162: s1 = u64 [sp + 0x10]\n 62165: u64 [sp + 0x360] = s1\n 62169: u64 [sp + 792] = 0\n 62173: u64 [sp + 784] = 0\n 62177: u64 [sp + 776] = 0\n 62181: u64 [sp + 768] = 0\n 62185: u32 [sp + 896] = 0x20\n 62190: i32 a1 = sp + 0x360\n 62194: i32 a3 = sp + 0x300\n 62198: i32 a4 = sp + 0x380\n 62202: a2 = 0xffffffffffffffff\n 62205: a0 = 0\n 62207: ecalli 7 // 'get_storage'\n 62209: a0 = u64 [sp + 0x300]\n 62213: u64 [sp + 0x78] = a0\n 62216: a0 = u64 [sp + 0x310]\n 62220: u64 [sp + 0x70] = a0\n 62223: a0 = u64 [sp + 0x308]\n 62227: u64 [sp + 0x68] = a0\n 62230: a0 = s1 + 0x5\n 62233: a1 = a0 <u s1\n 62236: a3 = u64 [sp + 0x30]\n 62239: a2 = a3 + a1\n 62242: a3 = a2 <u a3\n 62245: a3 = a1 if a1 == 0\n 62248: a1 = u64 [sp + 0x38]\n 62251: a3 = a3 + a1\n 62254: a1 = a3 <u a1\n 62257: a4 = u64 [sp + 0x40]\n 62260: a1 = a1 + a4\n 62263: u64 [sp + 0x378] = a1\n 62267: u64 [sp + 0x370] = a3\n 62271: u64 [sp + 0x368] = a2\n 62275: u64 [sp + 0x360] = a0\n 62279: u64 [sp + 792] = 0\n 62283: u64 [sp + 784] = 0\n 62287: u64 [sp + 776] = 0\n 62291: u64 [sp + 768] = 0\n 62295: u32 [sp + 896] = 0x20\n 62300: i32 a1 = sp + 0x360\n 62304: i32 a3 = sp + 0x300\n 62308: i32 a4 = sp + 0x380\n 62312: a2 = 0xffffffffffffffff\n 62315: a0 = 0\n 62317: ecalli 7 // 'get_storage'\n 62319: t0 = u64 [sp + 0x300]\n 62323: a1 = u64 [sp + 0x308]\n 62327: a2 = u64 [sp + 0x310]\n 62331: a3 = u64 [sp + 0x318]\n 62335: a0 = u64 [sp + 0x68]\n 62338: a4 = reverse a0\n 62340: a5 = a4 << 0x20\n 62343: a0 = u64 [sp + 0x70]\n 62346: s1 = reverse a0\n 62348: s1 = s1 >> 0x20\n 62351: a5 = a5 | s1\n 62354: a4 = a4 >> 0x20\n 62357: a0 = u64 [sp + 0x78]\n 62360: a0 = reverse a0\n 62362: s1 = a0 << 0x20\n 62365: a4 = a4 | s1\n 62368: a0 = a0 >> 0x20\n 62371: u64 [sp + 0x288] = a4\n 62375: u64 [sp + 0x280] = a5\n 62379: u32 [sp + 0x290] = a0\n 62383: u64 [sp + 0x2b8] = a3\n 62387: u64 [sp + 0x2b0] = a2\n 62391: u64 [sp + 0x2a8] = a1\n 62395: u64 [sp + 0x2a0] = t0\n 62399: a0 = 0\n 62401: a1 = 0\n 62403: ra = 696, jump @0\n      : @797 [@dyn 348] (gas: 4)\n 62410: u64 [sp + 0x78] = a0\n 62413: a0 = 0\n 62415: a1 = 0\n 62417: ra = 698, jump @0\n      : @798 [@dyn 349] (gas: 27)\n 62424: u32 [sp + 704] = 0\n 62428: u64 [sp + 760] = 0\n 62432: u64 [sp + 752] = 0\n 62436: u64 [sp + 744] = 0\n 62440: u64 [sp + 736] = 0\n 62444: a1 = sp + 0x280\n 62448: a1 = a1 << 0x20\n 62451: s1 = a1 >> 0x20\n 62454: a1 = sp + 0x2a0\n 62458: a1 = a1 << 0x20\n 62461: a1 = a1 >> 0x20\n 62464: a2 = sp + 0x2e0\n 62468: a2 = a2 << 0x20\n 62471: a3 = a2 | a1\n 62474: a4 = u64 [sp + 0x78]\n 62477: a4 = a4 << 0x20\n 62480: a4 = a4 >> 0x20\n 62483: a0 = a0 << 0x20\n 62486: a0 = a0 >> 0x20\n 62489: a1 = sp + 0x2c0\n 62493: a1 = a1 << 0x20\n 62496: a5 = a1 | a0\n 62499: a1 = 0xffffffffffffffff\n 62502: a2 = 0xffffffffffffffff\n 62505: a0 = s1\n 62507: ecalli 0 // 'call'\n 62508: fallthrough\n      : @799 (gas: 1)\n 62509: jump @828 if a0 != 0\n      : @800 (gas: 6)\n 62513: sp = s0 + 0xfffffffffffffc60\n 62517: ra = u64 [sp + 0x398]\n 62521: s0 = u64 [sp + 0x390]\n 62525: s1 = u64 [sp + 0x388]\n 62529: sp = sp + 0x3a0\n 62533: ret\n      : @801 (gas: 3)\n 62535: a0 = 0x40\n 62538: a1 = 0x20\n 62541: ra = 700, jump @0\n      : @802 [@dyn 350] (gas: 103)\n 62548: a1 = u8 [a0 + 0x11]\n 62551: a2 = u8 [a0 + 0x10]\n 62554: a3 = u8 [a0 + 0x12]\n 62557: a4 = u8 [a0 + 0x13]\n 62560: a1 = a1 << 0x8\n 62563: a1 = a1 | a2\n 62566: a3 = a3 << 0x10\n 62569: a4 = a4 << 0x18\n 62572: a3 = a3 | a4\n 62575: a1 = a1 | a3\n 62578: a2 = u8 [a0 + 0x15]\n 62581: a3 = u8 [a0 + 0x14]\n 62584: a4 = u8 [a0 + 0x16]\n 62587: a5 = u8 [a0 + 0x17]\n 62590: a2 = a2 << 0x8\n 62593: a2 = a2 | a3\n 62596: a4 = a4 << 0x10\n 62599: a5 = a5 << 0x18\n 62602: a4 = a4 | a5\n 62605: a2 = a2 | a4\n 62608: a2 = a2 << 0x20\n 62611: t0 = a2 | a1\n 62614: a2 = u8 [a0 + 0x1]\n 62617: a3 = u8 [a0]\n 62619: a4 = u8 [a0 + 0x2]\n 62622: a5 = u8 [a0 + 0x3]\n 62625: a2 = a2 << 0x8\n 62628: a2 = a2 | a3\n 62631: a4 = a4 << 0x10\n 62634: a5 = a5 << 0x18\n 62637: a4 = a4 | a5\n 62640: a2 = a2 | a4\n 62643: a3 = u8 [a0 + 0x5]\n 62646: a4 = u8 [a0 + 0x4]\n 62649: a5 = u8 [a0 + 0x6]\n 62652: s1 = u8 [a0 + 0x7]\n 62655: a3 = a3 << 0x8\n 62658: a3 = a3 | a4\n 62661: a5 = a5 << 0x10\n 62664: s1 = s1 << 0x18\n 62667: a5 = a5 | s1\n 62670: a3 = a3 | a5\n 62673: a3 = a3 << 0x20\n 62676: a2 = a2 | a3\n 62679: a3 = u8 [a0 + 0x19]\n 62682: a4 = u8 [a0 + 0x18]\n 62685: a5 = u8 [a0 + 0x1a]\n 62688: s1 = u8 [a0 + 0x1b]\n 62691: a3 = a3 << 0x8\n 62694: a3 = a3 | a4\n 62697: a5 = a5 << 0x10\n 62700: s1 = s1 << 0x18\n 62703: a5 = a5 | s1\n 62706: a3 = a3 | a5\n 62709: a4 = u8 [a0 + 0x1d]\n 62712: a5 = u8 [a0 + 0x1c]\n 62715: s1 = u8 [a0 + 0x1e]\n 62718: a1 = u8 [a0 + 0x1f]\n 62721: a4 = a4 << 0x8\n 62724: a4 = a4 | a5\n 62727: s1 = s1 << 0x10\n 62730: a1 = a1 << 0x18\n 62733: a1 = a1 | s1\n 62736: a1 = a1 | a4\n 62739: a1 = a1 << 0x20\n 62742: a3 = a3 | a1\n 62745: a1 = u8 [a0 + 0x9]\n 62748: a4 = u8 [a0 + 0x8]\n 62751: a5 = u8 [a0 + 0xa]\n 62754: s1 = u8 [a0 + 0xb]\n 62757: a1 = a1 << 0x8\n 62760: a1 = a1 | a4\n 62763: a5 = a5 << 0x10\n 62766: s1 = s1 << 0x18\n 62769: a5 = a5 | s1\n 62772: a1 = a1 | a5\n 62775: a4 = u8 [a0 + 0xd]\n 62778: a5 = u8 [a0 + 0xc]\n 62781: s1 = u8 [a0 + 0xe]\n 62784: a0 = u8 [a0 + 0xf]\n 62787: a4 = a4 << 0x8\n 62790: a4 = a4 | a5\n 62793: s1 = s1 << 0x10\n 62796: a0 = a0 << 0x18\n 62799: a0 = a0 | s1\n 62802: a0 = a0 | a4\n 62805: a0 = a0 << 0x20\n 62808: a0 = a0 | a1\n 62811: s1 = reverse a0\n 62813: a1 = reverse a3\n 62815: a2 = reverse a2\n 62817: a0 = reverse t0\n 62819: u64 [sp + 0x78] = a0\n 62822: u64 [sp + 0x70] = a2\n 62825: a0 = a0 | a2\n 62828: a2 = a1\n 62830: a1 = a1 | s1\n 62833: a1 = a1 | a0\n 62836: a1 = a1 >> 0x20\n 62839: a0 = a0 | s1\n 62842: a0 = a0 << 0x20\n 62845: a0 = a0 | a1\n 62848: jump @827 if a0 != 0\n      : @803 (gas: 5)\n 62852: u64 [sp + 0x68] = a2\n 62855: i32 a0 = a2 + 0\n 62857: a1 = 0x20\n 62860: u64 [sp + 0x60] = a0\n 62863: ra = 702, jump @0\n      : @804 [@dyn 351] (gas: 50)\n 62870: u8 [a0 + 31] = 0\n 62873: u8 [a0 + 30] = 0\n 62876: u8 [a0 + 29] = 0\n 62879: u8 [a0 + 28] = 0\n 62882: u8 [a0 + 27] = 0\n 62885: u8 [a0 + 26] = 0\n 62888: u8 [a0 + 25] = 0\n 62891: u8 [a0 + 24] = 0\n 62894: u8 [a0 + 23] = 0\n 62897: u8 [a0 + 22] = 0\n 62900: u8 [a0 + 21] = 0\n 62903: u8 [a0 + 20] = 0\n 62906: u8 [a0 + 19] = 0\n 62909: u8 [a0 + 18] = 0\n 62912: u8 [a0 + 17] = 0\n 62915: u8 [a0 + 16] = 0\n 62918: u8 [a0 + 15] = 0\n 62921: u8 [a0 + 14] = 0\n 62924: u8 [a0 + 13] = 0\n 62927: u8 [a0 + 12] = 0\n 62930: u8 [a0 + 11] = 0\n 62933: u8 [a0 + 10] = 0\n 62936: u8 [a0 + 9] = 0\n 62939: u8 [a0 + 8] = 0\n 62942: u8 [a0 + 7] = 0\n 62945: u8 [a0 + 6] = 0\n 62948: u8 [a0 + 5] = 0\n 62951: u8 [a0 + 4] = 0\n 62954: u8 [a0 + 3] = 0xa0\n 62959: u8 [a0 + 2] = 0x79\n 62963: u8 [a0 + 1] = 0xc3\n 62968: u8 [a0 + 0] = 0x8\n 62971: a1 = u64 [sp + 0x68]\n 62974: a0 = a1 + 0x4\n 62977: a1 = a0 <u a1\n 62980: a3 = u64 [sp + 0x78]\n 62983: a2 = a3 + a1\n 62986: a3 = a2 <u a3\n 62989: a3 = a1 if a1 == 0\n 62992: a3 = a3 + s1\n 62995: a1 = a3 <u s1\n 62998: a4 = u64 [sp + 0x70]\n 63001: a4 = a4 + a1\n 63004: u64 [sp + 0x208] = a2\n 63008: u64 [sp + 0x200] = a0\n 63012: u64 [sp + 0x210] = a3\n 63016: a0 = sp + 0x220\n 63020: a1 = sp + 0x200\n 63024: u64 [sp + 0x218] = a4\n 63028: ra = 704, jump @731\n      : @805 [@dyn 352] (gas: 5)\n 63034: a0 = u64 [sp + 0x228]\n 63038: t0 = u64 [sp + 0x238]\n 63042: t1 = u64 [sp + 0x220]\n 63046: a3 = u64 [sp + 0x230]\n 63050: jump @826\n      : @806 (gas: 3)\n 63053: a0 = 0x40\n 63056: a1 = 0x20\n 63059: ra = 706, jump @0\n      : @807 [@dyn 353] (gas: 103)\n 63066: a1 = u8 [a0 + 0x11]\n 63069: a2 = u8 [a0 + 0x10]\n 63072: a3 = u8 [a0 + 0x12]\n 63075: a4 = u8 [a0 + 0x13]\n 63078: a1 = a1 << 0x8\n 63081: a1 = a1 | a2\n 63084: a3 = a3 << 0x10\n 63087: a4 = a4 << 0x18\n 63090: a3 = a3 | a4\n 63093: a1 = a1 | a3\n 63096: a2 = u8 [a0 + 0x15]\n 63099: a3 = u8 [a0 + 0x14]\n 63102: a4 = u8 [a0 + 0x16]\n 63105: a5 = u8 [a0 + 0x17]\n 63108: a2 = a2 << 0x8\n 63111: a2 = a2 | a3\n 63114: a4 = a4 << 0x10\n 63117: a5 = a5 << 0x18\n 63120: a4 = a4 | a5\n 63123: a2 = a2 | a4\n 63126: a2 = a2 << 0x20\n 63129: t0 = a2 | a1\n 63132: a2 = u8 [a0 + 0x1]\n 63135: a3 = u8 [a0]\n 63137: a4 = u8 [a0 + 0x2]\n 63140: a5 = u8 [a0 + 0x3]\n 63143: a2 = a2 << 0x8\n 63146: a2 = a2 | a3\n 63149: a4 = a4 << 0x10\n 63152: a5 = a5 << 0x18\n 63155: a4 = a4 | a5\n 63158: a2 = a2 | a4\n 63161: a3 = u8 [a0 + 0x5]\n 63164: a4 = u8 [a0 + 0x4]\n 63167: a5 = u8 [a0 + 0x6]\n 63170: s1 = u8 [a0 + 0x7]\n 63173: a3 = a3 << 0x8\n 63176: a3 = a3 | a4\n 63179: a5 = a5 << 0x10\n 63182: s1 = s1 << 0x18\n 63185: a5 = a5 | s1\n 63188: a3 = a3 | a5\n 63191: a3 = a3 << 0x20\n 63194: a2 = a2 | a3\n 63197: a3 = u8 [a0 + 0x19]\n 63200: a4 = u8 [a0 + 0x18]\n 63203: a5 = u8 [a0 + 0x1a]\n 63206: s1 = u8 [a0 + 0x1b]\n 63209: a3 = a3 << 0x8\n 63212: a3 = a3 | a4\n 63215: a5 = a5 << 0x10\n 63218: s1 = s1 << 0x18\n 63221: a5 = a5 | s1\n 63224: a3 = a3 | a5\n 63227: a4 = u8 [a0 + 0x1d]\n 63230: a5 = u8 [a0 + 0x1c]\n 63233: s1 = u8 [a0 + 0x1e]\n 63236: a1 = u8 [a0 + 0x1f]\n 63239: a4 = a4 << 0x8\n 63242: a4 = a4 | a5\n 63245: s1 = s1 << 0x10\n 63248: a1 = a1 << 0x18\n 63251: a1 = a1 | s1\n 63254: a1 = a1 | a4\n 63257: a1 = a1 << 0x20\n 63260: a3 = a3 | a1\n 63263: a1 = u8 [a0 + 0x9]\n 63266: a4 = u8 [a0 + 0x8]\n 63269: a5 = u8 [a0 + 0xa]\n 63272: s1 = u8 [a0 + 0xb]\n 63275: a1 = a1 << 0x8\n 63278: a1 = a1 | a4\n 63281: a5 = a5 << 0x10\n 63284: s1 = s1 << 0x18\n 63287: a5 = a5 | s1\n 63290: a1 = a1 | a5\n 63293: a4 = u8 [a0 + 0xd]\n 63296: a5 = u8 [a0 + 0xc]\n 63299: s1 = u8 [a0 + 0xe]\n 63302: a0 = u8 [a0 + 0xf]\n 63305: a4 = a4 << 0x8\n 63308: a4 = a4 | a5\n 63311: s1 = s1 << 0x10\n 63314: a0 = a0 << 0x18\n 63317: a0 = a0 | s1\n 63320: a0 = a0 | a4\n 63323: a0 = a0 << 0x20\n 63326: a0 = a0 | a1\n 63329: s1 = reverse a0\n 63331: a1 = reverse a3\n 63333: a2 = reverse a2\n 63335: a0 = reverse t0\n 63337: u64 [sp + 0x78] = a0\n 63340: u64 [sp + 0x70] = a2\n 63343: a0 = a0 | a2\n 63346: a2 = a1\n 63348: a1 = a1 | s1\n 63351: a1 = a1 | a0\n 63354: a1 = a1 >> 0x20\n 63357: a0 = a0 | s1\n 63360: a0 = a0 << 0x20\n 63363: a0 = a0 | a1\n 63366: jump @827 if a0 != 0\n      : @808 (gas: 5)\n 63370: u64 [sp + 0x68] = a2\n 63373: i32 a0 = a2 + 0\n 63375: a1 = 0x20\n 63378: u64 [sp + 0x60] = a0\n 63381: ra = 708, jump @0\n      : @809 [@dyn 354] (gas: 50)\n 63388: u8 [a0 + 31] = 0\n 63391: u8 [a0 + 30] = 0\n 63394: u8 [a0 + 29] = 0\n 63397: u8 [a0 + 28] = 0\n 63400: u8 [a0 + 27] = 0\n 63403: u8 [a0 + 26] = 0\n 63406: u8 [a0 + 25] = 0\n 63409: u8 [a0 + 24] = 0\n 63412: u8 [a0 + 23] = 0\n 63415: u8 [a0 + 22] = 0\n 63418: u8 [a0 + 21] = 0\n 63421: u8 [a0 + 20] = 0\n 63424: u8 [a0 + 19] = 0\n 63427: u8 [a0 + 18] = 0\n 63430: u8 [a0 + 17] = 0\n 63433: u8 [a0 + 16] = 0\n 63436: u8 [a0 + 15] = 0\n 63439: u8 [a0 + 14] = 0\n 63442: u8 [a0 + 13] = 0\n 63445: u8 [a0 + 12] = 0\n 63448: u8 [a0 + 11] = 0\n 63451: u8 [a0 + 10] = 0\n 63454: u8 [a0 + 9] = 0\n 63457: u8 [a0 + 8] = 0\n 63460: u8 [a0 + 7] = 0\n 63463: u8 [a0 + 6] = 0\n 63466: u8 [a0 + 5] = 0\n 63469: u8 [a0 + 4] = 0\n 63472: u8 [a0 + 3] = 0xa0\n 63477: u8 [a0 + 2] = 0x79\n 63481: u8 [a0 + 1] = 0xc3\n 63486: u8 [a0 + 0] = 0x8\n 63489: a1 = u64 [sp + 0x68]\n 63492: a0 = a1 + 0x4\n 63495: a1 = a0 <u a1\n 63498: a3 = u64 [sp + 0x78]\n 63501: a2 = a3 + a1\n 63504: a3 = a2 <u a3\n 63507: a3 = a1 if a1 == 0\n 63510: a3 = a3 + s1\n 63513: a1 = a3 <u s1\n 63516: a4 = u64 [sp + 0x70]\n 63519: a4 = a4 + a1\n 63522: u64 [sp + 0x148] = a2\n 63526: u64 [sp + 0x140] = a0\n 63530: u64 [sp + 0x150] = a3\n 63534: a0 = sp + 0x160\n 63538: a1 = sp + 0x140\n 63542: u64 [sp + 0x158] = a4\n 63546: ra = 710, jump @739\n      : @810 [@dyn 355] (gas: 5)\n 63552: a0 = u64 [sp + 0x168]\n 63556: t0 = u64 [sp + 0x178]\n 63560: t1 = u64 [sp + 0x160]\n 63564: a3 = u64 [sp + 0x170]\n 63568: jump @826\n      : @811 (gas: 3)\n 63571: a0 = 0x40\n 63574: a1 = 0x20\n 63577: ra = 712, jump @0\n      : @812 [@dyn 356] (gas: 103)\n 63584: a1 = u8 [a0 + 0x11]\n 63587: a2 = u8 [a0 + 0x10]\n 63590: a3 = u8 [a0 + 0x12]\n 63593: a4 = u8 [a0 + 0x13]\n 63596: a1 = a1 << 0x8\n 63599: a1 = a1 | a2\n 63602: a3 = a3 << 0x10\n 63605: a4 = a4 << 0x18\n 63608: a3 = a3 | a4\n 63611: a1 = a1 | a3\n 63614: a2 = u8 [a0 + 0x15]\n 63617: a3 = u8 [a0 + 0x14]\n 63620: a4 = u8 [a0 + 0x16]\n 63623: a5 = u8 [a0 + 0x17]\n 63626: a2 = a2 << 0x8\n 63629: a2 = a2 | a3\n 63632: a4 = a4 << 0x10\n 63635: a5 = a5 << 0x18\n 63638: a4 = a4 | a5\n 63641: a2 = a2 | a4\n 63644: a2 = a2 << 0x20\n 63647: t0 = a2 | a1\n 63650: a2 = u8 [a0 + 0x1]\n 63653: a3 = u8 [a0]\n 63655: a4 = u8 [a0 + 0x2]\n 63658: a5 = u8 [a0 + 0x3]\n 63661: a2 = a2 << 0x8\n 63664: a2 = a2 | a3\n 63667: a4 = a4 << 0x10\n 63670: a5 = a5 << 0x18\n 63673: a4 = a4 | a5\n 63676: a2 = a2 | a4\n 63679: a3 = u8 [a0 + 0x5]\n 63682: a4 = u8 [a0 + 0x4]\n 63685: a5 = u8 [a0 + 0x6]\n 63688: s1 = u8 [a0 + 0x7]\n 63691: a3 = a3 << 0x8\n 63694: a3 = a3 | a4\n 63697: a5 = a5 << 0x10\n 63700: s1 = s1 << 0x18\n 63703: a5 = a5 | s1\n 63706: a3 = a3 | a5\n 63709: a3 = a3 << 0x20\n 63712: a2 = a2 | a3\n 63715: a3 = u8 [a0 + 0x19]\n 63718: a4 = u8 [a0 + 0x18]\n 63721: a5 = u8 [a0 + 0x1a]\n 63724: s1 = u8 [a0 + 0x1b]\n 63727: a3 = a3 << 0x8\n 63730: a3 = a3 | a4\n 63733: a5 = a5 << 0x10\n 63736: s1 = s1 << 0x18\n 63739: a5 = a5 | s1\n 63742: a3 = a3 | a5\n 63745: a4 = u8 [a0 + 0x1d]\n 63748: a5 = u8 [a0 + 0x1c]\n 63751: s1 = u8 [a0 + 0x1e]\n 63754: a1 = u8 [a0 + 0x1f]\n 63757: a4 = a4 << 0x8\n 63760: a4 = a4 | a5\n 63763: s1 = s1 << 0x10\n 63766: a1 = a1 << 0x18\n 63769: a1 = a1 | s1\n 63772: a1 = a1 | a4\n 63775: a1 = a1 << 0x20\n 63778: a3 = a3 | a1\n 63781: a1 = u8 [a0 + 0x9]\n 63784: a4 = u8 [a0 + 0x8]\n 63787: a5 = u8 [a0 + 0xa]\n 63790: s1 = u8 [a0 + 0xb]\n 63793: a1 = a1 << 0x8\n 63796: a1 = a1 | a4\n 63799: a5 = a5 << 0x10\n 63802: s1 = s1 << 0x18\n 63805: a5 = a5 | s1\n 63808: a1 = a1 | a5\n 63811: a4 = u8 [a0 + 0xd]\n 63814: a5 = u8 [a0 + 0xc]\n 63817: s1 = u8 [a0 + 0xe]\n 63820: a0 = u8 [a0 + 0xf]\n 63823: a4 = a4 << 0x8\n 63826: a4 = a4 | a5\n 63829: s1 = s1 << 0x10\n 63832: a0 = a0 << 0x18\n 63835: a0 = a0 | s1\n 63838: a0 = a0 | a4\n 63841: a0 = a0 << 0x20\n 63844: a0 = a0 | a1\n 63847: s1 = reverse a0\n 63849: a1 = reverse a3\n 63851: a2 = reverse a2\n 63853: a0 = reverse t0\n 63855: u64 [sp + 0x78] = a0\n 63858: u64 [sp + 0x70] = a2\n 63861: a0 = a0 | a2\n 63864: a2 = a1\n 63866: a1 = a1 | s1\n 63869: a1 = a1 | a0\n 63872: a1 = a1 >> 0x20\n 63875: a0 = a0 | s1\n 63878: a0 = a0 << 0x20\n 63881: a0 = a0 | a1\n 63884: jump @827 if a0 != 0\n      : @813 (gas: 5)\n 63888: u64 [sp + 0x68] = a2\n 63891: i32 a0 = a2 + 0\n 63893: a1 = 0x20\n 63896: u64 [sp + 0x60] = a0\n 63899: ra = 714, jump @0\n      : @814 [@dyn 357] (gas: 50)\n 63906: u8 [a0 + 31] = 0\n 63909: u8 [a0 + 30] = 0\n 63912: u8 [a0 + 29] = 0\n 63915: u8 [a0 + 28] = 0\n 63918: u8 [a0 + 27] = 0\n 63921: u8 [a0 + 26] = 0\n 63924: u8 [a0 + 25] = 0\n 63927: u8 [a0 + 24] = 0\n 63930: u8 [a0 + 23] = 0\n 63933: u8 [a0 + 22] = 0\n 63936: u8 [a0 + 21] = 0\n 63939: u8 [a0 + 20] = 0\n 63942: u8 [a0 + 19] = 0\n 63945: u8 [a0 + 18] = 0\n 63948: u8 [a0 + 17] = 0\n 63951: u8 [a0 + 16] = 0\n 63954: u8 [a0 + 15] = 0\n 63957: u8 [a0 + 14] = 0\n 63960: u8 [a0 + 13] = 0\n 63963: u8 [a0 + 12] = 0\n 63966: u8 [a0 + 11] = 0\n 63969: u8 [a0 + 10] = 0\n 63972: u8 [a0 + 9] = 0\n 63975: u8 [a0 + 8] = 0\n 63978: u8 [a0 + 7] = 0\n 63981: u8 [a0 + 6] = 0\n 63984: u8 [a0 + 5] = 0\n 63987: u8 [a0 + 4] = 0\n 63990: u8 [a0 + 3] = 0xa0\n 63995: u8 [a0 + 2] = 0x79\n 63999: u8 [a0 + 1] = 0xc3\n 64004: u8 [a0 + 0] = 0x8\n 64007: a1 = u64 [sp + 0x68]\n 64010: a0 = a1 + 0x4\n 64013: a1 = a0 <u a1\n 64016: a3 = u64 [sp + 0x78]\n 64019: a2 = a3 + a1\n 64022: a3 = a2 <u a3\n 64025: a3 = a1 if a1 == 0\n 64028: a3 = a3 + s1\n 64031: a1 = a3 <u s1\n 64034: a4 = u64 [sp + 0x70]\n 64037: a4 = a4 + a1\n 64040: u64 [sp + 0x88] = a2\n 64044: u64 [sp + 0x80] = a0\n 64048: u64 [sp + 0x90] = a3\n 64052: a0 = sp + 0xa0\n 64056: a1 = sp + 0x80\n 64060: u64 [sp + 0x98] = a4\n 64064: ra = 716, jump @747\n      : @815 [@dyn 358] (gas: 5)\n 64070: a0 = u64 [sp + 0xa8]\n 64074: t0 = u64 [sp + 0xb8]\n 64078: t1 = u64 [sp + 0xa0]\n 64082: a3 = u64 [sp + 0xb0]\n 64086: jump @826\n      : @816 (gas: 3)\n 64089: a0 = 0x40\n 64092: a1 = 0x20\n 64095: ra = 718, jump @0\n      : @817 [@dyn 359] (gas: 103)\n 64102: a1 = u8 [a0 + 0x11]\n 64105: a2 = u8 [a0 + 0x10]\n 64108: a3 = u8 [a0 + 0x12]\n 64111: a4 = u8 [a0 + 0x13]\n 64114: a1 = a1 << 0x8\n 64117: a1 = a1 | a2\n 64120: a3 = a3 << 0x10\n 64123: a4 = a4 << 0x18\n 64126: a3 = a3 | a4\n 64129: a1 = a1 | a3\n 64132: a2 = u8 [a0 + 0x15]\n 64135: a3 = u8 [a0 + 0x14]\n 64138: a4 = u8 [a0 + 0x16]\n 64141: a5 = u8 [a0 + 0x17]\n 64144: a2 = a2 << 0x8\n 64147: a2 = a2 | a3\n 64150: a4 = a4 << 0x10\n 64153: a5 = a5 << 0x18\n 64156: a4 = a4 | a5\n 64159: a2 = a2 | a4\n 64162: a2 = a2 << 0x20\n 64165: t0 = a2 | a1\n 64168: a2 = u8 [a0 + 0x1]\n 64171: a3 = u8 [a0]\n 64173: a4 = u8 [a0 + 0x2]\n 64176: a5 = u8 [a0 + 0x3]\n 64179: a2 = a2 << 0x8\n 64182: a2 = a2 | a3\n 64185: a4 = a4 << 0x10\n 64188: a5 = a5 << 0x18\n 64191: a4 = a4 | a5\n 64194: a2 = a2 | a4\n 64197: a3 = u8 [a0 + 0x5]\n 64200: a4 = u8 [a0 + 0x4]\n 64203: a5 = u8 [a0 + 0x6]\n 64206: s1 = u8 [a0 + 0x7]\n 64209: a3 = a3 << 0x8\n 64212: a3 = a3 | a4\n 64215: a5 = a5 << 0x10\n 64218: s1 = s1 << 0x18\n 64221: a5 = a5 | s1\n 64224: a3 = a3 | a5\n 64227: a3 = a3 << 0x20\n 64230: a2 = a2 | a3\n 64233: a3 = u8 [a0 + 0x19]\n 64236: a4 = u8 [a0 + 0x18]\n 64239: a5 = u8 [a0 + 0x1a]\n 64242: s1 = u8 [a0 + 0x1b]\n 64245: a3 = a3 << 0x8\n 64248: a3 = a3 | a4\n 64251: a5 = a5 << 0x10\n 64254: s1 = s1 << 0x18\n 64257: a5 = a5 | s1\n 64260: a3 = a3 | a5\n 64263: a4 = u8 [a0 + 0x1d]\n 64266: a5 = u8 [a0 + 0x1c]\n 64269: s1 = u8 [a0 + 0x1e]\n 64272: a1 = u8 [a0 + 0x1f]\n 64275: a4 = a4 << 0x8\n 64278: a4 = a4 | a5\n 64281: s1 = s1 << 0x10\n 64284: a1 = a1 << 0x18\n 64287: a1 = a1 | s1\n 64290: a1 = a1 | a4\n 64293: a1 = a1 << 0x20\n 64296: a3 = a3 | a1\n 64299: a1 = u8 [a0 + 0x9]\n 64302: a4 = u8 [a0 + 0x8]\n 64305: a5 = u8 [a0 + 0xa]\n 64308: s1 = u8 [a0 + 0xb]\n 64311: a1 = a1 << 0x8\n 64314: a1 = a1 | a4\n 64317: a5 = a5 << 0x10\n 64320: s1 = s1 << 0x18\n 64323: a5 = a5 | s1\n 64326: a1 = a1 | a5\n 64329: a4 = u8 [a0 + 0xd]\n 64332: a5 = u8 [a0 + 0xc]\n 64335: s1 = u8 [a0 + 0xe]\n 64338: a0 = u8 [a0 + 0xf]\n 64341: a4 = a4 << 0x8\n 64344: a4 = a4 | a5\n 64347: s1 = s1 << 0x10\n 64350: a0 = a0 << 0x18\n 64353: a0 = a0 | s1\n 64356: a0 = a0 | a4\n 64359: a0 = a0 << 0x20\n 64362: a0 = a0 | a1\n 64365: s1 = reverse a0\n 64367: a1 = reverse a3\n 64369: a2 = reverse a2\n 64371: a0 = reverse t0\n 64373: u64 [sp + 0x78] = a0\n 64376: u64 [sp + 0x70] = a2\n 64379: a0 = a0 | a2\n 64382: a2 = a1\n 64384: a1 = a1 | s1\n 64387: a1 = a1 | a0\n 64390: a1 = a1 >> 0x20\n 64393: a0 = a0 | s1\n 64396: a0 = a0 << 0x20\n 64399: a0 = a0 | a1\n 64402: jump @827 if a0 != 0\n      : @818 (gas: 5)\n 64406: u64 [sp + 0x68] = a2\n 64409: i32 a0 = a2 + 0\n 64411: a1 = 0x20\n 64414: u64 [sp + 0x60] = a0\n 64417: ra = 720, jump @0\n      : @819 [@dyn 360] (gas: 50)\n 64424: u8 [a0 + 31] = 0\n 64427: u8 [a0 + 30] = 0\n 64430: u8 [a0 + 29] = 0\n 64433: u8 [a0 + 28] = 0\n 64436: u8 [a0 + 27] = 0\n 64439: u8 [a0 + 26] = 0\n 64442: u8 [a0 + 25] = 0\n 64445: u8 [a0 + 24] = 0\n 64448: u8 [a0 + 23] = 0\n 64451: u8 [a0 + 22] = 0\n 64454: u8 [a0 + 21] = 0\n 64457: u8 [a0 + 20] = 0\n 64460: u8 [a0 + 19] = 0\n 64463: u8 [a0 + 18] = 0\n 64466: u8 [a0 + 17] = 0\n 64469: u8 [a0 + 16] = 0\n 64472: u8 [a0 + 15] = 0\n 64475: u8 [a0 + 14] = 0\n 64478: u8 [a0 + 13] = 0\n 64481: u8 [a0 + 12] = 0\n 64484: u8 [a0 + 11] = 0\n 64487: u8 [a0 + 10] = 0\n 64490: u8 [a0 + 9] = 0\n 64493: u8 [a0 + 8] = 0\n 64496: u8 [a0 + 7] = 0\n 64499: u8 [a0 + 6] = 0\n 64502: u8 [a0 + 5] = 0\n 64505: u8 [a0 + 4] = 0\n 64508: u8 [a0 + 3] = 0xa0\n 64513: u8 [a0 + 2] = 0x79\n 64517: u8 [a0 + 1] = 0xc3\n 64522: u8 [a0 + 0] = 0x8\n 64525: a1 = u64 [sp + 0x68]\n 64528: a0 = a1 + 0x4\n 64531: a1 = a0 <u a1\n 64534: a3 = u64 [sp + 0x78]\n 64537: a2 = a3 + a1\n 64540: a3 = a2 <u a3\n 64543: a3 = a1 if a1 == 0\n 64546: a3 = a3 + s1\n 64549: a1 = a3 <u s1\n 64552: a4 = u64 [sp + 0x70]\n 64555: a4 = a4 + a1\n 64558: u64 [sp + 0xc8] = a2\n 64562: u64 [sp + 0xc0] = a0\n 64566: u64 [sp + 0xd0] = a3\n 64570: a0 = sp + 0xe0\n 64574: a1 = sp + 0xc0\n 64578: u64 [sp + 0xd8] = a4\n 64582: ra = 722, jump @755\n      : @820 [@dyn 361] (gas: 5)\n 64588: a0 = u64 [sp + 0xe8]\n 64592: t0 = u64 [sp + 0xf8]\n 64596: t1 = u64 [sp + 0xe0]\n 64600: a3 = u64 [sp + 0xf0]\n 64604: jump @826\n      : @821 (gas: 3)\n 64607: a0 = 0x40\n 64610: a1 = 0x20\n 64613: ra = 724, jump @0\n      : @822 [@dyn 362] (gas: 103)\n 64620: a1 = u8 [a0 + 0x11]\n 64623: a2 = u8 [a0 + 0x10]\n 64626: a3 = u8 [a0 + 0x12]\n 64629: a4 = u8 [a0 + 0x13]\n 64632: a1 = a1 << 0x8\n 64635: a1 = a1 | a2\n 64638: a3 = a3 << 0x10\n 64641: a4 = a4 << 0x18\n 64644: a3 = a3 | a4\n 64647: a1 = a1 | a3\n 64650: a2 = u8 [a0 + 0x15]\n 64653: a3 = u8 [a0 + 0x14]\n 64656: a4 = u8 [a0 + 0x16]\n 64659: a5 = u8 [a0 + 0x17]\n 64662: a2 = a2 << 0x8\n 64665: a2 = a2 | a3\n 64668: a4 = a4 << 0x10\n 64671: a5 = a5 << 0x18\n 64674: a4 = a4 | a5\n 64677: a2 = a2 | a4\n 64680: a2 = a2 << 0x20\n 64683: t0 = a2 | a1\n 64686: a2 = u8 [a0 + 0x1]\n 64689: a3 = u8 [a0]\n 64691: a4 = u8 [a0 + 0x2]\n 64694: a5 = u8 [a0 + 0x3]\n 64697: a2 = a2 << 0x8\n 64700: a2 = a2 | a3\n 64703: a4 = a4 << 0x10\n 64706: a5 = a5 << 0x18\n 64709: a4 = a4 | a5\n 64712: a2 = a2 | a4\n 64715: a3 = u8 [a0 + 0x5]\n 64718: a4 = u8 [a0 + 0x4]\n 64721: a5 = u8 [a0 + 0x6]\n 64724: s1 = u8 [a0 + 0x7]\n 64727: a3 = a3 << 0x8\n 64730: a3 = a3 | a4\n 64733: a5 = a5 << 0x10\n 64736: s1 = s1 << 0x18\n 64739: a5 = a5 | s1\n 64742: a3 = a3 | a5\n 64745: a3 = a3 << 0x20\n 64748: a2 = a2 | a3\n 64751: a3 = u8 [a0 + 0x19]\n 64754: a4 = u8 [a0 + 0x18]\n 64757: a5 = u8 [a0 + 0x1a]\n 64760: s1 = u8 [a0 + 0x1b]\n 64763: a3 = a3 << 0x8\n 64766: a3 = a3 | a4\n 64769: a5 = a5 << 0x10\n 64772: s1 = s1 << 0x18\n 64775: a5 = a5 | s1\n 64778: a3 = a3 | a5\n 64781: a4 = u8 [a0 + 0x1d]\n 64784: a5 = u8 [a0 + 0x1c]\n 64787: s1 = u8 [a0 + 0x1e]\n 64790: a1 = u8 [a0 + 0x1f]\n 64793: a4 = a4 << 0x8\n 64796: a4 = a4 | a5\n 64799: s1 = s1 << 0x10\n 64802: a1 = a1 << 0x18\n 64805: a1 = a1 | s1\n 64808: a1 = a1 | a4\n 64811: a1 = a1 << 0x20\n 64814: a3 = a3 | a1\n 64817: a1 = u8 [a0 + 0x9]\n 64820: a4 = u8 [a0 + 0x8]\n 64823: a5 = u8 [a0 + 0xa]\n 64826: s1 = u8 [a0 + 0xb]\n 64829: a1 = a1 << 0x8\n 64832: a1 = a1 | a4\n 64835: a5 = a5 << 0x10\n 64838: s1 = s1 << 0x18\n 64841: a5 = a5 | s1\n 64844: a1 = a1 | a5\n 64847: a4 = u8 [a0 + 0xd]\n 64850: a5 = u8 [a0 + 0xc]\n 64853: s1 = u8 [a0 + 0xe]\n 64856: a0 = u8 [a0 + 0xf]\n 64859: a4 = a4 << 0x8\n 64862: a4 = a4 | a5\n 64865: s1 = s1 << 0x10\n 64868: a0 = a0 << 0x18\n 64871: a0 = a0 | s1\n 64874: a0 = a0 | a4\n 64877: a0 = a0 << 0x20\n 64880: a0 = a0 | a1\n 64883: s1 = reverse a0\n 64885: a1 = reverse a3\n 64887: a2 = reverse a2\n 64889: a0 = reverse t0\n 64891: u64 [sp + 0x78] = a0\n 64894: u64 [sp + 0x70] = a2\n 64897: a0 = a0 | a2\n 64900: a2 = a1\n 64902: a1 = a1 | s1\n 64905: a1 = a1 | a0\n 64908: a1 = a1 >> 0x20\n 64911: a0 = a0 | s1\n 64914: a0 = a0 << 0x20\n 64917: a0 = a0 | a1\n 64920: jump @827 if a0 != 0\n      : @823 (gas: 5)\n 64924: u64 [sp + 0x68] = a2\n 64927: i32 a0 = a2 + 0\n 64929: a1 = 0x20\n 64932: u64 [sp + 0x60] = a0\n 64935: ra = 726, jump @0\n      : @824 [@dyn 363] (gas: 50)\n 64942: u8 [a0 + 31] = 0\n 64945: u8 [a0 + 30] = 0\n 64948: u8 [a0 + 29] = 0\n 64951: u8 [a0 + 28] = 0\n 64954: u8 [a0 + 27] = 0\n 64957: u8 [a0 + 26] = 0\n 64960: u8 [a0 + 25] = 0\n 64963: u8 [a0 + 24] = 0\n 64966: u8 [a0 + 23] = 0\n 64969: u8 [a0 + 22] = 0\n 64972: u8 [a0 + 21] = 0\n 64975: u8 [a0 + 20] = 0\n 64978: u8 [a0 + 19] = 0\n 64981: u8 [a0 + 18] = 0\n 64984: u8 [a0 + 17] = 0\n 64987: u8 [a0 + 16] = 0\n 64990: u8 [a0 + 15] = 0\n 64993: u8 [a0 + 14] = 0\n 64996: u8 [a0 + 13] = 0\n 64999: u8 [a0 + 12] = 0\n 65002: u8 [a0 + 11] = 0\n 65005: u8 [a0 + 10] = 0\n 65008: u8 [a0 + 9] = 0\n 65011: u8 [a0 + 8] = 0\n 65014: u8 [a0 + 7] = 0\n 65017: u8 [a0 + 6] = 0\n 65020: u8 [a0 + 5] = 0\n 65023: u8 [a0 + 4] = 0\n 65026: u8 [a0 + 3] = 0xa0\n 65031: u8 [a0 + 2] = 0x79\n 65035: u8 [a0 + 1] = 0xc3\n 65040: u8 [a0 + 0] = 0x8\n 65043: a1 = u64 [sp + 0x68]\n 65046: a0 = a1 + 0x4\n 65049: a1 = a0 <u a1\n 65052: a3 = u64 [sp + 0x78]\n 65055: a2 = a3 + a1\n 65058: a3 = a2 <u a3\n 65061: a3 = a1 if a1 == 0\n 65064: a3 = a3 + s1\n 65067: a1 = a3 <u s1\n 65070: a4 = u64 [sp + 0x70]\n 65073: a4 = a4 + a1\n 65076: u64 [sp + 0x108] = a2\n 65080: u64 [sp + 0x100] = a0\n 65084: u64 [sp + 0x110] = a3\n 65088: a0 = sp + 0x120\n 65092: a1 = sp + 0x100\n 65096: u64 [sp + 0x118] = a4\n 65100: ra = 728, jump @763\n      : @825 [@dyn 364] (gas: 5)\n 65106: a0 = u64 [sp + 0x128]\n 65110: t0 = u64 [sp + 0x138]\n 65114: t1 = u64 [sp + 0x120]\n 65118: a3 = u64 [sp + 0x130]\n 65122: fallthrough\n      : @826 (gas: 26)\n 65123: a1 = u64 [sp + 0x78]\n 65126: a4 = a0 ^ a1\n 65129: a5 = a0 <u a1\n 65132: t2 = a1\n 65134: a2 = u64 [sp + 0x68]\n 65137: a1 = t1 <u a2\n 65140: a5 = a1 if a4 == 0\n 65143: a4 = a3 - s1\n 65146: a3 = a3 <u s1\n 65149: s1 = u64 [sp + 0x70]\n 65152: s1 = t0 - s1\n 65155: s1 = s1 - a3\n 65158: a3 = a4 <u a5\n 65161: s1 = s1 - a3\n 65164: a4 = a4 - a5\n 65167: a0 = a0 - t2\n 65170: a1 = a0 - a1\n 65173: a0 = t1 - a2\n 65176: a1 = a1 | s1\n 65179: a2 = a0 | a4\n 65182: a2 = a2 | a1\n 65185: a1 = a1 | a4\n 65188: a2 = a2 >> 0x20\n 65191: a1 = a1 << 0x20\n 65194: a1 = a1 | a2\n 65197: jump @829 if a1 == 0\n      : @827 (gas: 1)\n 65200: trap\n      : @828 (gas: 11)\n 65201: ra = 0x2da\n 65205: sp = sp + 0xffffffffffffffc0\n 65208: u64 [sp + 0x38] = ra\n 65211: u64 [sp + 0x30] = s0\n 65214: u64 [sp + 0x28] = s1\n 65217: s0 = sp + 0x40\n 65220: sp = sp & 0xffffffffffffffe0\n 65223: a0 = 0x40\n 65226: a1 = 0x20\n 65229: ra = 0x2aa\n 65233: jump @0\n      : @829 [@dyn 365] (gas: 4)\n 65237: i32 s1 = a0 + 0\n 65239: a0 = u64 [sp + 0x60]\n 65242: a1 = s1\n 65244: ra = 732, jump @0\n      : @830 [@dyn 366] (gas: 6)\n 65251: i32 a1 = a0 + 0\n 65253: a0 = 0x1\n 65256: a2 = s1\n 65258: ra = 0x2de\n 65262: ecalli 11 // 'seal_return'\n 65264: fallthrough\n      : @831 [@dyn 367] (gas: 5)\n 65265: u64 [a0 + 24] = 0\n 65268: u64 [a0 + 16] = 0\n 65271: u64 [a0 + 8] = 0\n 65274: u64 [a0 + 0] = 0\n 65276: ret\n      : @832 (gas: 20)\n 65278: t2 = u64 [sp + 0x110]\n 65282: t1 = u64 [sp + 0x108]\n 65286: t0 = u64 [sp + 0x100]\n 65290: a0 = u64 [sp + 0x318]\n 65294: a1 = u64 [sp + 0x300]\n 65298: ra = u64 [sp + 0x310]\n 65302: a3 = u64 [sp + 0x308]\n 65306: a4 = a0 ^ t0\n 65309: a0 = t0 <u a0\n 65312: a2 = u64 [sp + 0x118]\n 65316: a5 = a2 <u ra\n 65319: a5 = a0 if a4 != 0\n 65322: a0 = a3 ^ t1\n 65325: a3 = t1 <u a3\n 65328: a1 = t2 <u a1\n 65331: a1 = a3 if a0 != 0\n 65334: a0 = ra ^ a2\n 65337: a0 = a0 | a4\n 65340: a1 = a5 if a0 != 0\n 65343: jump @839 if a1 == 0\n      : @833 (gas: 12)\n 65347: u64 [sp + 0x220] = t2\n 65351: u64 [sp + 600] = 0\n 65355: u64 [sp + 592] = 0\n 65359: u64 [sp + 584] = 0\n 65363: u64 [sp + 576] = 0x1\n 65368: u64 [sp + 0x228] = t1\n 65372: u64 [sp + 0x230] = a2\n 65376: a0 = sp + 0x260\n 65380: a1 = sp + 0x240\n 65384: a2 = sp + 0x220\n 65388: u64 [sp + 0x238] = t0\n 65392: ra = 736, jump @478\n      : @834 [@dyn 368] (gas: 256)\n 65399: a0 = u64 [sp + 0x278]\n 65403: u64 [sp + 0x100] = a0\n 65407: a1 = u64 [sp + 0x270]\n 65411: u64 [sp + 0xf8] = a1\n 65415: a2 = u64 [sp + 0x268]\n 65419: u64 [sp + 0x108] = a2\n 65423: a3 = u64 [sp + 0x260]\n 65427: u64 [sp + 0x110] = a3\n 65431: u64 [sp + 0x2f8] = a0\n 65435: u64 [sp + 0x2f0] = a1\n 65439: u64 [sp + 0x2e8] = a2\n 65443: u64 [sp + 0x2e0] = a3\n 65447: u64 [sp + 792] = 0\n 65451: u64 [sp + 784] = 0\n 65455: u64 [sp + 776] = 0\n 65459: u64 [sp + 768] = 0\n 65463: u32 [sp + 800] = 0x20\n 65468: i32 a1 = sp + 0x2e0\n 65472: i32 a3 = sp + 0x300\n 65476: i32 a4 = sp + 0x320\n 65480: a2 = 0xffffffffffffffff\n 65483: a0 = 0\n 65485: ecalli 7 // 'get_storage'\n 65487: a0 = u64 [sp + 0x110]\n 65491: a1 = a0 + 0x2\n 65494: u64 [sp + 0xc0] = a1\n 65498: a1 = a1 <u a0\n 65501: a5 = u64 [sp + 0x108]\n 65505: a2 = a5 + a1\n 65508: u64 [sp + 0xb0] = a2\n 65512: a2 = a2 <u a5\n 65515: a2 = a1 if a1 == 0\n 65518: u64 [sp + 0x118] = a2\n 65522: a1 = a0 + 0x3\n 65525: u64 [sp + 0xd0] = a1\n 65529: a2 = a1 <u a0\n 65532: a1 = a5 + a2\n 65535: u64 [sp + 0xb8] = a1\n 65539: t1 = a1 <u a5\n 65542: t1 = a2 if a2 == 0\n 65545: a1 = a0 + 0x4\n 65548: u64 [sp + 0xd8] = a1\n 65552: a3 = a1 <u a0\n 65555: a1 = a5 + a3\n 65558: u64 [sp + 0xc8] = a1\n 65562: t2 = a1 <u a5\n 65565: t2 = a3 if a3 == 0\n 65568: ra = a0 + 0x5\n 65571: a4 = ra <u a0\n 65574: a2 = a0\n 65576: a1 = a5 + a4\n 65579: a0 = a1 <u a5\n 65582: a3 = a5\n 65584: a0 = a4 if a4 == 0\n 65587: t0 = u64 [sp + 0xf8]\n 65591: a0 = a0 + t0\n 65594: a4 = a0 <u t0\n 65597: a5 = u64 [sp + 0x100]\n 65601: a4 = a4 + a5\n 65604: u64 [sp + 0x2f8] = a4\n 65608: u64 [sp + 0x2f0] = a0\n 65612: u64 [sp + 0x2e8] = a1\n 65616: a4 = a2 + 0x1\n 65619: u64 [sp + 0x58] = a4\n 65622: u64 [sp + 0x2e0] = ra\n 65626: a0 = a4 <u 0x1\n 65629: a0 = a0 + a3\n 65632: u64 [sp + 0x50] = a0\n 65635: a0 = a0 | a4\n 65638: a0 = a0 <u 0x1\n 65641: a4 = t0\n 65643: a0 = a0 + t0\n 65646: u64 [sp + 0x48] = a0\n 65649: a0 = a0 <u t0\n 65652: a0 = a0 + a5\n 65655: u64 [sp + 0x40] = a0\n 65658: t0 = u64 [sp + 0x118]\n 65662: t0 = t0 + a4\n 65665: u64 [sp + 0x68] = t0\n 65668: a0 = t0 <u a4\n 65671: a0 = a0 + a5\n 65674: u64 [sp + 0x60] = a0\n 65677: a1 = a4 + t1\n 65680: u64 [sp + 0x78] = a1\n 65683: a0 = a1 <u a4\n 65686: a0 = a0 + a5\n 65689: u64 [sp + 0x70] = a0\n 65692: a2 = a4 + t2\n 65695: u64 [sp + 0x88] = a2\n 65699: a0 = a2 <u a4\n 65702: a0 = a0 + a5\n 65705: u64 [sp + 0x80] = a0\n 65709: u64 [sp + 792] = 0\n 65713: a0 = u32 [sp + 0x310]\n 65717: u64 [sp + 0xe8] = a0\n 65721: u64 [sp + 784] = 0\n 65725: a0 = u64 [sp + 0x308]\n 65729: u64 [sp + 0xf0] = a0\n 65733: a0 = u64 [sp + 0x300]\n 65737: u64 [sp + 0xe0] = a0\n 65741: u64 [sp + 776] = 0\n 65745: u64 [sp + 768] = 0\n 65749: u32 [sp + 800] = 0x20\n 65754: i32 a1 = sp + 0x2e0\n 65758: i32 a3 = sp + 0x300\n 65762: i32 a4 = sp + 0x320\n 65766: a2 = 0xffffffffffffffff\n 65769: a0 = 0\n 65771: ecalli 7 // 'get_storage'\n 65773: a0 = u64 [sp + 0x308]\n 65777: u64 [sp + 0xa8] = a0\n 65781: a0 = u64 [sp + 0x300]\n 65785: u64 [sp + 0xa0] = a0\n 65789: a0 = u64 [sp + 0x318]\n 65793: u64 [sp + 0x98] = a0\n 65797: a0 = u64 [sp + 0x310]\n 65801: u64 [sp + 0x90] = a0\n 65805: a0 = u64 [sp + 0x110]\n 65809: a1 = a0 + 0x6\n 65812: a0 = a1 <u a0\n 65815: a2 = a1\n 65817: u64 [sp + 0x118] = a1\n 65821: a1 = u64 [sp + 0x108]\n 65825: a3 = a1 + a0\n 65828: u64 [sp + 0x110] = a3\n 65832: a1 = a3 <u a1\n 65835: a1 = a0 if a0 == 0\n 65838: a0 = u64 [sp + 0xf8]\n 65842: a1 = a1 + a0\n 65845: u64 [sp + 0x108] = a1\n 65849: a0 = a1 <u a0\n 65852: a4 = u64 [sp + 0x100]\n 65856: a0 = a0 + a4\n 65859: u64 [sp + 0x100] = a0\n 65863: u64 [sp + 0x2f8] = a0\n 65867: u64 [sp + 0x2f0] = a1\n 65871: u64 [sp + 0x2e8] = a3\n 65875: u64 [sp + 0x2e0] = a2\n 65879: u64 [sp + 792] = 0\n 65883: u64 [sp + 784] = 0\n 65887: u64 [sp + 776] = 0\n 65891: u64 [sp + 768] = 0\n 65895: u32 [sp + 800] = 0x20\n 65900: i32 a1 = sp + 0x2e0\n 65904: i32 a3 = sp + 0x300\n 65908: i32 a4 = sp + 0x320\n 65912: a2 = 0xffffffffffffffff\n 65915: a0 = 0\n 65917: ecalli 7 // 'get_storage'\n 65919: a0 = u8 [sp + 0x300]\n 65923: u64 [sp + 0xf8] = a0\n 65927: a0 = u64 [sp + 0x100]\n 65931: u64 [sp + 0x2f8] = a0\n 65935: a0 = u64 [sp + 0x108]\n 65939: u64 [sp + 0x2f0] = a0\n 65943: a0 = u64 [sp + 0x110]\n 65947: u64 [sp + 0x2e8] = a0\n 65951: a0 = u64 [sp + 0x118]\n 65955: u64 [sp + 0x2e0] = a0\n 65959: u64 [sp + 792] = 0\n 65963: u64 [sp + 784] = 0\n 65967: u64 [sp + 776] = 0\n 65971: u64 [sp + 768] = 0\n 65975: u32 [sp + 800] = 0x20\n 65980: i32 a1 = sp + 0x2e0\n 65984: i32 a3 = sp + 0x300\n 65988: i32 a4 = sp + 0x320\n 65992: a2 = 0xffffffffffffffff\n 65995: a0 = 0\n 65997: ecalli 7 // 'get_storage'\n 65999: a0 = u8 [sp + 0x301]\n 66003: u64 [sp + 0x38] = a0\n 66006: a0 = u64 [sp + 0x100]\n 66010: u64 [sp + 0x2f8] = a0\n 66014: a0 = u64 [sp + 0x108]\n 66018: u64 [sp + 0x2f0] = a0\n 66022: a0 = u64 [sp + 0x110]\n 66026: u64 [sp + 0x2e8] = a0\n 66030: a0 = u64 [sp + 0x118]\n 66034: u64 [sp + 0x2e0] = a0\n 66038: u64 [sp + 792] = 0\n 66042: u64 [sp + 784] = 0\n 66046: u64 [sp + 776] = 0\n 66050: u64 [sp + 768] = 0\n 66054: u32 [sp + 800] = 0x20\n 66059: i32 a1 = sp + 0x2e0\n 66063: i32 a3 = sp + 0x300\n 66067: i32 a4 = sp + 0x320\n 66071: a2 = 0xffffffffffffffff\n 66074: a0 = 0\n 66076: ecalli 7 // 'get_storage'\n 66078: a0 = u8 [sp + 0x302]\n 66082: u64 [sp + 0x30] = a0\n 66085: a0 = u64 [sp + 0x100]\n 66089: u64 [sp + 0x2f8] = a0\n 66093: a0 = u64 [sp + 0x108]\n 66097: u64 [sp + 0x2f0] = a0\n 66101: a0 = u64 [sp + 0x110]\n 66105: u64 [sp + 0x2e8] = a0\n 66109: a0 = u64 [sp + 0x118]\n 66113: u64 [sp + 0x2e0] = a0\n 66117: u64 [sp + 792] = 0\n 66121: u64 [sp + 784] = 0\n 66125: u64 [sp + 776] = 0\n 66129: u64 [sp + 768] = 0\n 66133: u32 [sp + 800] = 0x20\n 66138: i32 a1 = sp + 0x2e0\n 66142: i32 a3 = sp + 0x300\n 66146: i32 a4 = sp + 0x320\n 66150: a2 = 0xffffffffffffffff\n 66153: a0 = 0\n 66155: ecalli 7 // 'get_storage'\n 66157: a0 = u8 [sp + 0x303]\n 66161: u64 [sp + 0x28] = a0\n 66164: a0 = u64 [sp + 0x100]\n 66168: u64 [sp + 0x2f8] = a0\n 66172: a0 = u64 [sp + 0x108]\n 66176: u64 [sp + 0x2f0] = a0\n 66180: a0 = u64 [sp + 0x110]\n 66184: u64 [sp + 0x2e8] = a0\n 66188: a0 = u64 [sp + 0x118]\n 66192: u64 [sp + 0x2e0] = a0\n 66196: u64 [sp + 792] = 0\n 66200: u64 [sp + 784] = 0\n 66204: u64 [sp + 776] = 0\n 66208: u64 [sp + 768] = 0\n 66212: u32 [sp + 800] = 0x20\n 66217: i32 a1 = sp + 0x2e0\n 66221: i32 a3 = sp + 0x300\n 66225: i32 a4 = sp + 0x320\n 66229: a2 = 0xffffffffffffffff\n 66232: a0 = 0\n 66234: ecalli 7 // 'get_storage'\n 66236: a0 = u64 [sp + 0x310]\n 66240: a1 = u64 [sp + 0x308]\n 66244: a2 = u32 [sp + 0x304]\n 66248: a3 = a0 << 0x20\n 66251: a4 = a1 >> 0x20\n 66254: a3 = a3 | a4\n 66257: u64 [sp + 0x20] = a3\n 66260: a1 = a1 << 0x20\n 66263: a1 = a1 | a2\n 66266: u64 [sp + 0x18] = a1\n 66269: a0 = a0 >> 0x20\n 66272: u64 [sp + 0x10] = a0\n 66275: a0 = u64 [sp + 0x40]\n 66278: u64 [sp + 0x1f8] = a0\n 66282: a0 = u64 [sp + 0x48]\n 66285: u64 [sp + 0x1f0] = a0\n 66289: a0 = u64 [sp + 0x50]\n 66292: u64 [sp + 0x1e8] = a0\n 66296: a0 = sp + 0x200\n 66300: a1 = sp + 0x1e0\n 66304: a2 = u64 [sp + 0x58]\n 66307: u64 [sp + 0x1e0] = a2\n 66311: ra = 738, jump @514\n      : @835 [@dyn 369] (gas: 19)\n 66318: a0 = u64 [sp + 0x208]\n 66322: u64 [sp + 0x118] = a0\n 66326: a0 = u64 [sp + 0x200]\n 66330: u64 [sp + 0x110] = a0\n 66334: a0 = u64 [sp + 0x218]\n 66338: u64 [sp + 0x108] = a0\n 66342: a0 = u64 [sp + 0x210]\n 66346: u64 [sp + 0x100] = a0\n 66350: a0 = u64 [sp + 0x60]\n 66353: u64 [sp + 0x1b8] = a0\n 66357: a0 = u64 [sp + 0x68]\n 66360: u64 [sp + 0x1b0] = a0\n 66364: a0 = u64 [sp + 0xb0]\n 66368: u64 [sp + 0x1a8] = a0\n 66372: a0 = sp + 0x1c0\n 66376: a1 = sp + 0x1a0\n 66380: a2 = u64 [sp + 0xc0]\n 66384: u64 [sp + 0x1a0] = a2\n 66388: ra = 740, jump @514\n      : @836 [@dyn 370] (gas: 19)\n 66395: a0 = u64 [sp + 0x1c8]\n 66399: u64 [sp + 0xc0] = a0\n 66403: a0 = u64 [sp + 0x1c0]\n 66407: u64 [sp + 0xb0] = a0\n 66411: a0 = u64 [sp + 0x1d8]\n 66415: u64 [sp + 0x68] = a0\n 66418: a0 = u64 [sp + 0x1d0]\n 66422: u64 [sp + 0x60] = a0\n 66425: a0 = u64 [sp + 0x70]\n 66428: u64 [sp + 0x178] = a0\n 66432: a0 = u64 [sp + 0x78]\n 66435: u64 [sp + 0x170] = a0\n 66439: a0 = u64 [sp + 0xb8]\n 66443: u64 [sp + 0x168] = a0\n 66447: a0 = sp + 0x180\n 66451: a1 = sp + 0x160\n 66455: a2 = u64 [sp + 0xd0]\n 66459: u64 [sp + 0x160] = a2\n 66463: ra = 742, jump @514\n      : @837 [@dyn 371] (gas: 19)\n 66470: a0 = u64 [sp + 0x188]\n 66474: u64 [sp + 0xd0] = a0\n 66478: a0 = u64 [sp + 0x180]\n 66482: u64 [sp + 0xb8] = a0\n 66486: a0 = u64 [sp + 0x198]\n 66490: u64 [sp + 0x78] = a0\n 66493: a0 = u64 [sp + 0x190]\n 66497: u64 [sp + 0x70] = a0\n 66500: a0 = u64 [sp + 0x80]\n 66504: u64 [sp + 0x138] = a0\n 66508: a0 = u64 [sp + 0x88]\n 66512: u64 [sp + 0x130] = a0\n 66516: a0 = u64 [sp + 0xc8]\n 66520: u64 [sp + 0x128] = a0\n 66524: a0 = sp + 0x140\n 66528: a1 = sp + 0x120\n 66532: a2 = u64 [sp + 0xd8]\n 66536: u64 [sp + 0x120] = a2\n 66540: ra = 744, jump @514\n      : @838 [@dyn 372] (gas: 80)\n 66547: a0 = u64 [sp + 0x148]\n 66551: a1 = u64 [sp + 0x140]\n 66555: a2 = u64 [sp + 0x158]\n 66559: a3 = u64 [sp + 0x150]\n 66563: a4 = u64 [sp + 0x10]\n 66566: u64 [s1 + 0x150] = a4\n 66570: a4 = u64 [sp + 0x18]\n 66573: u64 [s1 + 0x140] = a4\n 66577: a4 = u64 [sp + 0x20]\n 66580: u64 [s1 + 0x148] = a4\n 66584: a4 = u64 [sp + 0x28]\n 66587: u64 [s1 + 0x120] = a4\n 66591: a4 = u64 [sp + 0x30]\n 66594: u64 [s1 + 0x100] = a4\n 66598: a4 = u64 [sp + 0x38]\n 66601: u64 [s1 + 0xe0] = a4\n 66605: a4 = u64 [sp + 0xf8]\n 66609: u64 [s1 + 0xc0] = a4\n 66613: a4 = u64 [sp + 0x90]\n 66617: u64 [s1 + 0xb0] = a4\n 66621: a4 = u64 [sp + 0x98]\n 66625: u64 [s1 + 0xb8] = a4\n 66629: a4 = u64 [sp + 0xa0]\n 66633: u64 [s1 + 0xa0] = a4\n 66637: a4 = u64 [sp + 0xa8]\n 66641: u64 [s1 + 0xa8] = a4\n 66645: u64 [s1 + 0x90] = a3\n 66649: u64 [s1 + 0x98] = a2\n 66653: u64 [s1 + 0x80] = a1\n 66657: u64 [s1 + 0x88] = a0\n 66661: a0 = u64 [sp + 0x70]\n 66664: u64 [s1 + 0x70] = a0\n 66667: a0 = u64 [sp + 0x78]\n 66670: u64 [s1 + 0x78] = a0\n 66673: a0 = u64 [sp + 0xb8]\n 66677: u64 [s1 + 0x60] = a0\n 66680: a0 = u64 [sp + 0xd0]\n 66684: u64 [s1 + 0x68] = a0\n 66687: a0 = u64 [sp + 0x60]\n 66690: u64 [s1 + 0x50] = a0\n 66693: a0 = u64 [sp + 0x68]\n 66696: u64 [s1 + 0x58] = a0\n 66699: a0 = u64 [sp + 0xb0]\n 66703: u64 [s1 + 0x40] = a0\n 66706: a0 = u64 [sp + 0xc0]\n 66710: u64 [s1 + 0x48] = a0\n 66713: a0 = u64 [sp + 0x100]\n 66717: u64 [s1 + 0x30] = a0\n 66720: a0 = u64 [sp + 0x108]\n 66724: u64 [s1 + 0x38] = a0\n 66727: a0 = u64 [sp + 0x110]\n 66731: u64 [s1 + 0x20] = a0\n 66734: a0 = u64 [sp + 0x118]\n 66738: u64 [s1 + 0x28] = a0\n 66741: a0 = u64 [sp + 0xe8]\n 66745: u64 [s1 + 0x10] = a0\n 66748: a0 = u64 [sp + 0xe0]\n 66752: u64 [s1] = a0\n 66754: a0 = u64 [sp + 0xf0]\n 66758: u64 [s1 + 0x8] = a0\n 66761: u64 [s1 + 344] = 0\n 66765: u64 [s1 + 304] = 0\n 66769: u64 [s1 + 312] = 0\n 66773: u64 [s1 + 296] = 0\n 66777: u64 [s1 + 272] = 0\n 66781: u64 [s1 + 280] = 0\n 66785: u64 [s1 + 264] = 0\n 66789: u64 [s1 + 240] = 0\n 66793: u64 [s1 + 248] = 0\n 66797: u64 [s1 + 232] = 0\n 66801: u64 [s1 + 208] = 0\n 66805: u64 [s1 + 216] = 0\n 66809: u64 [s1 + 200] = 0\n 66813: u64 [s1 + 24] = 0\n 66816: sp = s0 + 0xfffffffffffffcc0\n 66820: ra = u64 [sp + 0x338]\n 66824: s0 = u64 [sp + 0x330]\n 66828: s1 = u64 [sp + 0x328]\n 66832: sp = sp + 0x340\n 66836: ret\n      : @839 (gas: 3)\n 66838: a0 = 0x40\n 66841: a1 = 0x20\n 66844: ra = 746, jump @0\n      : @840 [@dyn 373] (gas: 103)\n 66851: a1 = u8 [a0 + 0x11]\n 66854: a2 = u8 [a0 + 0x10]\n 66857: a3 = u8 [a0 + 0x12]\n 66860: a4 = u8 [a0 + 0x13]\n 66863: a1 = a1 << 0x8\n 66866: a1 = a1 | a2\n 66869: a3 = a3 << 0x10\n 66872: a4 = a4 << 0x18\n 66875: a3 = a3 | a4\n 66878: a1 = a1 | a3\n 66881: a2 = u8 [a0 + 0x15]\n 66884: a3 = u8 [a0 + 0x14]\n 66887: a4 = u8 [a0 + 0x16]\n 66890: a5 = u8 [a0 + 0x17]\n 66893: a2 = a2 << 0x8\n 66896: a2 = a2 | a3\n 66899: a4 = a4 << 0x10\n 66902: a5 = a5 << 0x18\n 66905: a4 = a4 | a5\n 66908: a2 = a2 | a4\n 66911: a2 = a2 << 0x20\n 66914: t0 = a2 | a1\n 66917: a2 = u8 [a0 + 0x1]\n 66920: a3 = u8 [a0]\n 66922: a4 = u8 [a0 + 0x2]\n 66925: a5 = u8 [a0 + 0x3]\n 66928: a2 = a2 << 0x8\n 66931: a2 = a2 | a3\n 66934: a4 = a4 << 0x10\n 66937: a5 = a5 << 0x18\n 66940: a4 = a4 | a5\n 66943: a2 = a2 | a4\n 66946: a3 = u8 [a0 + 0x5]\n 66949: a4 = u8 [a0 + 0x4]\n 66952: a5 = u8 [a0 + 0x6]\n 66955: s1 = u8 [a0 + 0x7]\n 66958: a3 = a3 << 0x8\n 66961: a3 = a3 | a4\n 66964: a5 = a5 << 0x10\n 66967: s1 = s1 << 0x18\n 66970: a5 = a5 | s1\n 66973: a3 = a3 | a5\n 66976: a3 = a3 << 0x20\n 66979: a2 = a2 | a3\n 66982: a3 = u8 [a0 + 0x19]\n 66985: a4 = u8 [a0 + 0x18]\n 66988: a5 = u8 [a0 + 0x1a]\n 66991: s1 = u8 [a0 + 0x1b]\n 66994: a3 = a3 << 0x8\n 66997: a3 = a3 | a4\n 67000: a5 = a5 << 0x10\n 67003: s1 = s1 << 0x18\n 67006: a5 = a5 | s1\n 67009: a3 = a3 | a5\n 67012: a4 = u8 [a0 + 0x1d]\n 67015: a5 = u8 [a0 + 0x1c]\n 67018: s1 = u8 [a0 + 0x1e]\n 67021: a1 = u8 [a0 + 0x1f]\n 67024: a4 = a4 << 0x8\n 67027: a4 = a4 | a5\n 67030: s1 = s1 << 0x10\n 67033: a1 = a1 << 0x18\n 67036: a1 = a1 | s1\n 67039: a1 = a1 | a4\n 67042: a1 = a1 << 0x20\n 67045: a3 = a3 | a1\n 67048: a1 = u8 [a0 + 0x9]\n 67051: a4 = u8 [a0 + 0x8]\n 67054: a5 = u8 [a0 + 0xa]\n 67057: s1 = u8 [a0 + 0xb]\n 67060: a1 = a1 << 0x8\n 67063: a1 = a1 | a4\n 67066: a5 = a5 << 0x10\n 67069: s1 = s1 << 0x18\n 67072: a5 = a5 | s1\n 67075: a1 = a1 | a5\n 67078: a4 = u8 [a0 + 0xd]\n 67081: a5 = u8 [a0 + 0xc]\n 67084: s1 = u8 [a0 + 0xe]\n 67087: a0 = u8 [a0 + 0xf]\n 67090: a4 = a4 << 0x8\n 67093: a4 = a4 | a5\n 67096: s1 = s1 << 0x10\n 67099: a0 = a0 << 0x18\n 67102: a0 = a0 | s1\n 67105: a0 = a0 | a4\n 67108: a0 = a0 << 0x20\n 67111: a0 = a0 | a1\n 67114: s1 = reverse a0\n 67116: a1 = reverse a3\n 67118: a2 = reverse a2\n 67120: a0 = reverse t0\n 67122: u64 [sp + 0x118] = a0\n 67126: u64 [sp + 0x110] = a2\n 67130: a0 = a0 | a2\n 67133: a2 = a1\n 67135: a1 = a1 | s1\n 67138: a1 = a1 | a0\n 67141: a1 = a1 >> 0x20\n 67144: a0 = a0 | s1\n 67147: a0 = a0 << 0x20\n 67150: a0 = a0 | a1\n 67153: jump @844 if a0 != 0\n      : @841 (gas: 5)\n 67157: u64 [sp + 0x108] = a2\n 67161: i32 a0 = a2 + 0\n 67163: a1 = 0x20\n 67166: u64 [sp + 0x100] = a0\n 67170: ra = 748, jump @0\n      : @842 [@dyn 374] (gas: 50)\n 67177: u8 [a0 + 31] = 0\n 67180: u8 [a0 + 30] = 0\n 67183: u8 [a0 + 29] = 0\n 67186: u8 [a0 + 28] = 0\n 67189: u8 [a0 + 27] = 0\n 67192: u8 [a0 + 26] = 0\n 67195: u8 [a0 + 25] = 0\n 67198: u8 [a0 + 24] = 0\n 67201: u8 [a0 + 23] = 0\n 67204: u8 [a0 + 22] = 0\n 67207: u8 [a0 + 21] = 0\n 67210: u8 [a0 + 20] = 0\n 67213: u8 [a0 + 19] = 0\n 67216: u8 [a0 + 18] = 0\n 67219: u8 [a0 + 17] = 0\n 67222: u8 [a0 + 16] = 0\n 67225: u8 [a0 + 15] = 0\n 67228: u8 [a0 + 14] = 0\n 67231: u8 [a0 + 13] = 0\n 67234: u8 [a0 + 12] = 0\n 67237: u8 [a0 + 11] = 0\n 67240: u8 [a0 + 10] = 0\n 67243: u8 [a0 + 9] = 0\n 67246: u8 [a0 + 8] = 0\n 67249: u8 [a0 + 7] = 0\n 67252: u8 [a0 + 6] = 0\n 67255: u8 [a0 + 5] = 0\n 67258: u8 [a0 + 4] = 0\n 67261: u8 [a0 + 3] = 0xa0\n 67266: u8 [a0 + 2] = 0x79\n 67270: u8 [a0 + 1] = 0xc3\n 67275: u8 [a0 + 0] = 0x8\n 67278: a1 = u64 [sp + 0x108]\n 67282: a0 = a1 + 0x4\n 67285: a1 = a0 <u a1\n 67288: a3 = u64 [sp + 0x118]\n 67292: a2 = a3 + a1\n 67295: a3 = a2 <u a3\n 67298: a3 = a1 if a1 == 0\n 67301: a3 = a3 + s1\n 67304: a1 = a3 <u s1\n 67307: a4 = u64 [sp + 0x110]\n 67311: a4 = a4 + a1\n 67314: u64 [sp + 0x2a8] = a2\n 67318: u64 [sp + 0x2a0] = a0\n 67322: u64 [sp + 0x2b0] = a3\n 67326: a0 = sp + 0x2c0\n 67330: a1 = sp + 0x2a0\n 67334: u64 [sp + 0x2b8] = a4\n 67338: ra = 750, jump @731\n      : @843 [@dyn 375] (gas: 30)\n 67344: a0 = u64 [sp + 0x2c8]\n 67348: t0 = u64 [sp + 0x2d8]\n 67352: t1 = u64 [sp + 0x2c0]\n 67356: a3 = u64 [sp + 0x2d0]\n 67360: a1 = u64 [sp + 0x118]\n 67364: a4 = a0 ^ a1\n 67367: a5 = a0 <u a1\n 67370: t2 = a1\n 67372: a2 = u64 [sp + 0x108]\n 67376: a1 = t1 <u a2\n 67379: a5 = a1 if a4 == 0\n 67382: a4 = a3 - s1\n 67385: a3 = a3 <u s1\n 67388: s1 = u64 [sp + 0x110]\n 67392: s1 = t0 - s1\n 67395: s1 = s1 - a3\n 67398: a3 = a4 <u a5\n 67401: s1 = s1 - a3\n 67404: a4 = a4 - a5\n 67407: a0 = a0 - t2\n 67410: a1 = a0 - a1\n 67413: a0 = t1 - a2\n 67416: a1 = a1 | s1\n 67419: a2 = a0 | a4\n 67422: a2 = a2 | a1\n 67425: a1 = a1 | a4\n 67428: a2 = a2 >> 0x20\n 67431: a1 = a1 << 0x20\n 67434: a1 = a1 | a2\n 67437: jump @845 if a1 == 0\n      : @844 (gas: 1)\n 67440: trap\n      : @845 (gas: 4)\n 67441: i32 s1 = a0 + 0\n 67443: a0 = u64 [sp + 0x100]\n 67447: a1 = s1\n 67449: ra = 752, jump @0\n      : @846 [@dyn 376] (gas: 6)\n 67456: i32 a1 = a0 + 0\n 67458: a0 = 0x1\n 67461: a2 = s1\n 67463: ra = 0x2f2\n 67467: ecalli 11 // 'seal_return'\n 67469: fallthrough\n      : @847 [@dyn 377] (gas: 36)\n 67470: sp = sp + 0xffffffffffffffa0\n 67473: u64 [sp + 0x58] = ra\n 67476: u64 [sp + 0x50] = s0\n 67479: u64 [sp + 0x48] = s1\n 67482: s0 = sp + 0x60\n 67485: sp = sp & 0xffffffffffffffe0\n 67488: s1 = a0\n 67490: u64 [sp + 24] = 0\n 67493: u64 [sp + 16] = 0\n 67496: u64 [sp + 8] = 0\n 67499: u64 [sp + 0] = 0x1\n 67502: u64 [sp + 56] = 0\n 67505: u64 [sp + 48] = 0\n 67508: u64 [sp + 40] = 0\n 67511: u64 [sp + 32] = 0\n 67514: u32 [sp + 64] = 0x20\n 67518: i32 a1 = sp + 0\n 67520: i32 a3 = sp + 0x20\n 67523: i32 a4 = sp + 0x40\n 67526: a2 = 0xffffffffffffffff\n 67529: a0 = 0\n 67531: ecalli 7 // 'get_storage'\n 67533: a0 = u64 [sp + 0x38]\n 67536: a1 = u64 [sp + 0x30]\n 67539: a2 = u64 [sp + 0x28]\n 67542: a3 = u64 [sp + 0x20]\n 67545: u64 [s1 + 0x18] = a0\n 67548: u64 [s1 + 0x10] = a1\n 67551: u64 [s1 + 0x8] = a2\n 67554: u64 [s1] = a3\n 67556: sp = s0 + 0xffffffffffffffa0\n 67559: ra = u64 [sp + 0x58]\n 67562: s0 = u64 [sp + 0x50]\n 67565: s1 = u64 [sp + 0x48]\n 67568: sp = sp + 0x60\n 67571: ret\n      : @848 (gas: 17)\n 67573: sp = sp + 0xffffffffffffffa0\n 67576: u64 [sp + 0x58] = ra\n 67579: u64 [sp + 0x50] = s0\n 67582: u64 [sp + 0x48] = s1\n 67585: a3 = u64 [a1 + 0x18]\n 67588: a4 = u64 [a1 + 0x10]\n 67591: a5 = u64 [a1 + 0x8]\n 67594: s1 = u64 [a1]\n 67596: a1 = a5 | a3\n 67599: a2 = s1 | a4\n 67602: a2 = a2 | a1\n 67605: a2 = a2 >> 0x20\n 67608: a1 = a1 | a4\n 67611: a1 = a1 << 0x20\n 67614: a1 = a1 | a2\n 67617: u64 [sp + 0x28] = a0\n 67620: jump @855 if a1 != 0\n      : @849 (gas: 19)\n 67624: a0 = s1 + 0x20\n 67627: u64 [sp + 0x30] = a0\n 67630: a0 = a0 <u s1\n 67633: a1 = a5 + a0\n 67636: u64 [sp + 0x40] = a1\n 67639: u64 [sp + 0x8] = a5\n 67642: s0 = a1 <u a5\n 67645: s0 = a0 if a0 == 0\n 67648: s0 = s0 + a4\n 67651: u64 [sp + 0x10] = a4\n 67654: a0 = s0 <u a4\n 67657: u64 [sp + 0x18] = a3\n 67660: a0 = a0 + a3\n 67663: u64 [sp + 0x38] = a0\n 67666: u64 [sp] = s1\n 67668: i32 a0 = s1 + 0\n 67670: a1 = 0x20\n 67673: s1 = 0x20\n 67676: ra = 756, jump @0\n      : @850 [@dyn 378] (gas: 45)\n 67683: u8 [a0 + 0x1f] = s1\n 67686: a1 = u64 [sp + 0x30]\n 67689: s1 = a1\n 67691: a1 = a1 | s0\n 67694: a2 = u64 [sp + 0x40]\n 67697: a4 = u64 [sp + 0x38]\n 67700: a2 = a2 | a4\n 67703: a1 = a1 | a2\n 67706: a1 = a1 >> 0x20\n 67709: u64 [sp + 0x20] = s0\n 67712: a2 = a2 | s0\n 67715: a2 = a2 << 0x20\n 67718: a1 = a1 | a2\n 67721: u8 [a0 + 30] = 0\n 67724: u8 [a0 + 29] = 0\n 67727: u8 [a0 + 28] = 0\n 67730: u8 [a0 + 27] = 0\n 67733: u8 [a0 + 26] = 0\n 67736: u8 [a0 + 25] = 0\n 67739: u8 [a0 + 24] = 0\n 67742: u8 [a0 + 23] = 0\n 67745: u8 [a0 + 22] = 0\n 67748: u8 [a0 + 21] = 0\n 67751: u8 [a0 + 20] = 0\n 67754: u8 [a0 + 19] = 0\n 67757: u8 [a0 + 18] = 0\n 67760: u8 [a0 + 17] = 0\n 67763: u8 [a0 + 16] = 0\n 67766: u8 [a0 + 15] = 0\n 67769: u8 [a0 + 14] = 0\n 67772: u8 [a0 + 13] = 0\n 67775: u8 [a0 + 12] = 0\n 67778: u8 [a0 + 11] = 0\n 67781: u8 [a0 + 10] = 0\n 67784: u8 [a0 + 9] = 0\n 67787: u8 [a0 + 8] = 0\n 67790: u8 [a0 + 7] = 0\n 67793: u8 [a0 + 6] = 0\n 67796: u8 [a0 + 5] = 0\n 67799: u8 [a0 + 4] = 0\n 67802: u8 [a0 + 3] = 0\n 67805: u8 [a0 + 2] = 0\n 67808: u8 [a0 + 1] = 0\n 67811: u8 [a0 + 0] = 0\n 67813: jump @855 if a1 != 0\n      : @851 (gas: 4)\n 67817: i32 s0 = s1 + 0\n 67819: a1 = 0x20\n 67822: a0 = s0\n 67824: ra = 758, jump @0\n      : @852 [@dyn 379] (gas: 41)\n 67831: u8 [a0 + 31] = 0x16\n 67835: u8 [a0 + 30] = 0\n 67838: u8 [a0 + 29] = 0\n 67841: u8 [a0 + 28] = 0\n 67844: u8 [a0 + 27] = 0\n 67847: u8 [a0 + 26] = 0\n 67850: u8 [a0 + 25] = 0\n 67853: u8 [a0 + 24] = 0\n 67856: u8 [a0 + 23] = 0\n 67859: u8 [a0 + 22] = 0\n 67862: u8 [a0 + 21] = 0\n 67865: u8 [a0 + 20] = 0\n 67868: u8 [a0 + 19] = 0\n 67871: u8 [a0 + 18] = 0\n 67874: u8 [a0 + 17] = 0\n 67877: u8 [a0 + 16] = 0\n 67880: u8 [a0 + 15] = 0\n 67883: u8 [a0 + 14] = 0\n 67886: u8 [a0 + 13] = 0\n 67889: u8 [a0 + 12] = 0\n 67892: u8 [a0 + 11] = 0\n 67895: u8 [a0 + 10] = 0\n 67898: u8 [a0 + 9] = 0\n 67901: u8 [a0 + 8] = 0\n 67904: u8 [a0 + 7] = 0\n 67907: u8 [a0 + 6] = 0\n 67910: u8 [a0 + 5] = 0\n 67913: u8 [a0 + 4] = 0\n 67916: u8 [a0 + 3] = 0\n 67919: u8 [a0 + 2] = 0\n 67922: u8 [a0 + 1] = 0\n 67925: a1 = u64 [sp + 0x20]\n 67928: a2 = u64 [sp + 0x38]\n 67931: a1 = a1 | a2\n 67934: a2 = 0xffffffe0\n 67944: a2 = s1 <u a2\n 67947: a3 = u64 [sp + 0x40]\n 67950: a2 = 0 if a3 != 0\n 67952: a2 = 0 if a1 != 0\n 67954: u8 [a0 + 0] = 0\n 67956: jump @855 if a2 == 0\n      : @853 (gas: 3)\n 67960: i32 a0 = s0 + 0x20\n 67963: a1 = 0x20\n 67966: ra = 760, jump @0\n      : @854 [@dyn 380] (gas: 55)\n 67973: u8 [a0 + 31] = 0\n 67976: u8 [a0 + 30] = 0\n 67979: u8 [a0 + 29] = 0\n 67982: u8 [a0 + 28] = 0\n 67985: u8 [a0 + 27] = 0\n 67988: u8 [a0 + 26] = 0\n 67991: u8 [a0 + 25] = 0\n 67994: u8 [a0 + 24] = 0\n 67997: u8 [a0 + 23] = 0\n 68000: u8 [a0 + 22] = 0\n 68003: u8 [a0 + 21] = 0x64\n 68007: u8 [a0 + 20] = 0x65\n 68011: u8 [a0 + 19] = 0x69\n 68015: u8 [a0 + 18] = 0x66\n 68019: u8 [a0 + 17] = 0x69\n 68023: u8 [a0 + 16] = 0x72\n 68027: u8 [a0 + 15] = 0x65\n 68031: u8 [a0 + 14] = 0x76\n 68035: a5 = 0x20\n 68038: u8 [a0 + 0xd] = a5\n 68041: u8 [a0 + 12] = 0x79\n 68045: u8 [a0 + 11] = 0x64\n 68049: u8 [a0 + 10] = 0x61\n 68053: u8 [a0 + 9] = 0x65\n 68057: u8 [a0 + 8] = 0x72\n 68061: u8 [a0 + 7] = 0x6c\n 68065: u8 [a0 + 6] = 0x61\n 68069: u8 [a0 + 0x5] = a5\n 68072: u8 [a0 + 4] = 0x65\n 68076: u8 [a0 + 3] = 0x6e\n 68080: u8 [a0 + 2] = 0x6f\n 68084: u8 [a0 + 1] = 0x68\n 68088: u8 [a0 + 0] = 0x50\n 68091: a1 = u64 [sp]\n 68093: a0 = a1 + 0x60\n 68096: a1 = a0 <u a1\n 68099: a3 = u64 [sp + 0x8]\n 68102: a2 = a3 + a1\n 68105: a3 = a2 <u a3\n 68108: a3 = a1 if a1 == 0\n 68111: a1 = u64 [sp + 0x10]\n 68114: a3 = a3 + a1\n 68117: a1 = a3 <u a1\n 68120: a4 = u64 [sp + 0x18]\n 68123: a1 = a1 + a4\n 68126: a4 = u64 [sp + 0x28]\n 68129: u64 [a4] = a0\n 68131: u64 [a4 + 0x8] = a2\n 68134: u64 [a4 + 0x10] = a3\n 68137: u64 [a4 + 0x18] = a1\n 68140: ra = u64 [sp + 0x58]\n 68143: s0 = u64 [sp + 0x50]\n 68146: s1 = u64 [sp + 0x48]\n 68149: sp = sp + 0x60\n 68152: ret\n      : @855 (gas: 1)\n 68154: trap\n      : @856 (gas: 39)\n 68155: sp = sp + 0xfffffffffffffea0\n 68159: u64 [sp + 0x158] = ra\n 68163: u64 [sp + 0x150] = s0\n 68167: u64 [sp + 0x148] = s1\n 68171: s0 = sp + 0x160\n 68175: sp = sp & 0xffffffffffffffe0\n 68178: u64 [sp + 0x8] = a0\n 68181: a0 = u64 [a2 + 0x18]\n 68184: u64 [sp + 0x60] = a0\n 68187: a0 = u64 [a2 + 0x10]\n 68190: u64 [sp + 0x58] = a0\n 68193: a0 = u64 [a2 + 0x8]\n 68196: u64 [sp + 0x50] = a0\n 68199: a0 = u64 [a2]\n 68201: u64 [sp + 0x48] = a0\n 68204: a4 = u64 [a1 + 0x18]\n 68207: a3 = u64 [a1 + 0x10]\n 68210: a2 = u64 [a1 + 0x8]\n 68213: a0 = u64 [a1]\n 68215: u64 [sp + 0x88] = a4\n 68219: u64 [sp + 0x118] = a4\n 68223: u64 [sp + 0x90] = a3\n 68227: u64 [sp + 0x110] = a3\n 68231: u64 [sp + 0x98] = a2\n 68235: u64 [sp + 0x108] = a2\n 68239: u64 [sp + 0xa0] = a0\n 68243: u64 [sp + 0x100] = a0\n 68247: u64 [sp + 312] = 0\n 68251: u64 [sp + 304] = 0\n 68255: u64 [sp + 296] = 0\n 68259: u64 [sp + 288] = 0\n 68263: u32 [sp + 320] = 0x20\n 68268: i32 a1 = sp + 0x100\n 68272: i32 a3 = sp + 0x120\n 68276: i32 a4 = sp + 0x140\n 68280: a2 = 0xffffffffffffffff\n 68283: a0 = 0\n 68285: ecalli 7 // 'get_storage'\n 68287: fallthrough\n      : @857 (gas: 31)\n 68288: t0 = u64 [sp + 0x130]\n 68292: t1 = u64 [sp + 0x128]\n 68296: t2 = u64 [sp + 0x138]\n 68300: ra = u64 [sp + 0x120]\n 68304: a0 = t0 << 0x3f\n 68307: a1 = t1 >> 0x1\n 68310: s1 = a1 | a0\n 68313: a0 = t2 << 0x3f\n 68316: a2 = t0 >> 0x1\n 68319: a2 = a2 | a0\n 68322: a0 = t1 << 0x3f\n 68325: a3 = ra >> 0x1\n 68328: a3 = a3 | a0\n 68331: a4 = t2 >> 0x1\n 68334: a0 = ra & 0x1\n 68337: a5 = -a0\n 68339: a1 = a3 & 0x7f\n 68342: a2 = a2 & a5\n 68345: s1 = s1 & a5\n 68348: a1 = a3 if a0 != 0\n 68351: a4 = a4 & a5\n 68354: u64 [sp + 0x28] = a1\n 68357: a1 = a1 <u 0x20\n 68360: u64 [sp + 0x30] = s1\n 68363: a1 = 0 if s1 != 0\n 68365: u64 [sp + 0x40] = a2\n 68368: u64 [sp + 0x38] = a4\n 68371: a2 = a2 | a4\n 68374: a1 = 0 if a2 != 0\n 68376: a2 = a0 <u 0x1\n 68379: jump @873 if a2 != a1\n      : @858 (gas: 4)\n 68383: u64 [sp + 0xb8] = t0\n 68387: u64 [sp + 0xb0] = t1\n 68391: u64 [sp + 0xa8] = t2\n 68395: jump @862 if a0 != 0\n      : @859 (gas: 12)\n 68399: a2 = u64 [sp + 0x58]\n 68402: a4 = u64 [sp + 0x48]\n 68405: a0 = a4 | a2\n 68408: a1 = u64 [sp + 0x60]\n 68411: a3 = u64 [sp + 0x50]\n 68414: a1 = a1 | a3\n 68417: a0 = a0 | a1\n 68420: a0 = a0 >> 0x20\n 68423: a1 = a1 | a2\n 68426: a1 = a1 << 0x20\n 68429: a0 = a0 | a1\n 68432: jump @872 if a0 != 0\n      : @860 (gas: 4)\n 68436: s1 = ra & 0xffffffffffffff00\n 68440: i32 a0 = a4 + 0\n 68442: a1 = 0x20\n 68445: ra = 762, jump @0\n      : @861 [@dyn 381] (gas: 67)\n 68452: a1 = u64 [sp + 0xa8]\n 68456: a1 = reverse a1\n 68458: a2 = u64 [sp + 0xb8]\n 68462: a2 = reverse a2\n 68464: a3 = u64 [sp + 0xb0]\n 68468: a3 = reverse a3\n 68470: a4 = reverse s1\n 68472: u8 [a0 + 31] = 0\n 68475: u8 [a0 + 0x18] = a4\n 68478: u8 [a0 + 0x10] = a3\n 68481: a5 = a4 >> 0x30\n 68484: u8 [a0 + 0x1e] = a5\n 68487: a5 = a4 >> 0x28\n 68490: u8 [a0 + 0x1d] = a5\n 68493: a5 = a4 >> 0x20\n 68496: u8 [a0 + 0x1c] = a5\n 68499: a5 = a4 >> 0x18\n 68502: u8 [a0 + 0x1b] = a5\n 68505: a5 = a4 >> 0x10\n 68508: u8 [a0 + 0x1a] = a5\n 68511: a4 = a4 >> 0x8\n 68514: u8 [a0 + 0x19] = a4\n 68517: a4 = a3 >> 0x38\n 68520: u8 [a0 + 0x17] = a4\n 68523: a4 = a3 >> 0x30\n 68526: u8 [a0 + 0x16] = a4\n 68529: a4 = a3 >> 0x28\n 68532: u8 [a0 + 0x15] = a4\n 68535: a4 = a3 >> 0x20\n 68538: u8 [a0 + 0x14] = a4\n 68541: a4 = a3 >> 0x18\n 68544: u8 [a0 + 0x13] = a4\n 68547: a4 = a3 >> 0x10\n 68550: u8 [a0 + 0x12] = a4\n 68553: a3 = a3 >> 0x8\n 68556: u8 [a0 + 0x11] = a3\n 68559: u8 [a0 + 0x8] = a2\n 68562: a3 = a2 >> 0x38\n 68565: u8 [a0 + 0xf] = a3\n 68568: a3 = a2 >> 0x30\n 68571: u8 [a0 + 0xe] = a3\n 68574: a3 = a2 >> 0x28\n 68577: u8 [a0 + 0xd] = a3\n 68580: a3 = a2 >> 0x20\n 68583: u8 [a0 + 0xc] = a3\n 68586: a3 = a2 >> 0x18\n 68589: u8 [a0 + 0xb] = a3\n 68592: a3 = a2 >> 0x10\n 68595: u8 [a0 + 0xa] = a3\n 68598: a2 = a2 >> 0x8\n 68601: u8 [a0 + 0x9] = a2\n 68604: u8 [a0] = a1\n 68606: a2 = a1 >> 0x38\n 68609: u8 [a0 + 0x7] = a2\n 68612: a2 = a1 >> 0x30\n 68615: u8 [a0 + 0x6] = a2\n 68618: a2 = a1 >> 0x28\n 68621: u8 [a0 + 0x5] = a2\n 68624: a2 = a1 >> 0x20\n 68627: u8 [a0 + 0x4] = a2\n 68630: a2 = a1 >> 0x18\n 68633: u8 [a0 + 0x3] = a2\n 68636: a2 = a1 >> 0x10\n 68639: u8 [a0 + 0x2] = a2\n 68642: a1 = a1 >> 0x8\n 68645: u8 [a0 + 0x1] = a1\n 68648: jump @871\n      : @862 (gas: 4)\n 68651: a1 = 0x20\n 68654: a0 = 0\n 68656: s1 = ra\n 68658: ra = 764, jump @0\n      : @863 [@dyn 382] (gas: 71)\n 68665: a1 = u64 [sp + 0x88]\n 68669: a1 = reverse a1\n 68671: a2 = u64 [sp + 0x90]\n 68675: a2 = reverse a2\n 68677: a3 = u64 [sp + 0x98]\n 68681: a3 = reverse a3\n 68683: a4 = u64 [sp + 0xa0]\n 68687: a4 = reverse a4\n 68689: a5 = a4 >> 0x38\n 68692: u8 [a0 + 0x1f] = a5\n 68695: a5 = a4 >> 0x30\n 68698: u8 [a0 + 0x1e] = a5\n 68701: a5 = a4 >> 0x28\n 68704: u8 [a0 + 0x1d] = a5\n 68707: a5 = a4 >> 0x20\n 68710: u8 [a0 + 0x1c] = a5\n 68713: a5 = a4 >> 0x18\n 68716: u8 [a0 + 0x1b] = a5\n 68719: a5 = a4 >> 0x10\n 68722: u8 [a0 + 0x1a] = a5\n 68725: a5 = a4 >> 0x8\n 68728: u8 [a0 + 0x19] = a5\n 68731: u8 [a0 + 0x18] = a4\n 68734: u8 [a0 + 0x10] = a3\n 68737: a4 = a3 >> 0x38\n 68740: u8 [a0 + 0x17] = a4\n 68743: a4 = a3 >> 0x30\n 68746: u8 [a0 + 0x16] = a4\n 68749: a4 = a3 >> 0x28\n 68752: u8 [a0 + 0x15] = a4\n 68755: a4 = a3 >> 0x20\n 68758: u8 [a0 + 0x14] = a4\n 68761: a4 = a3 >> 0x18\n 68764: u8 [a0 + 0x13] = a4\n 68767: a4 = a3 >> 0x10\n 68770: u8 [a0 + 0x12] = a4\n 68773: a3 = a3 >> 0x8\n 68776: u8 [a0 + 0x11] = a3\n 68779: u8 [a0 + 0x8] = a2\n 68782: a3 = a2 >> 0x38\n 68785: u8 [a0 + 0xf] = a3\n 68788: a3 = a2 >> 0x30\n 68791: u8 [a0 + 0xe] = a3\n 68794: a3 = a2 >> 0x28\n 68797: u8 [a0 + 0xd] = a3\n 68800: a3 = a2 >> 0x20\n 68803: u8 [a0 + 0xc] = a3\n 68806: a3 = a2 >> 0x18\n 68809: u8 [a0 + 0xb] = a3\n 68812: a3 = a2 >> 0x10\n 68815: u8 [a0 + 0xa] = a3\n 68818: a2 = a2 >> 0x8\n 68821: u8 [a0 + 0x9] = a2\n 68824: u8 [a0] = a1\n 68826: a2 = a1 >> 0x38\n 68829: u8 [a0 + 0x7] = a2\n 68832: a2 = a1 >> 0x30\n 68835: u8 [a0 + 0x6] = a2\n 68838: a2 = a1 >> 0x28\n 68841: u8 [a0 + 0x5] = a2\n 68844: a2 = a1 >> 0x20\n 68847: u8 [a0 + 0x4] = a2\n 68850: a2 = a1 >> 0x18\n 68853: u8 [a0 + 0x3] = a2\n 68856: a2 = a1 >> 0x10\n 68859: u8 [a0 + 0x2] = a2\n 68862: a1 = a1 >> 0x8\n 68865: u8 [a0 + 0x1] = a1\n 68868: a1 = 0x20\n 68871: a0 = 0\n 68873: ra = 766, jump @0\n      : @864 [@dyn 383] (gas: 5)\n 68880: i32 a0 = a0 + 0\n 68882: i32 a2 = sp + 0x120\n 68886: a1 = 0x20\n 68889: ecalli 8 // 'hash_keccak_256'\n 68891: fallthrough\n      : @865 (gas: 8)\n 68892: a0 = s1 <u 0x2\n 68895: a1 = u64 [sp + 0xb0]\n 68899: a0 = 0 if a1 != 0\n 68901: a1 = u64 [sp + 0xb8]\n 68905: a2 = u64 [sp + 0xa8]\n 68909: a1 = a1 | a2\n 68912: a0 = 0 if a1 != 0\n 68914: jump @871 if a0 != 0\n      : @866 (gas: 19)\n 68918: u64 [sp + 168] = 0\n 68922: u64 [sp + 160] = 0\n 68926: u64 [sp + 176] = 0\n 68930: u64 [sp + 184] = 0\n 68934: a0 = u64 [sp + 0x120]\n 68938: a1 = u64 [sp + 0x128]\n 68942: a2 = u64 [sp + 0x130]\n 68946: a3 = u64 [sp + 0x138]\n 68950: a0 = reverse a0\n 68952: a4 = reverse a1\n 68954: s1 = reverse a2\n 68956: a1 = reverse a3\n 68958: i32 a2 = sp + 0x100\n 68962: u64 [sp + 0x20] = a2\n 68965: i32 a2 = sp + 0x120\n 68969: u64 [sp + 0x18] = a2\n 68972: i32 a2 = sp + 0x140\n 68976: u64 [sp + 0x10] = a2\n 68979: fallthrough\n      : @867 (gas: 20)\n 68980: u64 [sp + 0x80] = a4\n 68984: u64 [sp + 0x110] = a4\n 68988: u64 [sp + 0x90] = s1\n 68992: u64 [sp + 0x108] = s1\n 68996: u64 [sp + 0x88] = a1\n 69000: u64 [sp + 0x100] = a1\n 69004: u64 [sp + 0x98] = a0\n 69008: u64 [sp + 0x118] = a0\n 69012: u64 [sp + 312] = 0\n 69016: u64 [sp + 304] = 0\n 69020: u64 [sp + 296] = 0\n 69024: u64 [sp + 288] = 0\n 69028: u32 [sp + 320] = 0x20\n 69033: a2 = 0xffffffffffffffff\n 69036: a0 = 0\n 69038: a1 = u64 [sp + 0x20]\n 69041: a3 = u64 [sp + 0x18]\n 69044: a4 = u64 [sp + 0x10]\n 69047: ecalli 7 // 'get_storage'\n 69049: fallthrough\n      : @868 (gas: 30)\n 69050: a0 = u64 [sp + 0x48]\n 69053: a1 = u64 [sp + 0xa8]\n 69057: a0 = a0 + a1\n 69060: a1 = a0 <u a1\n 69063: a2 = u64 [sp + 0x50]\n 69066: a4 = u64 [sp + 0xa0]\n 69070: a2 = a2 + a4\n 69073: a2 = a2 + a1\n 69076: a3 = a2 ^ a4\n 69079: a4 = a2 <u a4\n 69082: a4 = a1 if a3 == 0\n 69085: a1 = u64 [sp + 0x58]\n 69088: a3 = u64 [sp + 0xb0]\n 69092: a1 = a1 + a3\n 69095: a3 = a1 <u a3\n 69098: a5 = u64 [sp + 0x60]\n 69101: s1 = u64 [sp + 0xb8]\n 69105: a5 = a5 + s1\n 69108: a3 = a3 + a5\n 69111: a4 = a4 + a1\n 69114: a1 = a4 <u a1\n 69117: a1 = a1 + a3\n 69120: a1 = a1 | a2\n 69123: a2 = a0 | a4\n 69126: a2 = a2 | a1\n 69129: a1 = a1 | a4\n 69132: a2 = a2 >> 0x20\n 69135: a1 = a1 << 0x20\n 69138: a1 = a1 | a2\n 69141: jump @872 if a1 != 0\n      : @869 (gas: 10)\n 69145: a1 = u64 [sp + 0x138]\n 69149: u64 [sp + 0x70] = a1\n 69152: a1 = u64 [sp + 0x130]\n 69156: u64 [sp + 0x78] = a1\n 69159: a1 = u64 [sp + 0x128]\n 69163: u64 [sp + 0x68] = a1\n 69166: s1 = u64 [sp + 0x120]\n 69170: i32 a0 = a0 + 0\n 69172: a1 = 0x20\n 69175: ra = 768, jump @0\n      : @870 [@dyn 384] (gas: 111)\n 69182: a1 = reverse s1\n 69184: a2 = a1 >> 0x38\n 69187: u8 [a0 + 0x1f] = a2\n 69190: a2 = a1 >> 0x30\n 69193: u8 [a0 + 0x1e] = a2\n 69196: a2 = a1 >> 0x28\n 69199: u8 [a0 + 0x1d] = a2\n 69202: a2 = a1 >> 0x20\n 69205: u8 [a0 + 0x1c] = a2\n 69208: a2 = a1 >> 0x18\n 69211: u8 [a0 + 0x1b] = a2\n 69214: a2 = a1 >> 0x10\n 69217: u8 [a0 + 0x1a] = a2\n 69220: a2 = a1 >> 0x8\n 69223: u8 [a0 + 0x19] = a2\n 69226: a2 = u64 [sp + 0x68]\n 69229: a2 = reverse a2\n 69231: u8 [a0 + 0x18] = a1\n 69234: a1 = a2 >> 0x38\n 69237: u8 [a0 + 0x17] = a1\n 69240: a1 = a2 >> 0x30\n 69243: u8 [a0 + 0x16] = a1\n 69246: a1 = a2 >> 0x28\n 69249: u8 [a0 + 0x15] = a1\n 69252: a1 = a2 >> 0x20\n 69255: u8 [a0 + 0x14] = a1\n 69258: a1 = a2 >> 0x18\n 69261: u8 [a0 + 0x13] = a1\n 69264: a1 = a2 >> 0x10\n 69267: u8 [a0 + 0x12] = a1\n 69270: a1 = u64 [sp + 0x70]\n 69273: a1 = reverse a1\n 69275: a3 = u64 [sp + 0x78]\n 69278: a3 = reverse a3\n 69280: u8 [a0 + 0x10] = a2\n 69283: a2 = a2 >> 0x8\n 69286: u8 [a0 + 0x11] = a2\n 69289: u8 [a0 + 0x8] = a3\n 69292: a2 = a3 >> 0x38\n 69295: u8 [a0 + 0xf] = a2\n 69298: a2 = a3 >> 0x30\n 69301: u8 [a0 + 0xe] = a2\n 69304: a2 = a3 >> 0x28\n 69307: u8 [a0 + 0xd] = a2\n 69310: a2 = a3 >> 0x20\n 69313: u8 [a0 + 0xc] = a2\n 69316: a2 = a3 >> 0x18\n 69319: u8 [a0 + 0xb] = a2\n 69322: a2 = a3 >> 0x10\n 69325: u8 [a0 + 0xa] = a2\n 69328: a3 = a3 >> 0x8\n 69331: u8 [a0 + 0x9] = a3\n 69334: u8 [a0] = a1\n 69336: a2 = a1 >> 0x38\n 69339: u8 [a0 + 0x7] = a2\n 69342: a2 = a1 >> 0x30\n 69345: u8 [a0 + 0x6] = a2\n 69348: a2 = a1 >> 0x28\n 69351: u8 [a0 + 0x5] = a2\n 69354: a2 = a1 >> 0x20\n 69357: u8 [a0 + 0x4] = a2\n 69360: a2 = a1 >> 0x18\n 69363: u8 [a0 + 0x3] = a2\n 69366: a2 = a1 >> 0x10\n 69369: u8 [a0 + 0x2] = a2\n 69372: a1 = a1 >> 0x8\n 69375: u8 [a0 + 0x1] = a1\n 69378: a0 = u64 [sp + 0xa8]\n 69382: t1 = a0 + 0x20\n 69385: a2 = t1 <u a0\n 69388: a0 = u64 [sp + 0xa0]\n 69392: t2 = a0 + a2\n 69395: a3 = t2 <u a0\n 69398: a3 = a2 if a2 == 0\n 69401: a0 = u64 [sp + 0xb0]\n 69405: a2 = a0 + a3\n 69408: a3 = a2 <u a0\n 69411: a5 = u64 [sp + 0xb8]\n 69415: a5 = a5 + a3\n 69418: a4 = u64 [sp + 0x40]\n 69421: t0 = a2 <u a4\n 69424: a3 = u64 [sp + 0x28]\n 69427: a0 = t1 <u a3\n 69430: a3 = u64 [sp + 0x30]\n 69433: s1 = t2 ^ a3\n 69436: a3 = t2 <u a3\n 69439: a3 = a0 if s1 == 0\n 69442: s1 = u64 [sp + 0x38]\n 69445: a0 = a5 ^ s1\n 69448: u64 [sp + 0xb8] = a5\n 69452: s1 = a5 <u s1\n 69455: s1 = t0 if a0 == 0\n 69458: a4 = a4 ^ a2\n 69461: a4 = a4 | a0\n 69464: a3 = s1 if a4 != 0\n 69467: a1 = u64 [sp + 0x88]\n 69471: a1 = a1 + 0x1\n 69474: a4 = a1 <u 0x1\n 69477: s1 = u64 [sp + 0x90]\n 69481: s1 = s1 + a4\n 69484: a4 = a1 | s1\n 69487: a4 = a4 <u 0x1\n 69490: a0 = u64 [sp + 0x80]\n 69494: a4 = a4 + a0\n 69497: a5 = a4 <u a0\n 69500: a0 = u64 [sp + 0x98]\n 69504: a0 = a0 + a5\n 69507: u64 [sp + 0xa8] = t1\n 69511: u64 [sp + 0xa0] = t2\n 69515: u64 [sp + 0xb0] = a2\n 69519: jump @867 if a3 != 0\n      : @871 (gas: 33)\n 69523: a0 = u64 [sp + 0x48]\n 69526: a1 = u64 [sp + 0x28]\n 69529: a0 = a0 + a1\n 69532: a1 = a0 <u a1\n 69535: a2 = u64 [sp + 0x50]\n 69538: a4 = u64 [sp + 0x30]\n 69541: a2 = a2 + a4\n 69544: a2 = a2 + a1\n 69547: a3 = a2 ^ a4\n 69550: a4 = a2 <u a4\n 69553: a4 = a1 if a3 == 0\n 69556: a1 = u64 [sp + 0x58]\n 69559: a5 = u64 [sp + 0x40]\n 69562: a1 = a1 + a5\n 69565: a4 = a4 + a1\n 69568: a3 = a4 <u a1\n 69571: a1 = a1 <u a5\n 69574: a5 = u64 [sp + 0x60]\n 69577: s1 = u64 [sp + 0x38]\n 69580: a5 = a5 + s1\n 69583: a1 = a1 + a5\n 69586: a1 = a1 + a3\n 69589: a3 = u64 [sp + 0x8]\n 69592: u64 [a3] = a0\n 69594: u64 [a3 + 0x8] = a2\n 69597: u64 [a3 + 0x10] = a4\n 69600: u64 [a3 + 0x18] = a1\n 69603: sp = s0 + 0xfffffffffffffea0\n 69607: ra = u64 [sp + 0x158]\n 69611: s0 = u64 [sp + 0x150]\n 69615: s1 = u64 [sp + 0x148]\n 69619: sp = sp + 0x160\n 69623: ret\n      : @872 (gas: 1)\n 69625: trap\n      : @873 (gas: 8)\n 69626: u64 [sp + 240] = 0\n 69630: u64 [sp + 232] = 0\n 69634: u64 [sp + 224] = 0\n 69638: a0 = 0x4e487b7100000000\n 69648: a1 = sp + 0xe0\n 69652: u64 [sp + 0xf8] = a0\n 69656: a0 = 0\n 69658: ra = 770, jump @23\n      : @874 [@dyn 385] (gas: 7)\n 69665: u64 [sp + 216] = 0\n 69669: u64 [sp + 208] = 0\n 69673: u64 [sp + 192] = 0x22\n 69678: a0 = 0x4\n 69681: a1 = sp + 0xc0\n 69685: u64 [sp + 200] = 0\n 69689: ra = 772, jump @23\n      : @875 [@dyn 386] (gas: 3)\n 69696: a1 = 0x24\n 69699: a0 = 0\n 69701: ra = 774, jump @0\n      : @876 [@dyn 387] (gas: 6)\n 69708: i32 a1 = a0 + 0\n 69710: a0 = 0x1\n 69713: a2 = 0x24\n 69716: ra = 0x308\n 69720: ecalli 11 // 'seal_return'\n 69722: fallthrough\n      : @877 [@dyn 388] (gas: 27)\n 69723: sp = sp + 0xffffffffffffff80\n 69726: u64 [sp + 0x78] = ra\n 69729: u64 [sp + 0x70] = s0\n 69732: u64 [sp + 0x68] = s1\n 69735: s0 = sp + 0x80\n 69739: sp = sp & 0xfffffffffffffff0\n 69742: t0 = u64 [a2]\n 69744: t1 = u64 [a2 + 0x8]\n 69747: t2 = u64 [a2 + 0x10]\n 69750: a2 = u64 [a2 + 0x18]\n 69753: a3 = u64 [a1]\n 69755: a4 = u64 [a1 + 0x8]\n 69758: a5 = u64 [a1 + 0x10]\n 69761: a1 = u64 [a1 + 0x18]\n 69764: s1 = a0\n 69766: u64 [sp + 0x18] = a1\n 69769: u64 [sp + 0x10] = a5\n 69772: u64 [sp + 0x8] = a4\n 69775: u64 [sp] = a3\n 69777: u64 [sp + 0x38] = a2\n 69780: u64 [sp + 0x30] = t2\n 69783: u64 [sp + 0x28] = t1\n 69786: a0 = sp + 0x40\n 69789: a1 = sp + 0x20\n 69792: a2 = sp\n 69794: u64 [sp + 0x20] = t0\n 69797: ra = 778, jump @856\n      : @878 [@dyn 389] (gas: 14)\n 69803: a0 = u64 [sp + 0x50]\n 69806: a1 = u64 [sp + 0x58]\n 69809: a2 = u64 [sp + 0x40]\n 69812: a3 = u64 [sp + 0x48]\n 69815: u64 [s1 + 0x10] = a0\n 69818: u64 [s1 + 0x18] = a1\n 69821: u64 [s1] = a2\n 69823: u64 [s1 + 0x8] = a3\n 69826: sp = s0 + 0xffffffffffffff80\n 69829: ra = u64 [sp + 0x78]\n 69832: s0 = u64 [sp + 0x70]\n 69835: s1 = u64 [sp + 0x68]\n 69838: sp = sp + 0x80\n 69842: ret\n      : @879 (gas: 17)\n 69844: sp = sp + 0xffffffffffffffa0\n 69847: u64 [sp + 0x58] = ra\n 69850: u64 [sp + 0x50] = s0\n 69853: u64 [sp + 0x48] = s1\n 69856: a3 = u64 [a1 + 0x18]\n 69859: a4 = u64 [a1 + 0x10]\n 69862: a5 = u64 [a1 + 0x8]\n 69865: s1 = u64 [a1]\n 69867: a1 = a5 | a3\n 69870: a2 = s1 | a4\n 69873: a2 = a2 | a1\n 69876: a2 = a2 >> 0x20\n 69879: a1 = a1 | a4\n 69882: a1 = a1 << 0x20\n 69885: a1 = a1 | a2\n 69888: u64 [sp + 0x28] = a0\n 69891: jump @886 if a1 != 0\n      : @880 (gas: 19)\n 69895: a0 = s1 + 0x20\n 69898: u64 [sp + 0x30] = a0\n 69901: a0 = a0 <u s1\n 69904: a1 = a5 + a0\n 69907: u64 [sp + 0x40] = a1\n 69910: u64 [sp + 0x8] = a5\n 69913: s0 = a1 <u a5\n 69916: s0 = a0 if a0 == 0\n 69919: s0 = s0 + a4\n 69922: u64 [sp + 0x10] = a4\n 69925: a0 = s0 <u a4\n 69928: u64 [sp + 0x18] = a3\n 69931: a0 = a0 + a3\n 69934: u64 [sp + 0x38] = a0\n 69937: u64 [sp] = s1\n 69939: i32 a0 = s1 + 0\n 69941: a1 = 0x20\n 69944: s1 = 0x20\n 69947: ra = 780, jump @0\n      : @881 [@dyn 390] (gas: 45)\n 69954: u8 [a0 + 0x1f] = s1\n 69957: a1 = u64 [sp + 0x30]\n 69960: s1 = a1\n 69962: a1 = a1 | s0\n 69965: a2 = u64 [sp + 0x40]\n 69968: a4 = u64 [sp + 0x38]\n 69971: a2 = a2 | a4\n 69974: a1 = a1 | a2\n 69977: a1 = a1 >> 0x20\n 69980: u64 [sp + 0x20] = s0\n 69983: a2 = a2 | s0\n 69986: a2 = a2 << 0x20\n 69989: a1 = a1 | a2\n 69992: u8 [a0 + 30] = 0\n 69995: u8 [a0 + 29] = 0\n 69998: u8 [a0 + 28] = 0\n 70001: u8 [a0 + 27] = 0\n 70004: u8 [a0 + 26] = 0\n 70007: u8 [a0 + 25] = 0\n 70010: u8 [a0 + 24] = 0\n 70013: u8 [a0 + 23] = 0\n 70016: u8 [a0 + 22] = 0\n 70019: u8 [a0 + 21] = 0\n 70022: u8 [a0 + 20] = 0\n 70025: u8 [a0 + 19] = 0\n 70028: u8 [a0 + 18] = 0\n 70031: u8 [a0 + 17] = 0\n 70034: u8 [a0 + 16] = 0\n 70037: u8 [a0 + 15] = 0\n 70040: u8 [a0 + 14] = 0\n 70043: u8 [a0 + 13] = 0\n 70046: u8 [a0 + 12] = 0\n 70049: u8 [a0 + 11] = 0\n 70052: u8 [a0 + 10] = 0\n 70055: u8 [a0 + 9] = 0\n 70058: u8 [a0 + 8] = 0\n 70061: u8 [a0 + 7] = 0\n 70064: u8 [a0 + 6] = 0\n 70067: u8 [a0 + 5] = 0\n 70070: u8 [a0 + 4] = 0\n 70073: u8 [a0 + 3] = 0\n 70076: u8 [a0 + 2] = 0\n 70079: u8 [a0 + 1] = 0\n 70082: u8 [a0 + 0] = 0\n 70084: jump @886 if a1 != 0\n      : @882 (gas: 4)\n 70088: i32 s0 = s1 + 0\n 70090: a1 = 0x20\n 70093: a0 = s0\n 70095: ra = 782, jump @0\n      : @883 [@dyn 391] (gas: 41)\n 70102: u8 [a0 + 31] = 0xd\n 70106: u8 [a0 + 30] = 0\n 70109: u8 [a0 + 29] = 0\n 70112: u8 [a0 + 28] = 0\n 70115: u8 [a0 + 27] = 0\n 70118: u8 [a0 + 26] = 0\n 70121: u8 [a0 + 25] = 0\n 70124: u8 [a0 + 24] = 0\n 70127: u8 [a0 + 23] = 0\n 70130: u8 [a0 + 22] = 0\n 70133: u8 [a0 + 21] = 0\n 70136: u8 [a0 + 20] = 0\n 70139: u8 [a0 + 19] = 0\n 70142: u8 [a0 + 18] = 0\n 70145: u8 [a0 + 17] = 0\n 70148: u8 [a0 + 16] = 0\n 70151: u8 [a0 + 15] = 0\n 70154: u8 [a0 + 14] = 0\n 70157: u8 [a0 + 13] = 0\n 70160: u8 [a0 + 12] = 0\n 70163: u8 [a0 + 11] = 0\n 70166: u8 [a0 + 10] = 0\n 70169: u8 [a0 + 9] = 0\n 70172: u8 [a0 + 8] = 0\n 70175: u8 [a0 + 7] = 0\n 70178: u8 [a0 + 6] = 0\n 70181: u8 [a0 + 5] = 0\n 70184: u8 [a0 + 4] = 0\n 70187: u8 [a0 + 3] = 0\n 70190: u8 [a0 + 2] = 0\n 70193: u8 [a0 + 1] = 0\n 70196: a1 = u64 [sp + 0x20]\n 70199: a2 = u64 [sp + 0x38]\n 70202: a1 = a1 | a2\n 70205: a2 = 0xffffffe0\n 70215: a2 = s1 <u a2\n 70218: a3 = u64 [sp + 0x40]\n 70221: a2 = 0 if a3 != 0\n 70223: a2 = 0 if a1 != 0\n 70225: u8 [a0 + 0] = 0\n 70227: jump @886 if a2 == 0\n      : @884 (gas: 3)\n 70231: i32 a0 = s0 + 0x20\n 70234: a1 = 0x20\n 70237: ra = 784, jump @0\n      : @885 [@dyn 392] (gas: 54)\n 70244: u8 [a0 + 31] = 0\n 70247: u8 [a0 + 30] = 0\n 70250: u8 [a0 + 29] = 0\n 70253: u8 [a0 + 28] = 0\n 70256: u8 [a0 + 27] = 0\n 70259: u8 [a0 + 26] = 0\n 70262: u8 [a0 + 25] = 0\n 70265: u8 [a0 + 24] = 0\n 70268: u8 [a0 + 23] = 0\n 70271: u8 [a0 + 22] = 0\n 70274: u8 [a0 + 21] = 0\n 70277: u8 [a0 + 20] = 0\n 70280: u8 [a0 + 19] = 0\n 70283: u8 [a0 + 18] = 0\n 70286: u8 [a0 + 17] = 0\n 70289: u8 [a0 + 16] = 0\n 70292: u8 [a0 + 15] = 0\n 70295: u8 [a0 + 14] = 0\n 70298: u8 [a0 + 13] = 0\n 70301: u8 [a0 + 12] = 0x68\n 70305: u8 [a0 + 11] = 0x63\n 70309: u8 [a0 + 10] = 0x74\n 70313: u8 [a0 + 9] = 0x61\n 70317: u8 [a0 + 8] = 0x6d\n 70321: u8 [a0 + 7] = 0x73\n 70325: u8 [a0 + 6] = 0x69\n 70329: u8 [a0 + 5] = 0x6d\n 70333: u8 [a0 + 4] = 0x20\n 70337: u8 [a0 + 3] = 0x49\n 70341: u8 [a0 + 2] = 0x45\n 70345: u8 [a0 + 1] = 0x4d\n 70349: u8 [a0 + 0] = 0x49\n 70352: a1 = u64 [sp]\n 70354: a0 = a1 + 0x60\n 70357: a1 = a0 <u a1\n 70360: a3 = u64 [sp + 0x8]\n 70363: a2 = a3 + a1\n 70366: a3 = a2 <u a3\n 70369: a3 = a1 if a1 == 0\n 70372: a1 = u64 [sp + 0x10]\n 70375: a3 = a3 + a1\n 70378: a1 = a3 <u a1\n 70381: a4 = u64 [sp + 0x18]\n 70384: a1 = a1 + a4\n 70387: a4 = u64 [sp + 0x28]\n 70390: u64 [a4] = a0\n 70392: u64 [a4 + 0x8] = a2\n 70395: u64 [a4 + 0x10] = a3\n 70398: u64 [a4 + 0x18] = a1\n 70401: ra = u64 [sp + 0x58]\n 70404: s0 = u64 [sp + 0x50]\n 70407: s1 = u64 [sp + 0x48]\n 70410: sp = sp + 0x60\n 70413: ret\n      : @886 (gas: 1)\n 70415: trap\n      : @887 (gas: 25)\n 70416: t2 = u64 [s1 + 0x98]\n 70420: a2 = u64 [s1 + 0xa8]\n 70424: t0 = u64 [s1 + 0xb0]\n 70428: a0 = u64 [s1 + 0x378]\n 70432: a1 = u64 [s1 + 0x360]\n 70436: u64 [s1 + 0x110] = a1\n 70440: t1 = u64 [s1 + 0x370]\n 70444: a3 = u64 [s1 + 0x368]\n 70448: a4 = a0 ^ t2\n 70451: a1 = t2 <u a0\n 70454: a0 = u64 [s1 + 0xa0]\n 70458: a5 = a0 <u t1\n 70461: a5 = a1 if a4 != 0\n 70464: a1 = a3 ^ a2\n 70467: u64 [s1 + 0x118] = a1\n 70471: ra = a2 <u a3\n 70474: a1 = u64 [s1 + 0x110]\n 70478: a1 = t0 <u a1\n 70481: a3 = u64 [s1 + 0x118]\n 70485: a1 = ra if a3 != 0\n 70488: a3 = a0\n 70490: a0 = t1 ^ a0\n 70493: a0 = a0 | a4\n 70496: a1 = a5 if a0 != 0\n 70499: jump @889 if a1 != 0\n      : @888 (gas: 1)\n 70502: jump @935\n      : @889 (gas: 12)\n 70505: u64 [s1 + 0x240] = t0\n 70509: u64 [s1 + 632] = 0\n 70513: u64 [s1 + 624] = 0\n 70517: u64 [s1 + 616] = 0\n 70521: u64 [s1 + 608] = 0x1\n 70526: u64 [s1 + 0x248] = a2\n 70530: u64 [s1 + 0x250] = a3\n 70534: a0 = s1 + 0x280\n 70538: a1 = s1 + 0x260\n 70542: a2 = s1 + 0x240\n 70546: u64 [s1 + 0x258] = t2\n 70550: ra = 786, jump @478\n      : @890 [@dyn 393] (gas: 36)\n 70557: a0 = u64 [s1 + 0x280]\n 70561: a4 = u64 [s1 + 0x298]\n 70565: a1 = u64 [s1 + 0x288]\n 70569: a5 = u64 [s1 + 0x290]\n 70573: a2 = a0 + 0x6\n 70576: u64 [s1 + 0x108] = a0\n 70580: a0 = a2 <u a0\n 70583: a3 = a1 + a0\n 70586: u64 [s1 + 0x100] = a1\n 70590: a1 = a3 <u a1\n 70593: a1 = a0 if a0 == 0\n 70596: a1 = a1 + a5\n 70599: u64 [s1 + 0x110] = a5\n 70603: a0 = a1 <u a5\n 70606: u64 [s1 + 0x118] = a4\n 70610: a0 = a0 + a4\n 70613: u64 [s1 + 0x88] = a3\n 70617: u64 [s1 + 0x348] = a3\n 70621: u64 [s1 + 0x90] = a2\n 70625: u64 [s1 + 0x340] = a2\n 70629: u64 [s1 + 0x80] = a1\n 70633: u64 [s1 + 0x350] = a1\n 70637: u64 [s1 + 0x78] = a0\n 70640: u64 [s1 + 0x358] = a0\n 70644: u64 [s1 + 888] = 0\n 70648: u64 [s1 + 880] = 0\n 70652: u64 [s1 + 872] = 0\n 70656: u64 [s1 + 864] = 0\n 70660: u32 [s1 + 800] = 0x20\n 70665: i32 a1 = s1 + 0x340\n 70669: i32 a3 = s1 + 0x360\n 70673: i32 a4 = s1 + 0x320\n 70677: a2 = 0xffffffffffffffff\n 70680: a0 = 0\n 70682: ecalli 7 // 'get_storage'\n 70684: fallthrough\n      : @891 (gas: 2)\n 70685: a0 = u8 [s1 + 0x361]\n 70689: jump @893 if a0 == 0\n      : @892 (gas: 1)\n 70692: jump @940\n      : @893 (gas: 19)\n 70695: a1 = u64 [s1 + 0x108]\n 70699: a0 = a1 + 0x4\n 70702: u64 [s1 + 0xf8] = a0\n 70706: a0 = a0 <u a1\n 70709: a2 = u64 [s1 + 0x100]\n 70713: a1 = a2 + a0\n 70716: u64 [s1 + 0xf0] = a1\n 70720: a1 = a1 <u a2\n 70723: a1 = a0 if a0 == 0\n 70726: a0 = u64 [s1 + 0x110]\n 70730: a1 = a1 + a0\n 70733: u64 [s1 + 0xe0] = a1\n 70737: a0 = a1 <u a0\n 70740: a1 = u64 [s1 + 0x118]\n 70744: a0 = a0 + a1\n 70747: u64 [s1 + 0xe8] = a0\n 70751: a0 = 0x40\n 70754: a1 = 0x20\n 70757: ra = 788, jump @0\n      : @894 [@dyn 394] (gas: 124)\n 70764: a1 = u8 [a0 + 0x19]\n 70767: a2 = u8 [a0 + 0x18]\n 70770: a3 = u8 [a0 + 0x1a]\n 70773: a4 = u8 [a0 + 0x1b]\n 70776: a1 = a1 << 0x8\n 70779: a1 = a1 | a2\n 70782: a3 = a3 << 0x10\n 70785: a4 = a4 << 0x18\n 70788: a3 = a3 | a4\n 70791: a1 = a1 | a3\n 70794: a2 = u8 [a0 + 0x1d]\n 70797: a3 = u8 [a0 + 0x1c]\n 70800: a4 = u8 [a0 + 0x1e]\n 70803: a5 = u8 [a0 + 0x1f]\n 70806: a2 = a2 << 0x8\n 70809: a2 = a2 | a3\n 70812: a4 = a4 << 0x10\n 70815: a5 = a5 << 0x18\n 70818: a4 = a4 | a5\n 70821: a2 = a2 | a4\n 70824: a2 = a2 << 0x20\n 70827: t0 = a2 | a1\n 70830: a2 = u8 [a0 + 0x11]\n 70833: a3 = u8 [a0 + 0x10]\n 70836: a4 = u8 [a0 + 0x12]\n 70839: a5 = u8 [a0 + 0x13]\n 70842: a2 = a2 << 0x8\n 70845: a2 = a2 | a3\n 70848: a4 = a4 << 0x10\n 70851: a5 = a5 << 0x18\n 70854: a4 = a4 | a5\n 70857: a2 = a2 | a4\n 70860: a3 = u8 [a0 + 0x15]\n 70863: a4 = u8 [a0 + 0x14]\n 70866: a5 = u8 [a0 + 0x16]\n 70869: a1 = u8 [a0 + 0x17]\n 70872: a3 = a3 << 0x8\n 70875: a3 = a3 | a4\n 70878: a5 = a5 << 0x10\n 70881: a1 = a1 << 0x18\n 70884: a1 = a1 | a5\n 70887: a1 = a1 | a3\n 70890: a1 = a1 << 0x20\n 70893: t1 = a1 | a2\n 70896: a1 = u8 [a0 + 0x9]\n 70899: a3 = u8 [a0 + 0x8]\n 70902: a4 = u8 [a0 + 0xa]\n 70905: a5 = u8 [a0 + 0xb]\n 70908: a1 = a1 << 0x8\n 70911: a1 = a1 | a3\n 70914: a4 = a4 << 0x10\n 70917: a5 = a5 << 0x18\n 70920: a4 = a4 | a5\n 70923: a1 = a1 | a4\n 70926: a3 = u8 [a0 + 0xd]\n 70929: a4 = u8 [a0 + 0xc]\n 70932: a5 = u8 [a0 + 0xe]\n 70935: a2 = u8 [a0 + 0xf]\n 70938: a3 = a3 << 0x8\n 70941: a3 = a3 | a4\n 70944: a5 = a5 << 0x10\n 70947: a2 = a2 << 0x18\n 70950: a2 = a2 | a5\n 70953: a2 = a2 | a3\n 70956: a2 = a2 << 0x20\n 70959: a3 = a2 | a1\n 70962: a1 = u8 [a0 + 0x1]\n 70965: a2 = u8 [a0]\n 70967: a4 = u8 [a0 + 0x2]\n 70970: a5 = u8 [a0 + 0x3]\n 70973: a1 = a1 << 0x8\n 70976: a1 = a1 | a2\n 70979: a4 = a4 << 0x10\n 70982: a5 = a5 << 0x18\n 70985: a4 = a4 | a5\n 70988: a1 = a1 | a4\n 70991: a2 = u8 [a0 + 0x5]\n 70994: a4 = u8 [a0 + 0x4]\n 70997: a5 = u8 [a0 + 0x6]\n 71000: a0 = u8 [a0 + 0x7]\n 71003: a2 = a2 << 0x8\n 71006: a2 = a2 | a4\n 71009: a5 = a5 << 0x10\n 71012: a0 = a0 << 0x18\n 71015: a0 = a0 | a5\n 71018: a0 = a0 | a2\n 71021: a0 = a0 << 0x20\n 71024: a0 = a0 | a1\n 71027: a4 = reverse a0\n 71029: u64 [s1 + 0x108] = a4\n 71033: a3 = reverse a3\n 71035: u64 [s1 + 0x110] = a3\n 71039: a1 = reverse t1\n 71041: u64 [s1 + 0x100] = a1\n 71045: a0 = reverse t0\n 71047: u64 [s1 + 0x118] = a0\n 71051: a2 = a0 + 0x20\n 71054: a0 = a2 <u a0\n 71057: a5 = a1 + a0\n 71060: a1 = a5 <u a1\n 71063: a1 = a0 if a0 == 0\n 71066: a1 = a1 + a3\n 71069: a0 = a1 <u a3\n 71072: a4 = a4 + a0\n 71075: a0 = u64 [s1 + 0xf0]\n 71079: u64 [s1 + 0x1c8] = a0\n 71083: a0 = u64 [s1 + 0xf8]\n 71087: u64 [s1 + 0x1c0] = a0\n 71091: a0 = u64 [s1 + 0xe0]\n 71095: u64 [s1 + 0x1d0] = a0\n 71099: a0 = u64 [s1 + 0xe8]\n 71103: u64 [s1 + 0x1d8] = a0\n 71107: u64 [s1 + 0xf8] = a2\n 71111: u64 [s1 + 0x1a0] = a2\n 71115: u64 [s1 + 0xf0] = a5\n 71119: u64 [s1 + 0x1a8] = a5\n 71123: u64 [s1 + 0xe8] = a1\n 71127: u64 [s1 + 0x1b0] = a1\n 71131: a0 = s1 + 0x1e0\n 71135: a1 = s1 + 0x1c0\n 71139: a2 = s1 + 0x1a0\n 71143: u64 [s1 + 0xe0] = a4\n 71147: u64 [s1 + 0x1b8] = a4\n 71151: ra = 790, jump @856\n      : @895 [@dyn 395] (gas: 12)\n 71157: a1 = u64 [s1 + 0x100]\n 71161: a0 = u64 [s1 + 0x108]\n 71165: a0 = a0 | a1\n 71168: a2 = u64 [s1 + 0x110]\n 71172: a1 = u64 [s1 + 0x118]\n 71176: a1 = a1 | a2\n 71179: a1 = a1 | a0\n 71182: a1 = a1 >> 0x20\n 71185: a0 = a0 | a2\n 71188: a0 = a0 << 0x20\n 71191: a0 = a0 | a1\n 71194: jump @897 if a0 == 0\n      : @896 (gas: 1)\n 71197: jump @951\n      : @897 (gas: 35)\n 71200: a0 = u64 [s1 + 0x1e0]\n 71204: u64 [s1 + 0xd8] = a0\n 71208: t0 = u64 [s1 + 0x1e8]\n 71212: t2 = u64 [s1 + 0x1f8]\n 71216: u64 [s1 + 0x40] = t2\n 71219: a4 = u64 [s1 + 0x1f0]\n 71223: u64 [s1 + 0x48] = a4\n 71226: a5 = u64 [s1 + 0xf8]\n 71230: t1 = a0 <u a5\n 71233: a1 = u64 [s1 + 0xf0]\n 71237: ra = t0 ^ a1\n 71240: a2 = t0 <u a1\n 71243: u64 [s1 + 0x38] = t0\n 71246: a2 = t1 if ra == 0\n 71249: a0 = u64 [s1 + 0xe8]\n 71253: ra = a4 - a0\n 71256: a3 = ra - a2\n 71259: u64 [s1 + 0x60] = a3\n 71262: a3 = ra <u a2\n 71265: a2 = a4 <u a0\n 71268: a2 = t2 - a2\n 71271: a0 = u64 [s1 + 0xe0]\n 71275: a2 = a2 - a0\n 71278: a2 = a2 - a3\n 71281: u64 [s1 + 0x68] = a2\n 71284: a0 = t0 - t1\n 71287: a0 = a0 - a1\n 71290: u64 [s1 + 0x58] = a0\n 71293: a0 = u64 [s1 + 0xd8]\n 71297: a0 = a0 - a5\n 71300: u64 [s1 + 0x50] = a0\n 71303: a0 = i32 [s1 + 0x118]\n 71307: a1 = 0x20\n 71310: u64 [s1 + 0x70] = a0\n 71313: ra = 792, jump @0\n      : @898 [@dyn 396] (gas: 125)\n 71320: t0 = u64 [s1 + 0xd8]\n 71324: a2 = u64 [s1 + 0x118]\n 71328: t1 = t0 <u a2\n 71331: a5 = u64 [s1 + 0x100]\n 71335: a4 = u64 [s1 + 0x38]\n 71338: a3 = a4 ^ a5\n 71341: a1 = a4 <u a5\n 71344: a1 = t1 if a3 == 0\n 71347: a3 = a4 - a5\n 71350: t1 = a3 - t1\n 71353: u64 [s1 + 0x30] = t1\n 71356: a3 = t0 - a2\n 71359: a4 = a3 + 0x1f\n 71362: t0 = a4 <u a3\n 71365: u64 [s1 + 0x38] = t0\n 71368: a4 = a4 & 0xffffffffffffffe0\n 71371: a2 = a2 + a4\n 71374: u64 [s1 + 0xd8] = a2\n 71378: a3 = a2 <u a4\n 71381: a2 = t1 + t0\n 71384: a4 = a2 + a5\n 71387: t0 = a4 + a3\n 71390: a4 = t0 ^ a2\n 71393: ra = t0 <u a2\n 71396: ra = a3 if a4 == 0\n 71399: t1 = u64 [s1 + 0x108]\n 71403: a3 = u64 [s1 + 0x40]\n 71406: t2 = a3 - t1\n 71409: a4 = u64 [s1 + 0x110]\n 71413: a3 = u64 [s1 + 0x48]\n 71416: a5 = a3 <u a4\n 71419: t2 = t2 - a5\n 71422: a5 = a3 - a4\n 71425: a3 = a5 <u a1\n 71428: a3 = t2 - a3\n 71431: a5 = a5 - a1\n 71434: a1 = u64 [s1 + 0x30]\n 71437: a1 = a2 <u a1\n 71440: a2 = u64 [s1 + 0x38]\n 71443: a1 = a2 if a2 == 0\n 71446: a1 = a1 + a5\n 71449: a2 = a1 <u a5\n 71452: a3 = a3 + t1\n 71455: a2 = a2 + a3\n 71458: a3 = a1 + a4\n 71461: a1 = a3 <u a1\n 71464: a1 = a1 + a2\n 71467: ra = ra + a3\n 71470: a2 = ra <u a3\n 71473: a5 = a1 + a2\n 71476: a1 = a5 >u 0\n 71478: a2 = ra >u 0\n 71480: a2 = a1 if a5 != 0\n 71483: a3 = ra | a5\n 71486: a1 = t0 >u 0\n 71488: a1 = a2 if a3 != 0\n 71491: a2 = u64 [s1 + 0x50]\n 71494: a2 = reverse a2\n 71496: a3 = a2 >> 0x38\n 71499: u8 [a0 + 0x1f] = a3\n 71502: a3 = a2 >> 0x30\n 71505: u8 [a0 + 0x1e] = a3\n 71508: a3 = a2 >> 0x28\n 71511: u8 [a0 + 0x1d] = a3\n 71514: a3 = a2 >> 0x20\n 71517: u8 [a0 + 0x1c] = a3\n 71520: a3 = a2 >> 0x18\n 71523: u8 [a0 + 0x1b] = a3\n 71526: a3 = a2 >> 0x10\n 71529: u8 [a0 + 0x1a] = a3\n 71532: a3 = u64 [s1 + 0x58]\n 71535: a3 = reverse a3\n 71537: u8 [a0 + 0x18] = a2\n 71540: a2 = a2 >> 0x8\n 71543: u8 [a0 + 0x19] = a2\n 71546: a2 = a3 >> 0x38\n 71549: u8 [a0 + 0x17] = a2\n 71552: a2 = a3 >> 0x30\n 71555: u8 [a0 + 0x16] = a2\n 71558: a2 = a3 >> 0x28\n 71561: u8 [a0 + 0x15] = a2\n 71564: a2 = a3 >> 0x20\n 71567: u8 [a0 + 0x14] = a2\n 71570: a2 = a3 >> 0x18\n 71573: u8 [a0 + 0x13] = a2\n 71576: a2 = a3 >> 0x10\n 71579: u8 [a0 + 0x12] = a2\n 71582: a2 = u64 [s1 + 0x60]\n 71585: a2 = reverse a2\n 71587: u8 [a0 + 0x10] = a3\n 71590: a3 = a3 >> 0x8\n 71593: u8 [a0 + 0x11] = a3\n 71596: a3 = a2 >> 0x38\n 71599: u8 [a0 + 0xf] = a3\n 71602: a3 = a2 >> 0x30\n 71605: u8 [a0 + 0xe] = a3\n 71608: a3 = a2 >> 0x28\n 71611: u8 [a0 + 0xd] = a3\n 71614: a3 = a2 >> 0x20\n 71617: u8 [a0 + 0xc] = a3\n 71620: a3 = a2 >> 0x18\n 71623: u8 [a0 + 0xb] = a3\n 71626: a3 = a2 >> 0x10\n 71629: u8 [a0 + 0xa] = a3\n 71632: a3 = u64 [s1 + 0x68]\n 71635: a3 = reverse a3\n 71637: u8 [a0 + 0x8] = a2\n 71640: a2 = a2 >> 0x8\n 71643: u8 [a0 + 0x9] = a2\n 71646: a2 = a3 >> 0x38\n 71649: u8 [a0 + 0x7] = a2\n 71652: a2 = a3 >> 0x30\n 71655: u8 [a0 + 0x6] = a2\n 71658: a2 = a3 >> 0x28\n 71661: u8 [a0 + 0x5] = a2\n 71664: a2 = a3 >> 0x20\n 71667: u8 [a0 + 0x4] = a2\n 71670: a2 = a3 >> 0x18\n 71673: u8 [a0 + 0x3] = a2\n 71676: a2 = a3 >> 0x10\n 71679: u8 [a0 + 0x2] = a2\n 71682: u8 [a0] = a3\n 71684: a3 = a3 >> 0x8\n 71687: u8 [a0 + 0x1] = a3\n 71690: jump @900 if a1 == 0\n      : @899 (gas: 1)\n 71693: jump @952\n      : @900 (gas: 17)\n 71696: a0 = u64 [s1 + 0x118]\n 71700: a1 = u64 [s1 + 0xd8]\n 71704: a0 = a1 <u a0\n 71707: a2 = u64 [s1 + 0x100]\n 71711: a1 = t0 ^ a2\n 71714: a2 = t0 <u a2\n 71717: a2 = a0 if a1 == 0\n 71720: a4 = u64 [s1 + 0x110]\n 71724: a0 = ra <u a4\n 71727: a3 = u64 [s1 + 0x108]\n 71731: a1 = a5 ^ a3\n 71734: a3 = a5 <u a3\n 71737: a3 = a0 if a1 == 0\n 71740: a0 = ra ^ a4\n 71743: a0 = a0 | a1\n 71746: a3 = a2 if a0 == 0\n 71749: jump @902 if a3 == 0\n      : @901 (gas: 1)\n 71752: jump @952\n      : @902 (gas: 6)\n 71755: a0 = 0x40\n 71758: a1 = 0x20\n 71761: u64 [s1 + 0x118] = t0\n 71765: u64 [s1 + 0x110] = ra\n 71769: u64 [s1 + 0x108] = a5\n 71773: ra = 794, jump @0\n      : @903 [@dyn 397] (gas: 71)\n 71780: a1 = u64 [s1 + 0x108]\n 71784: a1 = reverse a1\n 71786: a2 = u64 [s1 + 0x110]\n 71790: a2 = reverse a2\n 71792: a3 = u64 [s1 + 0x118]\n 71796: a3 = reverse a3\n 71798: a4 = u64 [s1 + 0xd8]\n 71802: a4 = reverse a4\n 71804: u8 [a0 + 0x18] = a4\n 71807: a5 = a4 >> 0x38\n 71810: u8 [a0 + 0x1f] = a5\n 71813: a5 = a4 >> 0x30\n 71816: u8 [a0 + 0x1e] = a5\n 71819: a5 = a4 >> 0x28\n 71822: u8 [a0 + 0x1d] = a5\n 71825: a5 = a4 >> 0x20\n 71828: u8 [a0 + 0x1c] = a5\n 71831: a5 = a4 >> 0x18\n 71834: u8 [a0 + 0x1b] = a5\n 71837: a5 = a4 >> 0x10\n 71840: u8 [a0 + 0x1a] = a5\n 71843: a4 = a4 >> 0x8\n 71846: u8 [a0 + 0x19] = a4\n 71849: u8 [a0 + 0x10] = a3\n 71852: a4 = a3 >> 0x38\n 71855: u8 [a0 + 0x17] = a4\n 71858: a4 = a3 >> 0x30\n 71861: u8 [a0 + 0x16] = a4\n 71864: a4 = a3 >> 0x28\n 71867: u8 [a0 + 0x15] = a4\n 71870: a4 = a3 >> 0x20\n 71873: u8 [a0 + 0x14] = a4\n 71876: a4 = a3 >> 0x18\n 71879: u8 [a0 + 0x13] = a4\n 71882: a4 = a3 >> 0x10\n 71885: u8 [a0 + 0x12] = a4\n 71888: a3 = a3 >> 0x8\n 71891: u8 [a0 + 0x11] = a3\n 71894: u8 [a0 + 0x8] = a2\n 71897: a3 = a2 >> 0x38\n 71900: u8 [a0 + 0xf] = a3\n 71903: a3 = a2 >> 0x30\n 71906: u8 [a0 + 0xe] = a3\n 71909: a3 = a2 >> 0x28\n 71912: u8 [a0 + 0xd] = a3\n 71915: a3 = a2 >> 0x20\n 71918: u8 [a0 + 0xc] = a3\n 71921: a3 = a2 >> 0x18\n 71924: u8 [a0 + 0xb] = a3\n 71927: a3 = a2 >> 0x10\n 71930: u8 [a0 + 0xa] = a3\n 71933: a2 = a2 >> 0x8\n 71936: u8 [a0 + 0x9] = a2\n 71939: u8 [a0] = a1\n 71941: a2 = a1 >> 0x38\n 71944: u8 [a0 + 0x7] = a2\n 71947: a2 = a1 >> 0x30\n 71950: u8 [a0 + 0x6] = a2\n 71953: a2 = a1 >> 0x28\n 71956: u8 [a0 + 0x5] = a2\n 71959: a2 = a1 >> 0x20\n 71962: u8 [a0 + 0x4] = a2\n 71965: a2 = a1 >> 0x18\n 71968: u8 [a0 + 0x3] = a2\n 71971: a2 = a1 >> 0x10\n 71974: u8 [a0 + 0x2] = a2\n 71977: a1 = a1 >> 0x8\n 71980: u8 [a0 + 0x1] = a1\n 71983: a1 = 0x20\n 71986: a0 = u64 [s1 + 0x70]\n 71989: ra = 796, jump @0\n      : @904 [@dyn 398] (gas: 12)\n 71996: t2 = u64 [s1 + 0xf8]\n 72000: a3 = u64 [s1 + 0xe8]\n 72004: a1 = t2 | a3\n 72007: a2 = u64 [s1 + 0xf0]\n 72011: a4 = u64 [s1 + 0xe0]\n 72015: a2 = a2 | a4\n 72018: a1 = a1 | a2\n 72021: a1 = a1 >> 0x20\n 72024: a2 = a2 | a3\n 72027: a2 = a2 << 0x20\n 72030: a1 = a1 | a2\n 72033: jump @906 if a1 == 0\n      : @905 (gas: 1)\n 72036: jump @951\n      : @906 (gas: 100)\n 72039: a1 = u8 [a0 + 0x19]\n 72042: a2 = u8 [a0 + 0x18]\n 72045: a3 = u8 [a0 + 0x1a]\n 72048: a4 = u8 [a0 + 0x1b]\n 72051: a1 = a1 << 0x8\n 72054: a1 = a1 | a2\n 72057: a3 = a3 << 0x10\n 72060: a4 = a4 << 0x18\n 72063: a3 = a3 | a4\n 72066: a1 = a1 | a3\n 72069: a2 = u8 [a0 + 0x1d]\n 72072: a3 = u8 [a0 + 0x1c]\n 72075: a4 = u8 [a0 + 0x1e]\n 72078: a5 = u8 [a0 + 0x1f]\n 72081: a2 = a2 << 0x8\n 72084: a2 = a2 | a3\n 72087: a4 = a4 << 0x10\n 72090: a5 = a5 << 0x18\n 72093: a4 = a4 | a5\n 72096: a2 = a2 | a4\n 72099: a2 = a2 << 0x20\n 72102: t0 = a2 | a1\n 72105: a2 = u8 [a0 + 0x11]\n 72108: a3 = u8 [a0 + 0x10]\n 72111: a4 = u8 [a0 + 0x12]\n 72114: a5 = u8 [a0 + 0x13]\n 72117: a2 = a2 << 0x8\n 72120: a2 = a2 | a3\n 72123: a4 = a4 << 0x10\n 72126: a5 = a5 << 0x18\n 72129: a4 = a4 | a5\n 72132: a2 = a2 | a4\n 72135: a3 = u8 [a0 + 0x15]\n 72138: a4 = u8 [a0 + 0x14]\n 72141: a5 = u8 [a0 + 0x16]\n 72144: a1 = u8 [a0 + 0x17]\n 72147: a3 = a3 << 0x8\n 72150: a3 = a3 | a4\n 72153: a5 = a5 << 0x10\n 72156: a1 = a1 << 0x18\n 72159: a1 = a1 | a5\n 72162: a1 = a1 | a3\n 72165: a1 = a1 << 0x20\n 72168: t1 = a1 | a2\n 72171: a1 = u8 [a0 + 0x9]\n 72174: a3 = u8 [a0 + 0x8]\n 72177: a4 = u8 [a0 + 0xa]\n 72180: a5 = u8 [a0 + 0xb]\n 72183: a1 = a1 << 0x8\n 72186: a1 = a1 | a3\n 72189: a4 = a4 << 0x10\n 72192: a5 = a5 << 0x18\n 72195: a4 = a4 | a5\n 72198: a1 = a1 | a4\n 72201: a3 = u8 [a0 + 0xd]\n 72204: a4 = u8 [a0 + 0xc]\n 72207: a5 = u8 [a0 + 0xe]\n 72210: a2 = u8 [a0 + 0xf]\n 72213: a3 = a3 << 0x8\n 72216: a3 = a3 | a4\n 72219: a5 = a5 << 0x10\n 72222: a2 = a2 << 0x18\n 72225: a2 = a2 | a5\n 72228: a2 = a2 | a3\n 72231: a2 = a2 << 0x20\n 72234: a3 = a2 | a1\n 72237: a1 = u8 [a0 + 0x1]\n 72240: a2 = u8 [a0]\n 72242: a4 = u8 [a0 + 0x2]\n 72245: a5 = u8 [a0 + 0x3]\n 72248: a1 = a1 << 0x8\n 72251: a1 = a1 | a2\n 72254: a4 = a4 << 0x10\n 72257: a5 = a5 << 0x18\n 72260: a4 = a4 | a5\n 72263: a1 = a1 | a4\n 72266: a2 = u8 [a0 + 0x5]\n 72269: a4 = u8 [a0 + 0x4]\n 72272: a5 = u8 [a0 + 0x6]\n 72275: a0 = u8 [a0 + 0x7]\n 72278: a2 = a2 << 0x8\n 72281: a2 = a2 | a4\n 72284: a5 = a5 << 0x10\n 72287: a0 = a0 << 0x18\n 72290: a0 = a0 | a5\n 72293: a0 = a0 | a2\n 72296: a0 = a0 << 0x20\n 72299: a0 = a0 | a1\n 72302: a0 = reverse a0\n 72304: a2 = reverse a3\n 72306: a3 = reverse t1\n 72308: a1 = reverse t0\n 72310: a4 = a1 | a2\n 72313: a0 = a0 | a3\n 72316: a4 = a4 | a0\n 72319: a4 = a4 >> 0x20\n 72322: a0 = a0 | a2\n 72325: a0 = a0 << 0x20\n 72328: a0 = a0 | a4\n 72331: jump @908 if a0 == 0\n      : @907 (gas: 1)\n 72334: jump @951\n      : @908 (gas: 4)\n 72337: i32 a0 = t2 + 0\n 72339: i32 a1 = a1 + 0\n 72341: u64 [s1 + 0x118] = a1\n 72345: ra = 798, jump @0\n      : @909 [@dyn 399] (gas: 20)\n 72352: a1 = sp + 0xffffffffffffffe0\n 72355: a1 = a1 & 0xffffffffffffffe0\n 72358: u64 [s1 + 0x110] = a1\n 72362: sp = a1\n 72364: i32 a0 = a0 + 0\n 72366: i32 a2 = a1 + 0\n 72368: a1 = u64 [s1 + 0x118]\n 72372: ecalli 8 // 'hash_keccak_256'\n 72374: a1 = u64 [s1 + 0x110]\n 72378: a0 = u64 [a1 + 0x18]\n 72381: u64 [s1 + 0x60] = a0\n 72384: a0 = u64 [a1 + 0x10]\n 72387: u64 [s1 + 0x70] = a0\n 72390: a0 = u64 [a1 + 0x8]\n 72393: u64 [s1 + 0x58] = a0\n 72396: a0 = u64 [a1]\n 72398: u64 [s1 + 0x68] = a0\n 72401: a0 = 0x40\n 72404: a1 = 0x20\n 72407: ra = 800, jump @0\n      : @910 [@dyn 400] (gas: 12)\n 72414: t2 = u64 [s1 + 0xc8]\n 72418: a4 = u64 [s1 + 0xb8]\n 72422: a1 = t2 | a4\n 72425: a2 = u64 [s1 + 0xd0]\n 72429: a3 = u64 [s1 + 0xc0]\n 72433: a2 = a2 | a3\n 72436: a1 = a1 | a2\n 72439: a1 = a1 >> 0x20\n 72442: a2 = a2 | a4\n 72445: a2 = a2 << 0x20\n 72448: a1 = a1 | a2\n 72451: jump @912 if a1 == 0\n      : @911 (gas: 1)\n 72454: jump @951\n      : @912 (gas: 112)\n 72457: a1 = u8 [a0 + 0x19]\n 72460: a2 = u8 [a0 + 0x18]\n 72463: a3 = u8 [a0 + 0x1a]\n 72466: a4 = u8 [a0 + 0x1b]\n 72469: a1 = a1 << 0x8\n 72472: a1 = a1 | a2\n 72475: a3 = a3 << 0x10\n 72478: a4 = a4 << 0x18\n 72481: a3 = a3 | a4\n 72484: a1 = a1 | a3\n 72487: a2 = u8 [a0 + 0x1d]\n 72490: a3 = u8 [a0 + 0x1c]\n 72493: a4 = u8 [a0 + 0x1e]\n 72496: a5 = u8 [a0 + 0x1f]\n 72499: a2 = a2 << 0x8\n 72502: a2 = a2 | a3\n 72505: a4 = a4 << 0x10\n 72508: a5 = a5 << 0x18\n 72511: a4 = a4 | a5\n 72514: a2 = a2 | a4\n 72517: a2 = a2 << 0x20\n 72520: t0 = a2 | a1\n 72523: a2 = u8 [a0 + 0x11]\n 72526: a3 = u8 [a0 + 0x10]\n 72529: a4 = u8 [a0 + 0x12]\n 72532: a5 = u8 [a0 + 0x13]\n 72535: a2 = a2 << 0x8\n 72538: a2 = a2 | a3\n 72541: a4 = a4 << 0x10\n 72544: a5 = a5 << 0x18\n 72547: a4 = a4 | a5\n 72550: a2 = a2 | a4\n 72553: a3 = u8 [a0 + 0x15]\n 72556: a4 = u8 [a0 + 0x14]\n 72559: a5 = u8 [a0 + 0x16]\n 72562: a1 = u8 [a0 + 0x17]\n 72565: a3 = a3 << 0x8\n 72568: a3 = a3 | a4\n 72571: a5 = a5 << 0x10\n 72574: a1 = a1 << 0x18\n 72577: a1 = a1 | a5\n 72580: a1 = a1 | a3\n 72583: a1 = a1 << 0x20\n 72586: t1 = a1 | a2\n 72589: a1 = u8 [a0 + 0x9]\n 72592: a3 = u8 [a0 + 0x8]\n 72595: a4 = u8 [a0 + 0xa]\n 72598: a5 = u8 [a0 + 0xb]\n 72601: a1 = a1 << 0x8\n 72604: a1 = a1 | a3\n 72607: a4 = a4 << 0x10\n 72610: a5 = a5 << 0x18\n 72613: a4 = a4 | a5\n 72616: a1 = a1 | a4\n 72619: a3 = u8 [a0 + 0xd]\n 72622: a4 = u8 [a0 + 0xc]\n 72625: a5 = u8 [a0 + 0xe]\n 72628: a2 = u8 [a0 + 0xf]\n 72631: a3 = a3 << 0x8\n 72634: a3 = a3 | a4\n 72637: a5 = a5 << 0x10\n 72640: a2 = a2 << 0x18\n 72643: a2 = a2 | a5\n 72646: a2 = a2 | a3\n 72649: a2 = a2 << 0x20\n 72652: a3 = a2 | a1\n 72655: a1 = u8 [a0 + 0x1]\n 72658: a2 = u8 [a0]\n 72660: a4 = u8 [a0 + 0x2]\n 72663: a5 = u8 [a0 + 0x3]\n 72666: a1 = a1 << 0x8\n 72669: a1 = a1 | a2\n 72672: a4 = a4 << 0x10\n 72675: a5 = a5 << 0x18\n 72678: a4 = a4 | a5\n 72681: a1 = a1 | a4\n 72684: a2 = u8 [a0 + 0x5]\n 72687: a4 = u8 [a0 + 0x4]\n 72690: a5 = u8 [a0 + 0x6]\n 72693: a0 = u8 [a0 + 0x7]\n 72696: a2 = a2 << 0x8\n 72699: a2 = a2 | a4\n 72702: a5 = a5 << 0x10\n 72705: a0 = a0 << 0x18\n 72708: a0 = a0 | a5\n 72711: a0 = a0 | a2\n 72714: a0 = a0 << 0x20\n 72717: a0 = a0 | a1\n 72720: a2 = reverse a0\n 72722: a3 = reverse a3\n 72724: a1 = reverse t1\n 72726: a0 = reverse t0\n 72728: a4 = a0 + 0x20\n 72731: u64 [s1 + 0xf8] = a4\n 72735: u64 [s1 + 0xd8] = a0\n 72739: a0 = a4 <u a0\n 72742: a4 = a1 + a0\n 72745: u64 [s1 + 0x100] = a4\n 72749: u64 [s1 + 0xe0] = a1\n 72753: a1 = a4 <u a1\n 72756: a1 = a0 if a0 == 0\n 72759: a1 = a1 + a3\n 72762: u64 [s1 + 0x108] = a1\n 72766: u64 [s1 + 0xe8] = a3\n 72770: a0 = a1 <u a3\n 72773: u64 [s1 + 0xf0] = a2\n 72777: a0 = a0 + a2\n 72780: u64 [s1 + 0x110] = a0\n 72784: i32 a0 = t2 + 0\n 72786: a1 = 0x20\n 72789: u64 [s1 + 0x118] = a0\n 72793: ra = 802, jump @0\n      : @913 [@dyn 401] (gas: 13)\n 72800: a1 = u64 [s1 + 0xf8]\n 72804: t2 = a1\n 72806: a3 = u64 [s1 + 0x108]\n 72810: a1 = a1 | a3\n 72813: a2 = u64 [s1 + 0x100]\n 72817: a4 = u64 [s1 + 0x110]\n 72821: a2 = a2 | a4\n 72824: a1 = a1 | a2\n 72827: a1 = a1 >> 0x20\n 72830: a2 = a2 | a3\n 72833: a2 = a2 << 0x20\n 72836: a1 = a1 | a2\n 72839: jump @915 if a1 == 0\n      : @914 (gas: 1)\n 72842: jump @951\n      : @915 (gas: 10)\n 72845: a1 = u64 [s1 + 0xc0]\n 72849: a2 = u64 [s1 + 0xb8]\n 72853: a1 = a1 | a2\n 72856: a2 = 0xffffffe0\n 72866: a3 = u64 [s1 + 0xc8]\n 72870: a2 = a3 <u a2\n 72873: a3 = u64 [s1 + 0xd0]\n 72877: a2 = 0 if a3 != 0\n 72879: a2 = 0 if a1 != 0\n 72881: jump @917 if a2 != 0\n      : @916 (gas: 1)\n 72884: jump @951\n      : @917 (gas: 107)\n 72887: a1 = u8 [a0 + 0x19]\n 72890: a2 = u8 [a0 + 0x18]\n 72893: a3 = u8 [a0 + 0x1a]\n 72896: a4 = u8 [a0 + 0x1b]\n 72899: a1 = a1 << 0x8\n 72902: a1 = a1 | a2\n 72905: a3 = a3 << 0x10\n 72908: a4 = a4 << 0x18\n 72911: a3 = a3 | a4\n 72914: a1 = a1 | a3\n 72917: a2 = u8 [a0 + 0x1d]\n 72920: a3 = u8 [a0 + 0x1c]\n 72923: a4 = u8 [a0 + 0x1e]\n 72926: a5 = u8 [a0 + 0x1f]\n 72929: a2 = a2 << 0x8\n 72932: a2 = a2 | a3\n 72935: a4 = a4 << 0x10\n 72938: a5 = a5 << 0x18\n 72941: a4 = a4 | a5\n 72944: a2 = a2 | a4\n 72947: a2 = a2 << 0x20\n 72950: t0 = a2 | a1\n 72953: a1 = u8 [a0 + 0x11]\n 72956: a2 = u8 [a0 + 0x10]\n 72959: a3 = u8 [a0 + 0x12]\n 72962: a4 = u8 [a0 + 0x13]\n 72965: a1 = a1 << 0x8\n 72968: a1 = a1 | a2\n 72971: a3 = a3 << 0x10\n 72974: a4 = a4 << 0x18\n 72977: a3 = a3 | a4\n 72980: a1 = a1 | a3\n 72983: a2 = u8 [a0 + 0x15]\n 72986: a3 = u8 [a0 + 0x14]\n 72989: a4 = u8 [a0 + 0x16]\n 72992: a5 = u8 [a0 + 0x17]\n 72995: a2 = a2 << 0x8\n 72998: a2 = a2 | a3\n 73001: a4 = a4 << 0x10\n 73004: a5 = a5 << 0x18\n 73007: a4 = a4 | a5\n 73010: a2 = a2 | a4\n 73013: a2 = a2 << 0x20\n 73016: t1 = a2 | a1\n 73019: a1 = u8 [a0 + 0x9]\n 73022: a2 = u8 [a0 + 0x8]\n 73025: a3 = u8 [a0 + 0xa]\n 73028: a4 = u8 [a0 + 0xb]\n 73031: a1 = a1 << 0x8\n 73034: a1 = a1 | a2\n 73037: a3 = a3 << 0x10\n 73040: a4 = a4 << 0x18\n 73043: a3 = a3 | a4\n 73046: a1 = a1 | a3\n 73049: a2 = u8 [a0 + 0xd]\n 73052: a3 = u8 [a0 + 0xc]\n 73055: a4 = u8 [a0 + 0xe]\n 73058: a5 = u8 [a0 + 0xf]\n 73061: a2 = a2 << 0x8\n 73064: a2 = a2 | a3\n 73067: a4 = a4 << 0x10\n 73070: a5 = a5 << 0x18\n 73073: a4 = a4 | a5\n 73076: a2 = a2 | a4\n 73079: a2 = a2 << 0x20\n 73082: a5 = a2 | a1\n 73085: a1 = u8 [a0 + 0x1]\n 73088: a2 = u8 [a0]\n 73090: a3 = u8 [a0 + 0x2]\n 73093: a4 = u8 [a0 + 0x3]\n 73096: a1 = a1 << 0x8\n 73099: a1 = a1 | a2\n 73102: a3 = a3 << 0x10\n 73105: a4 = a4 << 0x18\n 73108: a3 = a3 | a4\n 73111: a1 = a1 | a3\n 73114: a2 = u8 [a0 + 0x5]\n 73117: a3 = u8 [a0 + 0x4]\n 73120: a4 = u8 [a0 + 0x6]\n 73123: a0 = u8 [a0 + 0x7]\n 73126: a2 = a2 << 0x8\n 73129: a2 = a2 | a3\n 73132: a4 = a4 << 0x10\n 73135: a0 = a0 << 0x18\n 73138: a0 = a0 | a4\n 73141: a0 = a0 | a2\n 73144: a0 = a0 << 0x20\n 73147: a0 = a0 | a1\n 73150: u64 [s1 + 0x20] = a0\n 73153: a1 = reverse a0\n 73155: u64 [s1 + 0x30] = a5\n 73158: a3 = reverse a5\n 73160: u64 [s1 + 0x38] = t1\n 73163: a4 = reverse t1\n 73165: u64 [s1 + 0x40] = t0\n 73168: a2 = reverse t0\n 73170: a0 = a2 | a3\n 73173: u64 [s1 + 0xd0] = a1\n 73177: u64 [s1 + 0xc0] = a4\n 73181: a1 = a1 | a4\n 73184: a0 = a0 | a1\n 73187: a0 = a0 >> 0x20\n 73190: u64 [s1 + 0xc8] = a3\n 73194: a1 = a1 | a3\n 73197: a1 = a1 << 0x20\n 73200: a0 = a0 | a1\n 73203: jump @951 if a0 != 0\n      : @918 (gas: 9)\n 73207: i32 a0 = t2 + 0\n 73209: a1 = u64 [s1 + 0x118]\n 73213: i32 a1 = a1 + 0x20\n 73216: u64 [s1 + 0xb8] = a1\n 73220: i32 a1 = a2 + 0\n 73222: u64 [s1 + 0x48] = a1\n 73225: u64 [s1 + 0x18] = a0\n 73228: u64 [s1 + 0x118] = a2\n 73232: ra = 804, jump @0\n      : @919 [@dyn 402] (gas: 4)\n 73239: u64 [s1 + 0x50] = a0\n 73242: a0 = u64 [s1 + 0xb8]\n 73246: a1 = u64 [s1 + 0x48]\n 73249: ra = 806, jump @0\n      : @920 [@dyn 403] (gas: 4)\n 73256: a1 = a0\n 73258: a0 = u64 [s1 + 0x50]\n 73261: a2 = u64 [s1 + 0x118]\n 73265: ra = 808, jump @8\n      : @921 [@dyn 404] (gas: 30)\n 73272: a0 = u64 [s1 + 0xf8]\n 73276: a1 = u64 [s1 + 0x118]\n 73280: a0 = a0 + a1\n 73283: a1 = a0 <u a1\n 73286: a2 = u64 [s1 + 0x100]\n 73290: a4 = u64 [s1 + 0xc0]\n 73294: a2 = a2 + a4\n 73297: a2 = a2 + a1\n 73300: a3 = a2 ^ a4\n 73303: a4 = a2 <u a4\n 73306: a4 = a1 if a3 == 0\n 73309: a1 = u64 [s1 + 0x108]\n 73313: a3 = u64 [s1 + 0xc8]\n 73317: a1 = a1 + a3\n 73320: a4 = a4 + a1\n 73323: t0 = a4 <u a1\n 73326: a1 = a1 <u a3\n 73329: a5 = u64 [s1 + 0x110]\n 73333: a3 = u64 [s1 + 0xd0]\n 73337: a5 = a5 + a3\n 73340: a1 = a1 + a5\n 73343: a1 = a1 + t0\n 73346: a3 = a0 | a4\n 73349: a1 = a1 | a2\n 73352: a3 = a3 | a1\n 73355: a3 = a3 >> 0x20\n 73358: a1 = a1 | a4\n 73361: a1 = a1 << 0x20\n 73364: a1 = a1 | a3\n 73367: jump @951 if a1 != 0\n      : @922 (gas: 3)\n 73371: i32 a0 = a0 + 0\n 73373: a1 = 0x20\n 73376: ra = 810, jump @0\n      : @923 [@dyn 405] (gas: 44)\n 73383: a4 = u64 [s1 + 0xe8]\n 73387: a3 = u64 [s1 + 0xd8]\n 73391: a1 = a3 | a4\n 73394: a2 = u64 [s1 + 0xf0]\n 73398: a5 = u64 [s1 + 0xe0]\n 73402: a2 = a2 | a5\n 73405: a1 = a1 | a2\n 73408: a1 = a1 >> 0x20\n 73411: a2 = a2 | a4\n 73414: a2 = a2 << 0x20\n 73417: a1 = a1 | a2\n 73420: u8 [a0 + 31] = 0\n 73423: u8 [a0 + 30] = 0\n 73426: u8 [a0 + 29] = 0\n 73429: u8 [a0 + 28] = 0\n 73432: u8 [a0 + 27] = 0\n 73435: u8 [a0 + 26] = 0\n 73438: u8 [a0 + 25] = 0\n 73441: u8 [a0 + 24] = 0\n 73444: u8 [a0 + 23] = 0\n 73447: u8 [a0 + 22] = 0\n 73450: u8 [a0 + 21] = 0\n 73453: u8 [a0 + 20] = 0\n 73456: u8 [a0 + 19] = 0\n 73459: u8 [a0 + 18] = 0\n 73462: u8 [a0 + 17] = 0\n 73465: u8 [a0 + 16] = 0\n 73468: u8 [a0 + 15] = 0\n 73471: u8 [a0 + 14] = 0\n 73474: u8 [a0 + 13] = 0\n 73477: u8 [a0 + 12] = 0\n 73480: u8 [a0 + 11] = 0\n 73483: u8 [a0 + 10] = 0\n 73486: u8 [a0 + 9] = 0\n 73489: u8 [a0 + 8] = 0\n 73492: u8 [a0 + 7] = 0\n 73495: u8 [a0 + 6] = 0\n 73498: u8 [a0 + 5] = 0\n 73501: u8 [a0 + 4] = 0\n 73504: u8 [a0 + 3] = 0\n 73507: u8 [a0 + 2] = 0\n 73510: u8 [a0 + 1] = 0\n 73513: u8 [a0 + 0] = 0\n 73515: jump @951 if a1 != 0\n      : @924 (gas: 4)\n 73519: i32 a0 = a3 + 0\n 73521: u64 [s1 + 0x110] = a0\n 73525: a1 = 0x20\n 73528: ra = 812, jump @0\n      : @925 [@dyn 406] (gas: 86)\n 73535: a2 = u64 [s1 + 0x30]\n 73538: a1 = a2 >> 0x38\n 73541: u8 [a0 + 0xf] = a1\n 73544: a1 = a2 >> 0x30\n 73547: u8 [a0 + 0xe] = a1\n 73550: a1 = a2 >> 0x28\n 73553: u8 [a0 + 0xd] = a1\n 73556: a1 = a2 >> 0x20\n 73559: u8 [a0 + 0xc] = a1\n 73562: a1 = a2 >> 0x18\n 73565: u8 [a0 + 0xb] = a1\n 73568: a1 = a2 >> 0x10\n 73571: u8 [a0 + 0xa] = a1\n 73574: a1 = a2 >> 0x8\n 73577: u8 [a0 + 0x9] = a1\n 73580: u8 [a0 + 0x8] = a2\n 73583: a2 = u64 [s1 + 0x20]\n 73586: a1 = a2 >> 0x38\n 73589: u8 [a0 + 0x7] = a1\n 73592: a1 = a2 >> 0x30\n 73595: u8 [a0 + 0x6] = a1\n 73598: a1 = a2 >> 0x28\n 73601: u8 [a0 + 0x5] = a1\n 73604: a1 = a2 >> 0x20\n 73607: u8 [a0 + 0x4] = a1\n 73610: a1 = a2 >> 0x18\n 73613: u8 [a0 + 0x3] = a1\n 73616: a1 = a2 >> 0x10\n 73619: u8 [a0 + 0x2] = a1\n 73622: a1 = a2 >> 0x8\n 73625: u8 [a0 + 0x1] = a1\n 73628: u8 [a0] = a2\n 73630: a2 = u64 [s1 + 0x38]\n 73633: a1 = a2 >> 0x38\n 73636: u8 [a0 + 0x17] = a1\n 73639: a1 = a2 >> 0x30\n 73642: u8 [a0 + 0x16] = a1\n 73645: a1 = a2 >> 0x28\n 73648: u8 [a0 + 0x15] = a1\n 73651: a1 = a2 >> 0x20\n 73654: u8 [a0 + 0x14] = a1\n 73657: a1 = a2 >> 0x18\n 73660: u8 [a0 + 0x13] = a1\n 73663: a1 = a2 >> 0x10\n 73666: u8 [a0 + 0x12] = a1\n 73669: u8 [a0 + 0x10] = a2\n 73672: a1 = a2 >> 0x8\n 73675: u8 [a0 + 0x11] = a1\n 73678: a2 = u64 [s1 + 0x40]\n 73681: a1 = a2 >> 0x38\n 73684: u8 [a0 + 0x1f] = a1\n 73687: a1 = a2 >> 0x30\n 73690: u8 [a0 + 0x1e] = a1\n 73693: a1 = a2 >> 0x28\n 73696: u8 [a0 + 0x1d] = a1\n 73699: a1 = a2 >> 0x20\n 73702: u8 [a0 + 0x1c] = a1\n 73705: a1 = a2 >> 0x18\n 73708: u8 [a0 + 0x1b] = a1\n 73711: a1 = a2 >> 0x10\n 73714: u8 [a0 + 0x1a] = a1\n 73717: u8 [a0 + 0x18] = a2\n 73720: a1 = a2 >> 0x8\n 73723: u8 [a0 + 0x19] = a1\n 73726: a0 = u64 [s1 + 0x118]\n 73730: a0 = a0 + 0x3f\n 73733: a1 = 0x1ffffffe0\n 73743: a0 = a0 & a1\n 73746: a1 = u64 [s1 + 0xd8]\n 73750: a1 = a1 + a0\n 73753: u64 [s1 + 0x118] = a1\n 73757: a0 = a1 <u a0\n 73760: a1 = u64 [s1 + 0xe0]\n 73764: a1 = a1 + a0\n 73767: u64 [s1 + 0x108] = a1\n 73771: a0 = 0 if a1 != 0\n 73773: a1 = u64 [s1 + 0xe8]\n 73777: a0 = a0 + a1\n 73780: u64 [s1 + 0x100] = a0\n 73784: a0 = a0 <u a1\n 73787: a1 = u64 [s1 + 0xf0]\n 73791: a0 = a0 + a1\n 73794: u64 [s1 + 0xf8] = a0\n 73798: a0 = 0x40\n 73801: a1 = 0x20\n 73804: ra = 814, jump @0\n      : @926 [@dyn 407] (gas: 71)\n 73811: a1 = u64 [s1 + 0xf8]\n 73815: a1 = reverse a1\n 73817: a2 = u64 [s1 + 0x100]\n 73821: a2 = reverse a2\n 73823: a3 = u64 [s1 + 0x108]\n 73827: a3 = reverse a3\n 73829: a4 = u64 [s1 + 0x118]\n 73833: a4 = reverse a4\n 73835: a5 = a4 >> 0x38\n 73838: u8 [a0 + 0x1f] = a5\n 73841: a5 = a4 >> 0x30\n 73844: u8 [a0 + 0x1e] = a5\n 73847: a5 = a4 >> 0x28\n 73850: u8 [a0 + 0x1d] = a5\n 73853: a5 = a4 >> 0x20\n 73856: u8 [a0 + 0x1c] = a5\n 73859: a5 = a4 >> 0x18\n 73862: u8 [a0 + 0x1b] = a5\n 73865: a5 = a4 >> 0x10\n 73868: u8 [a0 + 0x1a] = a5\n 73871: a5 = a4 >> 0x8\n 73874: u8 [a0 + 0x19] = a5\n 73877: u8 [a0 + 0x18] = a4\n 73880: u8 [a0 + 0x10] = a3\n 73883: a4 = a3 >> 0x38\n 73886: u8 [a0 + 0x17] = a4\n 73889: a4 = a3 >> 0x30\n 73892: u8 [a0 + 0x16] = a4\n 73895: a4 = a3 >> 0x28\n 73898: u8 [a0 + 0x15] = a4\n 73901: a4 = a3 >> 0x20\n 73904: u8 [a0 + 0x14] = a4\n 73907: a4 = a3 >> 0x18\n 73910: u8 [a0 + 0x13] = a4\n 73913: a4 = a3 >> 0x10\n 73916: u8 [a0 + 0x12] = a4\n 73919: a3 = a3 >> 0x8\n 73922: u8 [a0 + 0x11] = a3\n 73925: u8 [a0 + 0x8] = a2\n 73928: a3 = a2 >> 0x38\n 73931: u8 [a0 + 0xf] = a3\n 73934: a3 = a2 >> 0x30\n 73937: u8 [a0 + 0xe] = a3\n 73940: a3 = a2 >> 0x28\n 73943: u8 [a0 + 0xd] = a3\n 73946: a3 = a2 >> 0x20\n 73949: u8 [a0 + 0xc] = a3\n 73952: a3 = a2 >> 0x18\n 73955: u8 [a0 + 0xb] = a3\n 73958: a3 = a2 >> 0x10\n 73961: u8 [a0 + 0xa] = a3\n 73964: a2 = a2 >> 0x8\n 73967: u8 [a0 + 0x9] = a2\n 73970: u8 [a0] = a1\n 73972: a2 = a1 >> 0x38\n 73975: u8 [a0 + 0x7] = a2\n 73978: a2 = a1 >> 0x30\n 73981: u8 [a0 + 0x6] = a2\n 73984: a2 = a1 >> 0x28\n 73987: u8 [a0 + 0x5] = a2\n 73990: a2 = a1 >> 0x20\n 73993: u8 [a0 + 0x4] = a2\n 73996: a2 = a1 >> 0x18\n 73999: u8 [a0 + 0x3] = a2\n 74002: a2 = a1 >> 0x10\n 74005: u8 [a0 + 0x2] = a2\n 74008: a1 = a1 >> 0x8\n 74011: u8 [a0 + 0x1] = a1\n 74014: a1 = 0x20\n 74017: a0 = u64 [s1 + 0x110]\n 74021: ra = 816, jump @0\n      : @927 [@dyn 408] (gas: 100)\n 74028: a1 = u8 [a0 + 0x11]\n 74031: a2 = u8 [a0 + 0x10]\n 74034: a3 = u8 [a0 + 0x12]\n 74037: a4 = u8 [a0 + 0x13]\n 74040: a1 = a1 << 0x8\n 74043: a1 = a1 | a2\n 74046: a3 = a3 << 0x10\n 74049: a4 = a4 << 0x18\n 74052: a3 = a3 | a4\n 74055: a1 = a1 | a3\n 74058: a2 = u8 [a0 + 0x15]\n 74061: a3 = u8 [a0 + 0x14]\n 74064: a4 = u8 [a0 + 0x16]\n 74067: a5 = u8 [a0 + 0x17]\n 74070: a2 = a2 << 0x8\n 74073: a2 = a2 | a3\n 74076: a4 = a4 << 0x10\n 74079: a5 = a5 << 0x18\n 74082: a4 = a4 | a5\n 74085: a2 = a2 | a4\n 74088: a2 = a2 << 0x20\n 74091: t0 = a2 | a1\n 74094: a2 = u8 [a0 + 0x1]\n 74097: a3 = u8 [a0]\n 74099: a4 = u8 [a0 + 0x2]\n 74102: a5 = u8 [a0 + 0x3]\n 74105: a2 = a2 << 0x8\n 74108: a2 = a2 | a3\n 74111: a4 = a4 << 0x10\n 74114: a5 = a5 << 0x18\n 74117: a4 = a4 | a5\n 74120: a2 = a2 | a4\n 74123: a3 = u8 [a0 + 0x5]\n 74126: a4 = u8 [a0 + 0x4]\n 74129: a5 = u8 [a0 + 0x6]\n 74132: a1 = u8 [a0 + 0x7]\n 74135: a3 = a3 << 0x8\n 74138: a3 = a3 | a4\n 74141: a5 = a5 << 0x10\n 74144: a1 = a1 << 0x18\n 74147: a1 = a1 | a5\n 74150: a1 = a1 | a3\n 74153: a1 = a1 << 0x20\n 74156: t1 = a1 | a2\n 74159: a1 = u8 [a0 + 0x19]\n 74162: a3 = u8 [a0 + 0x18]\n 74165: a4 = u8 [a0 + 0x1a]\n 74168: a5 = u8 [a0 + 0x1b]\n 74171: a1 = a1 << 0x8\n 74174: a1 = a1 | a3\n 74177: a4 = a4 << 0x10\n 74180: a5 = a5 << 0x18\n 74183: a4 = a4 | a5\n 74186: a1 = a1 | a4\n 74189: a3 = u8 [a0 + 0x1d]\n 74192: a4 = u8 [a0 + 0x1c]\n 74195: a5 = u8 [a0 + 0x1e]\n 74198: a2 = u8 [a0 + 0x1f]\n 74201: a3 = a3 << 0x8\n 74204: a3 = a3 | a4\n 74207: a5 = a5 << 0x10\n 74210: a2 = a2 << 0x18\n 74213: a2 = a2 | a5\n 74216: a2 = a2 | a3\n 74219: a2 = a2 << 0x20\n 74222: a3 = a2 | a1\n 74225: a1 = u8 [a0 + 0x9]\n 74228: a2 = u8 [a0 + 0x8]\n 74231: a4 = u8 [a0 + 0xa]\n 74234: a5 = u8 [a0 + 0xb]\n 74237: a1 = a1 << 0x8\n 74240: a1 = a1 | a2\n 74243: a4 = a4 << 0x10\n 74246: a5 = a5 << 0x18\n 74249: a4 = a4 | a5\n 74252: a1 = a1 | a4\n 74255: a2 = u8 [a0 + 0xd]\n 74258: a4 = u8 [a0 + 0xc]\n 74261: a5 = u8 [a0 + 0xe]\n 74264: a0 = u8 [a0 + 0xf]\n 74267: a2 = a2 << 0x8\n 74270: a2 = a2 | a4\n 74273: a5 = a5 << 0x10\n 74276: a0 = a0 << 0x18\n 74279: a0 = a0 | a5\n 74282: a0 = a0 | a2\n 74285: a0 = a0 << 0x20\n 74288: a0 = a0 | a1\n 74291: a1 = reverse a0\n 74293: a0 = reverse a3\n 74295: a2 = reverse t1\n 74297: a3 = reverse t0\n 74299: a2 = a2 | a3\n 74302: a3 = a0 | a1\n 74305: a3 = a3 | a2\n 74308: a3 = a3 >> 0x20\n 74311: a1 = a1 | a2\n 74314: a1 = a1 << 0x20\n 74317: a1 = a1 | a3\n 74320: jump @951 if a1 != 0\n      : @928 (gas: 4)\n 74324: i32 a1 = a0 + 0\n 74326: u64 [s1 + 0x118] = a1\n 74330: a0 = u64 [s1 + 0x18]\n 74333: ra = 818, jump @0\n      : @929 [@dyn 409] (gas: 9)\n 74340: a1 = sp + 0xffffffffffffffe0\n 74343: a1 = a1 & 0xffffffffffffffe0\n 74346: u64 [s1 + 0x110] = a1\n 74350: sp = a1\n 74352: i32 a0 = a0 + 0\n 74354: i32 a2 = a1 + 0\n 74356: a1 = u64 [s1 + 0x118]\n 74360: ecalli 8 // 'hash_keccak_256'\n 74362: fallthrough\n      : @930 (gas: 17)\n 74363: a3 = u64 [s1 + 0x110]\n 74367: a0 = u64 [a3 + 0x18]\n 74370: a1 = u64 [a3 + 0x8]\n 74373: a2 = u64 [a3]\n 74375: a3 = u64 [a3 + 0x10]\n 74378: a4 = u64 [s1 + 0x60]\n 74381: a0 = a0 ^ a4\n 74384: a4 = u64 [s1 + 0x58]\n 74387: a1 = a1 ^ a4\n 74390: a0 = a0 | a1\n 74393: a1 = u64 [s1 + 0x70]\n 74396: a1 = a1 ^ a3\n 74399: a3 = u64 [s1 + 0x68]\n 74402: a2 = a2 ^ a3\n 74405: a1 = a1 | a2\n 74408: a0 = a0 | a1\n 74411: jump @945 if a0 != 0\n      : @931 (gas: 54)\n 74415: a0 = u64 [s1 + 0x80]\n 74419: u64 [s1 + 0x350] = a0\n 74423: a0 = u64 [s1 + 0x88]\n 74427: u64 [s1 + 0x348] = a0\n 74431: a0 = u64 [s1 + 0x90]\n 74435: u64 [s1 + 0x340] = a0\n 74439: a0 = u64 [s1 + 0x78]\n 74442: u64 [s1 + 0x358] = a0\n 74446: u64 [s1 + 888] = 0\n 74450: u64 [s1 + 880] = 0\n 74454: u64 [s1 + 872] = 0\n 74458: u64 [s1 + 864] = 0\n 74462: u32 [s1 + 800] = 0x20\n 74467: i32 a1 = s1 + 0x340\n 74471: i32 a3 = s1 + 0x360\n 74475: i32 a4 = s1 + 0x320\n 74479: a2 = 0xffffffffffffffff\n 74482: a0 = 0\n 74484: ecalli 7 // 'get_storage'\n 74486: a0 = u64 [s1 + 0x368]\n 74490: a1 = u64 [s1 + 0x370]\n 74494: a2 = u64 [s1 + 0x360]\n 74498: a3 = u64 [s1 + 0x378]\n 74502: a2 = a2 & 0xffffffffffff00ff\n 74507: a2 = a2 | 0x100\n 74511: a4 = u64 [s1 + 0x78]\n 74514: u64 [s1 + 0x358] = a4\n 74518: a4 = u64 [s1 + 0x80]\n 74522: u64 [s1 + 0x350] = a4\n 74526: a4 = u64 [s1 + 0x88]\n 74530: u64 [s1 + 0x348] = a4\n 74534: a4 = u64 [s1 + 0x90]\n 74538: u64 [s1 + 0x340] = a4\n 74542: u64 [s1 + 0x378] = a3\n 74546: u64 [s1 + 0x370] = a1\n 74550: u64 [s1 + 0x368] = a0\n 74554: u64 [s1 + 0x360] = a2\n 74558: i32 a1 = s1 + 0x340\n 74562: i32 a3 = s1 + 0x360\n 74566: a2 = 0xffffffffffffffff\n 74569: a4 = 0x20\n 74572: a0 = 0\n 74574: ecalli 13 // 'set_storage'\n 74576: i32 a0 = s1 + 0x300\n 74580: ecalli 4 // 'caller'\n 74582: a0 = u32 [s1 + 0x310]\n 74586: u64 [s1 + 0x110] = a0\n 74590: a0 = u64 [s1 + 0x308]\n 74594: u64 [s1 + 0x108] = a0\n 74598: a0 = u64 [s1 + 0x300]\n 74602: u64 [s1 + 0x118] = a0\n 74606: a0 = 0x40\n 74609: a1 = 0x20\n 74612: ra = 820, jump @0\n      : @932 [@dyn 410] (gas: 100)\n 74619: a1 = u8 [a0 + 0x11]\n 74622: a2 = u8 [a0 + 0x10]\n 74625: a3 = u8 [a0 + 0x12]\n 74628: a4 = u8 [a0 + 0x13]\n 74631: a1 = a1 << 0x8\n 74634: a1 = a1 | a2\n 74637: a3 = a3 << 0x10\n 74640: a4 = a4 << 0x18\n 74643: a3 = a3 | a4\n 74646: a1 = a1 | a3\n 74649: a2 = u8 [a0 + 0x15]\n 74652: a3 = u8 [a0 + 0x14]\n 74655: a4 = u8 [a0 + 0x16]\n 74658: a5 = u8 [a0 + 0x17]\n 74661: a2 = a2 << 0x8\n 74664: a2 = a2 | a3\n 74667: a4 = a4 << 0x10\n 74670: a5 = a5 << 0x18\n 74673: a4 = a4 | a5\n 74676: a2 = a2 | a4\n 74679: a2 = a2 << 0x20\n 74682: t0 = a2 | a1\n 74685: a2 = u8 [a0 + 0x1]\n 74688: a3 = u8 [a0]\n 74690: a4 = u8 [a0 + 0x2]\n 74693: a5 = u8 [a0 + 0x3]\n 74696: a2 = a2 << 0x8\n 74699: a2 = a2 | a3\n 74702: a4 = a4 << 0x10\n 74705: a5 = a5 << 0x18\n 74708: a4 = a4 | a5\n 74711: a2 = a2 | a4\n 74714: a3 = u8 [a0 + 0x5]\n 74717: a4 = u8 [a0 + 0x4]\n 74720: a5 = u8 [a0 + 0x6]\n 74723: a1 = u8 [a0 + 0x7]\n 74726: a3 = a3 << 0x8\n 74729: a3 = a3 | a4\n 74732: a5 = a5 << 0x10\n 74735: a1 = a1 << 0x18\n 74738: a1 = a1 | a5\n 74741: a1 = a1 | a3\n 74744: a1 = a1 << 0x20\n 74747: t1 = a1 | a2\n 74750: a1 = u8 [a0 + 0x19]\n 74753: a3 = u8 [a0 + 0x18]\n 74756: a4 = u8 [a0 + 0x1a]\n 74759: a5 = u8 [a0 + 0x1b]\n 74762: a1 = a1 << 0x8\n 74765: a1 = a1 | a3\n 74768: a4 = a4 << 0x10\n 74771: a5 = a5 << 0x18\n 74774: a4 = a4 | a5\n 74777: a1 = a1 | a4\n 74780: a3 = u8 [a0 + 0x1d]\n 74783: a4 = u8 [a0 + 0x1c]\n 74786: a5 = u8 [a0 + 0x1e]\n 74789: a2 = u8 [a0 + 0x1f]\n 74792: a3 = a3 << 0x8\n 74795: a3 = a3 | a4\n 74798: a5 = a5 << 0x10\n 74801: a2 = a2 << 0x18\n 74804: a2 = a2 | a5\n 74807: a2 = a2 | a3\n 74810: a2 = a2 << 0x20\n 74813: a3 = a2 | a1\n 74816: a1 = u8 [a0 + 0x9]\n 74819: a2 = u8 [a0 + 0x8]\n 74822: a4 = u8 [a0 + 0xa]\n 74825: a5 = u8 [a0 + 0xb]\n 74828: a1 = a1 << 0x8\n 74831: a1 = a1 | a2\n 74834: a4 = a4 << 0x10\n 74837: a5 = a5 << 0x18\n 74840: a4 = a4 | a5\n 74843: a1 = a1 | a4\n 74846: a2 = u8 [a0 + 0xd]\n 74849: a4 = u8 [a0 + 0xc]\n 74852: a5 = u8 [a0 + 0xe]\n 74855: a0 = u8 [a0 + 0xf]\n 74858: a2 = a2 << 0x8\n 74861: a2 = a2 | a4\n 74864: a5 = a5 << 0x10\n 74867: a0 = a0 << 0x18\n 74870: a0 = a0 | a5\n 74873: a0 = a0 | a2\n 74876: a0 = a0 << 0x20\n 74879: a0 = a0 | a1\n 74882: a1 = reverse a0\n 74884: a0 = reverse a3\n 74886: a2 = reverse t1\n 74888: a3 = reverse t0\n 74890: a2 = a2 | a3\n 74893: a3 = a0 | a1\n 74896: a3 = a3 | a2\n 74899: a3 = a3 >> 0x20\n 74902: a1 = a1 | a2\n 74905: a1 = a1 << 0x20\n 74908: a1 = a1 | a3\n 74911: jump @951 if a1 != 0\n      : @933 (gas: 17)\n 74915: a1 = u64 [s1 + 0x118]\n 74919: a1 = reverse a1\n 74921: a1 = a1 << 0x20\n 74924: a2 = u64 [s1 + 0x108]\n 74928: a2 = reverse a2\n 74930: a3 = a2 >> 0x20\n 74933: a1 = a1 | a3\n 74936: u64 [s1 + 0x108] = a1\n 74940: a2 = a2 << 0x20\n 74943: a1 = u64 [s1 + 0x110]\n 74947: a1 = reverse a1\n 74949: a1 = a1 >> 0x20\n 74952: a1 = a1 | a2\n 74955: u64 [s1 + 0x110] = a1\n 74959: i32 a0 = a0 + 0\n 74961: a1 = 0\n 74963: ra = 822, jump @0\n      : @934 [@dyn 411] (gas: 47)\n 74970: a1 = u64 [0x20040]\n 74975: a2 = u64 [0x20048]\n 74980: a3 = u64 [0x20050]\n 74985: a4 = u64 [0x20058]\n 74990: u64 [s1 + 0x378] = a1\n 74994: u64 [s1 + 0x370] = a2\n 74998: u64 [s1 + 0x368] = a3\n 75002: u64 [s1 + 0x360] = a4\n 75006: a1 = u64 [s1 + 0x98]\n 75010: a1 = reverse a1\n 75012: a2 = u64 [s1 + 0xa0]\n 75016: a2 = reverse a2\n 75018: a3 = u64 [s1 + 0xa8]\n 75022: a3 = reverse a3\n 75024: a4 = u64 [s1 + 0xb0]\n 75028: a4 = reverse a4\n 75030: u64 [s1 + 0x398] = a4\n 75034: u64 [s1 + 0x390] = a3\n 75038: u64 [s1 + 0x388] = a2\n 75042: u64 [s1 + 0x380] = a1\n 75046: a1 = u64 [s1 + 0x110]\n 75050: a1 = reverse a1\n 75052: a2 = u64 [s1 + 0x108]\n 75056: a2 = reverse a2\n 75058: a3 = u64 [s1 + 0x118]\n 75062: a3 = a3 << 0x20\n 75065: u64 [s1 + 0x3a8] = a3\n 75069: u64 [s1 + 928] = 0\n 75073: u64 [s1 + 0x3b0] = a2\n 75077: u64 [s1 + 0x3b8] = a1\n 75081: i32 a2 = a0 + 0\n 75083: i32 a0 = s1 + 0x360\n 75087: a1 = 0x3\n 75090: a3 = 0\n 75092: ecalli 6 // 'deposit_event'\n 75094: a1 = u64 [s1 + 0x28]\n 75097: u64 [a1 + 24] = 0\n 75100: u64 [a1 + 16] = 0\n 75103: u64 [a1 + 8] = 0\n 75106: a0 = 0x1\n 75109: u64 [a1] = a0\n 75111: sp = s0 + 0xfffffffffffffc20\n 75115: ra = u64 [sp + 0x3d8]\n 75119: s0 = u64 [sp + 0x3d0]\n 75123: s1 = u64 [sp + 0x3c8]\n 75127: sp = sp + 0x3e0\n 75131: ret\n      : @935 (gas: 3)\n 75133: a0 = 0x40\n 75136: a1 = 0x20\n 75139: ra = 824, jump @0\n      : @936 [@dyn 412] (gas: 104)\n 75146: a1 = u8 [a0 + 0x11]\n 75149: a2 = u8 [a0 + 0x10]\n 75152: a3 = u8 [a0 + 0x12]\n 75155: a4 = u8 [a0 + 0x13]\n 75158: a1 = a1 << 0x8\n 75161: a1 = a1 | a2\n 75164: a3 = a3 << 0x10\n 75167: a4 = a4 << 0x18\n 75170: a3 = a3 | a4\n 75173: a1 = a1 | a3\n 75176: a2 = u8 [a0 + 0x15]\n 75179: a3 = u8 [a0 + 0x14]\n 75182: a4 = u8 [a0 + 0x16]\n 75185: a5 = u8 [a0 + 0x17]\n 75188: a2 = a2 << 0x8\n 75191: a2 = a2 | a3\n 75194: a4 = a4 << 0x10\n 75197: a5 = a5 << 0x18\n 75200: a4 = a4 | a5\n 75203: a2 = a2 | a4\n 75206: a2 = a2 << 0x20\n 75209: t0 = a2 | a1\n 75212: a2 = u8 [a0 + 0x1]\n 75215: a3 = u8 [a0]\n 75217: a4 = u8 [a0 + 0x2]\n 75220: a5 = u8 [a0 + 0x3]\n 75223: a2 = a2 << 0x8\n 75226: a2 = a2 | a3\n 75229: a4 = a4 << 0x10\n 75232: a5 = a5 << 0x18\n 75235: a4 = a4 | a5\n 75238: a2 = a2 | a4\n 75241: a3 = u8 [a0 + 0x5]\n 75244: a4 = u8 [a0 + 0x4]\n 75247: a5 = u8 [a0 + 0x6]\n 75250: a1 = u8 [a0 + 0x7]\n 75253: a3 = a3 << 0x8\n 75256: a3 = a3 | a4\n 75259: a5 = a5 << 0x10\n 75262: a1 = a1 << 0x18\n 75265: a1 = a1 | a5\n 75268: a1 = a1 | a3\n 75271: a1 = a1 << 0x20\n 75274: t1 = a1 | a2\n 75277: a1 = u8 [a0 + 0x19]\n 75280: a3 = u8 [a0 + 0x18]\n 75283: a4 = u8 [a0 + 0x1a]\n 75286: a5 = u8 [a0 + 0x1b]\n 75289: a1 = a1 << 0x8\n 75292: a1 = a1 | a3\n 75295: a4 = a4 << 0x10\n 75298: a5 = a5 << 0x18\n 75301: a4 = a4 | a5\n 75304: a1 = a1 | a4\n 75307: a3 = u8 [a0 + 0x1d]\n 75310: a4 = u8 [a0 + 0x1c]\n 75313: a5 = u8 [a0 + 0x1e]\n 75316: a2 = u8 [a0 + 0x1f]\n 75319: a3 = a3 << 0x8\n 75322: a3 = a3 | a4\n 75325: a5 = a5 << 0x10\n 75328: a2 = a2 << 0x18\n 75331: a2 = a2 | a5\n 75334: a2 = a2 | a3\n 75337: a2 = a2 << 0x20\n 75340: a3 = a2 | a1\n 75343: a1 = u8 [a0 + 0x9]\n 75346: a2 = u8 [a0 + 0x8]\n 75349: a4 = u8 [a0 + 0xa]\n 75352: a5 = u8 [a0 + 0xb]\n 75355: a1 = a1 << 0x8\n 75358: a1 = a1 | a2\n 75361: a4 = a4 << 0x10\n 75364: a5 = a5 << 0x18\n 75367: a4 = a4 | a5\n 75370: a1 = a1 | a4\n 75373: a2 = u8 [a0 + 0xd]\n 75376: a4 = u8 [a0 + 0xc]\n 75379: a5 = u8 [a0 + 0xe]\n 75382: a0 = u8 [a0 + 0xf]\n 75385: a2 = a2 << 0x8\n 75388: a2 = a2 | a4\n 75391: a5 = a5 << 0x10\n 75394: a0 = a0 << 0x18\n 75397: a0 = a0 | a5\n 75400: a0 = a0 | a2\n 75403: a0 = a0 << 0x20\n 75406: a0 = a0 | a1\n 75409: a4 = reverse a0\n 75411: a1 = reverse a3\n 75413: a2 = reverse t1\n 75415: a0 = reverse t0\n 75417: u64 [s1 + 0x118] = a0\n 75421: u64 [s1 + 0x108] = a2\n 75425: a0 = a0 | a2\n 75428: a2 = a1\n 75430: a1 = a1 | a4\n 75433: a1 = a1 | a0\n 75436: a1 = a1 >> 0x20\n 75439: u64 [s1 + 0x110] = a4\n 75443: a0 = a0 | a4\n 75446: a0 = a0 << 0x20\n 75449: a0 = a0 | a1\n 75452: jump @951 if a0 != 0\n      : @937 (gas: 5)\n 75456: u64 [s1 + 0x100] = a2\n 75460: i32 a0 = a2 + 0\n 75462: a1 = 0x20\n 75465: u64 [s1 + 0xf8] = a0\n 75469: ra = 826, jump @0\n      : @938 [@dyn 413] (gas: 51)\n 75476: u8 [a0 + 31] = 0\n 75479: u8 [a0 + 30] = 0\n 75482: u8 [a0 + 29] = 0\n 75485: u8 [a0 + 28] = 0\n 75488: u8 [a0 + 27] = 0\n 75491: u8 [a0 + 26] = 0\n 75494: u8 [a0 + 25] = 0\n 75497: u8 [a0 + 24] = 0\n 75500: u8 [a0 + 23] = 0\n 75503: u8 [a0 + 22] = 0\n 75506: u8 [a0 + 21] = 0\n 75509: u8 [a0 + 20] = 0\n 75512: u8 [a0 + 19] = 0\n 75515: u8 [a0 + 18] = 0\n 75518: u8 [a0 + 17] = 0\n 75521: u8 [a0 + 16] = 0\n 75524: u8 [a0 + 15] = 0\n 75527: u8 [a0 + 14] = 0\n 75530: u8 [a0 + 13] = 0\n 75533: u8 [a0 + 12] = 0\n 75536: u8 [a0 + 11] = 0\n 75539: u8 [a0 + 10] = 0\n 75542: u8 [a0 + 9] = 0\n 75545: u8 [a0 + 8] = 0\n 75548: u8 [a0 + 7] = 0\n 75551: u8 [a0 + 6] = 0\n 75554: u8 [a0 + 5] = 0\n 75557: u8 [a0 + 4] = 0\n 75560: u8 [a0 + 3] = 0xa0\n 75565: u8 [a0 + 2] = 0x79\n 75569: u8 [a0 + 1] = 0xc3\n 75574: u8 [a0 + 0] = 0x8\n 75577: a1 = u64 [s1 + 0x100]\n 75581: a0 = a1 + 0x4\n 75584: a1 = a0 <u a1\n 75587: a3 = u64 [s1 + 0x118]\n 75591: a2 = a3 + a1\n 75594: a3 = a2 <u a3\n 75597: a3 = a1 if a1 == 0\n 75600: a1 = u64 [s1 + 0x110]\n 75604: a3 = a3 + a1\n 75607: a1 = a3 <u a1\n 75610: a4 = u64 [s1 + 0x108]\n 75614: a4 = a4 + a1\n 75617: u64 [s1 + 0x2c8] = a2\n 75621: u64 [s1 + 0x2c0] = a0\n 75625: u64 [s1 + 0x2d0] = a3\n 75629: a0 = s1 + 0x2e0\n 75633: a1 = s1 + 0x2c0\n 75637: u64 [s1 + 0x2d8] = a4\n 75641: ra = 828, jump @731\n      : @939 [@dyn 414] (gas: 5)\n 75647: a0 = u64 [s1 + 0x2e8]\n 75651: t0 = u64 [s1 + 0x2f8]\n 75655: t1 = u64 [s1 + 0x2e0]\n 75659: a3 = u64 [s1 + 0x2f0]\n 75663: jump @950\n      : @940 (gas: 3)\n 75666: a0 = 0x40\n 75669: a1 = 0x20\n 75672: ra = 830, jump @0\n      : @941 [@dyn 415] (gas: 104)\n 75679: a1 = u8 [a0 + 0x11]\n 75682: a2 = u8 [a0 + 0x10]\n 75685: a3 = u8 [a0 + 0x12]\n 75688: a4 = u8 [a0 + 0x13]\n 75691: a1 = a1 << 0x8\n 75694: a1 = a1 | a2\n 75697: a3 = a3 << 0x10\n 75700: a4 = a4 << 0x18\n 75703: a3 = a3 | a4\n 75706: a1 = a1 | a3\n 75709: a2 = u8 [a0 + 0x15]\n 75712: a3 = u8 [a0 + 0x14]\n 75715: a4 = u8 [a0 + 0x16]\n 75718: a5 = u8 [a0 + 0x17]\n 75721: a2 = a2 << 0x8\n 75724: a2 = a2 | a3\n 75727: a4 = a4 << 0x10\n 75730: a5 = a5 << 0x18\n 75733: a4 = a4 | a5\n 75736: a2 = a2 | a4\n 75739: a2 = a2 << 0x20\n 75742: t0 = a2 | a1\n 75745: a2 = u8 [a0 + 0x1]\n 75748: a3 = u8 [a0]\n 75750: a4 = u8 [a0 + 0x2]\n 75753: a5 = u8 [a0 + 0x3]\n 75756: a2 = a2 << 0x8\n 75759: a2 = a2 | a3\n 75762: a4 = a4 << 0x10\n 75765: a5 = a5 << 0x18\n 75768: a4 = a4 | a5\n 75771: a2 = a2 | a4\n 75774: a3 = u8 [a0 + 0x5]\n 75777: a4 = u8 [a0 + 0x4]\n 75780: a5 = u8 [a0 + 0x6]\n 75783: a1 = u8 [a0 + 0x7]\n 75786: a3 = a3 << 0x8\n 75789: a3 = a3 | a4\n 75792: a5 = a5 << 0x10\n 75795: a1 = a1 << 0x18\n 75798: a1 = a1 | a5\n 75801: a1 = a1 | a3\n 75804: a1 = a1 << 0x20\n 75807: t1 = a1 | a2\n 75810: a1 = u8 [a0 + 0x19]\n 75813: a3 = u8 [a0 + 0x18]\n 75816: a4 = u8 [a0 + 0x1a]\n 75819: a5 = u8 [a0 + 0x1b]\n 75822: a1 = a1 << 0x8\n 75825: a1 = a1 | a3\n 75828: a4 = a4 << 0x10\n 75831: a5 = a5 << 0x18\n 75834: a4 = a4 | a5\n 75837: a1 = a1 | a4\n 75840: a3 = u8 [a0 + 0x1d]\n 75843: a4 = u8 [a0 + 0x1c]\n 75846: a5 = u8 [a0 + 0x1e]\n 75849: a2 = u8 [a0 + 0x1f]\n 75852: a3 = a3 << 0x8\n 75855: a3 = a3 | a4\n 75858: a5 = a5 << 0x10\n 75861: a2 = a2 << 0x18\n 75864: a2 = a2 | a5\n 75867: a2 = a2 | a3\n 75870: a2 = a2 << 0x20\n 75873: a3 = a2 | a1\n 75876: a1 = u8 [a0 + 0x9]\n 75879: a2 = u8 [a0 + 0x8]\n 75882: a4 = u8 [a0 + 0xa]\n 75885: a5 = u8 [a0 + 0xb]\n 75888: a1 = a1 << 0x8\n 75891: a1 = a1 | a2\n 75894: a4 = a4 << 0x10\n 75897: a5 = a5 << 0x18\n 75900: a4 = a4 | a5\n 75903: a1 = a1 | a4\n 75906: a2 = u8 [a0 + 0xd]\n 75909: a4 = u8 [a0 + 0xc]\n 75912: a5 = u8 [a0 + 0xe]\n 75915: a0 = u8 [a0 + 0xf]\n 75918: a2 = a2 << 0x8\n 75921: a2 = a2 | a4\n 75924: a5 = a5 << 0x10\n 75927: a0 = a0 << 0x18\n 75930: a0 = a0 | a5\n 75933: a0 = a0 | a2\n 75936: a0 = a0 << 0x20\n 75939: a0 = a0 | a1\n 75942: a4 = reverse a0\n 75944: a1 = reverse a3\n 75946: a2 = reverse t1\n 75948: a0 = reverse t0\n 75950: u64 [s1 + 0x118] = a0\n 75954: u64 [s1 + 0x108] = a2\n 75958: a0 = a0 | a2\n 75961: a2 = a1\n 75963: a1 = a1 | a4\n 75966: a1 = a1 | a0\n 75969: a1 = a1 >> 0x20\n 75972: u64 [s1 + 0x110] = a4\n 75976: a0 = a0 | a4\n 75979: a0 = a0 << 0x20\n 75982: a0 = a0 | a1\n 75985: jump @951 if a0 != 0\n      : @942 (gas: 5)\n 75989: u64 [s1 + 0x100] = a2\n 75993: i32 a0 = a2 + 0\n 75995: a1 = 0x20\n 75998: u64 [s1 + 0xf8] = a0\n 76002: ra = 832, jump @0\n      : @943 [@dyn 416] (gas: 51)\n 76009: u8 [a0 + 31] = 0\n 76012: u8 [a0 + 30] = 0\n 76015: u8 [a0 + 29] = 0\n 76018: u8 [a0 + 28] = 0\n 76021: u8 [a0 + 27] = 0\n 76024: u8 [a0 + 26] = 0\n 76027: u8 [a0 + 25] = 0\n 76030: u8 [a0 + 24] = 0\n 76033: u8 [a0 + 23] = 0\n 76036: u8 [a0 + 22] = 0\n 76039: u8 [a0 + 21] = 0\n 76042: u8 [a0 + 20] = 0\n 76045: u8 [a0 + 19] = 0\n 76048: u8 [a0 + 18] = 0\n 76051: u8 [a0 + 17] = 0\n 76054: u8 [a0 + 16] = 0\n 76057: u8 [a0 + 15] = 0\n 76060: u8 [a0 + 14] = 0\n 76063: u8 [a0 + 13] = 0\n 76066: u8 [a0 + 12] = 0\n 76069: u8 [a0 + 11] = 0\n 76072: u8 [a0 + 10] = 0\n 76075: u8 [a0 + 9] = 0\n 76078: u8 [a0 + 8] = 0\n 76081: u8 [a0 + 7] = 0\n 76084: u8 [a0 + 6] = 0\n 76087: u8 [a0 + 5] = 0\n 76090: u8 [a0 + 4] = 0\n 76093: u8 [a0 + 3] = 0xa0\n 76098: u8 [a0 + 2] = 0x79\n 76102: u8 [a0 + 1] = 0xc3\n 76107: u8 [a0 + 0] = 0x8\n 76110: a1 = u64 [s1 + 0x100]\n 76114: a0 = a1 + 0x4\n 76117: a1 = a0 <u a1\n 76120: a3 = u64 [s1 + 0x118]\n 76124: a2 = a3 + a1\n 76127: a3 = a2 <u a3\n 76130: a3 = a1 if a1 == 0\n 76133: a1 = u64 [s1 + 0x110]\n 76137: a3 = a3 + a1\n 76140: a1 = a3 <u a1\n 76143: a4 = u64 [s1 + 0x108]\n 76147: a4 = a4 + a1\n 76150: u64 [s1 + 0x208] = a2\n 76154: u64 [s1 + 0x200] = a0\n 76158: u64 [s1 + 0x210] = a3\n 76162: a0 = s1 + 0x220\n 76166: a1 = s1 + 0x200\n 76170: u64 [s1 + 0x218] = a4\n 76174: ra = 834, jump @848\n      : @944 [@dyn 417] (gas: 5)\n 76180: a0 = u64 [s1 + 0x228]\n 76184: t0 = u64 [s1 + 0x238]\n 76188: t1 = u64 [s1 + 0x220]\n 76192: a3 = u64 [s1 + 0x230]\n 76196: jump @950\n      : @945 (gas: 3)\n 76199: a0 = 0x40\n 76202: a1 = 0x20\n 76205: ra = 836, jump @0\n      : @946 [@dyn 418] (gas: 104)\n 76212: a1 = u8 [a0 + 0x11]\n 76215: a2 = u8 [a0 + 0x10]\n 76218: a3 = u8 [a0 + 0x12]\n 76221: a4 = u8 [a0 + 0x13]\n 76224: a1 = a1 << 0x8\n 76227: a1 = a1 | a2\n 76230: a3 = a3 << 0x10\n 76233: a4 = a4 << 0x18\n 76236: a3 = a3 | a4\n 76239: a1 = a1 | a3\n 76242: a2 = u8 [a0 + 0x15]\n 76245: a3 = u8 [a0 + 0x14]\n 76248: a4 = u8 [a0 + 0x16]\n 76251: a5 = u8 [a0 + 0x17]\n 76254: a2 = a2 << 0x8\n 76257: a2 = a2 | a3\n 76260: a4 = a4 << 0x10\n 76263: a5 = a5 << 0x18\n 76266: a4 = a4 | a5\n 76269: a2 = a2 | a4\n 76272: a2 = a2 << 0x20\n 76275: t0 = a2 | a1\n 76278: a2 = u8 [a0 + 0x1]\n 76281: a3 = u8 [a0]\n 76283: a4 = u8 [a0 + 0x2]\n 76286: a5 = u8 [a0 + 0x3]\n 76289: a2 = a2 << 0x8\n 76292: a2 = a2 | a3\n 76295: a4 = a4 << 0x10\n 76298: a5 = a5 << 0x18\n 76301: a4 = a4 | a5\n 76304: a2 = a2 | a4\n 76307: a3 = u8 [a0 + 0x5]\n 76310: a4 = u8 [a0 + 0x4]\n 76313: a5 = u8 [a0 + 0x6]\n 76316: a1 = u8 [a0 + 0x7]\n 76319: a3 = a3 << 0x8\n 76322: a3 = a3 | a4\n 76325: a5 = a5 << 0x10\n 76328: a1 = a1 << 0x18\n 76331: a1 = a1 | a5\n 76334: a1 = a1 | a3\n 76337: a1 = a1 << 0x20\n 76340: t1 = a1 | a2\n 76343: a1 = u8 [a0 + 0x19]\n 76346: a3 = u8 [a0 + 0x18]\n 76349: a4 = u8 [a0 + 0x1a]\n 76352: a5 = u8 [a0 + 0x1b]\n 76355: a1 = a1 << 0x8\n 76358: a1 = a1 | a3\n 76361: a4 = a4 << 0x10\n 76364: a5 = a5 << 0x18\n 76367: a4 = a4 | a5\n 76370: a1 = a1 | a4\n 76373: a3 = u8 [a0 + 0x1d]\n 76376: a4 = u8 [a0 + 0x1c]\n 76379: a5 = u8 [a0 + 0x1e]\n 76382: a2 = u8 [a0 + 0x1f]\n 76385: a3 = a3 << 0x8\n 76388: a3 = a3 | a4\n 76391: a5 = a5 << 0x10\n 76394: a2 = a2 << 0x18\n 76397: a2 = a2 | a5\n 76400: a2 = a2 | a3\n 76403: a2 = a2 << 0x20\n 76406: a3 = a2 | a1\n 76409: a1 = u8 [a0 + 0x9]\n 76412: a2 = u8 [a0 + 0x8]\n 76415: a4 = u8 [a0 + 0xa]\n 76418: a5 = u8 [a0 + 0xb]\n 76421: a1 = a1 << 0x8\n 76424: a1 = a1 | a2\n 76427: a4 = a4 << 0x10\n 76430: a5 = a5 << 0x18\n 76433: a4 = a4 | a5\n 76436: a1 = a1 | a4\n 76439: a2 = u8 [a0 + 0xd]\n 76442: a4 = u8 [a0 + 0xc]\n 76445: a5 = u8 [a0 + 0xe]\n 76448: a0 = u8 [a0 + 0xf]\n 76451: a2 = a2 << 0x8\n 76454: a2 = a2 | a4\n 76457: a5 = a5 << 0x10\n 76460: a0 = a0 << 0x18\n 76463: a0 = a0 | a5\n 76466: a0 = a0 | a2\n 76469: a0 = a0 << 0x20\n 76472: a0 = a0 | a1\n 76475: a4 = reverse a0\n 76477: a1 = reverse a3\n 76479: a2 = reverse t1\n 76481: a0 = reverse t0\n 76483: u64 [s1 + 0x118] = a0\n 76487: u64 [s1 + 0x108] = a2\n 76491: a0 = a0 | a2\n 76494: a2 = a1\n 76496: a1 = a1 | a4\n 76499: a1 = a1 | a0\n 76502: a1 = a1 >> 0x20\n 76505: u64 [s1 + 0x110] = a4\n 76509: a0 = a0 | a4\n 76512: a0 = a0 << 0x20\n 76515: a0 = a0 | a1\n 76518: jump @951 if a0 != 0\n      : @947 (gas: 5)\n 76522: u64 [s1 + 0x100] = a2\n 76526: i32 a0 = a2 + 0\n 76528: a1 = 0x20\n 76531: u64 [s1 + 0xf8] = a0\n 76535: ra = 838, jump @0\n      : @948 [@dyn 419] (gas: 51)\n 76542: u8 [a0 + 31] = 0\n 76545: u8 [a0 + 30] = 0\n 76548: u8 [a0 + 29] = 0\n 76551: u8 [a0 + 28] = 0\n 76554: u8 [a0 + 27] = 0\n 76557: u8 [a0 + 26] = 0\n 76560: u8 [a0 + 25] = 0\n 76563: u8 [a0 + 24] = 0\n 76566: u8 [a0 + 23] = 0\n 76569: u8 [a0 + 22] = 0\n 76572: u8 [a0 + 21] = 0\n 76575: u8 [a0 + 20] = 0\n 76578: u8 [a0 + 19] = 0\n 76581: u8 [a0 + 18] = 0\n 76584: u8 [a0 + 17] = 0\n 76587: u8 [a0 + 16] = 0\n 76590: u8 [a0 + 15] = 0\n 76593: u8 [a0 + 14] = 0\n 76596: u8 [a0 + 13] = 0\n 76599: u8 [a0 + 12] = 0\n 76602: u8 [a0 + 11] = 0\n 76605: u8 [a0 + 10] = 0\n 76608: u8 [a0 + 9] = 0\n 76611: u8 [a0 + 8] = 0\n 76614: u8 [a0 + 7] = 0\n 76617: u8 [a0 + 6] = 0\n 76620: u8 [a0 + 5] = 0\n 76623: u8 [a0 + 4] = 0\n 76626: u8 [a0 + 3] = 0xa0\n 76631: u8 [a0 + 2] = 0x79\n 76635: u8 [a0 + 1] = 0xc3\n 76640: u8 [a0 + 0] = 0x8\n 76643: a1 = u64 [s1 + 0x100]\n 76647: a0 = a1 + 0x4\n 76650: a1 = a0 <u a1\n 76653: a3 = u64 [s1 + 0x118]\n 76657: a2 = a3 + a1\n 76660: a3 = a2 <u a3\n 76663: a3 = a1 if a1 == 0\n 76666: a1 = u64 [s1 + 0x110]\n 76670: a3 = a3 + a1\n 76673: a1 = a3 <u a1\n 76676: a4 = u64 [s1 + 0x108]\n 76680: a4 = a4 + a1\n 76683: u64 [s1 + 0x168] = a2\n 76687: u64 [s1 + 0x160] = a0\n 76691: u64 [s1 + 0x170] = a3\n 76695: a0 = s1 + 0x180\n 76699: a1 = s1 + 0x160\n 76703: u64 [s1 + 0x178] = a4\n 76707: ra = 840, jump @879\n      : @949 [@dyn 420] (gas: 5)\n 76713: a0 = u64 [s1 + 0x188]\n 76717: t0 = u64 [s1 + 0x198]\n 76721: t1 = u64 [s1 + 0x180]\n 76725: a3 = u64 [s1 + 0x190]\n 76729: fallthrough\n      : @950 (gas: 27)\n 76730: a1 = u64 [s1 + 0x118]\n 76734: a4 = a0 ^ a1\n 76737: a5 = a0 <u a1\n 76740: ra = a1\n 76742: t2 = u64 [s1 + 0x100]\n 76746: a1 = t1 <u t2\n 76749: a5 = a1 if a4 == 0\n 76752: a2 = u64 [s1 + 0x110]\n 76756: a4 = a3 - a2\n 76759: a3 = a3 <u a2\n 76762: a2 = u64 [s1 + 0x108]\n 76766: a2 = t0 - a2\n 76769: a2 = a2 - a3\n 76772: a3 = a4 <u a5\n 76775: a2 = a2 - a3\n 76778: a4 = a4 - a5\n 76781: a0 = a0 - ra\n 76784: a1 = a0 - a1\n 76787: a0 = t1 - t2\n 76790: a1 = a1 | a2\n 76793: a2 = a0 | a4\n 76796: a2 = a2 | a1\n 76799: a1 = a1 | a4\n 76802: a2 = a2 >> 0x20\n 76805: a1 = a1 << 0x20\n 76808: a1 = a1 | a2\n 76811: jump @956 if a1 == 0\n      : @951 (gas: 1)\n 76814: trap\n      : @952 (gas: 8)\n 76815: u64 [s1 + 336] = 0\n 76819: u64 [s1 + 328] = 0\n 76823: u64 [s1 + 320] = 0\n 76827: a0 = 0x4e487b7100000000\n 76837: a1 = s1 + 0x140\n 76841: u64 [s1 + 0x158] = a0\n 76845: a0 = 0\n 76847: ra = 842, jump @23\n      : @953 [@dyn 421] (gas: 7)\n 76854: u64 [s1 + 312] = 0\n 76858: u64 [s1 + 304] = 0\n 76862: u64 [s1 + 288] = 0x41\n 76867: a0 = 0x4\n 76870: a1 = s1 + 0x120\n 76874: u64 [s1 + 296] = 0\n 76878: ra = 844, jump @23\n      : @954 [@dyn 422] (gas: 3)\n 76885: a1 = 0x24\n 76888: a0 = 0\n 76890: ra = 846, jump @0\n      : @955 [@dyn 423] (gas: 5)\n 76897: i32 a1 = a0 + 0\n 76899: a0 = 0x1\n 76902: a2 = 0x24\n 76905: ecalli 11 // 'seal_return'\n 76907: fallthrough\n      : @956 (gas: 4)\n 76908: i32 a1 = a0 + 0\n 76910: u64 [s1 + 0x118] = a1\n 76914: a0 = u64 [s1 + 0xf8]\n 76918: ra = 848, jump @0\n      : @957 [@dyn 424] (gas: 6)\n 76925: i32 a1 = a0 + 0\n 76927: a0 = 0x1\n 76930: a2 = u64 [s1 + 0x118]\n 76934: ra = 0x352\n 76938: ecalli 11 // 'seal_return'\n 76940: fallthrough\n      : @958 [@dyn 425] (gas: 6)\n 76941: u64 [a0 + 24] = 0\n 76944: u64 [a0 + 16] = 0\n 76947: u64 [a0 + 8] = 0\n 76950: a1 = 0x60\n 76953: u64 [a0] = a1\n 76955: ret\n      : @959 (gas: 20)\n 76957: sp = sp + 0xffffffffffffffb0\n 76960: u64 [sp + 0x48] = ra\n 76963: u64 [sp + 0x40] = s0\n 76966: u64 [sp + 0x38] = s1\n 76969: a4 = u64 [a1 + 0x10]\n 76972: a3 = u64 [a1 + 0x18]\n 76975: a5 = u64 [a1 + 0x8]\n 76978: s0 = u64 [a1]\n 76980: u64 [sp + 0x28] = a3\n 76983: u64 [sp + 0x20] = a5\n 76986: a1 = a5 | a3\n 76989: a3 = s0 | a4\n 76992: a3 = a3 | a1\n 76995: a3 = a3 >> 0x20\n 76998: u64 [sp + 0x30] = a4\n 77001: a1 = a1 | a4\n 77004: a1 = a1 << 0x20\n 77007: a1 = a1 | a3\n 77010: u64 [sp + 0x18] = a0\n 77013: jump @962 if a1 != 0\n      : @960 (gas: 10)\n 77017: a0 = u64 [a2 + 0x18]\n 77020: u64 [sp] = a0\n 77022: s1 = u64 [a2 + 0x10]\n 77025: a0 = u64 [a2 + 0x8]\n 77028: u64 [sp + 0x8] = a0\n 77031: a0 = u64 [a2]\n 77033: u64 [sp + 0x10] = a0\n 77036: i32 a0 = s0 + 0\n 77038: a1 = 0x20\n 77041: ra = 852, jump @0\n      : @961 [@dyn 426] (gas: 88)\n 77048: a1 = u64 [sp]\n 77050: a1 = reverse a1\n 77052: a2 = reverse s1\n 77054: a3 = u64 [sp + 0x8]\n 77057: a3 = reverse a3\n 77059: a4 = u64 [sp + 0x10]\n 77062: a4 = reverse a4\n 77064: a5 = a4 >> 0x38\n 77067: u8 [a0 + 0x1f] = a5\n 77070: a5 = a4 >> 0x30\n 77073: u8 [a0 + 0x1e] = a5\n 77076: a5 = a4 >> 0x28\n 77079: u8 [a0 + 0x1d] = a5\n 77082: a5 = a4 >> 0x20\n 77085: u8 [a0 + 0x1c] = a5\n 77088: a5 = a4 >> 0x18\n 77091: u8 [a0 + 0x1b] = a5\n 77094: a5 = a4 >> 0x10\n 77097: u8 [a0 + 0x1a] = a5\n 77100: a5 = a4 >> 0x8\n 77103: u8 [a0 + 0x19] = a5\n 77106: u8 [a0 + 0x18] = a4\n 77109: u8 [a0 + 0x10] = a3\n 77112: a4 = a3 >> 0x38\n 77115: u8 [a0 + 0x17] = a4\n 77118: a4 = a3 >> 0x30\n 77121: u8 [a0 + 0x16] = a4\n 77124: a4 = a3 >> 0x28\n 77127: u8 [a0 + 0x15] = a4\n 77130: a4 = a3 >> 0x20\n 77133: u8 [a0 + 0x14] = a4\n 77136: a4 = a3 >> 0x18\n 77139: u8 [a0 + 0x13] = a4\n 77142: a4 = a3 >> 0x10\n 77145: u8 [a0 + 0x12] = a4\n 77148: a3 = a3 >> 0x8\n 77151: u8 [a0 + 0x11] = a3\n 77154: u8 [a0 + 0x8] = a2\n 77157: a3 = a2 >> 0x38\n 77160: u8 [a0 + 0xf] = a3\n 77163: a3 = a2 >> 0x30\n 77166: u8 [a0 + 0xe] = a3\n 77169: a3 = a2 >> 0x28\n 77172: u8 [a0 + 0xd] = a3\n 77175: a3 = a2 >> 0x20\n 77178: u8 [a0 + 0xc] = a3\n 77181: a3 = a2 >> 0x18\n 77184: u8 [a0 + 0xb] = a3\n 77187: a3 = a2 >> 0x10\n 77190: u8 [a0 + 0xa] = a3\n 77193: a2 = a2 >> 0x8\n 77196: u8 [a0 + 0x9] = a2\n 77199: u8 [a0] = a1\n 77201: a2 = a1 >> 0x38\n 77204: u8 [a0 + 0x7] = a2\n 77207: a2 = a1 >> 0x30\n 77210: u8 [a0 + 0x6] = a2\n 77213: a2 = a1 >> 0x28\n 77216: u8 [a0 + 0x5] = a2\n 77219: a2 = a1 >> 0x20\n 77222: u8 [a0 + 0x4] = a2\n 77225: a2 = a1 >> 0x18\n 77228: u8 [a0 + 0x3] = a2\n 77231: a2 = a1 >> 0x10\n 77234: u8 [a0 + 0x2] = a2\n 77237: a1 = a1 >> 0x8\n 77240: u8 [a0 + 0x1] = a1\n 77243: a0 = s0 + 0x20\n 77246: a1 = a0 <u s0\n 77249: a3 = u64 [sp + 0x20]\n 77252: a2 = a3 + a1\n 77255: a3 = a2 <u a3\n 77258: a3 = a1 if a1 == 0\n 77261: a1 = u64 [sp + 0x30]\n 77264: a3 = a3 + a1\n 77267: a1 = a3 <u a1\n 77270: a4 = u64 [sp + 0x28]\n 77273: a1 = a1 + a4\n 77276: a4 = u64 [sp + 0x18]\n 77279: u64 [a4] = a0\n 77281: u64 [a4 + 0x8] = a2\n 77284: u64 [a4 + 0x10] = a3\n 77287: u64 [a4 + 0x18] = a1\n 77290: ra = u64 [sp + 0x48]\n 77293: s0 = u64 [sp + 0x40]\n 77296: s1 = u64 [sp + 0x38]\n 77299: sp = sp + 0x50\n 77302: ret\n      : @962 (gas: 1)\n 77304: trap\n      : @963 (gas: 12)\n 77305: a0 = u64 [sp + 0x70]\n 77308: a1 = u64 [sp + 0x78]\n 77311: a0 = a0 | a1\n 77314: a1 = u64 [sp + 0x98]\n 77318: a1 = a1 | s1\n 77321: a1 = a1 | a0\n 77324: a1 = a1 >> 0x20\n 77327: u64 [sp + 0x68] = s1\n 77330: a0 = a0 | s1\n 77333: a0 = a0 << 0x20\n 77336: a0 = a0 | a1\n 77339: jump @977 if a0 != 0\n      : @964 (gas: 11)\n 77343: s1 = u64 [sp + 0xd8]\n 77347: u64 [sp + 0x80] = s1\n 77351: a0 = u64 [sp + 0xd0]\n 77355: u64 [sp + 0x90] = a0\n 77359: a0 = u64 [sp + 0xc8]\n 77363: u64 [sp + 0x60] = a0\n 77366: a0 = u64 [sp + 0xc0]\n 77370: u64 [sp + 0x88] = a0\n 77374: a0 = i32 [sp + 0x98]\n 77378: a1 = 0x20\n 77381: ra = 854, jump @0\n      : @965 [@dyn 427] (gas: 70)\n 77388: a1 = reverse s1\n 77390: a2 = u64 [sp + 0x90]\n 77394: a2 = reverse a2\n 77396: s1 = u64 [sp + 0x60]\n 77399: a3 = reverse s1\n 77401: a4 = u64 [sp + 0x88]\n 77405: a4 = reverse a4\n 77407: a5 = a4 >> 0x38\n 77410: u8 [a0 + 0x1f] = a5\n 77413: a5 = a4 >> 0x30\n 77416: u8 [a0 + 0x1e] = a5\n 77419: a5 = a4 >> 0x28\n 77422: u8 [a0 + 0x1d] = a5\n 77425: a5 = a4 >> 0x20\n 77428: u8 [a0 + 0x1c] = a5\n 77431: a5 = a4 >> 0x18\n 77434: u8 [a0 + 0x1b] = a5\n 77437: a5 = a4 >> 0x10\n 77440: u8 [a0 + 0x1a] = a5\n 77443: a5 = a4 >> 0x8\n 77446: u8 [a0 + 0x19] = a5\n 77449: u8 [a0 + 0x18] = a4\n 77452: u8 [a0 + 0x10] = a3\n 77455: a4 = a3 >> 0x38\n 77458: u8 [a0 + 0x17] = a4\n 77461: a4 = a3 >> 0x30\n 77464: u8 [a0 + 0x16] = a4\n 77467: a4 = a3 >> 0x28\n 77470: u8 [a0 + 0x15] = a4\n 77473: a4 = a3 >> 0x20\n 77476: u8 [a0 + 0x14] = a4\n 77479: a4 = a3 >> 0x18\n 77482: u8 [a0 + 0x13] = a4\n 77485: a4 = a3 >> 0x10\n 77488: u8 [a0 + 0x12] = a4\n 77491: a3 = a3 >> 0x8\n 77494: u8 [a0 + 0x11] = a3\n 77497: u8 [a0 + 0x8] = a2\n 77500: a3 = a2 >> 0x38\n 77503: u8 [a0 + 0xf] = a3\n 77506: a3 = a2 >> 0x30\n 77509: u8 [a0 + 0xe] = a3\n 77512: a3 = a2 >> 0x28\n 77515: u8 [a0 + 0xd] = a3\n 77518: a3 = a2 >> 0x20\n 77521: u8 [a0 + 0xc] = a3\n 77524: a3 = a2 >> 0x18\n 77527: u8 [a0 + 0xb] = a3\n 77530: a3 = a2 >> 0x10\n 77533: u8 [a0 + 0xa] = a3\n 77536: a2 = a2 >> 0x8\n 77539: u8 [a0 + 0x9] = a2\n 77542: u8 [a0] = a1\n 77544: a2 = a1 >> 0x38\n 77547: u8 [a0 + 0x7] = a2\n 77550: a2 = a1 >> 0x30\n 77553: u8 [a0 + 0x6] = a2\n 77556: a2 = a1 >> 0x28\n 77559: u8 [a0 + 0x5] = a2\n 77562: a2 = a1 >> 0x20\n 77565: u8 [a0 + 0x4] = a2\n 77568: a2 = a1 >> 0x18\n 77571: u8 [a0 + 0x3] = a2\n 77574: a2 = a1 >> 0x10\n 77577: u8 [a0 + 0x2] = a2\n 77580: a1 = a1 >> 0x8\n 77583: u8 [a0 + 0x1] = a1\n 77586: a1 = 0x20\n 77589: a0 = 0\n 77591: ra = 856, jump @0\n      : @966 [@dyn 428] (gas: 71)\n 77598: a1 = u64 [sp + 0x40]\n 77601: a1 = reverse a1\n 77603: a2 = u64 [sp + 0x48]\n 77606: a2 = reverse a2\n 77608: a3 = u64 [sp + 0x50]\n 77611: a3 = reverse a3\n 77613: a4 = u64 [sp + 0x58]\n 77616: a4 = reverse a4\n 77618: a5 = a4 >> 0x38\n 77621: u8 [a0 + 0x1f] = a5\n 77624: a5 = a4 >> 0x30\n 77627: u8 [a0 + 0x1e] = a5\n 77630: a5 = a4 >> 0x28\n 77633: u8 [a0 + 0x1d] = a5\n 77636: a5 = a4 >> 0x20\n 77639: u8 [a0 + 0x1c] = a5\n 77642: a5 = a4 >> 0x18\n 77645: u8 [a0 + 0x1b] = a5\n 77648: a5 = a4 >> 0x10\n 77651: u8 [a0 + 0x1a] = a5\n 77654: a5 = a4 >> 0x8\n 77657: u8 [a0 + 0x19] = a5\n 77660: u8 [a0 + 0x18] = a4\n 77663: a4 = a3 >> 0x38\n 77666: u8 [a0 + 0x17] = a4\n 77669: a4 = a3 >> 0x30\n 77672: u8 [a0 + 0x16] = a4\n 77675: a4 = a3 >> 0x28\n 77678: u8 [a0 + 0x15] = a4\n 77681: a4 = a3 >> 0x20\n 77684: u8 [a0 + 0x14] = a4\n 77687: a4 = a3 >> 0x18\n 77690: u8 [a0 + 0x13] = a4\n 77693: a4 = a3 >> 0x10\n 77696: u8 [a0 + 0x12] = a4\n 77699: a4 = a3 >> 0x8\n 77702: u8 [a0 + 0x11] = a4\n 77705: u8 [a0 + 0x10] = a3\n 77708: a3 = a2 >> 0x38\n 77711: u8 [a0 + 0xf] = a3\n 77714: a3 = a2 >> 0x30\n 77717: u8 [a0 + 0xe] = a3\n 77720: a3 = a2 >> 0x28\n 77723: u8 [a0 + 0xd] = a3\n 77726: a3 = a2 >> 0x20\n 77729: u8 [a0 + 0xc] = a3\n 77732: a3 = a2 >> 0x18\n 77735: u8 [a0 + 0xb] = a3\n 77738: a3 = a2 >> 0x10\n 77741: u8 [a0 + 0xa] = a3\n 77744: a3 = a2 >> 0x8\n 77747: u8 [a0 + 0x9] = a3\n 77750: u8 [a0 + 0x8] = a2\n 77753: a2 = a1 >> 0x38\n 77756: u8 [a0 + 0x7] = a2\n 77759: a2 = a1 >> 0x30\n 77762: u8 [a0 + 0x6] = a2\n 77765: a2 = a1 >> 0x28\n 77768: u8 [a0 + 0x5] = a2\n 77771: a2 = a1 >> 0x20\n 77774: u8 [a0 + 0x4] = a2\n 77777: a2 = a1 >> 0x18\n 77780: u8 [a0 + 0x3] = a2\n 77783: a2 = a1 >> 0x10\n 77786: u8 [a0 + 0x2] = a2\n 77789: a2 = a1 >> 0x8\n 77792: u8 [a0 + 0x1] = a2\n 77795: u8 [a0] = a1\n 77797: a1 = 0x20\n 77800: a0 = 0\n 77802: ra = 858, jump @0\n      : @967 [@dyn 429] (gas: 5)\n 77809: i32 a0 = a0 + 0\n 77811: i32 a2 = sp + 0xc0\n 77815: a1 = 0x20\n 77818: ecalli 8 // 'hash_keccak_256'\n 77820: fallthrough\n      : @968 (gas: 20)\n 77821: a1 = u64 [sp + 0x98]\n 77825: a0 = a1 + 0x20\n 77828: u64 [sp + 0x50] = a0\n 77831: a2 = a0 <u a1\n 77834: a1 = u64 [sp + 0x78]\n 77837: t2 = a1 + a2\n 77840: a3 = t2 <u a1\n 77843: a3 = a2 if a2 == 0\n 77846: a2 = u64 [sp + 0x68]\n 77849: ra = a2 + a3\n 77852: a0 = u64 [sp + 0x90]\n 77856: a3 = u64 [sp + 0x88]\n 77860: a3 = a3 | a0\n 77863: a0 = u64 [sp + 0x80]\n 77867: a4 = s1 | a0\n 77870: a4 = a4 | a3\n 77873: a3 = ra <u a2\n 77876: t1 = u64 [sp + 0x70]\n 77879: a3 = a3 + t1\n 77882: jump @975 if a4 == 0\n      : @969 (gas: 161)\n 77886: a0 = 0xffffffe0\n 77896: a4 = u64 [sp + 0x98]\n 77900: s1 = a0 <u a4\n 77903: u64 [sp + 0x40] = s1\n 77906: a5 = a1 >u 0\n 77908: a5 = s1 if a1 == 0\n 77911: s1 = -a2\n 77913: a1 = s1 - a5\n 77916: u64 [sp + 0x58] = a1\n 77919: t0 = a1 >u 0\n 77921: a5 = s1 <u a5\n 77924: s1 = a2 >u 0\n 77926: s1 = s1 + t1\n 77929: s1 = -s1\n 77931: s1 = s1 - a5\n 77934: t1 = s1 >u 0\n 77936: t1 = t0 if s1 == 0\n 77939: a2 = s1\n 77941: u64 [sp + 0x48] = s1\n 77944: t0 = a0 - a4\n 77947: a1 = u64 [sp + 0x78]\n 77950: a5 = -a1\n 77952: a1 = u64 [sp + 0x40]\n 77955: a4 = a5 - a1\n 77958: u64 [sp + 0x40] = a0\n 77961: s1 = a0 <u t0\n 77964: a5 = a4 >u 0\n 77966: a5 = s1 if a4 == 0\n 77969: a1 = u64 [sp + 0x58]\n 77972: s1 = a1 | a2\n 77975: a5 = t1 if s1 != 0\n 77978: t0 = 0 if a5 != 0\n 77980: a0 = t0 + 0x1f\n 77983: s1 = a0 <u t0\n 77986: a4 = 0 if a5 != 0\n 77988: t0 = a4 + s1\n 77991: a4 = t0 <u a4\n 77994: a4 = s1 if s1 == 0\n 77997: a1 = 0 if a5 != 0\n 77999: u64 [sp + 0x58] = a1\n 78002: a1 = a1 + a4\n 78005: u64 [sp + 0x8] = a1\n 78008: a4 = a1 << 0x3b\n 78011: s1 = t0 >> 0x5\n 78014: t1 = s1 | a4\n 78017: t0 = t0 << 0x3b\n 78020: a4 = a0 >> 0x5\n 78023: s1 = a4 | t0\n 78026: u64 [sp + 0x38] = s1\n 78029: a1 = u64 [sp + 0x88]\n 78033: a4 = a1 <u 0x1\n 78036: t0 = u64 [sp + 0x60]\n 78039: a0 = t0 - a4\n 78042: u64 [sp + 0x20] = a0\n 78045: a2 = a1 + 0xffffffffffffffff\n 78048: u64 [sp + 0x30] = a2\n 78051: u64 [sp + 0x28] = t1\n 78054: a4 = a0 ^ t1\n 78057: t1 = a0 <u t1\n 78060: a0 = a2 <u s1\n 78063: a0 = t1 if a4 != 0\n 78066: u64 [sp + 0x10] = a0\n 78069: a4 = a1 | t0\n 78072: a4 = a4 <u 0x1\n 78075: a0 = u64 [sp + 0x90]\n 78079: t1 = a0 <u a4\n 78082: a1 = u64 [sp + 0x80]\n 78086: a1 = a1 - t1\n 78089: a0 = a0 - a4\n 78092: a2 = u64 [sp + 0x48]\n 78095: a2 = 0 if a5 != 0\n 78097: a4 = u64 [sp + 0x8]\n 78100: a5 = u64 [sp + 0x58]\n 78103: a5 = a4 <u a5\n 78106: a2 = a2 + a5\n 78109: t1 = a4 >> 0x5\n 78112: a5 = a2 << 0x3b\n 78115: t1 = t1 | a5\n 78118: a5 = a2 >> 0x5\n 78121: a2 = a0 <u t1\n 78124: t0 = a1 ^ a5\n 78127: a4 = a1 <u a5\n 78130: a4 = a2 if t0 == 0\n 78133: s1 = a0 ^ t1\n 78136: s1 = s1 | t0\n 78139: a2 = u64 [sp + 0x10]\n 78142: a4 = a2 if s1 == 0\n 78145: a1 = a5 if a4 == 0\n 78148: u64 [sp + 0x90] = a1\n 78152: a0 = t1 if a4 == 0\n 78155: a1 = u64 [sp + 0x20]\n 78158: a2 = u64 [sp + 0x28]\n 78161: a1 = a2 if a4 == 0\n 78164: a2 = u64 [sp + 0x30]\n 78167: a5 = u64 [sp + 0x38]\n 78170: a2 = a5 if a4 == 0\n 78173: a4 = a2 >> 0x3b\n 78176: a5 = a1 << 0x5\n 78179: t1 = a1\n 78181: a4 = a4 | a5\n 78184: a5 = a2 << 0x5\n 78187: s1 = u64 [sp + 0x78]\n 78190: s1 = s1 + a4\n 78193: a1 = u64 [sp + 0x98]\n 78197: a5 = a5 + a1\n 78200: u64 [sp + 0x60] = a5\n 78203: a4 = a5 <u a1\n 78206: s1 = s1 + a4\n 78209: a1 = u64 [sp + 0x78]\n 78212: t0 = s1 ^ a1\n 78215: a1 = u64 [sp + 0x78]\n 78218: a5 = s1 <u a1\n 78221: a5 = a4 if t0 == 0\n 78224: a1 = u64 [sp + 0xd0]\n 78228: u64 [sp + 0x88] = a1\n 78232: t1 = t1 >> 0x3b\n 78235: a4 = a0 << 0x5\n 78238: t1 = a4 | t1\n 78241: a1 = u64 [sp + 0xc8]\n 78245: u64 [sp + 0x80] = a1\n 78249: a0 = a0 >> 0x3b\n 78252: t0 = u64 [sp + 0x90]\n 78256: t0 = t0 << 0x5\n 78259: a4 = t0 | a0\n 78262: a2 = u64 [sp + 0x68]\n 78265: t0 = u64 [sp + 0x70]\n 78268: t0 = t0 + a4\n 78271: t1 = t1 + a2\n 78274: a4 = t1 <u a2\n 78277: t0 = t0 + a4\n 78280: a5 = a5 + t1\n 78283: a4 = a5 <u t1\n 78286: a1 = u64 [sp + 0x70]\n 78289: t0 = t0 + a4\n 78292: a4 = u64 [sp + 0x60]\n 78295: a0 = a4 + 0x20\n 78298: u64 [sp + 0x38] = a0\n 78301: a4 = a0 <u a4\n 78304: a0 = s1 + a4\n 78307: u64 [sp + 0x30] = a0\n 78310: s1 = a0 <u s1\n 78313: s1 = a4 if a4 == 0\n 78316: a0 = u64 [sp + 0xc0]\n 78320: s1 = s1 + a5\n 78323: u64 [sp + 0x28] = s1\n 78326: a5 = s1 <u a5\n 78329: a5 = a5 + t0\n 78332: u64 [sp + 0x20] = a5\n 78335: a4 = u64 [sp + 0x78]\n 78338: a5 = u64 [sp + 0xd8]\n 78342: a0 = reverse a0\n 78344: u64 [sp + 0x90] = a0\n 78348: a0 = u64 [sp + 0x80]\n 78352: t0 = reverse a0\n 78354: a0 = u64 [sp + 0x88]\n 78358: a0 = reverse a0\n 78360: u64 [sp + 0x88] = a0\n 78364: a0 = reverse a5\n 78366: u64 [sp + 0x80] = a0\n 78370: t1 = u64 [sp + 0x50]\n 78373: fallthrough\n      : @970 (gas: 29)\n 78374: u64 [sp + 0x60] = a1\n 78377: u64 [sp + 0x58] = a2\n 78380: s1 = a4\n 78382: a0 = u64 [sp + 0x98]\n 78386: u64 [sp + 0x50] = a0\n 78389: u64 [sp + 0x70] = a3\n 78392: u64 [sp + 0x68] = ra\n 78395: u64 [sp + 0x78] = t2\n 78398: u64 [sp + 0x98] = t1\n 78402: u64 [sp + 0x48] = t0\n 78405: u64 [sp + 0xb0] = t0\n 78409: a0 = u64 [sp + 0x88]\n 78413: u64 [sp + 0xa8] = a0\n 78417: a0 = u64 [sp + 0x80]\n 78421: u64 [sp + 0xa0] = a0\n 78425: a0 = u64 [sp + 0x90]\n 78429: u64 [sp + 0xb8] = a0\n 78433: u64 [sp + 216] = 0\n 78437: u64 [sp + 208] = 0\n 78441: u64 [sp + 200] = 0\n 78445: u64 [sp + 192] = 0\n 78449: u32 [sp + 224] = 0x20\n 78454: i32 a1 = sp + 0xa0\n 78458: i32 a3 = sp + 0xc0\n 78462: i32 a4 = sp + 0xe0\n 78466: a2 = 0xffffffffffffffff\n 78469: a0 = 0\n 78471: ecalli 7 // 'get_storage'\n 78473: fallthrough\n      : @971 (gas: 9)\n 78474: a0 = u64 [sp + 0x60]\n 78477: a1 = u64 [sp + 0x58]\n 78480: a0 = a0 | a1\n 78483: a1 = u64 [sp + 0x40]\n 78486: a2 = u64 [sp + 0x50]\n 78489: a1 = a2 <u a1\n 78492: a1 = 0 if s1 != 0\n 78494: a1 = 0 if a0 != 0\n 78496: jump @977 if a1 == 0\n      : @972 (gas: 10)\n 78500: s1 = u64 [sp + 0xd8]\n 78504: a0 = u64 [sp + 0xd0]\n 78508: u64 [sp + 0x50] = a0\n 78511: a0 = u64 [sp + 0xc8]\n 78515: u64 [sp + 0x58] = a0\n 78518: a0 = u64 [sp + 0xc0]\n 78522: u64 [sp + 0x60] = a0\n 78525: a0 = i32 [sp + 0x98]\n 78529: a1 = 0x20\n 78532: ra = 860, jump @0\n      : @973 [@dyn 430] (gas: 107)\n 78539: a1 = reverse s1\n 78541: a2 = u64 [sp + 0x50]\n 78544: a2 = reverse a2\n 78546: a3 = u64 [sp + 0x58]\n 78549: a3 = reverse a3\n 78551: a4 = u64 [sp + 0x60]\n 78554: a4 = reverse a4\n 78556: a5 = a4 >> 0x38\n 78559: u8 [a0 + 0x1f] = a5\n 78562: a5 = a4 >> 0x30\n 78565: u8 [a0 + 0x1e] = a5\n 78568: a5 = a4 >> 0x28\n 78571: u8 [a0 + 0x1d] = a5\n 78574: a5 = a4 >> 0x20\n 78577: u8 [a0 + 0x1c] = a5\n 78580: a5 = a4 >> 0x18\n 78583: u8 [a0 + 0x1b] = a5\n 78586: a5 = a4 >> 0x10\n 78589: u8 [a0 + 0x1a] = a5\n 78592: a5 = a4 >> 0x8\n 78595: u8 [a0 + 0x19] = a5\n 78598: u8 [a0 + 0x18] = a4\n 78601: u8 [a0 + 0x10] = a3\n 78604: a4 = a3 >> 0x38\n 78607: u8 [a0 + 0x17] = a4\n 78610: a4 = a3 >> 0x30\n 78613: u8 [a0 + 0x16] = a4\n 78616: a4 = a3 >> 0x28\n 78619: u8 [a0 + 0x15] = a4\n 78622: a4 = a3 >> 0x20\n 78625: u8 [a0 + 0x14] = a4\n 78628: a4 = a3 >> 0x18\n 78631: u8 [a0 + 0x13] = a4\n 78634: a4 = a3 >> 0x10\n 78637: u8 [a0 + 0x12] = a4\n 78640: a3 = a3 >> 0x8\n 78643: u8 [a0 + 0x11] = a3\n 78646: u8 [a0 + 0x8] = a2\n 78649: a3 = a2 >> 0x38\n 78652: u8 [a0 + 0xf] = a3\n 78655: a3 = a2 >> 0x30\n 78658: u8 [a0 + 0xe] = a3\n 78661: a3 = a2 >> 0x28\n 78664: u8 [a0 + 0xd] = a3\n 78667: a3 = a2 >> 0x20\n 78670: u8 [a0 + 0xc] = a3\n 78673: a3 = a2 >> 0x18\n 78676: u8 [a0 + 0xb] = a3\n 78679: a3 = a2 >> 0x10\n 78682: u8 [a0 + 0xa] = a3\n 78685: a2 = a2 >> 0x8\n 78688: u8 [a0 + 0x9] = a2\n 78691: u8 [a0] = a1\n 78693: a2 = a1 >> 0x38\n 78696: u8 [a0 + 0x7] = a2\n 78699: a2 = a1 >> 0x30\n 78702: u8 [a0 + 0x6] = a2\n 78705: a2 = a1 >> 0x28\n 78708: u8 [a0 + 0x5] = a2\n 78711: a2 = a1 >> 0x20\n 78714: u8 [a0 + 0x4] = a2\n 78717: a2 = a1 >> 0x18\n 78720: u8 [a0 + 0x3] = a2\n 78723: a2 = a1 >> 0x10\n 78726: u8 [a0 + 0x2] = a2\n 78729: a1 = a1 >> 0x8\n 78732: u8 [a0 + 0x1] = a1\n 78735: a2 = u64 [sp + 0x80]\n 78739: a2 = a2 + 0x1\n 78742: a0 = a2 <u 0x1\n 78745: a1 = u64 [sp + 0x88]\n 78749: a1 = a1 + a0\n 78752: u64 [sp + 0x88] = a1\n 78756: u64 [sp + 0x80] = a2\n 78760: a0 = a2 | a1\n 78763: a4 = a0 <u 0x1\n 78766: a0 = u64 [sp + 0x48]\n 78769: t0 = a0 + a4\n 78772: a0 = t0 <u a0\n 78775: a1 = u64 [sp + 0x90]\n 78779: a1 = a1 + a0\n 78782: u64 [sp + 0x90] = a1\n 78786: a0 = u64 [sp + 0x98]\n 78790: t1 = a0 + 0x20\n 78793: a2 = t1 <u a0\n 78796: s1 = a0\n 78798: a4 = u64 [sp + 0x78]\n 78801: t2 = a4 + a2\n 78804: a3 = t2 <u a4\n 78807: a3 = a2 if a2 == 0\n 78810: a0 = u64 [sp + 0x38]\n 78813: s1 = s1 ^ a0\n 78816: a2 = u64 [sp + 0x68]\n 78819: a5 = u64 [sp + 0x28]\n 78822: a5 = a5 ^ a2\n 78825: a5 = a5 | s1\n 78828: a0 = u64 [sp + 0x30]\n 78831: a0 = a0 ^ a4\n 78834: a1 = u64 [sp + 0x70]\n 78837: s1 = u64 [sp + 0x20]\n 78840: s1 = s1 ^ a1\n 78843: s1 = s1 | a0\n 78846: ra = a2 + a3\n 78849: a5 = a5 | s1\n 78852: a3 = ra <u a2\n 78855: a3 = a3 + a1\n 78858: jump @970 if a5 != 0\n      : @974 (gas: 1)\n 78862: jump @976\n      : @975 (gas: 2)\n 78864: t1 = u64 [sp + 0x50]\n 78867: fallthrough\n      : @976 (gas: 11)\n 78868: a4 = u64 [sp + 0x18]\n 78871: u64 [a4] = t1\n 78873: u64 [a4 + 0x8] = t2\n 78876: u64 [a4 + 0x10] = ra\n 78879: u64 [a4 + 0x18] = a3\n 78882: sp = s0 + 0xffffffffffffff00\n 78886: ra = u64 [sp + 0xf8]\n 78890: s0 = u64 [sp + 0xf0]\n 78894: s1 = u64 [sp + 0xe8]\n 78898: sp = sp + 0x100\n 78902: ret\n      : @977 (gas: 1)\n 78904: trap\n      : @978 (gas: 18)\n 78905: sp = sp + 0xffffffffffffff00\n 78909: u64 [sp + 0xf8] = ra\n 78913: u64 [sp + 0xf0] = s0\n 78917: u64 [sp + 0xe8] = s1\n 78921: s0 = sp + 0x100\n 78925: sp = sp & 0xfffffffffffffff0\n 78928: a2 = u64 [a1]\n 78930: u64 [sp + 0x20] = a2\n 78933: a2 = u64 [a1 + 0x8]\n 78936: u64 [sp + 0x10] = a2\n 78939: a2 = u64 [a1 + 0x10]\n 78942: u64 [sp + 0x8] = a2\n 78945: a1 = u64 [a1 + 0x18]\n 78948: u64 [sp] = a1\n 78950: u64 [sp + 0x18] = a0\n 78953: a0 = 0x40\n 78956: a1 = 0x20\n 78959: ra = 862, jump @0\n      : @979 [@dyn 431] (gas: 149)\n 78966: a1 = u8 [a0 + 0x1]\n 78969: a2 = u8 [a0]\n 78971: a3 = u8 [a0 + 0x2]\n 78974: a4 = u8 [a0 + 0x3]\n 78977: a1 = a1 << 0x8\n 78980: a1 = a1 | a2\n 78983: a3 = a3 << 0x10\n 78986: a4 = a4 << 0x18\n 78989: a3 = a3 | a4\n 78992: a1 = a1 | a3\n 78995: a2 = u8 [a0 + 0x5]\n 78998: a3 = u8 [a0 + 0x4]\n 79001: a4 = u8 [a0 + 0x6]\n 79004: a5 = u8 [a0 + 0x7]\n 79007: a2 = a2 << 0x8\n 79010: a2 = a2 | a3\n 79013: a4 = a4 << 0x10\n 79016: a5 = a5 << 0x18\n 79019: a4 = a4 | a5\n 79022: a2 = a2 | a4\n 79025: a2 = a2 << 0x20\n 79028: t0 = a2 | a1\n 79031: a2 = u8 [a0 + 0x9]\n 79034: a3 = u8 [a0 + 0x8]\n 79037: a4 = u8 [a0 + 0xa]\n 79040: a5 = u8 [a0 + 0xb]\n 79043: a2 = a2 << 0x8\n 79046: a2 = a2 | a3\n 79049: a4 = a4 << 0x10\n 79052: a5 = a5 << 0x18\n 79055: a4 = a4 | a5\n 79058: a2 = a2 | a4\n 79061: a3 = u8 [a0 + 0xd]\n 79064: a4 = u8 [a0 + 0xc]\n 79067: a5 = u8 [a0 + 0xe]\n 79070: s1 = u8 [a0 + 0xf]\n 79073: a3 = a3 << 0x8\n 79076: a3 = a3 | a4\n 79079: a5 = a5 << 0x10\n 79082: s1 = s1 << 0x18\n 79085: a5 = a5 | s1\n 79088: a3 = a3 | a5\n 79091: a3 = a3 << 0x20\n 79094: a2 = a2 | a3\n 79097: a3 = u8 [a0 + 0x11]\n 79100: a4 = u8 [a0 + 0x10]\n 79103: a5 = u8 [a0 + 0x12]\n 79106: s1 = u8 [a0 + 0x13]\n 79109: a3 = a3 << 0x8\n 79112: a3 = a3 | a4\n 79115: a5 = a5 << 0x10\n 79118: s1 = s1 << 0x18\n 79121: a5 = a5 | s1\n 79124: a3 = a3 | a5\n 79127: a4 = u8 [a0 + 0x15]\n 79130: a5 = u8 [a0 + 0x14]\n 79133: s1 = u8 [a0 + 0x16]\n 79136: a1 = u8 [a0 + 0x17]\n 79139: a4 = a4 << 0x8\n 79142: a4 = a4 | a5\n 79145: s1 = s1 << 0x10\n 79148: a1 = a1 << 0x18\n 79151: a1 = a1 | s1\n 79154: a1 = a1 | a4\n 79157: a1 = a1 << 0x20\n 79160: a3 = a3 | a1\n 79163: a1 = u8 [a0 + 0x19]\n 79166: a4 = u8 [a0 + 0x18]\n 79169: a5 = u8 [a0 + 0x1a]\n 79172: s1 = u8 [a0 + 0x1b]\n 79175: a1 = a1 << 0x8\n 79178: a1 = a1 | a4\n 79181: a5 = a5 << 0x10\n 79184: s1 = s1 << 0x18\n 79187: a5 = a5 | s1\n 79190: a1 = a1 | a5\n 79193: a4 = u8 [a0 + 0x1d]\n 79196: a5 = u8 [a0 + 0x1c]\n 79199: s1 = u8 [a0 + 0x1e]\n 79202: a0 = u8 [a0 + 0x1f]\n 79205: a4 = a4 << 0x8\n 79208: a4 = a4 | a5\n 79211: s1 = s1 << 0x10\n 79214: a0 = a0 << 0x18\n 79217: a0 = a0 | s1\n 79220: a0 = a0 | a4\n 79223: a0 = a0 << 0x20\n 79226: a0 = a0 | a1\n 79229: a4 = reverse a0\n 79231: u64 [sp + 0x38] = a4\n 79234: s1 = reverse a3\n 79236: a2 = reverse a2\n 79238: u64 [sp + 0x30] = a2\n 79241: a1 = reverse t0\n 79243: u64 [sp + 0x28] = a1\n 79246: a0 = u64 [sp]\n 79248: u64 [sp + 0xb8] = a0\n 79252: a0 = u64 [sp + 0x8]\n 79255: u64 [sp + 0xb0] = a0\n 79259: a0 = u64 [sp + 0x10]\n 79262: u64 [sp + 0xa8] = a0\n 79266: a0 = u64 [sp + 0x20]\n 79269: u64 [sp + 0xa0] = a0\n 79273: u64 [sp + 0x98] = a1\n 79277: u64 [sp + 0x90] = a2\n 79281: u64 [sp + 0x88] = s1\n 79285: a0 = sp + 0xc0\n 79289: a1 = sp + 0xa0\n 79293: a2 = sp + 0x80\n 79297: u64 [sp + 0x80] = a4\n 79301: ra = 0x360\n 79305: sp = sp + 0xffffffffffffff00\n 79309: u64 [sp + 0xf8] = ra\n 79313: u64 [sp + 0xf0] = s0\n 79317: u64 [sp + 0xe8] = s1\n 79321: s0 = sp + 0x100\n 79325: sp = sp & 0xffffffffffffffe0\n 79328: u64 [sp + 0x18] = a0\n 79331: s1 = u64 [a2 + 0x10]\n 79334: a0 = u64 [a2]\n 79336: u64 [sp + 0x98] = a0\n 79340: a0 = u64 [a2 + 0x18]\n 79343: u64 [sp + 0x70] = a0\n 79346: a0 = u64 [a2 + 0x8]\n 79349: u64 [sp + 0x78] = a0\n 79352: a4 = u64 [a1 + 0x18]\n 79355: a3 = u64 [a1 + 0x10]\n 79358: a2 = u64 [a1 + 0x8]\n 79361: a0 = u64 [a1]\n 79363: u64 [sp + 0x40] = a4\n 79366: u64 [sp + 0xb8] = a4\n 79370: u64 [sp + 0x48] = a3\n 79373: u64 [sp + 0xb0] = a3\n 79377: u64 [sp + 0x50] = a2\n 79380: u64 [sp + 0xa8] = a2\n 79384: u64 [sp + 0x58] = a0\n 79387: u64 [sp + 0xa0] = a0\n 79391: u64 [sp + 216] = 0\n 79395: u64 [sp + 208] = 0\n 79399: u64 [sp + 200] = 0\n 79403: u64 [sp + 192] = 0\n 79407: u32 [sp + 224] = 0x20\n 79412: i32 a1 = sp + 0xa0\n 79416: i32 a3 = sp + 0xc0\n 79420: i32 a4 = sp + 0xe0\n 79424: a2 = 0xffffffffffffffff\n 79427: a0 = 0\n 79429: ecalli 7 // 'get_storage'\n 79431: jump @963\n      : @980 [@dyn 432] (gas: 58)\n 79434: t2 = s1\n 79436: a3 = u64 [sp + 0xc8]\n 79440: a0 = u64 [sp + 0xd8]\n 79444: u64 [sp + 0x10] = a0\n 79447: a4 = u64 [sp + 0xc0]\n 79451: t1 = u64 [sp + 0xd0]\n 79455: a5 = a3 ^ s1\n 79458: a1 = a3 <u s1\n 79461: a2 = u64 [sp + 0x38]\n 79464: s1 = a4 <u a2\n 79467: a1 = s1 if a5 == 0\n 79470: a3 = a3 - t2\n 79473: a3 = a3 - s1\n 79476: u64 [sp + 0x8] = a3\n 79479: a4 = a4 - a2\n 79482: a5 = a4 + 0x1f\n 79485: a4 = a5 <u a4\n 79488: a3 = a3 + a4\n 79491: a5 = a5 & 0xffffffffffffffe0\n 79494: a0 = a3 + t2\n 79497: a2 = a2 + a5\n 79500: u64 [sp + 0x20] = a2\n 79503: a5 = a2 <u a5\n 79506: t0 = a0 + a5\n 79509: a0 = t0 ^ a3\n 79512: a2 = t0 <u a3\n 79515: a2 = a5 if a0 == 0\n 79518: s1 = u64 [sp + 0x30]\n 79521: a0 = t1 - s1\n 79524: a5 = t1 <u s1\n 79527: t1 = s1\n 79529: ra = u64 [sp + 0x28]\n 79532: s1 = u64 [sp + 0x10]\n 79535: s1 = s1 - ra\n 79538: s1 = s1 - a5\n 79541: a5 = a0 <u a1\n 79544: s1 = s1 - a5\n 79547: a0 = a0 - a1\n 79550: a1 = u64 [sp + 0x8]\n 79553: a1 = a3 <u a1\n 79556: a1 = a4 if a4 == 0\n 79559: a1 = a1 + a0\n 79562: a0 = a1 <u a0\n 79565: a3 = a1 + t1\n 79568: a5 = a3 + a2\n 79571: a1 = a3 <u a1\n 79574: a2 = a5 <u a3\n 79577: s1 = s1 + ra\n 79580: a0 = a0 + s1\n 79583: a0 = a0 + a1\n 79586: s1 = a0 + a2\n 79589: a0 = s1 >u 0\n 79591: a1 = a5 >u 0\n 79593: a1 = a0 if s1 != 0\n 79596: a0 = a5 | s1\n 79599: a2 = t0 >u 0\n 79601: a2 = a1 if a0 != 0\n 79604: jump @984 if a2 != 0\n      : @981 (gas: 15)\n 79608: a4 = t1\n 79610: a0 = u64 [sp + 0x38]\n 79613: a1 = u64 [sp + 0x20]\n 79616: a0 = a1 <u a0\n 79619: a1 = t0 ^ t2\n 79622: a2 = t0 <u t2\n 79625: a2 = a0 if a1 == 0\n 79628: a0 = a5 <u t1\n 79631: a1 = s1 ^ ra\n 79634: a3 = s1 <u ra\n 79637: a3 = a0 if a1 == 0\n 79640: a0 = a5 ^ t1\n 79643: a0 = a0 | a1\n 79646: a3 = a2 if a0 == 0\n 79649: jump @984 if a3 != 0\n      : @982 (gas: 6)\n 79653: a0 = 0x40\n 79656: a1 = 0x20\n 79659: u64 [sp + 0x10] = t2\n 79662: u64 [sp + 0x8] = t0\n 79665: u64 [sp] = a5\n 79667: ra = 866, jump @0\n      : @983 [@dyn 433] (gas: 82)\n 79674: a1 = reverse s1\n 79676: a2 = u64 [sp]\n 79678: a2 = reverse a2\n 79680: a3 = u64 [sp + 0x8]\n 79683: a3 = reverse a3\n 79685: a4 = u64 [sp + 0x20]\n 79688: a4 = reverse a4\n 79690: u8 [a0 + 0x18] = a4\n 79693: a5 = a4 >> 0x38\n 79696: u8 [a0 + 0x1f] = a5\n 79699: a5 = a4 >> 0x30\n 79702: u8 [a0 + 0x1e] = a5\n 79705: a5 = a4 >> 0x28\n 79708: u8 [a0 + 0x1d] = a5\n 79711: a5 = a4 >> 0x20\n 79714: u8 [a0 + 0x1c] = a5\n 79717: a5 = a4 >> 0x18\n 79720: u8 [a0 + 0x1b] = a5\n 79723: a5 = a4 >> 0x10\n 79726: u8 [a0 + 0x1a] = a5\n 79729: a4 = a4 >> 0x8\n 79732: u8 [a0 + 0x19] = a4\n 79735: u8 [a0 + 0x10] = a3\n 79738: a4 = a3 >> 0x38\n 79741: u8 [a0 + 0x17] = a4\n 79744: a4 = a3 >> 0x30\n 79747: u8 [a0 + 0x16] = a4\n 79750: a4 = a3 >> 0x28\n 79753: u8 [a0 + 0x15] = a4\n 79756: a4 = a3 >> 0x20\n 79759: u8 [a0 + 0x14] = a4\n 79762: a4 = a3 >> 0x18\n 79765: u8 [a0 + 0x13] = a4\n 79768: a4 = a3 >> 0x10\n 79771: u8 [a0 + 0x12] = a4\n 79774: a3 = a3 >> 0x8\n 79777: u8 [a0 + 0x11] = a3\n 79780: u8 [a0 + 0x8] = a2\n 79783: a3 = a2 >> 0x38\n 79786: u8 [a0 + 0xf] = a3\n 79789: a3 = a2 >> 0x30\n 79792: u8 [a0 + 0xe] = a3\n 79795: a3 = a2 >> 0x28\n 79798: u8 [a0 + 0xd] = a3\n 79801: a3 = a2 >> 0x20\n 79804: u8 [a0 + 0xc] = a3\n 79807: a3 = a2 >> 0x18\n 79810: u8 [a0 + 0xb] = a3\n 79813: a3 = a2 >> 0x10\n 79816: u8 [a0 + 0xa] = a3\n 79819: a2 = a2 >> 0x8\n 79822: u8 [a0 + 0x9] = a2\n 79825: u8 [a0] = a1\n 79827: a2 = a1 >> 0x38\n 79830: u8 [a0 + 0x7] = a2\n 79833: a2 = a1 >> 0x30\n 79836: u8 [a0 + 0x6] = a2\n 79839: a2 = a1 >> 0x28\n 79842: u8 [a0 + 0x5] = a2\n 79845: a2 = a1 >> 0x20\n 79848: u8 [a0 + 0x4] = a2\n 79851: a2 = a1 >> 0x18\n 79854: u8 [a0 + 0x3] = a2\n 79857: a2 = a1 >> 0x10\n 79860: u8 [a0 + 0x2] = a2\n 79863: a1 = a1 >> 0x8\n 79866: u8 [a0 + 0x1] = a1\n 79869: a0 = u64 [sp + 0x18]\n 79872: a1 = u64 [sp + 0x38]\n 79875: u64 [a0] = a1\n 79877: a1 = u64 [sp + 0x28]\n 79880: u64 [a0 + 0x18] = a1\n 79883: a1 = u64 [sp + 0x10]\n 79886: u64 [a0 + 0x8] = a1\n 79889: a1 = u64 [sp + 0x30]\n 79892: u64 [a0 + 0x10] = a1\n 79895: sp = s0 + 0xffffffffffffff00\n 79899: ra = u64 [sp + 0xf8]\n 79903: s0 = u64 [sp + 0xf0]\n 79907: s1 = u64 [sp + 0xe8]\n 79911: sp = sp + 0x100\n 79915: ret\n      : @984 (gas: 8)\n 79917: u64 [sp + 112] = 0\n 79920: u64 [sp + 104] = 0\n 79923: u64 [sp + 96] = 0\n 79926: a0 = 0x4e487b7100000000\n 79936: a1 = sp + 0x60\n 79939: u64 [sp + 0x78] = a0\n 79942: a0 = 0\n 79944: ra = 868, jump @23\n      : @985 [@dyn 434] (gas: 7)\n 79951: u64 [sp + 88] = 0\n 79954: u64 [sp + 80] = 0\n 79957: u64 [sp + 64] = 0x41\n 79961: a0 = 0x4\n 79964: a1 = sp + 0x40\n 79967: u64 [sp + 72] = 0\n 79970: ra = 870, jump @23\n      : @986 [@dyn 435] (gas: 3)\n 79977: a1 = 0x24\n 79980: a0 = 0\n 79982: ra = 872, jump @0\n      : @987 [@dyn 436] (gas: 6)\n 79989: i32 a1 = a0 + 0\n 79991: a0 = 0x1\n 79994: a2 = 0x24\n 79997: ra = 0x36a\n 80001: ecalli 11 // 'seal_return'\n 80003: fallthrough\n      : @988 [@dyn 437] (gas: 18)\n 80004: sp = sp + 0xffffffffffffffa0\n 80007: u64 [sp + 0x58] = ra\n 80010: u64 [sp + 0x50] = s0\n 80013: u64 [sp + 0x48] = s1\n 80016: s0 = sp + 0x60\n 80019: sp = sp & 0xfffffffffffffff0\n 80022: a2 = u64 [a1]\n 80024: a3 = u64 [a1 + 0x8]\n 80027: a4 = u64 [a1 + 0x10]\n 80030: a1 = u64 [a1 + 0x18]\n 80033: s1 = a0\n 80035: u64 [sp + 0x18] = a1\n 80038: u64 [sp + 0x10] = a4\n 80041: u64 [sp + 0x8] = a3\n 80044: a0 = sp + 0x20\n 80047: a1 = sp\n 80049: u64 [sp] = a2\n 80051: ra = 876, jump @978\n      : @989 [@dyn 438] (gas: 14)\n 80057: a0 = u64 [sp + 0x30]\n 80060: a1 = u64 [sp + 0x38]\n 80063: a2 = u64 [sp + 0x20]\n 80066: a3 = u64 [sp + 0x28]\n 80069: u64 [s1 + 0x10] = a0\n 80072: u64 [s1 + 0x18] = a1\n 80075: u64 [s1] = a2\n 80077: u64 [s1 + 0x8] = a3\n 80080: sp = s0 + 0xffffffffffffffa0\n 80083: ra = u64 [sp + 0x58]\n 80086: s0 = u64 [sp + 0x50]\n 80089: s1 = u64 [sp + 0x48]\n 80092: sp = sp + 0x60\n 80095: ret\n      : @990 (gas: 17)\n 80097: sp = sp + 0xffffffffffffffa0\n 80100: u64 [sp + 0x58] = ra\n 80103: u64 [sp + 0x50] = s0\n 80106: u64 [sp + 0x48] = s1\n 80109: a3 = u64 [a1 + 0x18]\n 80112: a4 = u64 [a1 + 0x10]\n 80115: a5 = u64 [a1 + 0x8]\n 80118: s1 = u64 [a1]\n 80120: a1 = a5 | a3\n 80123: a2 = s1 | a4\n 80126: a2 = a2 | a1\n 80129: a2 = a2 >> 0x20\n 80132: a1 = a1 | a4\n 80135: a1 = a1 << 0x20\n 80138: a1 = a1 | a2\n 80141: u64 [sp + 0x28] = a0\n 80144: jump @997 if a1 != 0\n      : @991 (gas: 19)\n 80148: a0 = s1 + 0x20\n 80151: u64 [sp + 0x30] = a0\n 80154: a0 = a0 <u s1\n 80157: a1 = a5 + a0\n 80160: u64 [sp + 0x40] = a1\n 80163: u64 [sp + 0x8] = a5\n 80166: s0 = a1 <u a5\n 80169: s0 = a0 if a0 == 0\n 80172: s0 = s0 + a4\n 80175: u64 [sp + 0x10] = a4\n 80178: a0 = s0 <u a4\n 80181: u64 [sp + 0x18] = a3\n 80184: a0 = a0 + a3\n 80187: u64 [sp + 0x38] = a0\n 80190: u64 [sp] = s1\n 80192: i32 a0 = s1 + 0\n 80194: a1 = 0x20\n 80197: s1 = 0x20\n 80200: ra = 878, jump @0\n      : @992 [@dyn 439] (gas: 45)\n 80207: u8 [a0 + 0x1f] = s1\n 80210: a1 = u64 [sp + 0x30]\n 80213: s1 = a1\n 80215: a1 = a1 | s0\n 80218: a2 = u64 [sp + 0x40]\n 80221: a4 = u64 [sp + 0x38]\n 80224: a2 = a2 | a4\n 80227: a1 = a1 | a2\n 80230: a1 = a1 >> 0x20\n 80233: u64 [sp + 0x20] = s0\n 80236: a2 = a2 | s0\n 80239: a2 = a2 << 0x20\n 80242: a1 = a1 | a2\n 80245: u8 [a0 + 30] = 0\n 80248: u8 [a0 + 29] = 0\n 80251: u8 [a0 + 28] = 0\n 80254: u8 [a0 + 27] = 0\n 80257: u8 [a0 + 26] = 0\n 80260: u8 [a0 + 25] = 0\n 80263: u8 [a0 + 24] = 0\n 80266: u8 [a0 + 23] = 0\n 80269: u8 [a0 + 22] = 0\n 80272: u8 [a0 + 21] = 0\n 80275: u8 [a0 + 20] = 0\n 80278: u8 [a0 + 19] = 0\n 80281: u8 [a0 + 18] = 0\n 80284: u8 [a0 + 17] = 0\n 80287: u8 [a0 + 16] = 0\n 80290: u8 [a0 + 15] = 0\n 80293: u8 [a0 + 14] = 0\n 80296: u8 [a0 + 13] = 0\n 80299: u8 [a0 + 12] = 0\n 80302: u8 [a0 + 11] = 0\n 80305: u8 [a0 + 10] = 0\n 80308: u8 [a0 + 9] = 0\n 80311: u8 [a0 + 8] = 0\n 80314: u8 [a0 + 7] = 0\n 80317: u8 [a0 + 6] = 0\n 80320: u8 [a0 + 5] = 0\n 80323: u8 [a0 + 4] = 0\n 80326: u8 [a0 + 3] = 0\n 80329: u8 [a0 + 2] = 0\n 80332: u8 [a0 + 1] = 0\n 80335: u8 [a0 + 0] = 0\n 80337: jump @997 if a1 != 0\n      : @993 (gas: 4)\n 80341: i32 s0 = s1 + 0\n 80343: a1 = 0x20\n 80346: a0 = s0\n 80348: ra = 880, jump @0\n      : @994 [@dyn 440] (gas: 41)\n 80355: u8 [a0 + 31] = 0x12\n 80359: u8 [a0 + 30] = 0\n 80362: u8 [a0 + 29] = 0\n 80365: u8 [a0 + 28] = 0\n 80368: u8 [a0 + 27] = 0\n 80371: u8 [a0 + 26] = 0\n 80374: u8 [a0 + 25] = 0\n 80377: u8 [a0 + 24] = 0\n 80380: u8 [a0 + 23] = 0\n 80383: u8 [a0 + 22] = 0\n 80386: u8 [a0 + 21] = 0\n 80389: u8 [a0 + 20] = 0\n 80392: u8 [a0 + 19] = 0\n 80395: u8 [a0 + 18] = 0\n 80398: u8 [a0 + 17] = 0\n 80401: u8 [a0 + 16] = 0\n 80404: u8 [a0 + 15] = 0\n 80407: u8 [a0 + 14] = 0\n 80410: u8 [a0 + 13] = 0\n 80413: u8 [a0 + 12] = 0\n 80416: u8 [a0 + 11] = 0\n 80419: u8 [a0 + 10] = 0\n 80422: u8 [a0 + 9] = 0\n 80425: u8 [a0 + 8] = 0\n 80428: u8 [a0 + 7] = 0\n 80431: u8 [a0 + 6] = 0\n 80434: u8 [a0 + 5] = 0\n 80437: u8 [a0 + 4] = 0\n 80440: u8 [a0 + 3] = 0\n 80443: u8 [a0 + 2] = 0\n 80446: u8 [a0 + 1] = 0\n 80449: a1 = u64 [sp + 0x20]\n 80452: a2 = u64 [sp + 0x38]\n 80455: a1 = a1 | a2\n 80458: a2 = 0xffffffe0\n 80468: a2 = s1 <u a2\n 80471: a3 = u64 [sp + 0x40]\n 80474: a2 = 0 if a3 != 0\n 80476: a2 = 0 if a1 != 0\n 80478: u8 [a0 + 0] = 0\n 80480: jump @997 if a2 == 0\n      : @995 (gas: 3)\n 80484: i32 a0 = s0 + 0x20\n 80487: a1 = 0x20\n 80490: ra = 882, jump @0\n      : @996 [@dyn 441] (gas: 55)\n 80497: u8 [a0 + 31] = 0\n 80500: u8 [a0 + 30] = 0\n 80503: u8 [a0 + 29] = 0\n 80506: u8 [a0 + 28] = 0\n 80509: u8 [a0 + 27] = 0\n 80512: u8 [a0 + 26] = 0\n 80515: u8 [a0 + 25] = 0\n 80518: u8 [a0 + 24] = 0\n 80521: u8 [a0 + 23] = 0\n 80524: u8 [a0 + 22] = 0\n 80527: u8 [a0 + 21] = 0\n 80530: u8 [a0 + 20] = 0\n 80533: u8 [a0 + 19] = 0\n 80536: u8 [a0 + 18] = 0\n 80539: u8 [a0 + 17] = 0x64\n 80543: u8 [a0 + 16] = 0x6c\n 80547: u8 [a0 + 15] = 0x6f\n 80551: u8 [a0 + 14] = 0x73\n 80555: u8 [a0 + 13] = 0x20\n 80559: u8 [a0 + 12] = 0x79\n 80563: u8 [a0 + 11] = 0x64\n 80567: u8 [a0 + 10] = 0x61\n 80571: u8 [a0 + 9] = 0x65\n 80575: a5 = 0x72\n 80578: u8 [a0 + 0x8] = a5\n 80581: u8 [a0 + 7] = 0x6c\n 80585: u8 [a0 + 6] = 0x61\n 80589: u8 [a0 + 5] = 0x20\n 80593: u8 [a0 + 4] = 0x65\n 80597: u8 [a0 + 3] = 0x6e\n 80601: u8 [a0 + 2] = 0x6f\n 80605: u8 [a0 + 1] = 0x68\n 80609: u8 [a0 + 0] = 0x50\n 80612: a1 = u64 [sp]\n 80614: a0 = a1 + 0x60\n 80617: a1 = a0 <u a1\n 80620: a3 = u64 [sp + 0x8]\n 80623: a2 = a3 + a1\n 80626: a3 = a2 <u a3\n 80629: a3 = a1 if a1 == 0\n 80632: a1 = u64 [sp + 0x10]\n 80635: a3 = a3 + a1\n 80638: a1 = a3 <u a1\n 80641: a4 = u64 [sp + 0x18]\n 80644: a1 = a1 + a4\n 80647: a4 = u64 [sp + 0x28]\n 80650: u64 [a4] = a0\n 80652: u64 [a4 + 0x8] = a2\n 80655: u64 [a4 + 0x10] = a3\n 80658: u64 [a4 + 0x18] = a1\n 80661: ra = u64 [sp + 0x58]\n 80664: s0 = u64 [sp + 0x50]\n 80667: s1 = u64 [sp + 0x48]\n 80670: sp = sp + 0x60\n 80673: ret\n      : @997 (gas: 1)\n 80675: trap\n      : @998 (gas: 17)\n 80676: sp = sp + 0xffffffffffffffa0\n 80679: u64 [sp + 0x58] = ra\n 80682: u64 [sp + 0x50] = s0\n 80685: u64 [sp + 0x48] = s1\n 80688: a3 = u64 [a1 + 0x18]\n 80691: a4 = u64 [a1 + 0x10]\n 80694: a5 = u64 [a1 + 0x8]\n 80697: s1 = u64 [a1]\n 80699: a1 = a5 | a3\n 80702: a2 = s1 | a4\n 80705: a2 = a2 | a1\n 80708: a2 = a2 >> 0x20\n 80711: a1 = a1 | a4\n 80714: a1 = a1 << 0x20\n 80717: a1 = a1 | a2\n 80720: u64 [sp + 0x28] = a0\n 80723: jump @1005 if a1 != 0\n      : @999 (gas: 19)\n 80727: a0 = s1 + 0x20\n 80730: u64 [sp + 0x30] = a0\n 80733: a0 = a0 <u s1\n 80736: a1 = a5 + a0\n 80739: u64 [sp + 0x40] = a1\n 80742: u64 [sp + 0x8] = a5\n 80745: s0 = a1 <u a5\n 80748: s0 = a0 if a0 == 0\n 80751: s0 = s0 + a4\n 80754: u64 [sp + 0x10] = a4\n 80757: a0 = s0 <u a4\n 80760: u64 [sp + 0x18] = a3\n 80763: a0 = a0 + a3\n 80766: u64 [sp + 0x38] = a0\n 80769: u64 [sp] = s1\n 80771: i32 a0 = s1 + 0\n 80773: a1 = 0x20\n 80776: s1 = 0x20\n 80779: ra = 884, jump @0\n      : @1000 [@dyn 442] (gas: 45)\n 80786: u8 [a0 + 0x1f] = s1\n 80789: a1 = u64 [sp + 0x30]\n 80792: s1 = a1\n 80794: a1 = a1 | s0\n 80797: a2 = u64 [sp + 0x40]\n 80800: a4 = u64 [sp + 0x38]\n 80803: a2 = a2 | a4\n 80806: a1 = a1 | a2\n 80809: a1 = a1 >> 0x20\n 80812: u64 [sp + 0x20] = s0\n 80815: a2 = a2 | s0\n 80818: a2 = a2 << 0x20\n 80821: a1 = a1 | a2\n 80824: u8 [a0 + 30] = 0\n 80827: u8 [a0 + 29] = 0\n 80830: u8 [a0 + 28] = 0\n 80833: u8 [a0 + 27] = 0\n 80836: u8 [a0 + 26] = 0\n 80839: u8 [a0 + 25] = 0\n 80842: u8 [a0 + 24] = 0\n 80845: u8 [a0 + 23] = 0\n 80848: u8 [a0 + 22] = 0\n 80851: u8 [a0 + 21] = 0\n 80854: u8 [a0 + 20] = 0\n 80857: u8 [a0 + 19] = 0\n 80860: u8 [a0 + 18] = 0\n 80863: u8 [a0 + 17] = 0\n 80866: u8 [a0 + 16] = 0\n 80869: u8 [a0 + 15] = 0\n 80872: u8 [a0 + 14] = 0\n 80875: u8 [a0 + 13] = 0\n 80878: u8 [a0 + 12] = 0\n 80881: u8 [a0 + 11] = 0\n 80884: u8 [a0 + 10] = 0\n 80887: u8 [a0 + 9] = 0\n 80890: u8 [a0 + 8] = 0\n 80893: u8 [a0 + 7] = 0\n 80896: u8 [a0 + 6] = 0\n 80899: u8 [a0 + 5] = 0\n 80902: u8 [a0 + 4] = 0\n 80905: u8 [a0 + 3] = 0\n 80908: u8 [a0 + 2] = 0\n 80911: u8 [a0 + 1] = 0\n 80914: u8 [a0 + 0] = 0\n 80916: jump @1005 if a1 != 0\n      : @1001 (gas: 4)\n 80920: i32 s0 = s1 + 0\n 80922: a1 = 0x20\n 80925: a0 = s0\n 80927: ra = 886, jump @0\n      : @1002 [@dyn 443] (gas: 41)\n 80934: u8 [a0 + 31] = 0x19\n 80938: u8 [a0 + 30] = 0\n 80941: u8 [a0 + 29] = 0\n 80944: u8 [a0 + 28] = 0\n 80947: u8 [a0 + 27] = 0\n 80950: u8 [a0 + 26] = 0\n 80953: u8 [a0 + 25] = 0\n 80956: u8 [a0 + 24] = 0\n 80959: u8 [a0 + 23] = 0\n 80962: u8 [a0 + 22] = 0\n 80965: u8 [a0 + 21] = 0\n 80968: u8 [a0 + 20] = 0\n 80971: u8 [a0 + 19] = 0\n 80974: u8 [a0 + 18] = 0\n 80977: u8 [a0 + 17] = 0\n 80980: u8 [a0 + 16] = 0\n 80983: u8 [a0 + 15] = 0\n 80986: u8 [a0 + 14] = 0\n 80989: u8 [a0 + 13] = 0\n 80992: u8 [a0 + 12] = 0\n 80995: u8 [a0 + 11] = 0\n 80998: u8 [a0 + 10] = 0\n 81001: u8 [a0 + 9] = 0\n 81004: u8 [a0 + 8] = 0\n 81007: u8 [a0 + 7] = 0\n 81010: u8 [a0 + 6] = 0\n 81013: u8 [a0 + 5] = 0\n 81016: u8 [a0 + 4] = 0\n 81019: u8 [a0 + 3] = 0\n 81022: u8 [a0 + 2] = 0\n 81025: u8 [a0 + 1] = 0\n 81028: a1 = u64 [sp + 0x20]\n 81031: a2 = u64 [sp + 0x38]\n 81034: a1 = a1 | a2\n 81037: a2 = 0xffffffe0\n 81047: a2 = s1 <u a2\n 81050: a3 = u64 [sp + 0x40]\n 81053: a2 = 0 if a3 != 0\n 81055: a2 = 0 if a1 != 0\n 81057: u8 [a0 + 0] = 0\n 81059: jump @1005 if a2 == 0\n      : @1003 (gas: 3)\n 81063: i32 a0 = s0 + 0x20\n 81066: a1 = 0x20\n 81069: ra = 888, jump @0\n      : @1004 [@dyn 444] (gas: 55)\n 81076: u8 [a0 + 31] = 0\n 81079: u8 [a0 + 30] = 0\n 81082: u8 [a0 + 29] = 0\n 81085: u8 [a0 + 28] = 0\n 81088: u8 [a0 + 27] = 0\n 81091: u8 [a0 + 26] = 0\n 81094: u8 [a0 + 25] = 0\n 81097: u8 [a0 + 24] = 0x65\n 81101: u8 [a0 + 23] = 0x6e\n 81105: u8 [a0 + 22] = 0x6f\n 81109: u8 [a0 + 21] = 0x68\n 81113: u8 [a0 + 20] = 0x70\n 81117: a5 = 0x20\n 81120: u8 [a0 + 0x13] = a5\n 81123: u8 [a0 + 18] = 0x6e\n 81127: u8 [a0 + 17] = 0x77\n 81131: u8 [a0 + 16] = 0x6f\n 81135: u8 [a0 + 0xf] = a5\n 81138: u8 [a0 + 14] = 0x72\n 81142: u8 [a0 + 13] = 0x75\n 81146: u8 [a0 + 12] = 0x6f\n 81150: u8 [a0 + 11] = 0x79\n 81154: u8 [a0 + 0xa] = a5\n 81157: u8 [a0 + 9] = 0x79\n 81161: u8 [a0 + 8] = 0x75\n 81165: u8 [a0 + 7] = 0x62\n 81169: u8 [a0 + 0x6] = a5\n 81172: u8 [a0 + 5] = 0x74\n 81176: u8 [a0 + 4] = 0x6f\n 81180: u8 [a0 + 3] = 0x6e\n 81184: u8 [a0 + 2] = 0x6e\n 81188: u8 [a0 + 1] = 0x61\n 81192: u8 [a0 + 0] = 0x43\n 81195: a1 = u64 [sp]\n 81197: a0 = a1 + 0x60\n 81200: a1 = a0 <u a1\n 81203: a3 = u64 [sp + 0x8]\n 81206: a2 = a3 + a1\n 81209: a3 = a2 <u a3\n 81212: a3 = a1 if a1 == 0\n 81215: a1 = u64 [sp + 0x10]\n 81218: a3 = a3 + a1\n 81221: a1 = a3 <u a1\n 81224: a4 = u64 [sp + 0x18]\n 81227: a1 = a1 + a4\n 81230: a4 = u64 [sp + 0x28]\n 81233: u64 [a4] = a0\n 81235: u64 [a4 + 0x8] = a2\n 81238: u64 [a4 + 0x10] = a3\n 81241: u64 [a4 + 0x18] = a1\n 81244: ra = u64 [sp + 0x58]\n 81247: s0 = u64 [sp + 0x50]\n 81250: s1 = u64 [sp + 0x48]\n 81253: sp = sp + 0x60\n 81256: ret\n      : @1005 (gas: 1)\n 81258: trap\n      : @1006 (gas: 17)\n 81259: sp = sp + 0xffffffffffffffa0\n 81262: u64 [sp + 0x58] = ra\n 81265: u64 [sp + 0x50] = s0\n 81268: u64 [sp + 0x48] = s1\n 81271: a3 = u64 [a1 + 0x18]\n 81274: a4 = u64 [a1 + 0x10]\n 81277: a5 = u64 [a1 + 0x8]\n 81280: s1 = u64 [a1]\n 81282: a1 = a5 | a3\n 81285: a2 = s1 | a4\n 81288: a2 = a2 | a1\n 81291: a2 = a2 >> 0x20\n 81294: a1 = a1 | a4\n 81297: a1 = a1 << 0x20\n 81300: a1 = a1 | a2\n 81303: u64 [sp + 0x28] = a0\n 81306: jump @1013 if a1 != 0\n      : @1007 (gas: 19)\n 81310: a0 = s1 + 0x20\n 81313: u64 [sp + 0x30] = a0\n 81316: a0 = a0 <u s1\n 81319: a1 = a5 + a0\n 81322: u64 [sp + 0x40] = a1\n 81325: u64 [sp + 0x8] = a5\n 81328: s0 = a1 <u a5\n 81331: s0 = a0 if a0 == 0\n 81334: s0 = s0 + a4\n 81337: u64 [sp + 0x10] = a4\n 81340: a0 = s0 <u a4\n 81343: u64 [sp + 0x18] = a3\n 81346: a0 = a0 + a3\n 81349: u64 [sp + 0x38] = a0\n 81352: u64 [sp] = s1\n 81354: i32 a0 = s1 + 0\n 81356: a1 = 0x20\n 81359: s1 = 0x20\n 81362: ra = 890, jump @0\n      : @1008 [@dyn 445] (gas: 45)\n 81369: u8 [a0 + 0x1f] = s1\n 81372: a1 = u64 [sp + 0x30]\n 81375: s1 = a1\n 81377: a1 = a1 | s0\n 81380: a2 = u64 [sp + 0x40]\n 81383: a4 = u64 [sp + 0x38]\n 81386: a2 = a2 | a4\n 81389: a1 = a1 | a2\n 81392: a1 = a1 >> 0x20\n 81395: u64 [sp + 0x20] = s0\n 81398: a2 = a2 | s0\n 81401: a2 = a2 << 0x20\n 81404: a1 = a1 | a2\n 81407: u8 [a0 + 30] = 0\n 81410: u8 [a0 + 29] = 0\n 81413: u8 [a0 + 28] = 0\n 81416: u8 [a0 + 27] = 0\n 81419: u8 [a0 + 26] = 0\n 81422: u8 [a0 + 25] = 0\n 81425: u8 [a0 + 24] = 0\n 81428: u8 [a0 + 23] = 0\n 81431: u8 [a0 + 22] = 0\n 81434: u8 [a0 + 21] = 0\n 81437: u8 [a0 + 20] = 0\n 81440: u8 [a0 + 19] = 0\n 81443: u8 [a0 + 18] = 0\n 81446: u8 [a0 + 17] = 0\n 81449: u8 [a0 + 16] = 0\n 81452: u8 [a0 + 15] = 0\n 81455: u8 [a0 + 14] = 0\n 81458: u8 [a0 + 13] = 0\n 81461: u8 [a0 + 12] = 0\n 81464: u8 [a0 + 11] = 0\n 81467: u8 [a0 + 10] = 0\n 81470: u8 [a0 + 9] = 0\n 81473: u8 [a0 + 8] = 0\n 81476: u8 [a0 + 7] = 0\n 81479: u8 [a0 + 6] = 0\n 81482: u8 [a0 + 5] = 0\n 81485: u8 [a0 + 4] = 0\n 81488: u8 [a0 + 3] = 0\n 81491: u8 [a0 + 2] = 0\n 81494: u8 [a0 + 1] = 0\n 81497: u8 [a0 + 0] = 0\n 81499: jump @1013 if a1 != 0\n      : @1009 (gas: 4)\n 81503: i32 s0 = s1 + 0\n 81505: a1 = 0x20\n 81508: a0 = s0\n 81510: ra = 892, jump @0\n      : @1010 [@dyn 446] (gas: 41)\n 81517: u8 [a0 + 31] = 0x11\n 81521: u8 [a0 + 30] = 0\n 81524: u8 [a0 + 29] = 0\n 81527: u8 [a0 + 28] = 0\n 81530: u8 [a0 + 27] = 0\n 81533: u8 [a0 + 26] = 0\n 81536: u8 [a0 + 25] = 0\n 81539: u8 [a0 + 24] = 0\n 81542: u8 [a0 + 23] = 0\n 81545: u8 [a0 + 22] = 0\n 81548: u8 [a0 + 21] = 0\n 81551: u8 [a0 + 20] = 0\n 81554: u8 [a0 + 19] = 0\n 81557: u8 [a0 + 18] = 0\n 81560: u8 [a0 + 17] = 0\n 81563: u8 [a0 + 16] = 0\n 81566: u8 [a0 + 15] = 0\n 81569: u8 [a0 + 14] = 0\n 81572: u8 [a0 + 13] = 0\n 81575: u8 [a0 + 12] = 0\n 81578: u8 [a0 + 11] = 0\n 81581: u8 [a0 + 10] = 0\n 81584: u8 [a0 + 9] = 0\n 81587: u8 [a0 + 8] = 0\n 81590: u8 [a0 + 7] = 0\n 81593: u8 [a0 + 6] = 0\n 81596: u8 [a0 + 5] = 0\n 81599: u8 [a0 + 4] = 0\n 81602: u8 [a0 + 3] = 0\n 81605: u8 [a0 + 2] = 0\n 81608: u8 [a0 + 1] = 0\n 81611: a1 = u64 [sp + 0x20]\n 81614: a2 = u64 [sp + 0x38]\n 81617: a1 = a1 | a2\n 81620: a2 = 0xffffffe0\n 81630: a2 = s1 <u a2\n 81633: a3 = u64 [sp + 0x40]\n 81636: a2 = 0 if a3 != 0\n 81638: a2 = 0 if a1 != 0\n 81640: u8 [a0 + 0] = 0\n 81642: jump @1013 if a2 == 0\n      : @1011 (gas: 3)\n 81646: i32 a0 = s0 + 0x20\n 81649: a1 = 0x20\n 81652: ra = 894, jump @0\n      : @1012 [@dyn 447] (gas: 54)\n 81659: u8 [a0 + 31] = 0\n 81662: u8 [a0 + 30] = 0\n 81665: u8 [a0 + 29] = 0\n 81668: u8 [a0 + 28] = 0\n 81671: u8 [a0 + 27] = 0\n 81674: u8 [a0 + 26] = 0\n 81677: u8 [a0 + 25] = 0\n 81680: u8 [a0 + 24] = 0\n 81683: u8 [a0 + 23] = 0\n 81686: u8 [a0 + 22] = 0\n 81689: u8 [a0 + 21] = 0\n 81692: u8 [a0 + 20] = 0\n 81695: u8 [a0 + 19] = 0\n 81698: u8 [a0 + 18] = 0\n 81701: u8 [a0 + 17] = 0\n 81704: u8 [a0 + 16] = 0x74\n 81708: u8 [a0 + 15] = 0x6e\n 81712: u8 [a0 + 14] = 0x65\n 81716: u8 [a0 + 13] = 0x6d\n 81720: u8 [a0 + 12] = 0x79\n 81724: u8 [a0 + 11] = 0x61\n 81728: u8 [a0 + 10] = 0x70\n 81732: u8 [a0 + 9] = 0x20\n 81736: u8 [a0 + 8] = 0x74\n 81740: u8 [a0 + 7] = 0x63\n 81744: u8 [a0 + 6] = 0x65\n 81748: u8 [a0 + 5] = 0x72\n 81752: u8 [a0 + 4] = 0x72\n 81756: u8 [a0 + 3] = 0x6f\n 81760: u8 [a0 + 2] = 0x63\n 81764: u8 [a0 + 1] = 0x6e\n 81768: u8 [a0 + 0] = 0x49\n 81771: a1 = u64 [sp]\n 81773: a0 = a1 + 0x60\n 81776: a1 = a0 <u a1\n 81779: a3 = u64 [sp + 0x8]\n 81782: a2 = a3 + a1\n 81785: a3 = a2 <u a3\n 81788: a3 = a1 if a1 == 0\n 81791: a1 = u64 [sp + 0x10]\n 81794: a3 = a3 + a1\n 81797: a1 = a3 <u a1\n 81800: a4 = u64 [sp + 0x18]\n 81803: a1 = a1 + a4\n 81806: a4 = u64 [sp + 0x28]\n 81809: u64 [a4] = a0\n 81811: u64 [a4 + 0x8] = a2\n 81814: u64 [a4 + 0x10] = a3\n 81817: u64 [a4 + 0x18] = a1\n 81820: ra = u64 [sp + 0x58]\n 81823: s0 = u64 [sp + 0x50]\n 81826: s1 = u64 [sp + 0x48]\n 81829: sp = sp + 0x60\n 81832: ret\n      : @1013 (gas: 1)\n 81834: trap\n      : @1014 (gas: 31)\n 81835: sp = sp + 0xfffffffffffffca0\n 81839: u64 [sp + 0x358] = ra\n 81843: u64 [sp + 0x350] = s0\n 81847: u64 [sp + 0x348] = s1\n 81851: s0 = sp + 0x360\n 81855: sp = sp & 0xffffffffffffffe0\n 81858: s1 = sp\n 81860: a1 = u64 [a0]\n 81862: u64 [s1 + 0x40] = a1\n 81865: a1 = u64 [a0 + 0x8]\n 81868: u64 [s1 + 0x48] = a1\n 81871: a1 = u64 [a0 + 0x10]\n 81874: u64 [s1 + 0x50] = a1\n 81877: a0 = u64 [a0 + 0x18]\n 81880: u64 [s1 + 0x58] = a0\n 81883: u64 [s1 + 664] = 0\n 81887: u64 [s1 + 656] = 0\n 81891: u64 [s1 + 648] = 0\n 81895: u64 [s1 + 640] = 0x1\n 81900: u64 [s1 + 728] = 0\n 81904: u64 [s1 + 720] = 0\n 81908: u64 [s1 + 712] = 0\n 81912: u64 [s1 + 704] = 0\n 81916: u32 [s1 + 672] = 0x20\n 81921: i32 a1 = s1 + 0x280\n 81925: i32 a3 = s1 + 0x2c0\n 81929: i32 a4 = s1 + 0x2a0\n 81933: a2 = 0xffffffffffffffff\n 81936: a0 = 0\n 81938: ecalli 7 // 'get_storage'\n 81940: fallthrough\n      : @1015 (gas: 24)\n 81941: t2 = u64 [s1 + 0x40]\n 81944: a2 = u64 [s1 + 0x48]\n 81947: t0 = u64 [s1 + 0x58]\n 81950: a0 = u64 [s1 + 0x2d8]\n 81954: a1 = u64 [s1 + 0x2c0]\n 81958: u64 [s1 + 0x90] = a1\n 81962: t1 = u64 [s1 + 0x2d0]\n 81966: a1 = u64 [s1 + 0x2c8]\n 81970: a4 = a0 ^ t0\n 81973: a0 = t0 <u a0\n 81976: a3 = u64 [s1 + 0x50]\n 81979: a5 = a3 <u t1\n 81982: a5 = a0 if a4 != 0\n 81985: a0 = a1 ^ a2\n 81988: u64 [s1 + 0x98] = a0\n 81992: ra = a2 <u a1\n 81995: a0 = u64 [s1 + 0x90]\n 81999: a1 = t2 <u a0\n 82002: a0 = u64 [s1 + 0x98]\n 82006: a1 = ra if a0 != 0\n 82009: a0 = t1 ^ a3\n 82012: a0 = a0 | a4\n 82015: a1 = a5 if a0 != 0\n 82018: jump @1028 if a1 == 0\n      : @1016 (gas: 12)\n 82022: u64 [s1 + 0x160] = t2\n 82026: u64 [s1 + 408] = 0\n 82030: u64 [s1 + 400] = 0\n 82034: u64 [s1 + 392] = 0\n 82038: u64 [s1 + 384] = 0x1\n 82043: u64 [s1 + 0x168] = a2\n 82047: u64 [s1 + 0x170] = a3\n 82051: a0 = s1 + 0x1a0\n 82055: a1 = s1 + 0x180\n 82059: a2 = s1 + 0x160\n 82063: u64 [s1 + 0x178] = t0\n 82067: ra = 896, jump @478\n      : @1017 [@dyn 448] (gas: 36)\n 82074: a0 = u64 [s1 + 0x1a0]\n 82078: a2 = u64 [s1 + 0x1b8]\n 82082: a1 = u64 [s1 + 0x1a8]\n 82086: a3 = u64 [s1 + 0x1b0]\n 82090: a4 = a0 + 0x6\n 82093: u64 [s1 + 0x78] = a0\n 82096: a0 = a4 <u a0\n 82099: a5 = a1 + a0\n 82102: u64 [s1 + 0x70] = a1\n 82105: a1 = a5 <u a1\n 82108: a1 = a0 if a0 == 0\n 82111: a1 = a1 + a3\n 82114: u64 [s1 + 0x60] = a3\n 82117: a0 = a1 <u a3\n 82120: u64 [s1 + 0x68] = a2\n 82123: a0 = a0 + a2\n 82126: u64 [s1 + 0x90] = a5\n 82130: u64 [s1 + 0x288] = a5\n 82134: u64 [s1 + 0x98] = a4\n 82138: u64 [s1 + 0x280] = a4\n 82142: u64 [s1 + 0x88] = a1\n 82146: u64 [s1 + 0x290] = a1\n 82150: u64 [s1 + 0x80] = a0\n 82154: u64 [s1 + 0x298] = a0\n 82158: u64 [s1 + 728] = 0\n 82162: u64 [s1 + 720] = 0\n 82166: u64 [s1 + 712] = 0\n 82170: u64 [s1 + 704] = 0\n 82174: u32 [s1 + 672] = 0x20\n 82179: i32 a1 = s1 + 0x280\n 82183: i32 a3 = s1 + 0x2c0\n 82187: i32 a4 = s1 + 0x2a0\n 82191: a2 = 0xffffffffffffffff\n 82194: a0 = 0\n 82196: ecalli 7 // 'get_storage'\n 82198: fallthrough\n      : @1018 (gas: 2)\n 82199: a0 = u8 [s1 + 0x2c0]\n 82203: jump @1033 if a0 != 0\n      : @1019 (gas: 28)\n 82207: a0 = u64 [s1 + 0x60]\n 82210: u64 [s1 + 0x290] = a0\n 82214: a0 = u64 [s1 + 0x70]\n 82217: u64 [s1 + 0x288] = a0\n 82221: a0 = u64 [s1 + 0x78]\n 82224: u64 [s1 + 0x280] = a0\n 82228: a0 = u64 [s1 + 0x68]\n 82231: u64 [s1 + 0x298] = a0\n 82235: u64 [s1 + 728] = 0\n 82239: u64 [s1 + 720] = 0\n 82243: u64 [s1 + 712] = 0\n 82247: u64 [s1 + 704] = 0\n 82251: u32 [s1 + 672] = 0x20\n 82256: i32 a1 = s1 + 0x280\n 82260: i32 a3 = s1 + 0x2c0\n 82264: i32 a4 = s1 + 0x2a0\n 82268: a2 = 0xffffffffffffffff\n 82271: a0 = 0\n 82273: ecalli 7 // 'get_storage'\n 82275: a0 = u64 [s1 + 0x2c8]\n 82279: u64 [s1 + 0x38] = a0\n 82282: a0 = u64 [s1 + 0x2c0]\n 82286: u64 [s1 + 0x30] = a0\n 82289: a0 = u32 [s1 + 0x2d0]\n 82293: u64 [s1 + 0x28] = a0\n 82296: i32 a0 = s1 + 0x220\n 82300: ecalli 4 // 'caller'\n 82302: fallthrough\n      : @1020 (gas: 22)\n 82303: a0 = u64 [s1 + 0x228]\n 82307: a1 = u64 [s1 + 0x220]\n 82311: a2 = i32 [s1 + 0x230]\n 82315: a0 = reverse a0\n 82317: a3 = a0 >> 0x20\n 82320: a1 = reverse a1\n 82322: a4 = a1 << 0x20\n 82325: a3 = a3 | a4\n 82328: a0 = a0 << 0x20\n 82331: a2 = reverse a2\n 82333: a2 = a2 >> 0x20\n 82336: a0 = a0 | a2\n 82339: a1 = a1 >> 0x20\n 82342: a2 = u64 [s1 + 0x28]\n 82345: a1 = a1 ^ a2\n 82348: a2 = u64 [s1 + 0x30]\n 82351: a0 = a0 ^ a2\n 82354: a0 = a0 | a1\n 82357: a1 = u64 [s1 + 0x38]\n 82360: a1 = a1 ^ a3\n 82363: a0 = a0 | a1\n 82366: jump @1038 if a0 == 0\n      : @1021 (gas: 52)\n 82370: a0 = sp + 0xffffffffffffffe0\n 82373: a0 = a0 & 0xffffffffffffffe0\n 82376: u64 [s1 + 0x20] = a0\n 82379: sp = a0\n 82381: u64 [a0 + 24] = 0\n 82384: u64 [a0 + 16] = 0\n 82387: u64 [a0 + 8] = 0\n 82390: u64 [a0 + 0] = 0\n 82392: i32 a0 = a0 + 0\n 82394: ecalli 14 // 'value_transferred'\n 82396: a1 = u64 [s1 + 0x20]\n 82399: a0 = u64 [a1]\n 82401: u64 [s1 + 0x38] = a0\n 82404: a0 = u64 [a1 + 0x10]\n 82407: a4 = a1\n 82409: u64 [s1 + 0x30] = a0\n 82412: a0 = u64 [s1 + 0x78]\n 82415: a2 = a0 + 0x5\n 82418: a0 = a2 <u a0\n 82421: a1 = u64 [s1 + 0x70]\n 82424: a3 = a1 + a0\n 82427: a1 = a3 <u a1\n 82430: a1 = a0 if a0 == 0\n 82433: a0 = u64 [a4 + 0x8]\n 82436: u64 [s1 + 0x28] = a0\n 82439: a0 = u64 [a4 + 0x18]\n 82442: u64 [s1 + 0x20] = a0\n 82445: a0 = u64 [s1 + 0x60]\n 82448: a4 = a0 + a1\n 82451: u32 [s1 + 672] = 0x20\n 82456: a0 = a4 <u a0\n 82459: a1 = u64 [s1 + 0x68]\n 82462: a0 = a0 + a1\n 82465: u64 [s1] = a0\n 82467: u64 [s1 + 0x298] = a0\n 82471: u64 [s1 + 0x8] = a4\n 82474: u64 [s1 + 0x290] = a4\n 82478: u64 [s1 + 0x10] = a3\n 82481: u64 [s1 + 0x288] = a3\n 82485: u64 [s1 + 0x18] = a2\n 82488: u64 [s1 + 0x280] = a2\n 82492: u64 [s1 + 728] = 0\n 82496: u64 [s1 + 720] = 0\n 82500: u64 [s1 + 712] = 0\n 82504: u64 [s1 + 704] = 0\n 82508: i32 a1 = s1 + 0x280\n 82512: i32 a3 = s1 + 0x2c0\n 82516: i32 a4 = s1 + 0x2a0\n 82520: a2 = 0xffffffffffffffff\n 82523: a0 = 0\n 82525: ecalli 7 // 'get_storage'\n 82527: fallthrough\n      : @1022 (gas: 16)\n 82528: a0 = u64 [s1 + 0x2d8]\n 82532: a1 = u64 [s1 + 0x2c8]\n 82536: a2 = u64 [s1 + 0x2c0]\n 82540: a3 = u64 [s1 + 0x2d0]\n 82544: a4 = u64 [s1 + 0x20]\n 82547: a0 = a0 ^ a4\n 82550: a4 = u64 [s1 + 0x28]\n 82553: a1 = a1 ^ a4\n 82556: a0 = a0 | a1\n 82559: a1 = u64 [s1 + 0x30]\n 82562: a1 = a1 ^ a3\n 82565: a3 = u64 [s1 + 0x38]\n 82568: a2 = a2 ^ a3\n 82571: a1 = a1 | a2\n 82574: a0 = a0 | a1\n 82577: jump @1043 if a0 != 0\n      : @1023 (gas: 162)\n 82581: a0 = u64 [s1 + 0x88]\n 82585: u64 [s1 + 0x290] = a0\n 82589: a0 = u64 [s1 + 0x90]\n 82593: u64 [s1 + 0x288] = a0\n 82597: a0 = u64 [s1 + 0x98]\n 82601: u64 [s1 + 0x280] = a0\n 82605: a0 = u64 [s1 + 0x80]\n 82609: u64 [s1 + 0x298] = a0\n 82613: u64 [s1 + 728] = 0\n 82617: u64 [s1 + 720] = 0\n 82621: u64 [s1 + 712] = 0\n 82625: u64 [s1 + 704] = 0\n 82629: u32 [s1 + 672] = 0x20\n 82634: i32 a1 = s1 + 0x280\n 82638: i32 a3 = s1 + 0x2c0\n 82642: i32 a4 = s1 + 0x2a0\n 82646: a2 = 0xffffffffffffffff\n 82649: a0 = 0\n 82651: ecalli 7 // 'get_storage'\n 82653: a0 = u64 [s1 + 0x2c0]\n 82657: a1 = u64 [s1 + 0x2c8]\n 82661: a2 = u64 [s1 + 0x2d0]\n 82665: a3 = u64 [s1 + 0x2d8]\n 82669: a0 = a0 & 0xffffffffffffff00\n 82673: a0 = a0 | 0x1\n 82676: a4 = u64 [s1 + 0x80]\n 82680: u64 [s1 + 0x298] = a4\n 82684: a4 = u64 [s1 + 0x88]\n 82688: u64 [s1 + 0x290] = a4\n 82692: a4 = u64 [s1 + 0x90]\n 82696: u64 [s1 + 0x288] = a4\n 82700: a4 = u64 [s1 + 0x98]\n 82704: u64 [s1 + 0x280] = a4\n 82708: u64 [s1 + 0x2d8] = a3\n 82712: u64 [s1 + 0x2d0] = a2\n 82716: u64 [s1 + 0x2c8] = a1\n 82720: u64 [s1 + 0x2c0] = a0\n 82724: i32 a1 = s1 + 0x280\n 82728: i32 a3 = s1 + 0x2c0\n 82732: a2 = 0xffffffffffffffff\n 82735: a4 = 0x20\n 82738: a0 = 0\n 82740: ecalli 13 // 'set_storage'\n 82742: i32 a0 = s1 + 0x240\n 82746: ecalli 4 // 'caller'\n 82748: a0 = u64 [s1 + 0x248]\n 82752: a1 = u64 [s1 + 0x240]\n 82756: a2 = i32 [s1 + 0x250]\n 82760: a0 = reverse a0\n 82762: u64 [s1 + 0x38] = a0\n 82765: a0 = reverse a1\n 82767: u64 [s1 + 0x30] = a0\n 82770: a0 = reverse a2\n 82772: u64 [s1 + 0x28] = a0\n 82775: a0 = u64 [s1 + 0x80]\n 82779: u64 [s1 + 0x298] = a0\n 82783: a0 = u64 [s1 + 0x88]\n 82787: u64 [s1 + 0x290] = a0\n 82791: a0 = u64 [s1 + 0x90]\n 82795: u64 [s1 + 0x288] = a0\n 82799: a0 = u64 [s1 + 0x98]\n 82803: u64 [s1 + 0x280] = a0\n 82807: u64 [s1 + 728] = 0\n 82811: u64 [s1 + 720] = 0\n 82815: u64 [s1 + 712] = 0\n 82819: u64 [s1 + 704] = 0\n 82823: u32 [s1 + 672] = 0x20\n 82828: i32 a1 = s1 + 0x280\n 82832: i32 a3 = s1 + 0x2c0\n 82836: i32 a4 = s1 + 0x2a0\n 82840: a2 = 0xffffffffffffffff\n 82843: a0 = 0\n 82845: ecalli 7 // 'get_storage'\n 82847: a0 = u32 [s1 + 0x2c0]\n 82851: a1 = u64 [s1 + 0x2d8]\n 82855: a2 = u64 [s1 + 0x28]\n 82858: a2 = a2 >> 0x20\n 82861: a2 = a2 << 0x20\n 82864: a0 = a0 | a2\n 82867: a2 = u64 [s1 + 0x80]\n 82871: u64 [s1 + 0x298] = a2\n 82875: a2 = u64 [s1 + 0x88]\n 82879: u64 [s1 + 0x290] = a2\n 82883: a2 = u64 [s1 + 0x90]\n 82887: u64 [s1 + 0x288] = a2\n 82891: a2 = u64 [s1 + 0x98]\n 82895: u64 [s1 + 0x280] = a2\n 82899: u64 [s1 + 0x2d8] = a1\n 82903: a1 = u64 [s1 + 0x30]\n 82906: u64 [s1 + 0x2d0] = a1\n 82910: a1 = u64 [s1 + 0x38]\n 82913: u64 [s1 + 0x2c8] = a1\n 82917: u64 [s1 + 0x2c0] = a0\n 82921: i32 a1 = s1 + 0x280\n 82925: i32 a3 = s1 + 0x2c0\n 82929: a2 = 0xffffffffffffffff\n 82932: a4 = 0x20\n 82935: a0 = 0\n 82937: ecalli 13 // 'set_storage'\n 82939: a0 = u64 [s1 + 0x68]\n 82942: u64 [s1 + 0x298] = a0\n 82946: a0 = u64 [s1 + 0x60]\n 82949: u64 [s1 + 0x290] = a0\n 82953: a0 = u64 [s1 + 0x70]\n 82956: u64 [s1 + 0x288] = a0\n 82960: a0 = u64 [s1 + 0x78]\n 82963: u64 [s1 + 0x280] = a0\n 82967: u64 [s1 + 728] = 0\n 82971: u64 [s1 + 720] = 0\n 82975: u64 [s1 + 712] = 0\n 82979: u64 [s1 + 704] = 0\n 82983: u32 [s1 + 672] = 0x20\n 82988: i32 a1 = s1 + 0x280\n 82992: i32 a3 = s1 + 0x2c0\n 82996: i32 a4 = s1 + 0x2a0\n 83000: a2 = 0xffffffffffffffff\n 83003: a0 = 0\n 83005: ecalli 7 // 'get_storage'\n 83007: a0 = u64 [s1 + 0x2d0]\n 83011: u64 [s1 + 0x80] = a0\n 83015: a0 = u64 [s1 + 0x2c8]\n 83019: u64 [s1 + 0x90] = a0\n 83023: a0 = u64 [s1 + 0x2c0]\n 83027: u64 [s1 + 0x88] = a0\n 83031: i32 a0 = s1 + 0x260\n 83035: ecalli 4 // 'caller'\n 83037: a0 = u32 [s1 + 0x270]\n 83041: u64 [s1 + 0x78] = a0\n 83044: a0 = u64 [s1 + 0x268]\n 83048: u64 [s1 + 0x70] = a0\n 83051: a0 = u64 [s1 + 0x260]\n 83055: u64 [s1 + 0x98] = a0\n 83059: a0 = u64 [s1]\n 83061: u64 [s1 + 0x298] = a0\n 83065: a0 = u64 [s1 + 0x8]\n 83068: u64 [s1 + 0x290] = a0\n 83072: a0 = u64 [s1 + 0x10]\n 83075: u64 [s1 + 0x288] = a0\n 83079: a0 = u64 [s1 + 0x18]\n 83082: u64 [s1 + 0x280] = a0\n 83086: u64 [s1 + 728] = 0\n 83090: u64 [s1 + 720] = 0\n 83094: u64 [s1 + 712] = 0\n 83098: u64 [s1 + 704] = 0\n 83102: u32 [s1 + 672] = 0x20\n 83107: i32 a1 = s1 + 0x280\n 83111: i32 a3 = s1 + 0x2c0\n 83115: i32 a4 = s1 + 0x2a0\n 83119: a2 = 0xffffffffffffffff\n 83122: a0 = 0\n 83124: ecalli 7 // 'get_storage'\n 83126: a0 = u64 [s1 + 0x2d8]\n 83130: u64 [s1 + 0x30] = a0\n 83133: a0 = u64 [s1 + 0x2d0]\n 83137: u64 [s1 + 0x38] = a0\n 83140: a0 = u64 [s1 + 0x2c8]\n 83144: u64 [s1 + 0x60] = a0\n 83147: a0 = u64 [s1 + 0x2c0]\n 83151: u64 [s1 + 0x68] = a0\n 83154: a0 = 0x40\n 83157: a1 = 0x20\n 83160: ra = 898, jump @0\n      : @1024 [@dyn 449] (gas: 100)\n 83167: a1 = u8 [a0 + 0x11]\n 83170: a2 = u8 [a0 + 0x10]\n 83173: a3 = u8 [a0 + 0x12]\n 83176: a4 = u8 [a0 + 0x13]\n 83179: a1 = a1 << 0x8\n 83182: a1 = a1 | a2\n 83185: a3 = a3 << 0x10\n 83188: a4 = a4 << 0x18\n 83191: a3 = a3 | a4\n 83194: a1 = a1 | a3\n 83197: a2 = u8 [a0 + 0x15]\n 83200: a3 = u8 [a0 + 0x14]\n 83203: a4 = u8 [a0 + 0x16]\n 83206: a5 = u8 [a0 + 0x17]\n 83209: a2 = a2 << 0x8\n 83212: a2 = a2 | a3\n 83215: a4 = a4 << 0x10\n 83218: a5 = a5 << 0x18\n 83221: a4 = a4 | a5\n 83224: a2 = a2 | a4\n 83227: a2 = a2 << 0x20\n 83230: t0 = a2 | a1\n 83233: a2 = u8 [a0 + 0x1]\n 83236: a3 = u8 [a0]\n 83238: a4 = u8 [a0 + 0x2]\n 83241: a5 = u8 [a0 + 0x3]\n 83244: a2 = a2 << 0x8\n 83247: a2 = a2 | a3\n 83250: a4 = a4 << 0x10\n 83253: a5 = a5 << 0x18\n 83256: a4 = a4 | a5\n 83259: a2 = a2 | a4\n 83262: a3 = u8 [a0 + 0x5]\n 83265: a4 = u8 [a0 + 0x4]\n 83268: a5 = u8 [a0 + 0x6]\n 83271: a1 = u8 [a0 + 0x7]\n 83274: a3 = a3 << 0x8\n 83277: a3 = a3 | a4\n 83280: a5 = a5 << 0x10\n 83283: a1 = a1 << 0x18\n 83286: a1 = a1 | a5\n 83289: a1 = a1 | a3\n 83292: a1 = a1 << 0x20\n 83295: t1 = a1 | a2\n 83298: a1 = u8 [a0 + 0x19]\n 83301: a3 = u8 [a0 + 0x18]\n 83304: a4 = u8 [a0 + 0x1a]\n 83307: a5 = u8 [a0 + 0x1b]\n 83310: a1 = a1 << 0x8\n 83313: a1 = a1 | a3\n 83316: a4 = a4 << 0x10\n 83319: a5 = a5 << 0x18\n 83322: a4 = a4 | a5\n 83325: a1 = a1 | a4\n 83328: a3 = u8 [a0 + 0x1d]\n 83331: a4 = u8 [a0 + 0x1c]\n 83334: a5 = u8 [a0 + 0x1e]\n 83337: a2 = u8 [a0 + 0x1f]\n 83340: a3 = a3 << 0x8\n 83343: a3 = a3 | a4\n 83346: a5 = a5 << 0x10\n 83349: a2 = a2 << 0x18\n 83352: a2 = a2 | a5\n 83355: a2 = a2 | a3\n 83358: a2 = a2 << 0x20\n 83361: a3 = a2 | a1\n 83364: a1 = u8 [a0 + 0x9]\n 83367: a2 = u8 [a0 + 0x8]\n 83370: a4 = u8 [a0 + 0xa]\n 83373: a5 = u8 [a0 + 0xb]\n 83376: a1 = a1 << 0x8\n 83379: a1 = a1 | a2\n 83382: a4 = a4 << 0x10\n 83385: a5 = a5 << 0x18\n 83388: a4 = a4 | a5\n 83391: a1 = a1 | a4\n 83394: a2 = u8 [a0 + 0xd]\n 83397: a4 = u8 [a0 + 0xc]\n 83400: a5 = u8 [a0 + 0xe]\n 83403: a0 = u8 [a0 + 0xf]\n 83406: a2 = a2 << 0x8\n 83409: a2 = a2 | a4\n 83412: a5 = a5 << 0x10\n 83415: a0 = a0 << 0x18\n 83418: a0 = a0 | a5\n 83421: a0 = a0 | a2\n 83424: a0 = a0 << 0x20\n 83427: a0 = a0 | a1\n 83430: a1 = reverse a0\n 83432: a0 = reverse a3\n 83434: a2 = reverse t1\n 83436: a3 = reverse t0\n 83438: a2 = a2 | a3\n 83441: a3 = a0 | a1\n 83444: a3 = a3 | a2\n 83447: a3 = a3 >> 0x20\n 83450: a1 = a1 | a2\n 83453: a1 = a1 << 0x20\n 83456: a1 = a1 | a3\n 83459: jump @1049 if a1 != 0\n      : @1025 (gas: 22)\n 83463: a1 = u64 [s1 + 0x70]\n 83466: a1 = reverse a1\n 83468: a2 = a1 << 0x20\n 83471: a3 = u64 [s1 + 0x78]\n 83474: a3 = reverse a3\n 83476: a3 = a3 >> 0x20\n 83479: a2 = a2 | a3\n 83482: u64 [s1 + 0x78] = a2\n 83485: a2 = u64 [s1 + 0x98]\n 83489: a2 = reverse a2\n 83491: a2 = a2 << 0x20\n 83494: a1 = a1 >> 0x20\n 83497: a1 = a1 | a2\n 83500: u64 [s1 + 0x70] = a1\n 83503: a1 = u64 [s1 + 0x80]\n 83507: a1 = a1 << 0x20\n 83510: a1 = a1 >> 0x20\n 83513: u64 [s1 + 0x80] = a1\n 83517: i32 a0 = a0 + 0\n 83519: u64 [s1 + 0x28] = a0\n 83522: a1 = 0x20\n 83525: ra = 900, jump @0\n      : @1026 [@dyn 450] (gas: 71)\n 83532: a1 = u64 [s1 + 0x30]\n 83535: a1 = reverse a1\n 83537: a2 = u64 [s1 + 0x38]\n 83540: a2 = reverse a2\n 83542: a3 = u64 [s1 + 0x60]\n 83545: a3 = reverse a3\n 83547: a4 = u64 [s1 + 0x68]\n 83550: a4 = reverse a4\n 83552: a5 = a4 >> 0x38\n 83555: u8 [a0 + 0x1f] = a5\n 83558: a5 = a4 >> 0x30\n 83561: u8 [a0 + 0x1e] = a5\n 83564: a5 = a4 >> 0x28\n 83567: u8 [a0 + 0x1d] = a5\n 83570: a5 = a4 >> 0x20\n 83573: u8 [a0 + 0x1c] = a5\n 83576: a5 = a4 >> 0x18\n 83579: u8 [a0 + 0x1b] = a5\n 83582: a5 = a4 >> 0x10\n 83585: u8 [a0 + 0x1a] = a5\n 83588: a5 = a4 >> 0x8\n 83591: u8 [a0 + 0x19] = a5\n 83594: u8 [a0 + 0x18] = a4\n 83597: u8 [a0 + 0x10] = a3\n 83600: a4 = a3 >> 0x38\n 83603: u8 [a0 + 0x17] = a4\n 83606: a4 = a3 >> 0x30\n 83609: u8 [a0 + 0x16] = a4\n 83612: a4 = a3 >> 0x28\n 83615: u8 [a0 + 0x15] = a4\n 83618: a4 = a3 >> 0x20\n 83621: u8 [a0 + 0x14] = a4\n 83624: a4 = a3 >> 0x18\n 83627: u8 [a0 + 0x13] = a4\n 83630: a4 = a3 >> 0x10\n 83633: u8 [a0 + 0x12] = a4\n 83636: a3 = a3 >> 0x8\n 83639: u8 [a0 + 0x11] = a3\n 83642: u8 [a0 + 0x8] = a2\n 83645: a3 = a2 >> 0x38\n 83648: u8 [a0 + 0xf] = a3\n 83651: a3 = a2 >> 0x30\n 83654: u8 [a0 + 0xe] = a3\n 83657: a3 = a2 >> 0x28\n 83660: u8 [a0 + 0xd] = a3\n 83663: a3 = a2 >> 0x20\n 83666: u8 [a0 + 0xc] = a3\n 83669: a3 = a2 >> 0x18\n 83672: u8 [a0 + 0xb] = a3\n 83675: a3 = a2 >> 0x10\n 83678: u8 [a0 + 0xa] = a3\n 83681: a2 = a2 >> 0x8\n 83684: u8 [a0 + 0x9] = a2\n 83687: u8 [a0] = a1\n 83689: a2 = a1 >> 0x38\n 83692: u8 [a0 + 0x7] = a2\n 83695: a2 = a1 >> 0x30\n 83698: u8 [a0 + 0x6] = a2\n 83701: a2 = a1 >> 0x28\n 83704: u8 [a0 + 0x5] = a2\n 83707: a2 = a1 >> 0x20\n 83710: u8 [a0 + 0x4] = a2\n 83713: a2 = a1 >> 0x18\n 83716: u8 [a0 + 0x3] = a2\n 83719: a2 = a1 >> 0x10\n 83722: u8 [a0 + 0x2] = a2\n 83725: a1 = a1 >> 0x8\n 83728: u8 [a0 + 0x1] = a1\n 83731: a1 = 0x20\n 83734: a0 = u64 [s1 + 0x28]\n 83737: ra = 902, jump @0\n      : @1027 [@dyn 451] (gas: 51)\n 83744: a1 = u64 [0x20060]\n 83749: a2 = u64 [0x20068]\n 83754: a3 = u64 [0x20070]\n 83759: a4 = u64 [0x20078]\n 83764: u64 [s1 + 0x2d8] = a1\n 83768: u64 [s1 + 0x2d0] = a2\n 83772: u64 [s1 + 0x2c8] = a3\n 83776: u64 [s1 + 0x2c0] = a4\n 83780: a1 = u64 [s1 + 0x40]\n 83783: a1 = reverse a1\n 83785: u64 [s1 + 0x2f8] = a1\n 83789: a1 = u64 [s1 + 0x48]\n 83792: a1 = reverse a1\n 83794: u64 [s1 + 0x2f0] = a1\n 83798: a1 = u64 [s1 + 0x50]\n 83801: a1 = reverse a1\n 83803: u64 [s1 + 0x2e8] = a1\n 83807: a1 = u64 [s1 + 0x58]\n 83810: a1 = reverse a1\n 83812: u64 [s1 + 0x2e0] = a1\n 83816: a1 = u64 [s1 + 0x88]\n 83820: a1 = reverse a1\n 83822: u64 [s1 + 0x318] = a1\n 83826: a1 = u64 [s1 + 0x90]\n 83830: a1 = reverse a1\n 83832: u64 [s1 + 0x310] = a1\n 83836: a1 = u64 [s1 + 0x80]\n 83840: a1 = reverse a1\n 83842: u64 [s1 + 0x308] = a1\n 83846: a1 = u64 [s1 + 0x78]\n 83849: a1 = reverse a1\n 83851: u64 [s1 + 0x338] = a1\n 83855: a1 = u64 [s1 + 0x70]\n 83858: a1 = reverse a1\n 83860: u64 [s1 + 0x330] = a1\n 83864: a1 = u64 [s1 + 0x98]\n 83868: a1 = a1 << 0x20\n 83871: u64 [s1 + 0x328] = a1\n 83875: u64 [s1 + 768] = 0\n 83879: u64 [s1 + 800] = 0\n 83883: i32 a2 = a0 + 0\n 83885: i32 a0 = s1 + 0x2c0\n 83889: a1 = 0x4\n 83892: a3 = 0x20\n 83895: ecalli 6 // 'deposit_event'\n 83897: sp = s0 + 0xfffffffffffffca0\n 83901: ra = u64 [sp + 0x358]\n 83905: s0 = u64 [sp + 0x350]\n 83909: s1 = u64 [sp + 0x348]\n 83913: sp = sp + 0x360\n 83917: ret\n      : @1028 (gas: 3)\n 83919: a0 = 0x40\n 83922: a1 = 0x20\n 83925: ra = 904, jump @0\n      : @1029 [@dyn 452] (gas: 104)\n 83932: a1 = u8 [a0 + 0x11]\n 83935: a2 = u8 [a0 + 0x10]\n 83938: a3 = u8 [a0 + 0x12]\n 83941: a4 = u8 [a0 + 0x13]\n 83944: a1 = a1 << 0x8\n 83947: a1 = a1 | a2\n 83950: a3 = a3 << 0x10\n 83953: a4 = a4 << 0x18\n 83956: a3 = a3 | a4\n 83959: a1 = a1 | a3\n 83962: a2 = u8 [a0 + 0x15]\n 83965: a3 = u8 [a0 + 0x14]\n 83968: a4 = u8 [a0 + 0x16]\n 83971: a5 = u8 [a0 + 0x17]\n 83974: a2 = a2 << 0x8\n 83977: a2 = a2 | a3\n 83980: a4 = a4 << 0x10\n 83983: a5 = a5 << 0x18\n 83986: a4 = a4 | a5\n 83989: a2 = a2 | a4\n 83992: a2 = a2 << 0x20\n 83995: t0 = a2 | a1\n 83998: a2 = u8 [a0 + 0x1]\n 84001: a3 = u8 [a0]\n 84003: a4 = u8 [a0 + 0x2]\n 84006: a5 = u8 [a0 + 0x3]\n 84009: a2 = a2 << 0x8\n 84012: a2 = a2 | a3\n 84015: a4 = a4 << 0x10\n 84018: a5 = a5 << 0x18\n 84021: a4 = a4 | a5\n 84024: a2 = a2 | a4\n 84027: a3 = u8 [a0 + 0x5]\n 84030: a4 = u8 [a0 + 0x4]\n 84033: a5 = u8 [a0 + 0x6]\n 84036: a1 = u8 [a0 + 0x7]\n 84039: a3 = a3 << 0x8\n 84042: a3 = a3 | a4\n 84045: a5 = a5 << 0x10\n 84048: a1 = a1 << 0x18\n 84051: a1 = a1 | a5\n 84054: a1 = a1 | a3\n 84057: a1 = a1 << 0x20\n 84060: t1 = a1 | a2\n 84063: a1 = u8 [a0 + 0x19]\n 84066: a3 = u8 [a0 + 0x18]\n 84069: a4 = u8 [a0 + 0x1a]\n 84072: a5 = u8 [a0 + 0x1b]\n 84075: a1 = a1 << 0x8\n 84078: a1 = a1 | a3\n 84081: a4 = a4 << 0x10\n 84084: a5 = a5 << 0x18\n 84087: a4 = a4 | a5\n 84090: a1 = a1 | a4\n 84093: a3 = u8 [a0 + 0x1d]\n 84096: a4 = u8 [a0 + 0x1c]\n 84099: a5 = u8 [a0 + 0x1e]\n 84102: a2 = u8 [a0 + 0x1f]\n 84105: a3 = a3 << 0x8\n 84108: a3 = a3 | a4\n 84111: a5 = a5 << 0x10\n 84114: a2 = a2 << 0x18\n 84117: a2 = a2 | a5\n 84120: a2 = a2 | a3\n 84123: a2 = a2 << 0x20\n 84126: a3 = a2 | a1\n 84129: a1 = u8 [a0 + 0x9]\n 84132: a2 = u8 [a0 + 0x8]\n 84135: a4 = u8 [a0 + 0xa]\n 84138: a5 = u8 [a0 + 0xb]\n 84141: a1 = a1 << 0x8\n 84144: a1 = a1 | a2\n 84147: a4 = a4 << 0x10\n 84150: a5 = a5 << 0x18\n 84153: a4 = a4 | a5\n 84156: a1 = a1 | a4\n 84159: a2 = u8 [a0 + 0xd]\n 84162: a4 = u8 [a0 + 0xc]\n 84165: a5 = u8 [a0 + 0xe]\n 84168: a0 = u8 [a0 + 0xf]\n 84171: a2 = a2 << 0x8\n 84174: a2 = a2 | a4\n 84177: a5 = a5 << 0x10\n 84180: a0 = a0 << 0x18\n 84183: a0 = a0 | a5\n 84186: a0 = a0 | a2\n 84189: a0 = a0 << 0x20\n 84192: a0 = a0 | a1\n 84195: a4 = reverse a0\n 84197: a1 = reverse a3\n 84199: a2 = reverse t1\n 84201: a0 = reverse t0\n 84203: u64 [s1 + 0x98] = a0\n 84207: u64 [s1 + 0x88] = a2\n 84211: a0 = a0 | a2\n 84214: a2 = a1\n 84216: a1 = a1 | a4\n 84219: a1 = a1 | a0\n 84222: a1 = a1 >> 0x20\n 84225: u64 [s1 + 0x90] = a4\n 84229: a0 = a0 | a4\n 84232: a0 = a0 << 0x20\n 84235: a0 = a0 | a1\n 84238: jump @1049 if a0 != 0\n      : @1030 (gas: 5)\n 84242: u64 [s1 + 0x80] = a2\n 84246: i32 a0 = a2 + 0\n 84248: a1 = 0x20\n 84251: u64 [s1 + 0x78] = a0\n 84254: ra = 906, jump @0\n      : @1031 [@dyn 453] (gas: 51)\n 84261: u8 [a0 + 31] = 0\n 84264: u8 [a0 + 30] = 0\n 84267: u8 [a0 + 29] = 0\n 84270: u8 [a0 + 28] = 0\n 84273: u8 [a0 + 27] = 0\n 84276: u8 [a0 + 26] = 0\n 84279: u8 [a0 + 25] = 0\n 84282: u8 [a0 + 24] = 0\n 84285: u8 [a0 + 23] = 0\n 84288: u8 [a0 + 22] = 0\n 84291: u8 [a0 + 21] = 0\n 84294: u8 [a0 + 20] = 0\n 84297: u8 [a0 + 19] = 0\n 84300: u8 [a0 + 18] = 0\n 84303: u8 [a0 + 17] = 0\n 84306: u8 [a0 + 16] = 0\n 84309: u8 [a0 + 15] = 0\n 84312: u8 [a0 + 14] = 0\n 84315: u8 [a0 + 13] = 0\n 84318: u8 [a0 + 12] = 0\n 84321: u8 [a0 + 11] = 0\n 84324: u8 [a0 + 10] = 0\n 84327: u8 [a0 + 9] = 0\n 84330: u8 [a0 + 8] = 0\n 84333: u8 [a0 + 7] = 0\n 84336: u8 [a0 + 6] = 0\n 84339: u8 [a0 + 5] = 0\n 84342: u8 [a0 + 4] = 0\n 84345: u8 [a0 + 3] = 0xa0\n 84350: u8 [a0 + 2] = 0x79\n 84354: u8 [a0 + 1] = 0xc3\n 84359: u8 [a0 + 0] = 0x8\n 84362: a1 = u64 [s1 + 0x80]\n 84366: a0 = a1 + 0x4\n 84369: a1 = a0 <u a1\n 84372: a3 = u64 [s1 + 0x98]\n 84376: a2 = a3 + a1\n 84379: a3 = a2 <u a3\n 84382: a3 = a1 if a1 == 0\n 84385: a1 = u64 [s1 + 0x90]\n 84389: a3 = a3 + a1\n 84392: a1 = a3 <u a1\n 84395: a4 = u64 [s1 + 0x88]\n 84399: a4 = a4 + a1\n 84402: u64 [s1 + 0x1e8] = a2\n 84406: u64 [s1 + 0x1e0] = a0\n 84410: u64 [s1 + 0x1f0] = a3\n 84414: a0 = s1 + 0x200\n 84418: a1 = s1 + 0x1e0\n 84422: u64 [s1 + 0x1f8] = a4\n 84426: ra = 908, jump @731\n      : @1032 [@dyn 454] (gas: 5)\n 84432: a0 = u64 [s1 + 0x208]\n 84436: t0 = u64 [s1 + 0x218]\n 84440: t1 = u64 [s1 + 0x200]\n 84444: a3 = u64 [s1 + 0x210]\n 84448: jump @1048\n      : @1033 (gas: 3)\n 84451: a0 = 0x40\n 84454: a1 = 0x20\n 84457: ra = 910, jump @0\n      : @1034 [@dyn 455] (gas: 104)\n 84464: a1 = u8 [a0 + 0x11]\n 84467: a2 = u8 [a0 + 0x10]\n 84470: a3 = u8 [a0 + 0x12]\n 84473: a4 = u8 [a0 + 0x13]\n 84476: a1 = a1 << 0x8\n 84479: a1 = a1 | a2\n 84482: a3 = a3 << 0x10\n 84485: a4 = a4 << 0x18\n 84488: a3 = a3 | a4\n 84491: a1 = a1 | a3\n 84494: a2 = u8 [a0 + 0x15]\n 84497: a3 = u8 [a0 + 0x14]\n 84500: a4 = u8 [a0 + 0x16]\n 84503: a5 = u8 [a0 + 0x17]\n 84506: a2 = a2 << 0x8\n 84509: a2 = a2 | a3\n 84512: a4 = a4 << 0x10\n 84515: a5 = a5 << 0x18\n 84518: a4 = a4 | a5\n 84521: a2 = a2 | a4\n 84524: a2 = a2 << 0x20\n 84527: t0 = a2 | a1\n 84530: a2 = u8 [a0 + 0x1]\n 84533: a3 = u8 [a0]\n 84535: a4 = u8 [a0 + 0x2]\n 84538: a5 = u8 [a0 + 0x3]\n 84541: a2 = a2 << 0x8\n 84544: a2 = a2 | a3\n 84547: a4 = a4 << 0x10\n 84550: a5 = a5 << 0x18\n 84553: a4 = a4 | a5\n 84556: a2 = a2 | a4\n 84559: a3 = u8 [a0 + 0x5]\n 84562: a4 = u8 [a0 + 0x4]\n 84565: a5 = u8 [a0 + 0x6]\n 84568: a1 = u8 [a0 + 0x7]\n 84571: a3 = a3 << 0x8\n 84574: a3 = a3 | a4\n 84577: a5 = a5 << 0x10\n 84580: a1 = a1 << 0x18\n 84583: a1 = a1 | a5\n 84586: a1 = a1 | a3\n 84589: a1 = a1 << 0x20\n 84592: t1 = a1 | a2\n 84595: a1 = u8 [a0 + 0x19]\n 84598: a3 = u8 [a0 + 0x18]\n 84601: a4 = u8 [a0 + 0x1a]\n 84604: a5 = u8 [a0 + 0x1b]\n 84607: a1 = a1 << 0x8\n 84610: a1 = a1 | a3\n 84613: a4 = a4 << 0x10\n 84616: a5 = a5 << 0x18\n 84619: a4 = a4 | a5\n 84622: a1 = a1 | a4\n 84625: a3 = u8 [a0 + 0x1d]\n 84628: a4 = u8 [a0 + 0x1c]\n 84631: a5 = u8 [a0 + 0x1e]\n 84634: a2 = u8 [a0 + 0x1f]\n 84637: a3 = a3 << 0x8\n 84640: a3 = a3 | a4\n 84643: a5 = a5 << 0x10\n 84646: a2 = a2 << 0x18\n 84649: a2 = a2 | a5\n 84652: a2 = a2 | a3\n 84655: a2 = a2 << 0x20\n 84658: a3 = a2 | a1\n 84661: a1 = u8 [a0 + 0x9]\n 84664: a2 = u8 [a0 + 0x8]\n 84667: a4 = u8 [a0 + 0xa]\n 84670: a5 = u8 [a0 + 0xb]\n 84673: a1 = a1 << 0x8\n 84676: a1 = a1 | a2\n 84679: a4 = a4 << 0x10\n 84682: a5 = a5 << 0x18\n 84685: a4 = a4 | a5\n 84688: a1 = a1 | a4\n 84691: a2 = u8 [a0 + 0xd]\n 84694: a4 = u8 [a0 + 0xc]\n 84697: a5 = u8 [a0 + 0xe]\n 84700: a0 = u8 [a0 + 0xf]\n 84703: a2 = a2 << 0x8\n 84706: a2 = a2 | a4\n 84709: a5 = a5 << 0x10\n 84712: a0 = a0 << 0x18\n 84715: a0 = a0 | a5\n 84718: a0 = a0 | a2\n 84721: a0 = a0 << 0x20\n 84724: a0 = a0 | a1\n 84727: a4 = reverse a0\n 84729: a1 = reverse a3\n 84731: a2 = reverse t1\n 84733: a0 = reverse t0\n 84735: u64 [s1 + 0x98] = a0\n 84739: u64 [s1 + 0x88] = a2\n 84743: a0 = a0 | a2\n 84746: a2 = a1\n 84748: a1 = a1 | a4\n 84751: a1 = a1 | a0\n 84754: a1 = a1 >> 0x20\n 84757: u64 [s1 + 0x90] = a4\n 84761: a0 = a0 | a4\n 84764: a0 = a0 << 0x20\n 84767: a0 = a0 | a1\n 84770: jump @1049 if a0 != 0\n      : @1035 (gas: 5)\n 84774: u64 [s1 + 0x80] = a2\n 84778: i32 a0 = a2 + 0\n 84780: a1 = 0x20\n 84783: u64 [s1 + 0x78] = a0\n 84786: ra = 912, jump @0\n      : @1036 [@dyn 456] (gas: 51)\n 84793: u8 [a0 + 31] = 0\n 84796: u8 [a0 + 30] = 0\n 84799: u8 [a0 + 29] = 0\n 84802: u8 [a0 + 28] = 0\n 84805: u8 [a0 + 27] = 0\n 84808: u8 [a0 + 26] = 0\n 84811: u8 [a0 + 25] = 0\n 84814: u8 [a0 + 24] = 0\n 84817: u8 [a0 + 23] = 0\n 84820: u8 [a0 + 22] = 0\n 84823: u8 [a0 + 21] = 0\n 84826: u8 [a0 + 20] = 0\n 84829: u8 [a0 + 19] = 0\n 84832: u8 [a0 + 18] = 0\n 84835: u8 [a0 + 17] = 0\n 84838: u8 [a0 + 16] = 0\n 84841: u8 [a0 + 15] = 0\n 84844: u8 [a0 + 14] = 0\n 84847: u8 [a0 + 13] = 0\n 84850: u8 [a0 + 12] = 0\n 84853: u8 [a0 + 11] = 0\n 84856: u8 [a0 + 10] = 0\n 84859: u8 [a0 + 9] = 0\n 84862: u8 [a0 + 8] = 0\n 84865: u8 [a0 + 7] = 0\n 84868: u8 [a0 + 6] = 0\n 84871: u8 [a0 + 5] = 0\n 84874: u8 [a0 + 4] = 0\n 84877: u8 [a0 + 3] = 0xa0\n 84882: u8 [a0 + 2] = 0x79\n 84886: u8 [a0 + 1] = 0xc3\n 84891: u8 [a0 + 0] = 0x8\n 84894: a1 = u64 [s1 + 0x80]\n 84898: a0 = a1 + 0x4\n 84901: a1 = a0 <u a1\n 84904: a3 = u64 [s1 + 0x98]\n 84908: a2 = a3 + a1\n 84911: a3 = a2 <u a3\n 84914: a3 = a1 if a1 == 0\n 84917: a1 = u64 [s1 + 0x90]\n 84921: a3 = a3 + a1\n 84924: a1 = a3 <u a1\n 84927: a4 = u64 [s1 + 0x88]\n 84931: a4 = a4 + a1\n 84934: u64 [s1 + 0x128] = a2\n 84938: u64 [s1 + 0x120] = a0\n 84942: u64 [s1 + 0x130] = a3\n 84946: a0 = s1 + 0x140\n 84950: a1 = s1 + 0x120\n 84954: u64 [s1 + 0x138] = a4\n 84958: ra = 914, jump @990\n      : @1037 [@dyn 457] (gas: 5)\n 84964: a0 = u64 [s1 + 0x148]\n 84968: t0 = u64 [s1 + 0x158]\n 84972: t1 = u64 [s1 + 0x140]\n 84976: a3 = u64 [s1 + 0x150]\n 84980: jump @1048\n      : @1038 (gas: 3)\n 84983: a0 = 0x40\n 84986: a1 = 0x20\n 84989: ra = 916, jump @0\n      : @1039 [@dyn 458] (gas: 104)\n 84996: a1 = u8 [a0 + 0x11]\n 84999: a2 = u8 [a0 + 0x10]\n 85002: a3 = u8 [a0 + 0x12]\n 85005: a4 = u8 [a0 + 0x13]\n 85008: a1 = a1 << 0x8\n 85011: a1 = a1 | a2\n 85014: a3 = a3 << 0x10\n 85017: a4 = a4 << 0x18\n 85020: a3 = a3 | a4\n 85023: a1 = a1 | a3\n 85026: a2 = u8 [a0 + 0x15]\n 85029: a3 = u8 [a0 + 0x14]\n 85032: a4 = u8 [a0 + 0x16]\n 85035: a5 = u8 [a0 + 0x17]\n 85038: a2 = a2 << 0x8\n 85041: a2 = a2 | a3\n 85044: a4 = a4 << 0x10\n 85047: a5 = a5 << 0x18\n 85050: a4 = a4 | a5\n 85053: a2 = a2 | a4\n 85056: a2 = a2 << 0x20\n 85059: t0 = a2 | a1\n 85062: a2 = u8 [a0 + 0x1]\n 85065: a3 = u8 [a0]\n 85067: a4 = u8 [a0 + 0x2]\n 85070: a5 = u8 [a0 + 0x3]\n 85073: a2 = a2 << 0x8\n 85076: a2 = a2 | a3\n 85079: a4 = a4 << 0x10\n 85082: a5 = a5 << 0x18\n 85085: a4 = a4 | a5\n 85088: a2 = a2 | a4\n 85091: a3 = u8 [a0 + 0x5]\n 85094: a4 = u8 [a0 + 0x4]\n 85097: a5 = u8 [a0 + 0x6]\n 85100: a1 = u8 [a0 + 0x7]\n 85103: a3 = a3 << 0x8\n 85106: a3 = a3 | a4\n 85109: a5 = a5 << 0x10\n 85112: a1 = a1 << 0x18\n 85115: a1 = a1 | a5\n 85118: a1 = a1 | a3\n 85121: a1 = a1 << 0x20\n 85124: t1 = a1 | a2\n 85127: a1 = u8 [a0 + 0x19]\n 85130: a3 = u8 [a0 + 0x18]\n 85133: a4 = u8 [a0 + 0x1a]\n 85136: a5 = u8 [a0 + 0x1b]\n 85139: a1 = a1 << 0x8\n 85142: a1 = a1 | a3\n 85145: a4 = a4 << 0x10\n 85148: a5 = a5 << 0x18\n 85151: a4 = a4 | a5\n 85154: a1 = a1 | a4\n 85157: a3 = u8 [a0 + 0x1d]\n 85160: a4 = u8 [a0 + 0x1c]\n 85163: a5 = u8 [a0 + 0x1e]\n 85166: a2 = u8 [a0 + 0x1f]\n 85169: a3 = a3 << 0x8\n 85172: a3 = a3 | a4\n 85175: a5 = a5 << 0x10\n 85178: a2 = a2 << 0x18\n 85181: a2 = a2 | a5\n 85184: a2 = a2 | a3\n 85187: a2 = a2 << 0x20\n 85190: a3 = a2 | a1\n 85193: a1 = u8 [a0 + 0x9]\n 85196: a2 = u8 [a0 + 0x8]\n 85199: a4 = u8 [a0 + 0xa]\n 85202: a5 = u8 [a0 + 0xb]\n 85205: a1 = a1 << 0x8\n 85208: a1 = a1 | a2\n 85211: a4 = a4 << 0x10\n 85214: a5 = a5 << 0x18\n 85217: a4 = a4 | a5\n 85220: a1 = a1 | a4\n 85223: a2 = u8 [a0 + 0xd]\n 85226: a4 = u8 [a0 + 0xc]\n 85229: a5 = u8 [a0 + 0xe]\n 85232: a0 = u8 [a0 + 0xf]\n 85235: a2 = a2 << 0x8\n 85238: a2 = a2 | a4\n 85241: a5 = a5 << 0x10\n 85244: a0 = a0 << 0x18\n 85247: a0 = a0 | a5\n 85250: a0 = a0 | a2\n 85253: a0 = a0 << 0x20\n 85256: a0 = a0 | a1\n 85259: a4 = reverse a0\n 85261: a1 = reverse a3\n 85263: a2 = reverse t1\n 85265: a0 = reverse t0\n 85267: u64 [s1 + 0x98] = a0\n 85271: u64 [s1 + 0x88] = a2\n 85275: a0 = a0 | a2\n 85278: a2 = a1\n 85280: a1 = a1 | a4\n 85283: a1 = a1 | a0\n 85286: a1 = a1 >> 0x20\n 85289: u64 [s1 + 0x90] = a4\n 85293: a0 = a0 | a4\n 85296: a0 = a0 << 0x20\n 85299: a0 = a0 | a1\n 85302: jump @1049 if a0 != 0\n      : @1040 (gas: 5)\n 85306: u64 [s1 + 0x80] = a2\n 85310: i32 a0 = a2 + 0\n 85312: a1 = 0x20\n 85315: u64 [s1 + 0x78] = a0\n 85318: ra = 918, jump @0\n      : @1041 [@dyn 459] (gas: 51)\n 85325: u8 [a0 + 31] = 0\n 85328: u8 [a0 + 30] = 0\n 85331: u8 [a0 + 29] = 0\n 85334: u8 [a0 + 28] = 0\n 85337: u8 [a0 + 27] = 0\n 85340: u8 [a0 + 26] = 0\n 85343: u8 [a0 + 25] = 0\n 85346: u8 [a0 + 24] = 0\n 85349: u8 [a0 + 23] = 0\n 85352: u8 [a0 + 22] = 0\n 85355: u8 [a0 + 21] = 0\n 85358: u8 [a0 + 20] = 0\n 85361: u8 [a0 + 19] = 0\n 85364: u8 [a0 + 18] = 0\n 85367: u8 [a0 + 17] = 0\n 85370: u8 [a0 + 16] = 0\n 85373: u8 [a0 + 15] = 0\n 85376: u8 [a0 + 14] = 0\n 85379: u8 [a0 + 13] = 0\n 85382: u8 [a0 + 12] = 0\n 85385: u8 [a0 + 11] = 0\n 85388: u8 [a0 + 10] = 0\n 85391: u8 [a0 + 9] = 0\n 85394: u8 [a0 + 8] = 0\n 85397: u8 [a0 + 7] = 0\n 85400: u8 [a0 + 6] = 0\n 85403: u8 [a0 + 5] = 0\n 85406: u8 [a0 + 4] = 0\n 85409: u8 [a0 + 3] = 0xa0\n 85414: u8 [a0 + 2] = 0x79\n 85418: u8 [a0 + 1] = 0xc3\n 85423: u8 [a0 + 0] = 0x8\n 85426: a1 = u64 [s1 + 0x80]\n 85430: a0 = a1 + 0x4\n 85433: a1 = a0 <u a1\n 85436: a3 = u64 [s1 + 0x98]\n 85440: a2 = a3 + a1\n 85443: a3 = a2 <u a3\n 85446: a3 = a1 if a1 == 0\n 85449: a1 = u64 [s1 + 0x90]\n 85453: a3 = a3 + a1\n 85456: a1 = a3 <u a1\n 85459: a4 = u64 [s1 + 0x88]\n 85463: a4 = a4 + a1\n 85466: u64 [s1 + 0xa8] = a2\n 85470: u64 [s1 + 0xa0] = a0\n 85474: u64 [s1 + 0xb0] = a3\n 85478: a0 = s1 + 0xc0\n 85482: a1 = s1 + 0xa0\n 85486: u64 [s1 + 0xb8] = a4\n 85490: ra = 920, jump @998\n      : @1042 [@dyn 460] (gas: 5)\n 85496: a0 = u64 [s1 + 0xc8]\n 85500: t0 = u64 [s1 + 0xd8]\n 85504: t1 = u64 [s1 + 0xc0]\n 85508: a3 = u64 [s1 + 0xd0]\n 85512: jump @1048\n      : @1043 (gas: 3)\n 85515: a0 = 0x40\n 85518: a1 = 0x20\n 85521: ra = 922, jump @0\n      : @1044 [@dyn 461] (gas: 104)\n 85528: a1 = u8 [a0 + 0x11]\n 85531: a2 = u8 [a0 + 0x10]\n 85534: a3 = u8 [a0 + 0x12]\n 85537: a4 = u8 [a0 + 0x13]\n 85540: a1 = a1 << 0x8\n 85543: a1 = a1 | a2\n 85546: a3 = a3 << 0x10\n 85549: a4 = a4 << 0x18\n 85552: a3 = a3 | a4\n 85555: a1 = a1 | a3\n 85558: a2 = u8 [a0 + 0x15]\n 85561: a3 = u8 [a0 + 0x14]\n 85564: a4 = u8 [a0 + 0x16]\n 85567: a5 = u8 [a0 + 0x17]\n 85570: a2 = a2 << 0x8\n 85573: a2 = a2 | a3\n 85576: a4 = a4 << 0x10\n 85579: a5 = a5 << 0x18\n 85582: a4 = a4 | a5\n 85585: a2 = a2 | a4\n 85588: a2 = a2 << 0x20\n 85591: t0 = a2 | a1\n 85594: a2 = u8 [a0 + 0x1]\n 85597: a3 = u8 [a0]\n 85599: a4 = u8 [a0 + 0x2]\n 85602: a5 = u8 [a0 + 0x3]\n 85605: a2 = a2 << 0x8\n 85608: a2 = a2 | a3\n 85611: a4 = a4 << 0x10\n 85614: a5 = a5 << 0x18\n 85617: a4 = a4 | a5\n 85620: a2 = a2 | a4\n 85623: a3 = u8 [a0 + 0x5]\n 85626: a4 = u8 [a0 + 0x4]\n 85629: a5 = u8 [a0 + 0x6]\n 85632: a1 = u8 [a0 + 0x7]\n 85635: a3 = a3 << 0x8\n 85638: a3 = a3 | a4\n 85641: a5 = a5 << 0x10\n 85644: a1 = a1 << 0x18\n 85647: a1 = a1 | a5\n 85650: a1 = a1 | a3\n 85653: a1 = a1 << 0x20\n 85656: t1 = a1 | a2\n 85659: a1 = u8 [a0 + 0x19]\n 85662: a3 = u8 [a0 + 0x18]\n 85665: a4 = u8 [a0 + 0x1a]\n 85668: a5 = u8 [a0 + 0x1b]\n 85671: a1 = a1 << 0x8\n 85674: a1 = a1 | a3\n 85677: a4 = a4 << 0x10\n 85680: a5 = a5 << 0x18\n 85683: a4 = a4 | a5\n 85686: a1 = a1 | a4\n 85689: a3 = u8 [a0 + 0x1d]\n 85692: a4 = u8 [a0 + 0x1c]\n 85695: a5 = u8 [a0 + 0x1e]\n 85698: a2 = u8 [a0 + 0x1f]\n 85701: a3 = a3 << 0x8\n 85704: a3 = a3 | a4\n 85707: a5 = a5 << 0x10\n 85710: a2 = a2 << 0x18\n 85713: a2 = a2 | a5\n 85716: a2 = a2 | a3\n 85719: a2 = a2 << 0x20\n 85722: a3 = a2 | a1\n 85725: a1 = u8 [a0 + 0x9]\n 85728: a2 = u8 [a0 + 0x8]\n 85731: a4 = u8 [a0 + 0xa]\n 85734: a5 = u8 [a0 + 0xb]\n 85737: a1 = a1 << 0x8\n 85740: a1 = a1 | a2\n 85743: a4 = a4 << 0x10\n 85746: a5 = a5 << 0x18\n 85749: a4 = a4 | a5\n 85752: a1 = a1 | a4\n 85755: a2 = u8 [a0 + 0xd]\n 85758: a4 = u8 [a0 + 0xc]\n 85761: a5 = u8 [a0 + 0xe]\n 85764: a0 = u8 [a0 + 0xf]\n 85767: a2 = a2 << 0x8\n 85770: a2 = a2 | a4\n 85773: a5 = a5 << 0x10\n 85776: a0 = a0 << 0x18\n 85779: a0 = a0 | a5\n 85782: a0 = a0 | a2\n 85785: a0 = a0 << 0x20\n 85788: a0 = a0 | a1\n 85791: a4 = reverse a0\n 85793: a1 = reverse a3\n 85795: a2 = reverse t1\n 85797: a0 = reverse t0\n 85799: u64 [s1 + 0x98] = a0\n 85803: u64 [s1 + 0x88] = a2\n 85807: a0 = a0 | a2\n 85810: a2 = a1\n 85812: a1 = a1 | a4\n 85815: a1 = a1 | a0\n 85818: a1 = a1 >> 0x20\n 85821: u64 [s1 + 0x90] = a4\n 85825: a0 = a0 | a4\n 85828: a0 = a0 << 0x20\n 85831: a0 = a0 | a1\n 85834: jump @1049 if a0 != 0\n      : @1045 (gas: 5)\n 85838: u64 [s1 + 0x80] = a2\n 85842: i32 a0 = a2 + 0\n 85844: a1 = 0x20\n 85847: u64 [s1 + 0x78] = a0\n 85850: ra = 924, jump @0\n      : @1046 [@dyn 462] (gas: 51)\n 85857: u8 [a0 + 31] = 0\n 85860: u8 [a0 + 30] = 0\n 85863: u8 [a0 + 29] = 0\n 85866: u8 [a0 + 28] = 0\n 85869: u8 [a0 + 27] = 0\n 85872: u8 [a0 + 26] = 0\n 85875: u8 [a0 + 25] = 0\n 85878: u8 [a0 + 24] = 0\n 85881: u8 [a0 + 23] = 0\n 85884: u8 [a0 + 22] = 0\n 85887: u8 [a0 + 21] = 0\n 85890: u8 [a0 + 20] = 0\n 85893: u8 [a0 + 19] = 0\n 85896: u8 [a0 + 18] = 0\n 85899: u8 [a0 + 17] = 0\n 85902: u8 [a0 + 16] = 0\n 85905: u8 [a0 + 15] = 0\n 85908: u8 [a0 + 14] = 0\n 85911: u8 [a0 + 13] = 0\n 85914: u8 [a0 + 12] = 0\n 85917: u8 [a0 + 11] = 0\n 85920: u8 [a0 + 10] = 0\n 85923: u8 [a0 + 9] = 0\n 85926: u8 [a0 + 8] = 0\n 85929: u8 [a0 + 7] = 0\n 85932: u8 [a0 + 6] = 0\n 85935: u8 [a0 + 5] = 0\n 85938: u8 [a0 + 4] = 0\n 85941: u8 [a0 + 3] = 0xa0\n 85946: u8 [a0 + 2] = 0x79\n 85950: u8 [a0 + 1] = 0xc3\n 85955: u8 [a0 + 0] = 0x8\n 85958: a1 = u64 [s1 + 0x80]\n 85962: a0 = a1 + 0x4\n 85965: a1 = a0 <u a1\n 85968: a3 = u64 [s1 + 0x98]\n 85972: a2 = a3 + a1\n 85975: a3 = a2 <u a3\n 85978: a3 = a1 if a1 == 0\n 85981: a1 = u64 [s1 + 0x90]\n 85985: a3 = a3 + a1\n 85988: a1 = a3 <u a1\n 85991: a4 = u64 [s1 + 0x88]\n 85995: a4 = a4 + a1\n 85998: u64 [s1 + 0xe8] = a2\n 86002: u64 [s1 + 0xe0] = a0\n 86006: u64 [s1 + 0xf0] = a3\n 86010: a0 = s1 + 0x100\n 86014: a1 = s1 + 0xe0\n 86018: u64 [s1 + 0xf8] = a4\n 86022: ra = 926, jump @1006\n      : @1047 [@dyn 463] (gas: 5)\n 86028: a0 = u64 [s1 + 0x108]\n 86032: t0 = u64 [s1 + 0x118]\n 86036: t1 = u64 [s1 + 0x100]\n 86040: a3 = u64 [s1 + 0x110]\n 86044: fallthrough\n      : @1048 (gas: 27)\n 86045: a1 = u64 [s1 + 0x98]\n 86049: a4 = a0 ^ a1\n 86052: a5 = a0 <u a1\n 86055: ra = a1\n 86057: t2 = u64 [s1 + 0x80]\n 86061: a1 = t1 <u t2\n 86064: a5 = a1 if a4 == 0\n 86067: a2 = u64 [s1 + 0x90]\n 86071: a4 = a3 - a2\n 86074: a3 = a3 <u a2\n 86077: a2 = u64 [s1 + 0x88]\n 86081: a2 = t0 - a2\n 86084: a2 = a2 - a3\n 86087: a3 = a4 <u a5\n 86090: a2 = a2 - a3\n 86093: a4 = a4 - a5\n 86096: a0 = a0 - ra\n 86099: a1 = a0 - a1\n 86102: a0 = t1 - t2\n 86105: a1 = a1 | a2\n 86108: a2 = a0 | a4\n 86111: a2 = a2 | a1\n 86114: a1 = a1 | a4\n 86117: a2 = a2 >> 0x20\n 86120: a1 = a1 << 0x20\n 86123: a1 = a1 | a2\n 86126: jump @1050 if a1 == 0\n      : @1049 (gas: 1)\n 86129: trap\n      : @1050 (gas: 4)\n 86130: i32 a1 = a0 + 0\n 86132: u64 [s1 + 0x98] = a1\n 86136: a0 = u64 [s1 + 0x78]\n 86139: ra = 928, jump @0\n      : @1051 [@dyn 464] (gas: 6)\n 86146: i32 a1 = a0 + 0\n 86148: a0 = 0x1\n 86151: a2 = u64 [s1 + 0x98]\n 86155: ra = 0x3a2\n 86159: ecalli 11 // 'seal_return'\n 86161: fallthrough\n      : @1052 [@dyn 465] (gas: 14)\n 86162: sp = sp + 0xffffffffffffff40\n 86166: u64 [sp + 0xb8] = ra\n 86170: u64 [sp + 0xb0] = s0\n 86174: u64 [sp + 0xa8] = s1\n 86178: s0 = sp + 0xc0\n 86182: sp = sp & 0xffffffffffffffe0\n 86185: a1 = u64 [a0]\n 86187: u64 [sp + 0x18] = a1\n 86190: a1 = u64 [a0 + 0x8]\n 86193: u64 [sp + 0x10] = a1\n 86196: a1 = u64 [a0 + 0x10]\n 86199: u64 [sp + 0x8] = a1\n 86202: s1 = u64 [a0 + 0x18]\n 86205: ra = 932, jump @1108\n      : @1053 [@dyn 466] (gas: 9)\n 86211: u64 [sp + 0x38] = s1\n 86214: a0 = u64 [sp + 0x8]\n 86217: u64 [sp + 0x30] = a0\n 86220: a0 = u64 [sp + 0x10]\n 86223: u64 [sp + 0x28] = a0\n 86226: a0 = sp + 0x20\n 86229: a1 = u64 [sp + 0x18]\n 86232: u64 [sp + 0x20] = a1\n 86235: ra = 934, jump @1014\n      : @1054 [@dyn 467] (gas: 35)\n 86241: u64 [sp + 120] = 0\n 86244: u64 [sp + 112] = 0\n 86247: u64 [sp + 104] = 0\n 86250: u64 [sp + 96] = 0\n 86253: u64 [sp + 152] = 0\n 86257: u64 [sp + 144] = 0\n 86261: u64 [sp + 136] = 0\n 86265: u64 [sp + 128] = 0\n 86269: u32 [sp + 64] = 0x20\n 86273: i32 a1 = sp + 0x60\n 86276: i32 a3 = sp + 0x80\n 86280: i32 a4 = sp + 0x40\n 86283: a2 = 0xffffffffffffffff\n 86286: a0 = 0\n 86288: ecalli 7 // 'get_storage'\n 86290: u64 [sp + 120] = 0\n 86293: u64 [sp + 112] = 0\n 86296: u64 [sp + 104] = 0\n 86299: u64 [sp + 96] = 0\n 86302: u64 [sp + 152] = 0\n 86306: u64 [sp + 144] = 0\n 86310: u64 [sp + 136] = 0\n 86314: u64 [sp + 128] = 0x1\n 86319: i32 a1 = sp + 0x60\n 86322: i32 a3 = sp + 0x80\n 86326: a2 = 0xffffffffffffffff\n 86329: a4 = 0x20\n 86332: a0 = 0\n 86334: ecalli 13 // 'set_storage'\n 86336: sp = s0 + 0xffffffffffffff40\n 86340: ra = u64 [sp + 0xb8]\n 86344: s0 = u64 [sp + 0xb0]\n 86348: s1 = u64 [sp + 0xa8]\n 86352: sp = sp + 0xc0\n 86356: ret\n      : @1055 (gas: 17)\n 86358: sp = sp + 0xffffffffffffffa0\n 86361: u64 [sp + 0x58] = ra\n 86364: u64 [sp + 0x50] = s0\n 86367: u64 [sp + 0x48] = s1\n 86370: a3 = u64 [a1 + 0x18]\n 86373: a4 = u64 [a1 + 0x10]\n 86376: a5 = u64 [a1 + 0x8]\n 86379: s1 = u64 [a1]\n 86381: a1 = a5 | a3\n 86384: a2 = s1 | a4\n 86387: a2 = a2 | a1\n 86390: a2 = a2 >> 0x20\n 86393: a1 = a1 | a4\n 86396: a1 = a1 << 0x20\n 86399: a1 = a1 | a2\n 86402: u64 [sp + 0x28] = a0\n 86405: jump @1062 if a1 != 0\n      : @1056 (gas: 19)\n 86409: a0 = s1 + 0x20\n 86412: u64 [sp + 0x30] = a0\n 86415: a0 = a0 <u s1\n 86418: a1 = a5 + a0\n 86421: u64 [sp + 0x40] = a1\n 86424: u64 [sp + 0x8] = a5\n 86427: s0 = a1 <u a5\n 86430: s0 = a0 if a0 == 0\n 86433: s0 = s0 + a4\n 86436: u64 [sp + 0x10] = a4\n 86439: a0 = s0 <u a4\n 86442: u64 [sp + 0x18] = a3\n 86445: a0 = a0 + a3\n 86448: u64 [sp + 0x38] = a0\n 86451: u64 [sp] = s1\n 86453: i32 a0 = s1 + 0\n 86455: a1 = 0x20\n 86458: s1 = 0x20\n 86461: ra = 936, jump @0\n      : @1057 [@dyn 468] (gas: 45)\n 86468: u8 [a0 + 0x1f] = s1\n 86471: a1 = u64 [sp + 0x30]\n 86474: s1 = a1\n 86476: a1 = a1 | s0\n 86479: a2 = u64 [sp + 0x40]\n 86482: a4 = u64 [sp + 0x38]\n 86485: a2 = a2 | a4\n 86488: a1 = a1 | a2\n 86491: a1 = a1 >> 0x20\n 86494: u64 [sp + 0x20] = s0\n 86497: a2 = a2 | s0\n 86500: a2 = a2 << 0x20\n 86503: a1 = a1 | a2\n 86506: u8 [a0 + 30] = 0\n 86509: u8 [a0 + 29] = 0\n 86512: u8 [a0 + 28] = 0\n 86515: u8 [a0 + 27] = 0\n 86518: u8 [a0 + 26] = 0\n 86521: u8 [a0 + 25] = 0\n 86524: u8 [a0 + 24] = 0\n 86527: u8 [a0 + 23] = 0\n 86530: u8 [a0 + 22] = 0\n 86533: u8 [a0 + 21] = 0\n 86536: u8 [a0 + 20] = 0\n 86539: u8 [a0 + 19] = 0\n 86542: u8 [a0 + 18] = 0\n 86545: u8 [a0 + 17] = 0\n 86548: u8 [a0 + 16] = 0\n 86551: u8 [a0 + 15] = 0\n 86554: u8 [a0 + 14] = 0\n 86557: u8 [a0 + 13] = 0\n 86560: u8 [a0 + 12] = 0\n 86563: u8 [a0 + 11] = 0\n 86566: u8 [a0 + 10] = 0\n 86569: u8 [a0 + 9] = 0\n 86572: u8 [a0 + 8] = 0\n 86575: u8 [a0 + 7] = 0\n 86578: u8 [a0 + 6] = 0\n 86581: u8 [a0 + 5] = 0\n 86584: u8 [a0 + 4] = 0\n 86587: u8 [a0 + 3] = 0\n 86590: u8 [a0 + 2] = 0\n 86593: u8 [a0 + 1] = 0\n 86596: u8 [a0 + 0] = 0\n 86598: jump @1062 if a1 != 0\n      : @1058 (gas: 4)\n 86602: i32 s0 = s1 + 0\n 86604: a1 = 0x20\n 86607: a0 = s0\n 86609: ra = 938, jump @0\n      : @1059 [@dyn 469] (gas: 41)\n 86616: u8 [a0 + 31] = 0x18\n 86620: u8 [a0 + 30] = 0\n 86623: u8 [a0 + 29] = 0\n 86626: u8 [a0 + 28] = 0\n 86629: u8 [a0 + 27] = 0\n 86632: u8 [a0 + 26] = 0\n 86635: u8 [a0 + 25] = 0\n 86638: u8 [a0 + 24] = 0\n 86641: u8 [a0 + 23] = 0\n 86644: u8 [a0 + 22] = 0\n 86647: u8 [a0 + 21] = 0\n 86650: u8 [a0 + 20] = 0\n 86653: u8 [a0 + 19] = 0\n 86656: u8 [a0 + 18] = 0\n 86659: u8 [a0 + 17] = 0\n 86662: u8 [a0 + 16] = 0\n 86665: u8 [a0 + 15] = 0\n 86668: u8 [a0 + 14] = 0\n 86671: u8 [a0 + 13] = 0\n 86674: u8 [a0 + 12] = 0\n 86677: u8 [a0 + 11] = 0\n 86680: u8 [a0 + 10] = 0\n 86683: u8 [a0 + 9] = 0\n 86686: u8 [a0 + 8] = 0\n 86689: u8 [a0 + 7] = 0\n 86692: u8 [a0 + 6] = 0\n 86695: u8 [a0 + 5] = 0\n 86698: u8 [a0 + 4] = 0\n 86701: u8 [a0 + 3] = 0\n 86704: u8 [a0 + 2] = 0\n 86707: u8 [a0 + 1] = 0\n 86710: a1 = u64 [sp + 0x20]\n 86713: a2 = u64 [sp + 0x38]\n 86716: a1 = a1 | a2\n 86719: a2 = 0xffffffe0\n 86729: a2 = s1 <u a2\n 86732: a3 = u64 [sp + 0x40]\n 86735: a2 = 0 if a3 != 0\n 86737: a2 = 0 if a1 != 0\n 86739: u8 [a0 + 0] = 0\n 86741: jump @1062 if a2 == 0\n      : @1060 (gas: 3)\n 86745: i32 a0 = s0 + 0x20\n 86748: a1 = 0x20\n 86751: ra = 940, jump @0\n      : @1061 [@dyn 470] (gas: 55)\n 86758: u8 [a0 + 31] = 0\n 86761: u8 [a0 + 30] = 0\n 86764: u8 [a0 + 29] = 0\n 86767: u8 [a0 + 28] = 0\n 86770: u8 [a0 + 27] = 0\n 86773: u8 [a0 + 26] = 0\n 86776: u8 [a0 + 25] = 0\n 86779: u8 [a0 + 24] = 0\n 86782: u8 [a0 + 23] = 0x68\n 86786: u8 [a0 + 22] = 0x63\n 86790: u8 [a0 + 21] = 0x74\n 86794: u8 [a0 + 20] = 0x61\n 86798: u8 [a0 + 19] = 0x70\n 86802: u8 [a0 + 18] = 0x73\n 86806: u8 [a0 + 17] = 0x69\n 86810: u8 [a0 + 16] = 0x64\n 86814: a5 = 0x20\n 86817: u8 [a0 + 0xf] = a5\n 86820: u8 [a0 + 14] = 0x6e\n 86824: u8 [a0 + 13] = 0x61\n 86828: u8 [a0 + 12] = 0x63\n 86832: u8 [a0 + 0xb] = a5\n 86835: u8 [a0 + 10] = 0x72\n 86839: u8 [a0 + 9] = 0x65\n 86843: u8 [a0 + 8] = 0x6c\n 86847: u8 [a0 + 7] = 0x6c\n 86851: u8 [a0 + 6] = 0x65\n 86855: u8 [a0 + 5] = 0x73\n 86859: u8 [a0 + 0x4] = a5\n 86862: u8 [a0 + 3] = 0x79\n 86866: u8 [a0 + 2] = 0x6c\n 86870: u8 [a0 + 1] = 0x6e\n 86874: u8 [a0 + 0] = 0x4f\n 86877: a1 = u64 [sp]\n 86879: a0 = a1 + 0x60\n 86882: a1 = a0 <u a1\n 86885: a3 = u64 [sp + 0x8]\n 86888: a2 = a3 + a1\n 86891: a3 = a2 <u a3\n 86894: a3 = a1 if a1 == 0\n 86897: a1 = u64 [sp + 0x10]\n 86900: a3 = a3 + a1\n 86903: a1 = a3 <u a1\n 86906: a4 = u64 [sp + 0x18]\n 86909: a1 = a1 + a4\n 86912: a4 = u64 [sp + 0x28]\n 86915: u64 [a4] = a0\n 86917: u64 [a4 + 0x8] = a2\n 86920: u64 [a4 + 0x10] = a3\n 86923: u64 [a4 + 0x18] = a1\n 86926: ra = u64 [sp + 0x58]\n 86929: s0 = u64 [sp + 0x50]\n 86932: s1 = u64 [sp + 0x48]\n 86935: sp = sp + 0x60\n 86938: ret\n      : @1062 (gas: 1)\n 86940: trap\n      : @1063 (gas: 17)\n 86941: sp = sp + 0xffffffffffffffa0\n 86944: u64 [sp + 0x58] = ra\n 86947: u64 [sp + 0x50] = s0\n 86950: u64 [sp + 0x48] = s1\n 86953: a3 = u64 [a1 + 0x18]\n 86956: a4 = u64 [a1 + 0x10]\n 86959: a5 = u64 [a1 + 0x8]\n 86962: s1 = u64 [a1]\n 86964: a1 = a5 | a3\n 86967: a2 = s1 | a4\n 86970: a2 = a2 | a1\n 86973: a2 = a2 >> 0x20\n 86976: a1 = a1 | a4\n 86979: a1 = a1 << 0x20\n 86982: a1 = a1 | a2\n 86985: u64 [sp + 0x28] = a0\n 86988: jump @1070 if a1 != 0\n      : @1064 (gas: 19)\n 86992: a0 = s1 + 0x20\n 86995: u64 [sp + 0x30] = a0\n 86998: a0 = a0 <u s1\n 87001: a1 = a5 + a0\n 87004: u64 [sp + 0x40] = a1\n 87007: u64 [sp + 0x8] = a5\n 87010: s0 = a1 <u a5\n 87013: s0 = a0 if a0 == 0\n 87016: s0 = s0 + a4\n 87019: u64 [sp + 0x10] = a4\n 87022: a0 = s0 <u a4\n 87025: u64 [sp + 0x18] = a3\n 87028: a0 = a0 + a3\n 87031: u64 [sp + 0x38] = a0\n 87034: u64 [sp] = s1\n 87036: i32 a0 = s1 + 0\n 87038: a1 = 0x20\n 87041: s1 = 0x20\n 87044: ra = 942, jump @0\n      : @1065 [@dyn 471] (gas: 45)\n 87051: u8 [a0 + 0x1f] = s1\n 87054: a1 = u64 [sp + 0x30]\n 87057: s1 = a1\n 87059: a1 = a1 | s0\n 87062: a2 = u64 [sp + 0x40]\n 87065: a4 = u64 [sp + 0x38]\n 87068: a2 = a2 | a4\n 87071: a1 = a1 | a2\n 87074: a1 = a1 >> 0x20\n 87077: u64 [sp + 0x20] = s0\n 87080: a2 = a2 | s0\n 87083: a2 = a2 << 0x20\n 87086: a1 = a1 | a2\n 87089: u8 [a0 + 30] = 0\n 87092: u8 [a0 + 29] = 0\n 87095: u8 [a0 + 28] = 0\n 87098: u8 [a0 + 27] = 0\n 87101: u8 [a0 + 26] = 0\n 87104: u8 [a0 + 25] = 0\n 87107: u8 [a0 + 24] = 0\n 87110: u8 [a0 + 23] = 0\n 87113: u8 [a0 + 22] = 0\n 87116: u8 [a0 + 21] = 0\n 87119: u8 [a0 + 20] = 0\n 87122: u8 [a0 + 19] = 0\n 87125: u8 [a0 + 18] = 0\n 87128: u8 [a0 + 17] = 0\n 87131: u8 [a0 + 16] = 0\n 87134: u8 [a0 + 15] = 0\n 87137: u8 [a0 + 14] = 0\n 87140: u8 [a0 + 13] = 0\n 87143: u8 [a0 + 12] = 0\n 87146: u8 [a0 + 11] = 0\n 87149: u8 [a0 + 10] = 0\n 87152: u8 [a0 + 9] = 0\n 87155: u8 [a0 + 8] = 0\n 87158: u8 [a0 + 7] = 0\n 87161: u8 [a0 + 6] = 0\n 87164: u8 [a0 + 5] = 0\n 87167: u8 [a0 + 4] = 0\n 87170: u8 [a0 + 3] = 0\n 87173: u8 [a0 + 2] = 0\n 87176: u8 [a0 + 1] = 0\n 87179: u8 [a0 + 0] = 0\n 87181: jump @1070 if a1 != 0\n      : @1066 (gas: 4)\n 87185: i32 s0 = s1 + 0\n 87187: a1 = 0x20\n 87190: a0 = s0\n 87192: ra = 944, jump @0\n      : @1067 [@dyn 472] (gas: 41)\n 87199: u8 [a0 + 31] = 0x18\n 87203: u8 [a0 + 30] = 0\n 87206: u8 [a0 + 29] = 0\n 87209: u8 [a0 + 28] = 0\n 87212: u8 [a0 + 27] = 0\n 87215: u8 [a0 + 26] = 0\n 87218: u8 [a0 + 25] = 0\n 87221: u8 [a0 + 24] = 0\n 87224: u8 [a0 + 23] = 0\n 87227: u8 [a0 + 22] = 0\n 87230: u8 [a0 + 21] = 0\n 87233: u8 [a0 + 20] = 0\n 87236: u8 [a0 + 19] = 0\n 87239: u8 [a0 + 18] = 0\n 87242: u8 [a0 + 17] = 0\n 87245: u8 [a0 + 16] = 0\n 87248: u8 [a0 + 15] = 0\n 87251: u8 [a0 + 14] = 0\n 87254: u8 [a0 + 13] = 0\n 87257: u8 [a0 + 12] = 0\n 87260: u8 [a0 + 11] = 0\n 87263: u8 [a0 + 10] = 0\n 87266: u8 [a0 + 9] = 0\n 87269: u8 [a0 + 8] = 0\n 87272: u8 [a0 + 7] = 0\n 87275: u8 [a0 + 6] = 0\n 87278: u8 [a0 + 5] = 0\n 87281: u8 [a0 + 4] = 0\n 87284: u8 [a0 + 3] = 0\n 87287: u8 [a0 + 2] = 0\n 87290: u8 [a0 + 1] = 0\n 87293: a1 = u64 [sp + 0x20]\n 87296: a2 = u64 [sp + 0x38]\n 87299: a1 = a1 | a2\n 87302: a2 = 0xffffffe0\n 87312: a2 = s1 <u a2\n 87315: a3 = u64 [sp + 0x40]\n 87318: a2 = 0 if a3 != 0\n 87320: a2 = 0 if a1 != 0\n 87322: u8 [a0 + 0] = 0\n 87324: jump @1070 if a2 == 0\n      : @1068 (gas: 3)\n 87328: i32 a0 = s0 + 0x20\n 87331: a1 = 0x20\n 87334: ra = 946, jump @0\n      : @1069 [@dyn 473] (gas: 55)\n 87341: u8 [a0 + 31] = 0\n 87344: u8 [a0 + 30] = 0\n 87347: u8 [a0 + 29] = 0\n 87350: u8 [a0 + 28] = 0\n 87353: u8 [a0 + 27] = 0\n 87356: u8 [a0 + 26] = 0\n 87359: u8 [a0 + 25] = 0\n 87362: u8 [a0 + 24] = 0\n 87365: u8 [a0 + 23] = 0x64\n 87369: u8 [a0 + 22] = 0x65\n 87373: u8 [a0 + 21] = 0x68\n 87377: u8 [a0 + 20] = 0x63\n 87381: u8 [a0 + 19] = 0x74\n 87385: u8 [a0 + 18] = 0x61\n 87389: u8 [a0 + 17] = 0x70\n 87393: u8 [a0 + 16] = 0x73\n 87397: u8 [a0 + 15] = 0x69\n 87401: u8 [a0 + 14] = 0x64\n 87405: u8 [a0 + 13] = 0x20\n 87409: a5 = 0x79\n 87412: u8 [a0 + 0xc] = a5\n 87415: u8 [a0 + 11] = 0x64\n 87419: u8 [a0 + 10] = 0x61\n 87423: u8 [a0 + 9] = 0x65\n 87427: u8 [a0 + 8] = 0x72\n 87431: u8 [a0 + 7] = 0x6c\n 87435: u8 [a0 + 6] = 0x61\n 87439: u8 [a0 + 5] = 0x20\n 87443: u8 [a0 + 4] = 0x65\n 87447: u8 [a0 + 3] = 0x6e\n 87451: u8 [a0 + 2] = 0x6f\n 87455: u8 [a0 + 1] = 0x68\n 87459: u8 [a0 + 0] = 0x50\n 87462: a1 = u64 [sp]\n 87464: a0 = a1 + 0x60\n 87467: a1 = a0 <u a1\n 87470: a3 = u64 [sp + 0x8]\n 87473: a2 = a3 + a1\n 87476: a3 = a2 <u a3\n 87479: a3 = a1 if a1 == 0\n 87482: a1 = u64 [sp + 0x10]\n 87485: a3 = a3 + a1\n 87488: a1 = a3 <u a1\n 87491: a4 = u64 [sp + 0x18]\n 87494: a1 = a1 + a4\n 87497: a4 = u64 [sp + 0x28]\n 87500: u64 [a4] = a0\n 87502: u64 [a4 + 0x8] = a2\n 87505: u64 [a4 + 0x10] = a3\n 87508: u64 [a4 + 0x18] = a1\n 87511: ra = u64 [sp + 0x58]\n 87514: s0 = u64 [sp + 0x50]\n 87517: s1 = u64 [sp + 0x48]\n 87520: sp = sp + 0x60\n 87523: ret\n      : @1070 (gas: 1)\n 87525: trap\n      : @1071 (gas: 21)\n 87526: t1 = s1\n 87528: a2 = u64 [sp + 0x40]\n 87531: t0 = u64 [sp + 0x48]\n 87534: a0 = u64 [sp + 0x278]\n 87538: t2 = u64 [sp + 0x260]\n 87542: s1 = u64 [sp + 0x270]\n 87546: a3 = u64 [sp + 0x268]\n 87550: a4 = a0 ^ t1\n 87553: a1 = t1 <u a0\n 87556: a0 = u64 [sp + 0x38]\n 87559: a5 = a0 <u s1\n 87562: a5 = a1 if a4 != 0\n 87565: ra = a3 ^ a2\n 87568: a3 = a2 <u a3\n 87571: a1 = t0 <u t2\n 87574: a1 = a3 if ra != 0\n 87577: a3 = a0\n 87579: a0 = a0 ^ s1\n 87582: a0 = a0 | a4\n 87585: a1 = a5 if a0 != 0\n 87588: jump @1083 if a1 == 0\n      : @1072 (gas: 13)\n 87592: u64 [sp + 0x120] = t0\n 87596: u64 [sp + 344] = 0\n 87600: u64 [sp + 336] = 0\n 87604: u64 [sp + 328] = 0\n 87608: u64 [sp + 320] = 0x1\n 87613: u64 [sp + 0x128] = a2\n 87617: u64 [sp + 0x130] = a3\n 87621: a0 = sp + 0x160\n 87625: a1 = sp + 0x140\n 87629: a2 = sp + 0x120\n 87633: u64 [sp + 0x10] = t1\n 87636: u64 [sp + 0x138] = t1\n 87640: ra = 948, jump @478\n      : @1073 [@dyn 474] (gas: 31)\n 87647: a0 = u64 [sp + 0x178]\n 87651: a1 = u64 [sp + 0x170]\n 87655: a2 = u64 [sp + 0x168]\n 87659: s1 = u64 [sp + 0x160]\n 87663: u64 [sp + 0x28] = a0\n 87666: u64 [sp + 0x258] = a0\n 87670: u64 [sp + 0x20] = a1\n 87673: u64 [sp + 0x250] = a1\n 87677: u64 [sp + 0x18] = a2\n 87680: u64 [sp + 0x248] = a2\n 87684: u64 [sp + 0x240] = s1\n 87688: u64 [sp + 632] = 0\n 87692: u64 [sp + 624] = 0\n 87696: u64 [sp + 616] = 0\n 87700: u64 [sp + 608] = 0\n 87704: u32 [sp + 544] = 0x20\n 87709: i32 a1 = sp + 0x240\n 87713: i32 a3 = sp + 0x260\n 87717: i32 a4 = sp + 0x220\n 87721: a2 = 0xffffffffffffffff\n 87724: a0 = 0\n 87726: ecalli 7 // 'get_storage'\n 87728: a0 = u64 [sp + 0x268]\n 87732: u64 [sp + 0x58] = a0\n 87735: a0 = u64 [sp + 0x260]\n 87739: u64 [sp + 0x50] = a0\n 87742: a0 = u32 [sp + 0x270]\n 87746: u64 [sp + 0x30] = a0\n 87749: i32 a0 = sp + 0x1e0\n 87753: ecalli 4 // 'caller'\n 87755: fallthrough\n      : @1074 (gas: 22)\n 87756: a0 = u64 [sp + 0x1e8]\n 87760: a1 = u64 [sp + 0x1e0]\n 87764: a2 = i32 [sp + 0x1f0]\n 87768: a0 = reverse a0\n 87770: a3 = a0 >> 0x20\n 87773: a1 = reverse a1\n 87775: a4 = a1 << 0x20\n 87778: a3 = a3 | a4\n 87781: a0 = a0 << 0x20\n 87784: a2 = reverse a2\n 87786: a2 = a2 >> 0x20\n 87789: a0 = a0 | a2\n 87792: a1 = a1 >> 0x20\n 87795: a2 = u64 [sp + 0x30]\n 87798: a1 = a1 ^ a2\n 87801: a2 = u64 [sp + 0x50]\n 87804: a0 = a0 ^ a2\n 87807: a0 = a0 | a1\n 87810: a1 = u64 [sp + 0x58]\n 87813: a1 = a1 ^ a3\n 87816: a0 = a0 | a1\n 87819: jump @1088 if a0 != 0\n      : @1075 (gas: 30)\n 87823: a1 = s1 + 0x6\n 87826: a0 = a1 <u s1\n 87829: a3 = u64 [sp + 0x18]\n 87832: a2 = a3 + a0\n 87835: s1 = a2 <u a3\n 87838: s1 = a0 if a0 == 0\n 87841: a0 = u64 [sp + 0x20]\n 87844: s1 = s1 + a0\n 87847: a0 = s1 <u a0\n 87850: a3 = u64 [sp + 0x28]\n 87853: a0 = a0 + a3\n 87856: u64 [sp + 0x58] = a1\n 87859: u64 [sp + 0x240] = a1\n 87863: u64 [sp + 0x50] = a2\n 87866: u64 [sp + 0x248] = a2\n 87870: u64 [sp + 0x250] = s1\n 87874: u64 [sp + 0x30] = a0\n 87877: u64 [sp + 0x258] = a0\n 87881: u64 [sp + 632] = 0\n 87885: u64 [sp + 624] = 0\n 87889: u64 [sp + 616] = 0\n 87893: u64 [sp + 608] = 0\n 87897: u32 [sp + 544] = 0x20\n 87902: i32 a1 = sp + 0x240\n 87906: i32 a3 = sp + 0x260\n 87910: i32 a4 = sp + 0x220\n 87914: a2 = 0xffffffffffffffff\n 87917: a0 = 0\n 87919: ecalli 7 // 'get_storage'\n 87921: fallthrough\n      : @1076 (gas: 2)\n 87922: a0 = u8 [sp + 0x260]\n 87926: jump @1093 if a0 == 0\n      : @1077 (gas: 19)\n 87930: u64 [sp + 0x250] = s1\n 87934: a0 = u64 [sp + 0x50]\n 87937: u64 [sp + 0x248] = a0\n 87941: a0 = u64 [sp + 0x58]\n 87944: u64 [sp + 0x240] = a0\n 87948: a0 = u64 [sp + 0x30]\n 87951: u64 [sp + 0x258] = a0\n 87955: u64 [sp + 632] = 0\n 87959: u64 [sp + 624] = 0\n 87963: u64 [sp + 616] = 0\n 87967: u64 [sp + 608] = 0\n 87971: u32 [sp + 544] = 0x20\n 87976: i32 a1 = sp + 0x240\n 87980: i32 a3 = sp + 0x260\n 87984: i32 a4 = sp + 0x220\n 87988: a2 = 0xffffffffffffffff\n 87991: a0 = 0\n 87993: ecalli 7 // 'get_storage'\n 87995: fallthrough\n      : @1078 (gas: 2)\n 87996: a0 = u8 [sp + 0x262]\n 88000: jump @1098 if a0 != 0\n      : @1079 (gas: 53)\n 88004: u64 [sp + 0x250] = s1\n 88008: a0 = u64 [sp + 0x50]\n 88011: u64 [sp + 0x248] = a0\n 88015: a0 = u64 [sp + 0x58]\n 88018: u64 [sp + 0x240] = a0\n 88022: u64 [sp + 0x28] = s1\n 88025: s1 = u64 [sp + 0x30]\n 88028: u64 [sp + 0x258] = s1\n 88032: u64 [sp + 632] = 0\n 88036: u64 [sp + 624] = 0\n 88040: u64 [sp + 616] = 0\n 88044: u64 [sp + 608] = 0\n 88048: u32 [sp + 544] = 0x20\n 88053: i32 a1 = sp + 0x240\n 88057: i32 a3 = sp + 0x260\n 88061: i32 a4 = sp + 0x220\n 88065: a2 = 0xffffffffffffffff\n 88068: a0 = 0\n 88070: ecalli 7 // 'get_storage'\n 88072: a0 = u64 [sp + 0x268]\n 88076: a1 = u64 [sp + 0x270]\n 88080: a2 = u64 [sp + 0x260]\n 88084: a3 = u64 [sp + 0x278]\n 88088: a2 = a2 & 0xffffffffff00ffff\n 88094: a2 = a2 | 0x10000\n 88099: u64 [sp + 0x258] = s1\n 88103: a4 = u64 [sp + 0x28]\n 88106: u64 [sp + 0x250] = a4\n 88110: a4 = u64 [sp + 0x50]\n 88113: u64 [sp + 0x248] = a4\n 88117: a4 = u64 [sp + 0x58]\n 88120: u64 [sp + 0x240] = a4\n 88124: u64 [sp + 0x278] = a3\n 88128: u64 [sp + 0x270] = a1\n 88132: u64 [sp + 0x268] = a0\n 88136: u64 [sp + 0x260] = a2\n 88140: i32 a1 = sp + 0x240\n 88144: i32 a3 = sp + 0x260\n 88148: a2 = 0xffffffffffffffff\n 88151: a4 = 0x20\n 88154: a0 = 0\n 88156: ecalli 13 // 'set_storage'\n 88158: i32 a0 = sp + 0x200\n 88162: ecalli 4 // 'caller'\n 88164: a0 = u32 [sp + 0x210]\n 88168: u64 [sp + 0x50] = a0\n 88171: a0 = u64 [sp + 0x208]\n 88175: u64 [sp + 0x30] = a0\n 88178: a0 = u64 [sp + 0x200]\n 88182: u64 [sp + 0x58] = a0\n 88185: a0 = 0x40\n 88188: a1 = 0x20\n 88191: ra = 950, jump @0\n      : @1080 [@dyn 475] (gas: 100)\n 88198: a1 = u8 [a0 + 0x11]\n 88201: a2 = u8 [a0 + 0x10]\n 88204: a3 = u8 [a0 + 0x12]\n 88207: a4 = u8 [a0 + 0x13]\n 88210: a1 = a1 << 0x8\n 88213: a1 = a1 | a2\n 88216: a3 = a3 << 0x10\n 88219: a4 = a4 << 0x18\n 88222: a3 = a3 | a4\n 88225: a1 = a1 | a3\n 88228: a2 = u8 [a0 + 0x15]\n 88231: a3 = u8 [a0 + 0x14]\n 88234: a4 = u8 [a0 + 0x16]\n 88237: a5 = u8 [a0 + 0x17]\n 88240: a2 = a2 << 0x8\n 88243: a2 = a2 | a3\n 88246: a4 = a4 << 0x10\n 88249: a5 = a5 << 0x18\n 88252: a4 = a4 | a5\n 88255: a2 = a2 | a4\n 88258: a2 = a2 << 0x20\n 88261: t0 = a2 | a1\n 88264: a2 = u8 [a0 + 0x1]\n 88267: a3 = u8 [a0]\n 88269: a4 = u8 [a0 + 0x2]\n 88272: a5 = u8 [a0 + 0x3]\n 88275: a2 = a2 << 0x8\n 88278: a2 = a2 | a3\n 88281: a4 = a4 << 0x10\n 88284: a5 = a5 << 0x18\n 88287: a4 = a4 | a5\n 88290: a2 = a2 | a4\n 88293: a3 = u8 [a0 + 0x5]\n 88296: a4 = u8 [a0 + 0x4]\n 88299: a5 = u8 [a0 + 0x6]\n 88302: s1 = u8 [a0 + 0x7]\n 88305: a3 = a3 << 0x8\n 88308: a3 = a3 | a4\n 88311: a5 = a5 << 0x10\n 88314: s1 = s1 << 0x18\n 88317: a5 = a5 | s1\n 88320: a3 = a3 | a5\n 88323: a3 = a3 << 0x20\n 88326: a2 = a2 | a3\n 88329: a3 = u8 [a0 + 0x19]\n 88332: a4 = u8 [a0 + 0x18]\n 88335: a5 = u8 [a0 + 0x1a]\n 88338: s1 = u8 [a0 + 0x1b]\n 88341: a3 = a3 << 0x8\n 88344: a3 = a3 | a4\n 88347: a5 = a5 << 0x10\n 88350: s1 = s1 << 0x18\n 88353: a5 = a5 | s1\n 88356: a3 = a3 | a5\n 88359: a4 = u8 [a0 + 0x1d]\n 88362: a5 = u8 [a0 + 0x1c]\n 88365: s1 = u8 [a0 + 0x1e]\n 88368: a1 = u8 [a0 + 0x1f]\n 88371: a4 = a4 << 0x8\n 88374: a4 = a4 | a5\n 88377: s1 = s1 << 0x10\n 88380: a1 = a1 << 0x18\n 88383: a1 = a1 | s1\n 88386: a1 = a1 | a4\n 88389: a1 = a1 << 0x20\n 88392: a3 = a3 | a1\n 88395: a1 = u8 [a0 + 0x9]\n 88398: a4 = u8 [a0 + 0x8]\n 88401: a5 = u8 [a0 + 0xa]\n 88404: s1 = u8 [a0 + 0xb]\n 88407: a1 = a1 << 0x8\n 88410: a1 = a1 | a4\n 88413: a5 = a5 << 0x10\n 88416: s1 = s1 << 0x18\n 88419: a5 = a5 | s1\n 88422: a1 = a1 | a5\n 88425: a4 = u8 [a0 + 0xd]\n 88428: a5 = u8 [a0 + 0xc]\n 88431: s1 = u8 [a0 + 0xe]\n 88434: a0 = u8 [a0 + 0xf]\n 88437: a4 = a4 << 0x8\n 88440: a4 = a4 | a5\n 88443: s1 = s1 << 0x10\n 88446: a0 = a0 << 0x18\n 88449: a0 = a0 | s1\n 88452: a0 = a0 | a4\n 88455: a0 = a0 << 0x20\n 88458: a0 = a0 | a1\n 88461: a1 = reverse a0\n 88463: a0 = reverse a3\n 88465: a2 = reverse a2\n 88467: a3 = reverse t0\n 88469: a2 = a2 | a3\n 88472: a3 = a0 | a1\n 88475: a3 = a3 | a2\n 88478: a3 = a3 >> 0x20\n 88481: a1 = a1 | a2\n 88484: a1 = a1 << 0x20\n 88487: a1 = a1 | a3\n 88490: jump @1104 if a1 != 0\n      : @1081 (gas: 17)\n 88494: s1 = u64 [sp + 0x58]\n 88497: a1 = reverse s1\n 88499: a1 = a1 << 0x20\n 88502: a2 = u64 [sp + 0x30]\n 88505: a2 = reverse a2\n 88507: a3 = a2 >> 0x20\n 88510: a1 = a1 | a3\n 88513: u64 [sp + 0x30] = a1\n 88516: a2 = a2 << 0x20\n 88519: a1 = u64 [sp + 0x50]\n 88522: a1 = reverse a1\n 88524: a1 = a1 >> 0x20\n 88527: a1 = a1 | a2\n 88530: u64 [sp + 0x50] = a1\n 88533: i32 a0 = a0 + 0\n 88535: a1 = 0\n 88537: ra = 952, jump @0\n      : @1082 [@dyn 476] (gas: 40)\n 88544: a1 = u64 [0x20080]\n 88549: a2 = u64 [0x20088]\n 88554: a3 = u64 [0x20090]\n 88559: a4 = u64 [0x20098]\n 88564: u64 [sp + 0x278] = a1\n 88568: u64 [sp + 0x270] = a2\n 88572: u64 [sp + 0x268] = a3\n 88576: u64 [sp + 0x260] = a4\n 88580: a1 = u64 [sp + 0x10]\n 88583: a1 = reverse a1\n 88585: a2 = u64 [sp + 0x38]\n 88588: a2 = reverse a2\n 88590: a3 = u64 [sp + 0x40]\n 88593: a3 = reverse a3\n 88595: a4 = u64 [sp + 0x48]\n 88598: a4 = reverse a4\n 88600: u64 [sp + 0x298] = a4\n 88604: u64 [sp + 0x290] = a3\n 88608: u64 [sp + 0x288] = a2\n 88612: u64 [sp + 0x280] = a1\n 88616: a1 = u64 [sp + 0x50]\n 88619: a1 = reverse a1\n 88621: a2 = u64 [sp + 0x30]\n 88624: a2 = reverse a2\n 88626: a3 = s1 << 0x20\n 88629: u64 [sp + 0x2a8] = a3\n 88633: u64 [sp + 672] = 0\n 88637: u64 [sp + 0x2b0] = a2\n 88641: u64 [sp + 0x2b8] = a1\n 88645: i32 a2 = a0 + 0\n 88647: i32 a0 = sp + 0x260\n 88651: a1 = 0x3\n 88654: a3 = 0\n 88656: ecalli 6 // 'deposit_event'\n 88658: sp = s0 + 0xfffffffffffffd20\n 88662: ra = u64 [sp + 0x2d8]\n 88666: s0 = u64 [sp + 0x2d0]\n 88670: s1 = u64 [sp + 0x2c8]\n 88674: sp = sp + 0x2e0\n 88678: ret\n      : @1083 (gas: 3)\n 88680: a0 = 0x40\n 88683: a1 = 0x20\n 88686: ra = 954, jump @0\n      : @1084 [@dyn 477] (gas: 103)\n 88693: a1 = u8 [a0 + 0x11]\n 88696: a2 = u8 [a0 + 0x10]\n 88699: a3 = u8 [a0 + 0x12]\n 88702: a4 = u8 [a0 + 0x13]\n 88705: a1 = a1 << 0x8\n 88708: a1 = a1 | a2\n 88711: a3 = a3 << 0x10\n 88714: a4 = a4 << 0x18\n 88717: a3 = a3 | a4\n 88720: a1 = a1 | a3\n 88723: a2 = u8 [a0 + 0x15]\n 88726: a3 = u8 [a0 + 0x14]\n 88729: a4 = u8 [a0 + 0x16]\n 88732: a5 = u8 [a0 + 0x17]\n 88735: a2 = a2 << 0x8\n 88738: a2 = a2 | a3\n 88741: a4 = a4 << 0x10\n 88744: a5 = a5 << 0x18\n 88747: a4 = a4 | a5\n 88750: a2 = a2 | a4\n 88753: a2 = a2 << 0x20\n 88756: t0 = a2 | a1\n 88759: a2 = u8 [a0 + 0x1]\n 88762: a3 = u8 [a0]\n 88764: a4 = u8 [a0 + 0x2]\n 88767: a5 = u8 [a0 + 0x3]\n 88770: a2 = a2 << 0x8\n 88773: a2 = a2 | a3\n 88776: a4 = a4 << 0x10\n 88779: a5 = a5 << 0x18\n 88782: a4 = a4 | a5\n 88785: a2 = a2 | a4\n 88788: a3 = u8 [a0 + 0x5]\n 88791: a4 = u8 [a0 + 0x4]\n 88794: a5 = u8 [a0 + 0x6]\n 88797: s1 = u8 [a0 + 0x7]\n 88800: a3 = a3 << 0x8\n 88803: a3 = a3 | a4\n 88806: a5 = a5 << 0x10\n 88809: s1 = s1 << 0x18\n 88812: a5 = a5 | s1\n 88815: a3 = a3 | a5\n 88818: a3 = a3 << 0x20\n 88821: a2 = a2 | a3\n 88824: a3 = u8 [a0 + 0x19]\n 88827: a4 = u8 [a0 + 0x18]\n 88830: a5 = u8 [a0 + 0x1a]\n 88833: s1 = u8 [a0 + 0x1b]\n 88836: a3 = a3 << 0x8\n 88839: a3 = a3 | a4\n 88842: a5 = a5 << 0x10\n 88845: s1 = s1 << 0x18\n 88848: a5 = a5 | s1\n 88851: a3 = a3 | a5\n 88854: a4 = u8 [a0 + 0x1d]\n 88857: a5 = u8 [a0 + 0x1c]\n 88860: s1 = u8 [a0 + 0x1e]\n 88863: a1 = u8 [a0 + 0x1f]\n 88866: a4 = a4 << 0x8\n 88869: a4 = a4 | a5\n 88872: s1 = s1 << 0x10\n 88875: a1 = a1 << 0x18\n 88878: a1 = a1 | s1\n 88881: a1 = a1 | a4\n 88884: a1 = a1 << 0x20\n 88887: a3 = a3 | a1\n 88890: a1 = u8 [a0 + 0x9]\n 88893: a4 = u8 [a0 + 0x8]\n 88896: a5 = u8 [a0 + 0xa]\n 88899: s1 = u8 [a0 + 0xb]\n 88902: a1 = a1 << 0x8\n 88905: a1 = a1 | a4\n 88908: a5 = a5 << 0x10\n 88911: s1 = s1 << 0x18\n 88914: a5 = a5 | s1\n 88917: a1 = a1 | a5\n 88920: a4 = u8 [a0 + 0xd]\n 88923: a5 = u8 [a0 + 0xc]\n 88926: s1 = u8 [a0 + 0xe]\n 88929: a0 = u8 [a0 + 0xf]\n 88932: a4 = a4 << 0x8\n 88935: a4 = a4 | a5\n 88938: s1 = s1 << 0x10\n 88941: a0 = a0 << 0x18\n 88944: a0 = a0 | s1\n 88947: a0 = a0 | a4\n 88950: a0 = a0 << 0x20\n 88953: a0 = a0 | a1\n 88956: s1 = reverse a0\n 88958: a1 = reverse a3\n 88960: a2 = reverse a2\n 88962: a0 = reverse t0\n 88964: u64 [sp + 0x58] = a0\n 88967: u64 [sp + 0x50] = a2\n 88970: a0 = a0 | a2\n 88973: a2 = a1\n 88975: a1 = a1 | s1\n 88978: a1 = a1 | a0\n 88981: a1 = a1 >> 0x20\n 88984: a0 = a0 | s1\n 88987: a0 = a0 << 0x20\n 88990: a0 = a0 | a1\n 88993: jump @1104 if a0 != 0\n      : @1085 (gas: 5)\n 88997: u64 [sp + 0x48] = a2\n 89000: i32 a0 = a2 + 0\n 89002: a1 = 0x20\n 89005: u64 [sp + 0x40] = a0\n 89008: ra = 956, jump @0\n      : @1086 [@dyn 478] (gas: 50)\n 89015: u8 [a0 + 31] = 0\n 89018: u8 [a0 + 30] = 0\n 89021: u8 [a0 + 29] = 0\n 89024: u8 [a0 + 28] = 0\n 89027: u8 [a0 + 27] = 0\n 89030: u8 [a0 + 26] = 0\n 89033: u8 [a0 + 25] = 0\n 89036: u8 [a0 + 24] = 0\n 89039: u8 [a0 + 23] = 0\n 89042: u8 [a0 + 22] = 0\n 89045: u8 [a0 + 21] = 0\n 89048: u8 [a0 + 20] = 0\n 89051: u8 [a0 + 19] = 0\n 89054: u8 [a0 + 18] = 0\n 89057: u8 [a0 + 17] = 0\n 89060: u8 [a0 + 16] = 0\n 89063: u8 [a0 + 15] = 0\n 89066: u8 [a0 + 14] = 0\n 89069: u8 [a0 + 13] = 0\n 89072: u8 [a0 + 12] = 0\n 89075: u8 [a0 + 11] = 0\n 89078: u8 [a0 + 10] = 0\n 89081: u8 [a0 + 9] = 0\n 89084: u8 [a0 + 8] = 0\n 89087: u8 [a0 + 7] = 0\n 89090: u8 [a0 + 6] = 0\n 89093: u8 [a0 + 5] = 0\n 89096: u8 [a0 + 4] = 0\n 89099: u8 [a0 + 3] = 0xa0\n 89104: u8 [a0 + 2] = 0x79\n 89108: u8 [a0 + 1] = 0xc3\n 89113: u8 [a0 + 0] = 0x8\n 89116: a1 = u64 [sp + 0x48]\n 89119: a0 = a1 + 0x4\n 89122: a1 = a0 <u a1\n 89125: a3 = u64 [sp + 0x58]\n 89128: a2 = a3 + a1\n 89131: a3 = a2 <u a3\n 89134: a3 = a1 if a1 == 0\n 89137: a3 = a3 + s1\n 89140: a1 = a3 <u s1\n 89143: a4 = u64 [sp + 0x50]\n 89146: a4 = a4 + a1\n 89149: u64 [sp + 0x1a8] = a2\n 89153: u64 [sp + 0x1a0] = a0\n 89157: u64 [sp + 0x1b0] = a3\n 89161: a0 = sp + 0x1c0\n 89165: a1 = sp + 0x1a0\n 89169: u64 [sp + 0x1b8] = a4\n 89173: ra = 958, jump @731\n      : @1087 [@dyn 479] (gas: 5)\n 89179: a0 = u64 [sp + 0x1c8]\n 89183: t0 = u64 [sp + 0x1d8]\n 89187: t1 = u64 [sp + 0x1c0]\n 89191: a3 = u64 [sp + 0x1d0]\n 89195: jump @1103\n      : @1088 (gas: 3)\n 89198: a0 = 0x40\n 89201: a1 = 0x20\n 89204: ra = 960, jump @0\n      : @1089 [@dyn 480] (gas: 103)\n 89211: a1 = u8 [a0 + 0x11]\n 89214: a2 = u8 [a0 + 0x10]\n 89217: a3 = u8 [a0 + 0x12]\n 89220: a4 = u8 [a0 + 0x13]\n 89223: a1 = a1 << 0x8\n 89226: a1 = a1 | a2\n 89229: a3 = a3 << 0x10\n 89232: a4 = a4 << 0x18\n 89235: a3 = a3 | a4\n 89238: a1 = a1 | a3\n 89241: a2 = u8 [a0 + 0x15]\n 89244: a3 = u8 [a0 + 0x14]\n 89247: a4 = u8 [a0 + 0x16]\n 89250: a5 = u8 [a0 + 0x17]\n 89253: a2 = a2 << 0x8\n 89256: a2 = a2 | a3\n 89259: a4 = a4 << 0x10\n 89262: a5 = a5 << 0x18\n 89265: a4 = a4 | a5\n 89268: a2 = a2 | a4\n 89271: a2 = a2 << 0x20\n 89274: t0 = a2 | a1\n 89277: a2 = u8 [a0 + 0x1]\n 89280: a3 = u8 [a0]\n 89282: a4 = u8 [a0 + 0x2]\n 89285: a5 = u8 [a0 + 0x3]\n 89288: a2 = a2 << 0x8\n 89291: a2 = a2 | a3\n 89294: a4 = a4 << 0x10\n 89297: a5 = a5 << 0x18\n 89300: a4 = a4 | a5\n 89303: a2 = a2 | a4\n 89306: a3 = u8 [a0 + 0x5]\n 89309: a4 = u8 [a0 + 0x4]\n 89312: a5 = u8 [a0 + 0x6]\n 89315: s1 = u8 [a0 + 0x7]\n 89318: a3 = a3 << 0x8\n 89321: a3 = a3 | a4\n 89324: a5 = a5 << 0x10\n 89327: s1 = s1 << 0x18\n 89330: a5 = a5 | s1\n 89333: a3 = a3 | a5\n 89336: a3 = a3 << 0x20\n 89339: a2 = a2 | a3\n 89342: a3 = u8 [a0 + 0x19]\n 89345: a4 = u8 [a0 + 0x18]\n 89348: a5 = u8 [a0 + 0x1a]\n 89351: s1 = u8 [a0 + 0x1b]\n 89354: a3 = a3 << 0x8\n 89357: a3 = a3 | a4\n 89360: a5 = a5 << 0x10\n 89363: s1 = s1 << 0x18\n 89366: a5 = a5 | s1\n 89369: a3 = a3 | a5\n 89372: a4 = u8 [a0 + 0x1d]\n 89375: a5 = u8 [a0 + 0x1c]\n 89378: s1 = u8 [a0 + 0x1e]\n 89381: a1 = u8 [a0 + 0x1f]\n 89384: a4 = a4 << 0x8\n 89387: a4 = a4 | a5\n 89390: s1 = s1 << 0x10\n 89393: a1 = a1 << 0x18\n 89396: a1 = a1 | s1\n 89399: a1 = a1 | a4\n 89402: a1 = a1 << 0x20\n 89405: a3 = a3 | a1\n 89408: a1 = u8 [a0 + 0x9]\n 89411: a4 = u8 [a0 + 0x8]\n 89414: a5 = u8 [a0 + 0xa]\n 89417: s1 = u8 [a0 + 0xb]\n 89420: a1 = a1 << 0x8\n 89423: a1 = a1 | a4\n 89426: a5 = a5 << 0x10\n 89429: s1 = s1 << 0x18\n 89432: a5 = a5 | s1\n 89435: a1 = a1 | a5\n 89438: a4 = u8 [a0 + 0xd]\n 89441: a5 = u8 [a0 + 0xc]\n 89444: s1 = u8 [a0 + 0xe]\n 89447: a0 = u8 [a0 + 0xf]\n 89450: a4 = a4 << 0x8\n 89453: a4 = a4 | a5\n 89456: s1 = s1 << 0x10\n 89459: a0 = a0 << 0x18\n 89462: a0 = a0 | s1\n 89465: a0 = a0 | a4\n 89468: a0 = a0 << 0x20\n 89471: a0 = a0 | a1\n 89474: s1 = reverse a0\n 89476: a1 = reverse a3\n 89478: a2 = reverse a2\n 89480: a0 = reverse t0\n 89482: u64 [sp + 0x58] = a0\n 89485: u64 [sp + 0x50] = a2\n 89488: a0 = a0 | a2\n 89491: a2 = a1\n 89493: a1 = a1 | s1\n 89496: a1 = a1 | a0\n 89499: a1 = a1 >> 0x20\n 89502: a0 = a0 | s1\n 89505: a0 = a0 << 0x20\n 89508: a0 = a0 | a1\n 89511: jump @1104 if a0 != 0\n      : @1090 (gas: 5)\n 89515: u64 [sp + 0x48] = a2\n 89518: i32 a0 = a2 + 0\n 89520: a1 = 0x20\n 89523: u64 [sp + 0x40] = a0\n 89526: ra = 962, jump @0\n      : @1091 [@dyn 481] (gas: 50)\n 89533: u8 [a0 + 31] = 0\n 89536: u8 [a0 + 30] = 0\n 89539: u8 [a0 + 29] = 0\n 89542: u8 [a0 + 28] = 0\n 89545: u8 [a0 + 27] = 0\n 89548: u8 [a0 + 26] = 0\n 89551: u8 [a0 + 25] = 0\n 89554: u8 [a0 + 24] = 0\n 89557: u8 [a0 + 23] = 0\n 89560: u8 [a0 + 22] = 0\n 89563: u8 [a0 + 21] = 0\n 89566: u8 [a0 + 20] = 0\n 89569: u8 [a0 + 19] = 0\n 89572: u8 [a0 + 18] = 0\n 89575: u8 [a0 + 17] = 0\n 89578: u8 [a0 + 16] = 0\n 89581: u8 [a0 + 15] = 0\n 89584: u8 [a0 + 14] = 0\n 89587: u8 [a0 + 13] = 0\n 89590: u8 [a0 + 12] = 0\n 89593: u8 [a0 + 11] = 0\n 89596: u8 [a0 + 10] = 0\n 89599: u8 [a0 + 9] = 0\n 89602: u8 [a0 + 8] = 0\n 89605: u8 [a0 + 7] = 0\n 89608: u8 [a0 + 6] = 0\n 89611: u8 [a0 + 5] = 0\n 89614: u8 [a0 + 4] = 0\n 89617: u8 [a0 + 3] = 0xa0\n 89622: u8 [a0 + 2] = 0x79\n 89626: u8 [a0 + 1] = 0xc3\n 89631: u8 [a0 + 0] = 0x8\n 89634: a1 = u64 [sp + 0x48]\n 89637: a0 = a1 + 0x4\n 89640: a1 = a0 <u a1\n 89643: a3 = u64 [sp + 0x58]\n 89646: a2 = a3 + a1\n 89649: a3 = a2 <u a3\n 89652: a3 = a1 if a1 == 0\n 89655: a3 = a3 + s1\n 89658: a1 = a3 <u s1\n 89661: a4 = u64 [sp + 0x50]\n 89664: a4 = a4 + a1\n 89667: u64 [sp + 0xe8] = a2\n 89671: u64 [sp + 0xe0] = a0\n 89675: u64 [sp + 0xf0] = a3\n 89679: a0 = sp + 0x100\n 89683: a1 = sp + 0xe0\n 89687: u64 [sp + 0xf8] = a4\n 89691: ra = 964, jump @1055\n      : @1092 [@dyn 482] (gas: 5)\n 89697: a0 = u64 [sp + 0x108]\n 89701: t0 = u64 [sp + 0x118]\n 89705: t1 = u64 [sp + 0x100]\n 89709: a3 = u64 [sp + 0x110]\n 89713: jump @1103\n      : @1093 (gas: 3)\n 89716: a0 = 0x40\n 89719: a1 = 0x20\n 89722: ra = 966, jump @0\n      : @1094 [@dyn 483] (gas: 103)\n 89729: a1 = u8 [a0 + 0x11]\n 89732: a2 = u8 [a0 + 0x10]\n 89735: a3 = u8 [a0 + 0x12]\n 89738: a4 = u8 [a0 + 0x13]\n 89741: a1 = a1 << 0x8\n 89744: a1 = a1 | a2\n 89747: a3 = a3 << 0x10\n 89750: a4 = a4 << 0x18\n 89753: a3 = a3 | a4\n 89756: a1 = a1 | a3\n 89759: a2 = u8 [a0 + 0x15]\n 89762: a3 = u8 [a0 + 0x14]\n 89765: a4 = u8 [a0 + 0x16]\n 89768: a5 = u8 [a0 + 0x17]\n 89771: a2 = a2 << 0x8\n 89774: a2 = a2 | a3\n 89777: a4 = a4 << 0x10\n 89780: a5 = a5 << 0x18\n 89783: a4 = a4 | a5\n 89786: a2 = a2 | a4\n 89789: a2 = a2 << 0x20\n 89792: t0 = a2 | a1\n 89795: a2 = u8 [a0 + 0x1]\n 89798: a3 = u8 [a0]\n 89800: a4 = u8 [a0 + 0x2]\n 89803: a5 = u8 [a0 + 0x3]\n 89806: a2 = a2 << 0x8\n 89809: a2 = a2 | a3\n 89812: a4 = a4 << 0x10\n 89815: a5 = a5 << 0x18\n 89818: a4 = a4 | a5\n 89821: a2 = a2 | a4\n 89824: a3 = u8 [a0 + 0x5]\n 89827: a4 = u8 [a0 + 0x4]\n 89830: a5 = u8 [a0 + 0x6]\n 89833: s1 = u8 [a0 + 0x7]\n 89836: a3 = a3 << 0x8\n 89839: a3 = a3 | a4\n 89842: a5 = a5 << 0x10\n 89845: s1 = s1 << 0x18\n 89848: a5 = a5 | s1\n 89851: a3 = a3 | a5\n 89854: a3 = a3 << 0x20\n 89857: a2 = a2 | a3\n 89860: a3 = u8 [a0 + 0x19]\n 89863: a4 = u8 [a0 + 0x18]\n 89866: a5 = u8 [a0 + 0x1a]\n 89869: s1 = u8 [a0 + 0x1b]\n 89872: a3 = a3 << 0x8\n 89875: a3 = a3 | a4\n 89878: a5 = a5 << 0x10\n 89881: s1 = s1 << 0x18\n 89884: a5 = a5 | s1\n 89887: a3 = a3 | a5\n 89890: a4 = u8 [a0 + 0x1d]\n 89893: a5 = u8 [a0 + 0x1c]\n 89896: s1 = u8 [a0 + 0x1e]\n 89899: a1 = u8 [a0 + 0x1f]\n 89902: a4 = a4 << 0x8\n 89905: a4 = a4 | a5\n 89908: s1 = s1 << 0x10\n 89911: a1 = a1 << 0x18\n 89914: a1 = a1 | s1\n 89917: a1 = a1 | a4\n 89920: a1 = a1 << 0x20\n 89923: a3 = a3 | a1\n 89926: a1 = u8 [a0 + 0x9]\n 89929: a4 = u8 [a0 + 0x8]\n 89932: a5 = u8 [a0 + 0xa]\n 89935: s1 = u8 [a0 + 0xb]\n 89938: a1 = a1 << 0x8\n 89941: a1 = a1 | a4\n 89944: a5 = a5 << 0x10\n 89947: s1 = s1 << 0x18\n 89950: a5 = a5 | s1\n 89953: a1 = a1 | a5\n 89956: a4 = u8 [a0 + 0xd]\n 89959: a5 = u8 [a0 + 0xc]\n 89962: s1 = u8 [a0 + 0xe]\n 89965: a0 = u8 [a0 + 0xf]\n 89968: a4 = a4 << 0x8\n 89971: a4 = a4 | a5\n 89974: s1 = s1 << 0x10\n 89977: a0 = a0 << 0x18\n 89980: a0 = a0 | s1\n 89983: a0 = a0 | a4\n 89986: a0 = a0 << 0x20\n 89989: a0 = a0 | a1\n 89992: s1 = reverse a0\n 89994: a1 = reverse a3\n 89996: a2 = reverse a2\n 89998: a0 = reverse t0\n 90000: u64 [sp + 0x58] = a0\n 90003: u64 [sp + 0x50] = a2\n 90006: a0 = a0 | a2\n 90009: a2 = a1\n 90011: a1 = a1 | s1\n 90014: a1 = a1 | a0\n 90017: a1 = a1 >> 0x20\n 90020: a0 = a0 | s1\n 90023: a0 = a0 << 0x20\n 90026: a0 = a0 | a1\n 90029: jump @1104 if a0 != 0\n      : @1095 (gas: 5)\n 90033: u64 [sp + 0x48] = a2\n 90036: i32 a0 = a2 + 0\n 90038: a1 = 0x20\n 90041: u64 [sp + 0x40] = a0\n 90044: ra = 968, jump @0\n      : @1096 [@dyn 484] (gas: 50)\n 90051: u8 [a0 + 31] = 0\n 90054: u8 [a0 + 30] = 0\n 90057: u8 [a0 + 29] = 0\n 90060: u8 [a0 + 28] = 0\n 90063: u8 [a0 + 27] = 0\n 90066: u8 [a0 + 26] = 0\n 90069: u8 [a0 + 25] = 0\n 90072: u8 [a0 + 24] = 0\n 90075: u8 [a0 + 23] = 0\n 90078: u8 [a0 + 22] = 0\n 90081: u8 [a0 + 21] = 0\n 90084: u8 [a0 + 20] = 0\n 90087: u8 [a0 + 19] = 0\n 90090: u8 [a0 + 18] = 0\n 90093: u8 [a0 + 17] = 0\n 90096: u8 [a0 + 16] = 0\n 90099: u8 [a0 + 15] = 0\n 90102: u8 [a0 + 14] = 0\n 90105: u8 [a0 + 13] = 0\n 90108: u8 [a0 + 12] = 0\n 90111: u8 [a0 + 11] = 0\n 90114: u8 [a0 + 10] = 0\n 90117: u8 [a0 + 9] = 0\n 90120: u8 [a0 + 8] = 0\n 90123: u8 [a0 + 7] = 0\n 90126: u8 [a0 + 6] = 0\n 90129: u8 [a0 + 5] = 0\n 90132: u8 [a0 + 4] = 0\n 90135: u8 [a0 + 3] = 0xa0\n 90140: u8 [a0 + 2] = 0x79\n 90144: u8 [a0 + 1] = 0xc3\n 90149: u8 [a0 + 0] = 0x8\n 90152: a1 = u64 [sp + 0x48]\n 90155: a0 = a1 + 0x4\n 90158: a1 = a0 <u a1\n 90161: a3 = u64 [sp + 0x58]\n 90164: a2 = a3 + a1\n 90167: a3 = a2 <u a3\n 90170: a3 = a1 if a1 == 0\n 90173: a3 = a3 + s1\n 90176: a1 = a3 <u s1\n 90179: a4 = u64 [sp + 0x50]\n 90182: a4 = a4 + a1\n 90185: u64 [sp + 0x68] = a2\n 90188: u64 [sp + 0x60] = a0\n 90191: u64 [sp + 0x70] = a3\n 90194: a0 = sp + 0x80\n 90198: a1 = sp + 0x60\n 90201: u64 [sp + 0x78] = a4\n 90204: ra = 970, jump @747\n      : @1097 [@dyn 485] (gas: 5)\n 90210: a0 = u64 [sp + 0x88]\n 90214: t0 = u64 [sp + 0x98]\n 90218: t1 = u64 [sp + 0x80]\n 90222: a3 = u64 [sp + 0x90]\n 90226: jump @1103\n      : @1098 (gas: 3)\n 90229: a0 = 0x40\n 90232: a1 = 0x20\n 90235: ra = 972, jump @0\n      : @1099 [@dyn 486] (gas: 103)\n 90242: a1 = u8 [a0 + 0x11]\n 90245: a2 = u8 [a0 + 0x10]\n 90248: a3 = u8 [a0 + 0x12]\n 90251: a4 = u8 [a0 + 0x13]\n 90254: a1 = a1 << 0x8\n 90257: a1 = a1 | a2\n 90260: a3 = a3 << 0x10\n 90263: a4 = a4 << 0x18\n 90266: a3 = a3 | a4\n 90269: a1 = a1 | a3\n 90272: a2 = u8 [a0 + 0x15]\n 90275: a3 = u8 [a0 + 0x14]\n 90278: a4 = u8 [a0 + 0x16]\n 90281: a5 = u8 [a0 + 0x17]\n 90284: a2 = a2 << 0x8\n 90287: a2 = a2 | a3\n 90290: a4 = a4 << 0x10\n 90293: a5 = a5 << 0x18\n 90296: a4 = a4 | a5\n 90299: a2 = a2 | a4\n 90302: a2 = a2 << 0x20\n 90305: t0 = a2 | a1\n 90308: a2 = u8 [a0 + 0x1]\n 90311: a3 = u8 [a0]\n 90313: a4 = u8 [a0 + 0x2]\n 90316: a5 = u8 [a0 + 0x3]\n 90319: a2 = a2 << 0x8\n 90322: a2 = a2 | a3\n 90325: a4 = a4 << 0x10\n 90328: a5 = a5 << 0x18\n 90331: a4 = a4 | a5\n 90334: a2 = a2 | a4\n 90337: a3 = u8 [a0 + 0x5]\n 90340: a4 = u8 [a0 + 0x4]\n 90343: a5 = u8 [a0 + 0x6]\n 90346: s1 = u8 [a0 + 0x7]\n 90349: a3 = a3 << 0x8\n 90352: a3 = a3 | a4\n 90355: a5 = a5 << 0x10\n 90358: s1 = s1 << 0x18\n 90361: a5 = a5 | s1\n 90364: a3 = a3 | a5\n 90367: a3 = a3 << 0x20\n 90370: a2 = a2 | a3\n 90373: a3 = u8 [a0 + 0x19]\n 90376: a4 = u8 [a0 + 0x18]\n 90379: a5 = u8 [a0 + 0x1a]\n 90382: s1 = u8 [a0 + 0x1b]\n 90385: a3 = a3 << 0x8\n 90388: a3 = a3 | a4\n 90391: a5 = a5 << 0x10\n 90394: s1 = s1 << 0x18\n 90397: a5 = a5 | s1\n 90400: a3 = a3 | a5\n 90403: a4 = u8 [a0 + 0x1d]\n 90406: a5 = u8 [a0 + 0x1c]\n 90409: s1 = u8 [a0 + 0x1e]\n 90412: a1 = u8 [a0 + 0x1f]\n 90415: a4 = a4 << 0x8\n 90418: a4 = a4 | a5\n 90421: s1 = s1 << 0x10\n 90424: a1 = a1 << 0x18\n 90427: a1 = a1 | s1\n 90430: a1 = a1 | a4\n 90433: a1 = a1 << 0x20\n 90436: a3 = a3 | a1\n 90439: a1 = u8 [a0 + 0x9]\n 90442: a4 = u8 [a0 + 0x8]\n 90445: a5 = u8 [a0 + 0xa]\n 90448: s1 = u8 [a0 + 0xb]\n 90451: a1 = a1 << 0x8\n 90454: a1 = a1 | a4\n 90457: a5 = a5 << 0x10\n 90460: s1 = s1 << 0x18\n 90463: a5 = a5 | s1\n 90466: a1 = a1 | a5\n 90469: a4 = u8 [a0 + 0xd]\n 90472: a5 = u8 [a0 + 0xc]\n 90475: s1 = u8 [a0 + 0xe]\n 90478: a0 = u8 [a0 + 0xf]\n 90481: a4 = a4 << 0x8\n 90484: a4 = a4 | a5\n 90487: s1 = s1 << 0x10\n 90490: a0 = a0 << 0x18\n 90493: a0 = a0 | s1\n 90496: a0 = a0 | a4\n 90499: a0 = a0 << 0x20\n 90502: a0 = a0 | a1\n 90505: s1 = reverse a0\n 90507: a1 = reverse a3\n 90509: a2 = reverse a2\n 90511: a0 = reverse t0\n 90513: u64 [sp + 0x58] = a0\n 90516: u64 [sp + 0x50] = a2\n 90519: a0 = a0 | a2\n 90522: a2 = a1\n 90524: a1 = a1 | s1\n 90527: a1 = a1 | a0\n 90530: a1 = a1 >> 0x20\n 90533: a0 = a0 | s1\n 90536: a0 = a0 << 0x20\n 90539: a0 = a0 | a1\n 90542: jump @1104 if a0 != 0\n      : @1100 (gas: 5)\n 90546: u64 [sp + 0x48] = a2\n 90549: i32 a0 = a2 + 0\n 90551: a1 = 0x20\n 90554: u64 [sp + 0x40] = a0\n 90557: ra = 974, jump @0\n      : @1101 [@dyn 487] (gas: 50)\n 90564: u8 [a0 + 31] = 0\n 90567: u8 [a0 + 30] = 0\n 90570: u8 [a0 + 29] = 0\n 90573: u8 [a0 + 28] = 0\n 90576: u8 [a0 + 27] = 0\n 90579: u8 [a0 + 26] = 0\n 90582: u8 [a0 + 25] = 0\n 90585: u8 [a0 + 24] = 0\n 90588: u8 [a0 + 23] = 0\n 90591: u8 [a0 + 22] = 0\n 90594: u8 [a0 + 21] = 0\n 90597: u8 [a0 + 20] = 0\n 90600: u8 [a0 + 19] = 0\n 90603: u8 [a0 + 18] = 0\n 90606: u8 [a0 + 17] = 0\n 90609: u8 [a0 + 16] = 0\n 90612: u8 [a0 + 15] = 0\n 90615: u8 [a0 + 14] = 0\n 90618: u8 [a0 + 13] = 0\n 90621: u8 [a0 + 12] = 0\n 90624: u8 [a0 + 11] = 0\n 90627: u8 [a0 + 10] = 0\n 90630: u8 [a0 + 9] = 0\n 90633: u8 [a0 + 8] = 0\n 90636: u8 [a0 + 7] = 0\n 90639: u8 [a0 + 6] = 0\n 90642: u8 [a0 + 5] = 0\n 90645: u8 [a0 + 4] = 0\n 90648: u8 [a0 + 3] = 0xa0\n 90653: u8 [a0 + 2] = 0x79\n 90657: u8 [a0 + 1] = 0xc3\n 90662: u8 [a0 + 0] = 0x8\n 90665: a1 = u64 [sp + 0x48]\n 90668: a0 = a1 + 0x4\n 90671: a1 = a0 <u a1\n 90674: a3 = u64 [sp + 0x58]\n 90677: a2 = a3 + a1\n 90680: a3 = a2 <u a3\n 90683: a3 = a1 if a1 == 0\n 90686: a3 = a3 + s1\n 90689: a1 = a3 <u s1\n 90692: a4 = u64 [sp + 0x50]\n 90695: a4 = a4 + a1\n 90698: u64 [sp + 0xa8] = a2\n 90702: u64 [sp + 0xa0] = a0\n 90706: u64 [sp + 0xb0] = a3\n 90710: a0 = sp + 0xc0\n 90714: a1 = sp + 0xa0\n 90718: u64 [sp + 0xb8] = a4\n 90722: ra = 976, jump @1063\n      : @1102 [@dyn 488] (gas: 5)\n 90728: a0 = u64 [sp + 0xc8]\n 90732: t0 = u64 [sp + 0xd8]\n 90736: t1 = u64 [sp + 0xc0]\n 90740: a3 = u64 [sp + 0xd0]\n 90744: fallthrough\n      : @1103 (gas: 26)\n 90745: a1 = u64 [sp + 0x58]\n 90748: a4 = a0 ^ a1\n 90751: a5 = a0 <u a1\n 90754: t2 = a1\n 90756: a2 = u64 [sp + 0x48]\n 90759: a1 = t1 <u a2\n 90762: a5 = a1 if a4 == 0\n 90765: a4 = a3 - s1\n 90768: a3 = a3 <u s1\n 90771: s1 = u64 [sp + 0x50]\n 90774: s1 = t0 - s1\n 90777: s1 = s1 - a3\n 90780: a3 = a4 <u a5\n 90783: s1 = s1 - a3\n 90786: a4 = a4 - a5\n 90789: a0 = a0 - t2\n 90792: a1 = a0 - a1\n 90795: a0 = t1 - a2\n 90798: a1 = a1 | s1\n 90801: a2 = a0 | a4\n 90804: a2 = a2 | a1\n 90807: a1 = a1 | a4\n 90810: a2 = a2 >> 0x20\n 90813: a1 = a1 << 0x20\n 90816: a1 = a1 | a2\n 90819: jump @1105 if a1 == 0\n      : @1104 (gas: 1)\n 90822: trap\n      : @1105 (gas: 4)\n 90823: i32 s1 = a0 + 0\n 90825: a0 = u64 [sp + 0x40]\n 90828: a1 = s1\n 90830: ra = 978, jump @0\n      : @1106 [@dyn 489] (gas: 6)\n 90837: i32 a1 = a0 + 0\n 90839: a0 = 0x1\n 90842: a2 = s1\n 90844: ra = 0x3d4\n 90848: ecalli 11 // 'seal_return'\n 90850: fallthrough\n      : @1107 [@dyn 490] (gas: 9)\n 90851: a2 = u64 [a1 + 0x18]\n 90854: a3 = u64 [a1 + 0x10]\n 90857: a4 = u64 [a1 + 0x8]\n 90860: a1 = u64 [a1]\n 90862: u64 [a0 + 0x18] = a2\n 90865: u64 [a0 + 0x10] = a3\n 90868: u64 [a0 + 0x8] = a4\n 90871: u64 [a0] = a1\n 90873: ret\n      : @1108 (gas: 23)\n 90875: sp = sp + 0xffffffffffffff80\n 90878: u64 [sp + 0x78] = ra\n 90881: u64 [sp + 0x70] = s0\n 90884: u64 [sp + 0x68] = s1\n 90887: s0 = sp + 0x80\n 90891: sp = sp & 0xffffffffffffffe0\n 90894: u64 [sp + 56] = 0\n 90897: u64 [sp + 48] = 0\n 90900: u64 [sp + 40] = 0\n 90903: u64 [sp + 32] = 0\n 90906: u64 [sp + 88] = 0\n 90909: u64 [sp + 80] = 0\n 90912: u64 [sp + 72] = 0\n 90915: u64 [sp + 64] = 0\n 90918: s1 = 0x20\n 90921: u32 [sp] = s1\n 90923: i32 a1 = sp + s1\n 90926: i32 a3 = sp + 0x40\n 90929: i32 a4 = sp + 0\n 90931: a2 = 0xffffffffffffffff\n 90934: a0 = 0\n 90936: ecalli 7 // 'get_storage'\n 90938: fallthrough\n      : @1109 (gas: 9)\n 90939: a0 = u64 [sp + 0x58]\n 90942: a1 = u64 [sp + 0x48]\n 90945: a2 = u64 [sp + 0x40]\n 90948: a3 = u64 [sp + 0x50]\n 90951: a0 = a0 | a1\n 90954: a1 = a2 ^ 0x2\n 90957: a1 = a1 | a3\n 90960: a0 = a0 | a1\n 90963: jump @1111 if a0 == 0\n      : @1110 (gas: 35)\n 90966: u64 [sp + 56] = 0\n 90969: u64 [sp + 48] = 0\n 90972: u64 [sp + 40] = 0\n 90975: u64 [sp + 32] = 0\n 90978: u64 [sp + 88] = 0\n 90981: u64 [sp + 80] = 0\n 90984: u64 [sp + 72] = 0\n 90987: u64 [sp + 64] = 0\n 90990: u32 [sp + 0] = 0x20\n 90993: i32 a1 = sp + 0x20\n 90996: i32 a3 = sp + 0x40\n 90999: i32 a4 = sp + 0\n 91001: a2 = 0xffffffffffffffff\n 91004: a0 = 0\n 91006: ecalli 7 // 'get_storage'\n 91008: u64 [sp + 56] = 0\n 91011: u64 [sp + 48] = 0\n 91014: u64 [sp + 40] = 0\n 91017: u64 [sp + 32] = 0\n 91020: u64 [sp + 88] = 0\n 91023: u64 [sp + 80] = 0\n 91026: u64 [sp + 72] = 0\n 91029: u64 [sp + 64] = 0x2\n 91033: i32 a1 = sp + 0x20\n 91036: i32 a3 = sp + 0x40\n 91039: a2 = 0xffffffffffffffff\n 91042: a4 = 0x20\n 91045: a0 = 0\n 91047: ecalli 13 // 'set_storage'\n 91049: sp = s0 + 0xffffffffffffff80\n 91052: ra = u64 [sp + 0x78]\n 91055: s0 = u64 [sp + 0x70]\n 91058: s1 = u64 [sp + 0x68]\n 91061: sp = sp + 0x80\n 91065: ret\n      : @1111 (gas: 2)\n 91067: a1 = 0x20\n 91070: ra = 982, jump @0\n      : @1112 [@dyn 491] (gas: 35)\n 91077: u8 [a0 + 31] = 0\n 91080: u8 [a0 + 30] = 0\n 91083: u8 [a0 + 29] = 0\n 91086: u8 [a0 + 28] = 0\n 91089: u8 [a0 + 27] = 0\n 91092: u8 [a0 + 26] = 0\n 91095: u8 [a0 + 25] = 0\n 91098: u8 [a0 + 24] = 0\n 91101: u8 [a0 + 23] = 0\n 91104: u8 [a0 + 22] = 0\n 91107: u8 [a0 + 21] = 0\n 91110: u8 [a0 + 20] = 0\n 91113: u8 [a0 + 19] = 0\n 91116: u8 [a0 + 18] = 0\n 91119: u8 [a0 + 17] = 0\n 91122: u8 [a0 + 16] = 0\n 91125: u8 [a0 + 15] = 0\n 91128: u8 [a0 + 14] = 0\n 91131: u8 [a0 + 13] = 0\n 91134: u8 [a0 + 12] = 0\n 91137: u8 [a0 + 11] = 0\n 91140: u8 [a0 + 10] = 0\n 91143: u8 [a0 + 9] = 0\n 91146: u8 [a0 + 8] = 0\n 91149: u8 [a0 + 7] = 0\n 91152: u8 [a0 + 6] = 0\n 91155: u8 [a0 + 5] = 0\n 91158: u8 [a0 + 4] = 0\n 91161: u8 [a0 + 3] = 0xb5\n 91166: u8 [a0 + 2] = 0xae\n 91171: u8 [a0 + 1] = 0xe5\n 91176: u8 [a0 + 0] = 0x3e\n 91179: a1 = 0x4\n 91182: a0 = 0\n 91184: ra = 984, jump @0\n      : @1113 [@dyn 492] (gas: 6)\n 91191: i32 a1 = a0 + 0\n 91193: a0 = 0x1\n 91196: a2 = 0x4\n 91199: ra = 0x3da\n 91203: ecalli 11 // 'seal_return'\n 91205: fallthrough\n      : @1114 [@dyn 493] (gas: 9)\n 91206: a2 = u64 [a1 + 0x18]\n 91209: a3 = u64 [a1 + 0x10]\n 91212: a4 = u64 [a1 + 0x8]\n 91215: a1 = u64 [a1]\n 91217: u64 [a0 + 0x18] = a2\n 91220: u64 [a0 + 0x10] = a3\n 91223: u64 [a0 + 0x8] = a4\n 91226: u64 [a0] = a1\n 91228: ret\n      : @1115 [export #0: 'call'] (gas: 2)\n 91230: a0 = 0\n 91232: ra = 988, jump @25\n      : @1116 [@dyn 494] [export #1: 'deploy'] (gas: 2)\n 91239: a0 = 0x1\n 91242: ra = 990, jump @25\n      : @1117 [@dyn 495] (gas: 27)\n 91249: sp = sp + 0xffffffffffffff80\n 91252: u64 [sp + 0x78] = ra\n 91255: u64 [sp + 0x70] = s0\n 91258: u64 [sp + 0x68] = s1\n 91261: s0 = sp + 0x80\n 91265: sp = sp & 0xfffffffffffffff0\n 91268: t0 = u64 [a1]\n 91270: t1 = u64 [a1 + 0x8]\n 91273: t2 = u64 [a1 + 0x10]\n 91276: a1 = u64 [a1 + 0x18]\n 91279: a3 = u64 [a2]\n 91281: a4 = u64 [a2 + 0x8]\n 91284: a5 = u64 [a2 + 0x10]\n 91287: a2 = u64 [a2 + 0x18]\n 91290: s1 = a0\n 91292: u64 [sp + 0x18] = a2\n 91295: u64 [sp + 0x10] = a5\n 91298: u64 [sp + 0x8] = a4\n 91301: u64 [sp] = a3\n 91303: u64 [sp + 0x38] = a1\n 91306: u64 [sp + 0x30] = t2\n 91309: u64 [sp + 0x28] = t1\n 91312: a0 = sp + 0x40\n 91315: a1 = sp + 0x20\n 91318: a2 = sp\n 91320: u64 [sp + 0x20] = t0\n 91323: ra = 992, jump @959\n      : @1118 [@dyn 496] (gas: 14)\n 91329: a0 = u64 [sp + 0x50]\n 91332: a1 = u64 [sp + 0x58]\n 91335: a2 = u64 [sp + 0x40]\n 91338: a3 = u64 [sp + 0x48]\n 91341: u64 [s1 + 0x10] = a0\n 91344: u64 [s1 + 0x18] = a1\n 91347: u64 [s1] = a2\n 91349: u64 [s1 + 0x8] = a3\n 91352: sp = s0 + 0xffffffffffffff80\n 91355: ra = u64 [sp + 0x78]\n 91358: s0 = u64 [sp + 0x70]\n 91361: s1 = u64 [sp + 0x68]\n 91364: sp = sp + 0x80\n 91368: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"CHAIN_ID()": "85e1f4d0",
							"EXPLORER_URL()": "111ac93b",
							"RPC_URL()": "f8533c90",
							"SYMBOL()": "f76f8d78",
							"buyPhone(uint256)": "bacca2ea",
							"confirmReceived(uint256)": "27dac36d",
							"dispatchPhone(uint256)": "bdee3037",
							"getMyPhones()": "af118963",
							"getPhone(uint256)": "2e7d44b5",
							"getPhoneCount()": "6132d789",
							"listPhone(string,string,string,string,uint256)": "054e2b32",
							"phones(uint256)": "f3730653",
							"userPhones(address,uint256)": "bfa7eec3",
							"verifyPhone(uint256,string)": "99b4bc9f"
						}
					},
					"irOptimized": "/// @use-src 0:\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\", 1:\"PhoneMarketplace.sol\"\nobject \"PhoneMarketplace_575\" {\n    code {\n        {\n            /// @src 1:119:5594  \"contract PhoneMarketplace is ReentrancyGuard {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            constructor_PhoneMarketplace()\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"PhoneMarketplace_575_deployed\"), datasize(\"PhoneMarketplace_575_deployed\"))\n            return(_1, datasize(\"PhoneMarketplace_575_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function cleanup_rational_by(value) -> cleaned\n        { cleaned := value }\n        function cleanup_uint256(value) -> cleaned\n        { cleaned := value }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_rational_by_to_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n        }\n        /// @src 1:211:255  \"uint256 public constant CHAIN_ID = 420420421\"\n        function constant_CHAIN_ID() -> ret\n        {\n            /// @src 1:246:255  \"420420421\"\n            let expr := 0x190f1b45\n            let _1 := convert_rational_by_to_uint256(expr)\n            ret := _1\n        }\n        function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n        {\n            mstore(pos, length)\n            updated_pos := add(pos, 0x20)\n        }\n        function store_literal_in_memory_2751e07aca03d7fa57b06192d6a4a43c9c61bb1cdd89fa433093ccb237585ce9(memPtr)\n        {\n            mstore(add(memPtr, 0), \"PhoneMarketplace: unsupported ch\")\n            mstore(add(memPtr, 32), \"ain\")\n        }\n        function abi_encode_stringliteral_2751e07aca03d7fa57b06192d6a4a43c9c61bb1cdd89fa433093ccb237585ce9(pos) -> end\n        {\n            pos := array_storeLengthForEncoding_string(pos, 35)\n            store_literal_in_memory_2751e07aca03d7fa57b06192d6a4a43c9c61bb1cdd89fa433093ccb237585ce9(pos)\n            end := add(pos, 64)\n        }\n        function abi_encode_stringliteral(headStart) -> tail\n        {\n            tail := add(headStart, 32)\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_stringliteral_2751e07aca03d7fa57b06192d6a4a43c9c61bb1cdd89fa433093ccb237585ce9(tail)\n        }\n        function require_helper_stringliteral(condition)\n        {\n            if iszero(condition)\n            {\n                let memPtr := allocate_unbounded()\n                mstore(memPtr, shl(229, 4594637))\n                let end := abi_encode_stringliteral(add(memPtr, 4))\n                revert(memPtr, sub(end, memPtr))\n            }\n        }\n        /// @ast-id 165 @src 1:1346:1484  \"constructor() {...\"\n        function constructor_PhoneMarketplace()\n        {\n            constructor_ReentrancyGuard()\n            /// @src 1:1391:1404  \"block.chainid\"\n            let expr := chainid()\n            /// @src 1:1408:1416  \"CHAIN_ID\"\n            let expr_1 := constant_CHAIN_ID()\n            /// @src 1:1391:1416  \"block.chainid == CHAIN_ID\"\n            let expr_2 := eq(cleanup_uint256(expr), cleanup_uint256(expr_1))\n            /// @src 1:1370:1477  \"require(...\"\n            require_helper_stringliteral(expr_2)\n        }\n        /// @src 1:119:5594  \"contract PhoneMarketplace is ReentrancyGuard {...\"\n        function cleanup_t_rational_by(value) -> cleaned\n        { cleaned := value }\n        function convert_t_rational_by_to_t_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n        }\n        /// @src 0:1818:1858  \"uint256 private constant NOT_ENTERED = 1\"\n        function constant_NOT_ENTERED() -> ret\n        {\n            /// @src 0:1857:1858  \"1\"\n            let expr := 0x01\n            let _1 := convert_t_rational_by_to_t_uint256(expr)\n            ret := _1\n        }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := not(0)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function convert_uint256_to_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_uint256(value)))\n        }\n        function prepare_store_uint256(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_uint256_to_uint256(slot, value)\n        {\n            let convertedValue := convert_uint256_to_uint256(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n        }\n        /// @ast-id 21 @src 0:2037:2089  \"constructor() {...\"\n        function constructor_ReentrancyGuard()\n        {\n            /// @src 0:2071:2082  \"NOT_ENTERED\"\n            let expr := constant_NOT_ENTERED()\n            /// @src 0:2061:2082  \"_status = NOT_ENTERED\"\n            update_storage_value_offset_uint256_to_uint256(0x00, expr)\n        }\n    }\n    /// @use-src 0:\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\", 1:\"PhoneMarketplace.sol\"\n    object \"PhoneMarketplace_575_deployed\" {\n        code {\n            {\n                /// @src 1:119:5594  \"contract PhoneMarketplace is ReentrancyGuard {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_224_unsigned(calldataload(0))\n                    switch selector\n                    case 0x054e2b32 { external_fun_listPhone() }\n                    case 0x111ac93b { external_fun_EXPLORER_URL() }\n                    case 0x27dac36d {\n                        external_fun_confirmReceived()\n                    }\n                    case 0x2e7d44b5 { external_fun_getPhone() }\n                    case 0x6132d789 { external_fun_getPhoneCount() }\n                    case 0x85e1f4d0 { external_fun_CHAIN_ID() }\n                    case 0x99b4bc9f { external_fun_verifyPhone() }\n                    case 0xaf118963 { external_fun_getMyPhones() }\n                    case 0xbacca2ea { external_fun_buyPhone() }\n                    case 0xbdee3037 { external_fun_dispatchPhone() }\n                    case 0xbfa7eec3 { external_fun_userPhones() }\n                    case 0xf3730653 { external_fun_phones() }\n                    case 0xf76f8d78 { external_fun_SYMBOL() }\n                    case 0xf8533c90 { external_fun_RPC_URL() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_224_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n            { revert(0, 0) }\n            function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n            { revert(0, 0) }\n            function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n            { revert(0, 0) }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function array_allocation_size_string(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of(length)\n                size := add(size, 0x20)\n            }\n            function copy_calldata_to_memory_with_cleanup(src, dst, length)\n            {\n                calldatacopy(dst, src, length)\n                mstore(add(dst, length), 0)\n            }\n            function abi_decode_available_length_string(src, length, end) -> array\n            {\n                array := allocate_memory(array_allocation_size_string(length))\n                mstore(array, length)\n                let dst := add(array, 0x20)\n                if gt(add(src, length), end)\n                {\n                    revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                }\n                copy_calldata_to_memory_with_cleanup(src, dst, length)\n            }\n            function abi_decode_string(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                }\n                let length := calldataload(offset)\n                array := abi_decode_available_length_string(add(offset, 0x20), length, end)\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_stringt_stringt_stringt_stringt_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4\n            {\n                if slt(sub(dataEnd, headStart), 160)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := calldataload(add(headStart, 0))\n                if gt(offset, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value0 := abi_decode_string(add(headStart, offset), dataEnd)\n                let offset_1 := calldataload(add(headStart, 32))\n                if gt(offset_1, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value1 := abi_decode_string(add(headStart, offset_1), dataEnd)\n                let offset_2 := calldataload(add(headStart, 64))\n                if gt(offset_2, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value2 := abi_decode_string(add(headStart, offset_2), dataEnd)\n                let offset_3 := calldataload(add(headStart, 96))\n                if gt(offset_3, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value3 := abi_decode_string(add(headStart, offset_3), dataEnd)\n                let offset_4 := 128\n                value4 := abi_decode_uint256(add(headStart, offset_4), dataEnd)\n            }\n            function abi_encode_uint256_to_uint256_fromStack(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256_fromStack(value0, add(headStart, 0))\n            }\n            function external_fun_listPhone()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2, param_3, param_4 := abi_decode_stringt_stringt_stringt_stringt_uint256(4, calldatasize())\n                let ret := fun_listPhone(param, param_1, param_2, param_3, param_4)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function allocate_memory_array_string(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_string(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function store_literal_in_memory_e31cb80247072cc7d0b72ca783d939ce793f72713b5fc69b1844896e55563c86(memPtr)\n            {\n                mstore(add(memPtr, 0), \"https://assethub-westend.subscan\")\n                mstore(add(memPtr, 32), \".io\")\n            }\n            function copy_literal_to_memory_e31cb80247072cc7d0b72ca783d939ce793f72713b5fc69b1844896e55563c86() -> memPtr\n            {\n                memPtr := allocate_memory_array_string(35)\n                store_literal_in_memory_e31cb80247072cc7d0b72ca783d939ce793f72713b5fc69b1844896e55563c86(add(memPtr, 32))\n            }\n            function convert_stringliteral_e31c_to_string() -> converted\n            {\n                converted := copy_literal_to_memory_e31cb80247072cc7d0b72ca783d939ce793f72713b5fc69b1844896e55563c86()\n            }\n            /// @src 1:355:430  \"string public constant EXPLORER_URL = \\\"https://assethub-westend.subscan.io\\\"\"\n            function constant_EXPLORER_URL() -> ret_mpos\n            {\n                /// @src 1:393:430  \"\\\"https://assethub-westend.subscan.io\\\"\"\n                let _mpos := convert_stringliteral_e31c_to_string()\n                ret_mpos := _mpos\n            }\n            /// @ast-id 82 @src 1:355:430  \"string public constant EXPLORER_URL = \\\"https://assethub-westend.subscan.io\\\"\"\n            function getter_fun_EXPLORER_URL() -> ret\n            {\n                ret := constant_EXPLORER_URL()\n            }\n            /// @src 1:119:5594  \"contract PhoneMarketplace is ReentrancyGuard {...\"\n            function array_length_string(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_string_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                mcopy(dst, src, length)\n                mstore(add(dst, length), 0)\n            }\n            function abi_encode_string_to_string(value, pos) -> end\n            {\n                let length := array_length_string(value)\n                pos := array_storeLengthForEncoding_string_fromStack(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, round_up_to_mul_of(length))\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_string_to_string(value0, tail)\n            }\n            function external_fun_EXPLORER_URL()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_EXPLORER_URL()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_string(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_confirmReceived()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_confirmReceived(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_address_string_string_string_string_uint256_bool_bool_bool_bool_address(headStart, value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10) -> tail\n            {\n                tail := add(headStart, 352)\n                abi_encode_address(value0, add(headStart, 0))\n                mstore(add(headStart, 32), sub(tail, headStart))\n                tail := abi_encode_string_to_string(value1, tail)\n                mstore(add(headStart, 64), sub(tail, headStart))\n                tail := abi_encode_string_to_string(value2, tail)\n                mstore(add(headStart, 96), sub(tail, headStart))\n                tail := abi_encode_string_to_string(value3, tail)\n                mstore(add(headStart, 128), sub(tail, headStart))\n                tail := abi_encode_string_to_string(value4, tail)\n                abi_encode_uint256_to_uint256_fromStack(value5, add(headStart, 160))\n                abi_encode_bool_to_bool(value6, add(headStart, 192))\n                abi_encode_bool_to_bool(value7, add(headStart, 224))\n                abi_encode_bool_to_bool(value8, add(headStart, 256))\n                abi_encode_bool_to_bool(value9, add(headStart, 288))\n                abi_encode_address(value10, add(headStart, 320))\n            }\n            function external_fun_getPhone()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret, ret_1, ret_2, ret_3, ret_4, ret_5, ret_6, ret_7, ret_8, ret_9, ret_10 := fun_getPhone(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_address_string_string_string_string_uint256_bool_bool_bool_bool_address(memPos, ret, ret_1, ret_2, ret_3, ret_4, ret_5, ret_6, ret_7, ret_8, ret_9, ret_10)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_getPhoneCount()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := fun_getPhoneCount()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            /// @src 1:211:255  \"uint256 public constant CHAIN_ID = 420420421\"\n            function constant_CHAIN_ID() -> ret\n            {\n                /// @src 1:246:255  \"420420421\"\n                let expr := 0x190f1b45\n                let _1 := convert_rational_by_to_uint256(expr)\n                ret := _1\n            }\n            /// @ast-id 76 @src 1:211:255  \"uint256 public constant CHAIN_ID = 420420421\"\n            function getter_fun_CHAIN_ID() -> ret\n            { ret := constant_CHAIN_ID() }\n            /// @src 1:119:5594  \"contract PhoneMarketplace is ReentrancyGuard {...\"\n            function external_fun_CHAIN_ID()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_CHAIN_ID()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_uint256t_string(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                let offset_1 := calldataload(add(headStart, 32))\n                if gt(offset_1, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value1 := abi_decode_string(add(headStart, offset_1), dataEnd)\n            }\n            function abi_encode_bool(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bool_to_bool(value0, add(headStart, 0))\n            }\n            function external_fun_verifyPhone()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_uint256t_string(4, calldatasize())\n                let ret := fun_verifyPhone(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_bool(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function array_length_array_uint256_dyn(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_array_uint256_dyn_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_array_uint256_dyn(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encodeUpdatedPos_uint256(value0, pos) -> updatedPos\n            {\n                abi_encode_uint256_to_uint256(value0, pos)\n                updatedPos := add(pos, 0x20)\n            }\n            function array_nextElement_array_uint256_dyn(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_array_uint256_dyn_memory_ptr(value, pos) -> end\n            {\n                let length := array_length_array_uint256_dyn(value)\n                pos := array_storeLengthForEncoding_array_uint256_dyn_fromStack(pos, length)\n                let baseRef := array_dataslot_array_uint256_dyn(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := mload(srcPtr)\n                    pos := abi_encodeUpdatedPos_uint256(elementValue0, pos)\n                    srcPtr := array_nextElement_array_uint256_dyn(srcPtr)\n                }\n                end := pos\n            }\n            function abi_encode_array_uint256_dyn(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_array_uint256_dyn_memory_ptr(value0, tail)\n            }\n            function external_fun_getMyPhones()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := fun_getMyPhones()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_array_uint256_dyn(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_buyPhone()\n            {\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_buyPhone(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_dispatchPhone()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_dispatchPhone(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function abi_decode_addresst_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function mapping_index_access_mapping_address_array_uint256_dyn_storage_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_array_uint256_dyn_storage(value) -> length\n            { length := sload(value) }\n            function array_dataslot_array_uint256_dyn_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_uint256_dyn(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_uint256_dyn_storage(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_uint256_dyn_storage(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 117 @src 1:803:850  \"mapping(address => uint256[]) public userPhones\"\n            function getter_fun_userPhones(key, key_1) -> ret\n            {\n                let slot := 2\n                let offset := 0\n                slot := mapping_index_access_mapping_address_array_uint256_dyn_storage_of_address(slot, key)\n                if iszero(lt(key_1, array_length_array_uint256_dyn_storage(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_uint256_dyn(slot, key_1)\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 1:119:5594  \"contract PhoneMarketplace is ReentrancyGuard {...\"\n            function external_fun_userPhones()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_uint256(4, calldatasize())\n                let ret := getter_fun_userPhones(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function array_length_array_struct_Phone_storage_dyn(value) -> length\n            { length := sload(value) }\n            function array_dataslot_array_struct_Phone_storage_dyn(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_struct_Phone__dyn(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_struct_Phone_storage_dyn(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_struct_Phone_storage_dyn(array)\n                slot := add(dataArea, mul(index, 7))\n                offset := 0\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_t_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function panic_error_0x22()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := div(data, 2)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32)) { panic_error_0x22() }\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_string_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function abi_encode_string_storage(value, pos) -> ret\n            {\n                let slotValue := sload(value)\n                let length := extract_byte_array_length(slotValue)\n                pos := array_storeLengthForEncoding_string(pos, length)\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(pos, and(slotValue, not(0xff)))\n                    ret := add(pos, mul(0x20, iszero(iszero(length))))\n                }\n                case 1 {\n                    let dataPos := array_dataslot_string_storage(value)\n                    let i := 0\n                    for { } lt(i, length) { i := add(i, 0x20) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, 1)\n                    }\n                    ret := add(pos, i)\n                }\n            }\n            function abi_encodeUpdatedPos_string_storage(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_string_storage(value0, pos)\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_string_storage(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function cleanup_from_storage_bool(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_offset_0_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_t_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_0_bool(sload(slot))\n            }\n            function shift_right_8_unsigned(value) -> newValue\n            { newValue := shr(8, value) }\n            function extract_from_storage_value_offset_t_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_8_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_t_bool(sload(slot))\n            }\n            function shift_right_16_unsigned(value) -> newValue\n            { newValue := shr(16, value) }\n            function extract_from_storage_value_offset_2_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_16_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_2_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_2_bool(sload(slot))\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(24, value) }\n            function extract_from_storage_value_offset_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_3_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bool(sload(slot))\n            }\n            function shift_right_32_unsigned(value) -> newValue\n            { newValue := shr(32, value) }\n            function extract_from_storage_value_offset_t_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_32_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_t_address(sload(slot))\n            }\n            /// @ast-id 112 @src 1:776:797  \"Phone[] public phones\"\n            function getter_fun_phones(key) -> ret, ret_1_mpos, ret_2_mpos, ret_3_mpos, ret_4_mpos, ret_1, ret_2, ret_3, ret_4, ret_5, ret_6\n            {\n                let slot := 1\n                let offset := 0\n                if iszero(lt(key, array_length_array_struct_Phone_storage_dyn(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_struct_Phone__dyn(slot, key)\n                ret := read_from_storage_split_offset_t_address(add(slot, 0))\n                ret_1_mpos := copy_array_from_storage_to_memory_string(add(slot, 1))\n                ret_2_mpos := copy_array_from_storage_to_memory_string(add(slot, 2))\n                ret_3_mpos := copy_array_from_storage_to_memory_string(add(slot, 3))\n                ret_4_mpos := copy_array_from_storage_to_memory_string(add(slot, 4))\n                ret_1 := read_from_storage_split_offset_uint256(add(slot, 5))\n                ret_2 := read_from_storage_split_offset_t_bool(add(slot, 6))\n                ret_3 := read_from_storage_split_offset_bool(add(slot, 6))\n                ret_4 := read_from_storage_split_offset_2_bool(add(slot, 6))\n                ret_5 := read_from_storage_split_offset_3_bool(add(slot, 6))\n                ret_6 := read_from_storage_split_offset_address(add(slot, 6))\n            }\n            /// @src 1:119:5594  \"contract PhoneMarketplace is ReentrancyGuard {...\"\n            function external_fun_phones()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret, ret_1, ret_2, ret_3, ret_4, ret_5, ret_6, ret_7, ret_8, ret_9, ret_10 := getter_fun_phones(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_address_string_string_string_string_uint256_bool_bool_bool_bool_address(memPos, ret, ret_1, ret_2, ret_3, ret_4, ret_5, ret_6, ret_7, ret_8, ret_9, ret_10)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function store_literal_in_memory_b76f4eab5125fb8c7f72daa1a454098a7311e3e7788c9a7b7f5fd41d37bb1200(memPtr)\n            { mstore(add(memPtr, 0), \"WND\") }\n            function copy_literal_to_memory_b76f4eab5125fb8c7f72daa1a454098a7311e3e7788c9a7b7f5fd41d37bb1200() -> memPtr\n            {\n                memPtr := allocate_memory_array_string(3)\n                store_literal_in_memory_b76f4eab5125fb8c7f72daa1a454098a7311e3e7788c9a7b7f5fd41d37bb1200(add(memPtr, 32))\n            }\n            function convert_stringliteral_b76f_to_string() -> converted\n            {\n                converted := copy_literal_to_memory_b76f4eab5125fb8c7f72daa1a454098a7311e3e7788c9a7b7f5fd41d37bb1200()\n            }\n            /// @src 1:436:473  \"string public constant SYMBOL = \\\"WND\\\"\"\n            function constant_SYMBOL() -> ret_mpos\n            {\n                /// @src 1:468:473  \"\\\"WND\\\"\"\n                let _3_mpos := convert_stringliteral_b76f_to_string()\n                ret_mpos := _3_mpos\n            }\n            /// @ast-id 85 @src 1:436:473  \"string public constant SYMBOL = \\\"WND\\\"\"\n            function getter_fun_SYMBOL() -> ret\n            { ret := constant_SYMBOL() }\n            /// @src 1:119:5594  \"contract PhoneMarketplace is ReentrancyGuard {...\"\n            function external_fun_SYMBOL()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_SYMBOL()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_string(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function store_literal_in_memory_ceb6e9fb5218947b7e35f1d062327d84d3e12a460ade7d27142a629d61735c63(memPtr)\n            {\n                mstore(add(memPtr, 0), \"https://westend-asset-hub-eth-rp\")\n                mstore(add(memPtr, 32), \"c.polkadot.io\")\n            }\n            function copy_literal_to_memory_ceb6e9fb5218947b7e35f1d062327d84d3e12a460ade7d27142a629d61735c63() -> memPtr\n            {\n                memPtr := allocate_memory_array_string(45)\n                store_literal_in_memory_ceb6e9fb5218947b7e35f1d062327d84d3e12a460ade7d27142a629d61735c63(add(memPtr, 32))\n            }\n            function convert_stringliteral_ceb6_to_string() -> converted\n            {\n                converted := copy_literal_to_memory_ceb6e9fb5218947b7e35f1d062327d84d3e12a460ade7d27142a629d61735c63()\n            }\n            /// @src 1:261:349  \"string public constant RPC_URL =...\"\n            function constant_RPC_URL() -> ret_mpos\n            {\n                /// @src 1:302:349  \"\\\"https://westend-asset-hub-eth-rpc.polkadot.io\\\"\"\n                let _4_mpos := convert_stringliteral_ceb6_to_string()\n                ret_mpos := _4_mpos\n            }\n            /// @ast-id 79 @src 1:261:349  \"string public constant RPC_URL =...\"\n            function getter_fun_RPC_URL() -> ret\n            { ret := constant_RPC_URL() }\n            /// @src 1:119:5594  \"contract PhoneMarketplace is ReentrancyGuard {...\"\n            function external_fun_RPC_URL()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_RPC_URL()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_string(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function zero_value_for_split_uint256() -> ret\n            { ret := 0 }\n            function convert_array_array_struct_Phone_storage_dyn_storage_to_array_struct_Phone__dyn_ptr(value) -> converted\n            { converted := value }\n            function cleanup_rational_by_1(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_rational_by_1(value)))\n            }\n            function convert_rational_by_to_address(value) -> converted\n            {\n                converted := convert_rational_by_to_uint160(value)\n            }\n            function allocate_memory_struct_struct_Phone_storage_ptr() -> memPtr\n            {\n                memPtr := allocate_memory(352)\n            }\n            function write_to_memory_address(memPtr, value)\n            {\n                mstore(memPtr, cleanup_address(value))\n            }\n            function write_to_memory_string(memPtr, value)\n            { mstore(memPtr, value) }\n            function write_to_memory_uint256(memPtr, value)\n            {\n                mstore(memPtr, cleanup_uint256(value))\n            }\n            function write_to_memory_bool(memPtr, value)\n            {\n                mstore(memPtr, cleanup_bool(value))\n            }\n            function array_dataslot_array_struct_Phone_storage_dyn_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_length_array_struct_Phone_storage_dyn_ptr(value) -> length\n            { length := sload(value) }\n            function storage_array_index_access_struct_Phone__dyn_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_struct_Phone_storage_dyn_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_struct_Phone_storage_dyn_ptr(array)\n                slot := add(dataArea, mul(index, 7))\n                offset := 0\n            }\n            function panic_error_0x00()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x00)\n                revert(0, 0x24)\n            }\n            function read_from_memoryt_address(ptr) -> returnValue\n            {\n                let value := cleanup_address(mload(ptr))\n                returnValue := value\n            }\n            function shift_left_0(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_20_shift(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left_0(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_20_shift(sload(slot), prepare_store_address(convertedValue)))\n            }\n            function read_from_memoryt_string(memPtr) -> value\n            { value := mload(memPtr) }\n            function divide_by_ceil(value) -> result\n            {\n                result := div(add(value, 31), 32)\n            }\n            function shift_left_dynamic(bits, value) -> newValue\n            { newValue := shl(bits, value) }\n            function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, not(0))\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_uint256_to_uint256(slot, offset, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_uint256(convertedValue)))\n            }\n            function storage_set_to_zero_uint256(slot, offset)\n            {\n                let zero := zero_value_for_split_uint256()\n                update_storage_value_uint256_to_uint256(slot, offset, zero)\n            }\n            function clear_storage_range_bytes1(start, end)\n            {\n                for { } lt(start, end) { start := add(start, 1) }\n                {\n                    storage_set_to_zero_uint256(start, 0)\n                }\n            }\n            function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n            {\n                if gt(len, 31)\n                {\n                    let dataArea := array_dataslot_string_storage(array)\n                    let deleteStart := add(dataArea, divide_by_ceil(startIndex))\n                    if lt(startIndex, 32) { deleteStart := dataArea }\n                    clear_storage_range_bytes1(deleteStart, add(dataArea, divide_by_ceil(len)))\n                }\n            }\n            function mask_bytes_dynamic(data, bytes) -> result\n            {\n                let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n                result := and(data, mask)\n            }\n            function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n            {\n                data := mask_bytes_dynamic(data, len)\n                used := or(data, mul(2, len))\n            }\n            function copy_byte_array_to_storage_from_string_to_string(slot, src)\n            {\n                let newLen := array_length_string(src)\n                if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n                let oldLen := extract_byte_array_length(sload(slot))\n                clean_up_bytearray_end_slots_string_storage(slot, oldLen, newLen)\n                let srcOffset := 0\n                srcOffset := 0x20\n                switch gt(newLen, 31)\n                case 1 {\n                    let loopEnd := and(newLen, not(0x1f))\n                    let dstPtr := array_dataslot_string_storage(slot)\n                    let i := 0\n                    for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                    {\n                        sstore(dstPtr, mload(add(src, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, 32)\n                    }\n                    if lt(loopEnd, newLen)\n                    {\n                        let lastValue := mload(add(src, srcOffset))\n                        sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n                    }\n                    sstore(slot, add(mul(newLen, 2), 1))\n                }\n                default {\n                    let value := 0\n                    if newLen\n                    {\n                        value := mload(add(src, srcOffset))\n                    }\n                    sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n                }\n            }\n            function update_storage_value_offset_string_to_string(slot, value)\n            {\n                copy_byte_array_to_storage_from_string_to_string(slot, value)\n            }\n            function read_from_memoryt_uint256(ptr) -> returnValue\n            {\n                let value := cleanup_uint256(mload(ptr))\n                returnValue := value\n            }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left_0(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            function read_from_memoryt_bool(ptr) -> returnValue\n            {\n                let value := cleanup_bool(mload(ptr))\n                returnValue := value\n            }\n            function update_byte_slice_shift_0(value, toInsert) -> result\n            {\n                let mask := 255\n                toInsert := shift_left_0(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_bool_to_bool(value) -> converted\n            {\n                converted := cleanup_bool(value)\n            }\n            function prepare_store_bool(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(8, value) }\n            function update_byte_slice_shift_1(value, toInsert) -> result\n            {\n                let mask := 65280\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_t_bool_to_t_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_1(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function shift_left_16(value) -> newValue\n            { newValue := shl(16, value) }\n            function update_byte_slice_shift_2(value, toInsert) -> result\n            {\n                let mask := 16711680\n                toInsert := shift_left_16(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_2_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_2(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function shift_left_24(value) -> newValue\n            { newValue := shl(24, value) }\n            function update_byte_slice_shift_3(value, toInsert) -> result\n            {\n                let mask := 0xff000000\n                toInsert := shift_left_24(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_3_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_3(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function shift_left_32(value) -> newValue\n            { newValue := shl(32, value) }\n            function update_byte_slice_shift_4(value, toInsert) -> result\n            {\n                let mask := sub(shl(192, 1), 0x0100000000)\n                toInsert := shift_left_32(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_t_address_to_t_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_shift_4(sload(slot), prepare_store_address(convertedValue)))\n            }\n            function copy_struct_to_storage_from_struct_Phone_to_struct_Phone(slot, value)\n            {\n                let memberSlot := add(slot, 0)\n                let memberSrcPtr := add(value, 0)\n                let memberValue := read_from_memoryt_address(memberSrcPtr)\n                update_storage_value_offset_address_to_address(memberSlot, memberValue)\n                let memberSlot_1 := add(slot, 1)\n                let memberSrcPtr_1 := add(value, 32)\n                let memberValue_1 := read_from_memoryt_string(memberSrcPtr_1)\n                update_storage_value_offset_string_to_string(memberSlot_1, memberValue_1)\n                let memberSlot_2 := add(slot, 2)\n                let memberSrcPtr_2 := add(value, 64)\n                let memberValue_2 := read_from_memoryt_string(memberSrcPtr_2)\n                update_storage_value_offset_string_to_string(memberSlot_2, memberValue_2)\n                let memberSlot_3 := add(slot, 3)\n                let memberSrcPtr_3 := add(value, 96)\n                let memberValue_3 := read_from_memoryt_string(memberSrcPtr_3)\n                update_storage_value_offset_string_to_string(memberSlot_3, memberValue_3)\n                let memberSlot_4 := add(slot, 4)\n                let memberSrcPtr_4 := add(value, 128)\n                let memberValue_4 := read_from_memoryt_string(memberSrcPtr_4)\n                update_storage_value_offset_string_to_string(memberSlot_4, memberValue_4)\n                let memberSlot_5 := add(slot, 5)\n                let memberSrcPtr_5 := add(value, 160)\n                let memberValue_5 := read_from_memoryt_uint256(memberSrcPtr_5)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_5, memberValue_5)\n                let memberSlot_6 := add(slot, 6)\n                let memberSrcPtr_6 := add(value, 192)\n                let memberValue_6 := read_from_memoryt_bool(memberSrcPtr_6)\n                update_storage_value_offset_bool_to_bool(memberSlot_6, memberValue_6)\n                let memberSlot_7 := add(slot, 6)\n                let memberSrcPtr_7 := add(value, 224)\n                let memberValue_7 := read_from_memoryt_bool(memberSrcPtr_7)\n                update_storage_value_offset_t_bool_to_t_bool(memberSlot_7, memberValue_7)\n                let memberSlot_8 := add(slot, 6)\n                let memberSrcPtr_8 := add(value, 256)\n                let memberValue_8 := read_from_memoryt_bool(memberSrcPtr_8)\n                update_storage_value_offset_2_bool_to_bool(memberSlot_8, memberValue_8)\n                let memberSlot_9 := add(slot, 6)\n                let memberSrcPtr_9 := add(value, 288)\n                let memberValue_9 := read_from_memoryt_bool(memberSrcPtr_9)\n                update_storage_value_offset_3_bool_to_bool(memberSlot_9, memberValue_9)\n                let memberSlot_10 := add(slot, 6)\n                let memberSrcPtr_10 := add(value, 320)\n                let memberValue_10 := read_from_memoryt_address(memberSrcPtr_10)\n                update_storage_value_offset_t_address_to_t_address(memberSlot_10, memberValue_10)\n            }\n            function update_storage_value_struct_Phone_to_struct_Phone(slot, offset, value)\n            {\n                if offset { panic_error_0x00() }\n                copy_struct_to_storage_from_struct_Phone_to_struct_Phone(slot, value)\n            }\n            function array_push_from_struct_Phone_to_array_struct_Phone_storage_dyn_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_struct_Phone__dyn_ptr(array, oldLen)\n                update_storage_value_struct_Phone_to_struct_Phone(slot, offset, value0)\n            }\n            function convert_array_array_uint256_dyn_storage_to_array_uint256_dyn_ptr(value) -> converted\n            { converted := value }\n            function array_dataslot_array_uint256_dyn_storage_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_length_array_uint256_dyn_storage_ptr(value) -> length\n            { length := sload(value) }\n            function storage_array_index_access_uint256_dyn_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_uint256_dyn_storage_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_uint256_dyn_storage_ptr(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function array_push_from_uint256_to_array_uint256_dyn_storage_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_uint256_dyn_ptr(array, oldLen)\n                update_storage_value_uint256_to_uint256(slot, offset, value0)\n            }\n            /// @ast-id 225 @src 1:1490:2320  \"function listPhone(...\"\n            function fun_listPhone(var_manufacturer_mpos, var_modelName_mpos, var_modelCode_mpos, var_imei_mpos, var_price) -> var\n            {\n                /// @src 1:1686:1693  \"uint256\"\n                let zero_t_uint256 := zero_value_for_split_uint256()\n                var := zero_t_uint256\n                /// @src 1:1723:1729  \"phones\"\n                let _6_slot := 0x01\n                let expr_182_slot := _6_slot\n                /// @src 1:1723:1736  \"phones.length\"\n                let expr := array_length_array_struct_Phone_storage_dyn(expr_182_slot)\n                /// @src 1:1705:1736  \"uint256 phoneId = phones.length\"\n                let var_phoneId := expr\n                /// @src 1:1746:1752  \"phones\"\n                let _7_slot := 0x01\n                let expr_185_slot := _7_slot\n                /// @src 1:1746:1757  \"phones.push\"\n                let expr_self_slot := convert_array_array_struct_Phone_storage_dyn_storage_to_array_struct_Phone__dyn_ptr(expr_185_slot)\n                /// @src 1:1803:1813  \"msg.sender\"\n                let expr_1 := caller()\n                /// @src 1:1845:1857  \"manufacturer\"\n                let _8_mpos := var_manufacturer_mpos\n                let expr_191_mpos := _8_mpos\n                /// @src 1:1886:1895  \"modelName\"\n                let _9_mpos := var_modelName_mpos\n                let expr_192_mpos := _9_mpos\n                /// @src 1:1924:1933  \"modelCode\"\n                let _10_mpos := var_modelCode_mpos\n                let expr_193_mpos := _10_mpos\n                /// @src 1:1957:1961  \"imei\"\n                let _11_mpos := var_imei_mpos\n                let expr_194_mpos := _11_mpos\n                /// @src 1:1986:1991  \"price\"\n                let _1 := var_price\n                let expr_2 := _1\n                /// @src 1:2017:2022  \"false\"\n                let expr_3 := 0x00\n                /// @src 1:2052:2057  \"false\"\n                let expr_4 := 0x00\n                /// @src 1:2089:2094  \"false\"\n                let expr_5 := 0x00\n                /// @src 1:2124:2129  \"false\"\n                let expr_6 := 0x00\n                /// @src 1:2162:2163  \"0\"\n                let expr_7 := 0x00\n                /// @src 1:2154:2164  \"address(0)\"\n                let expr_8 := convert_rational_by_to_address(expr_7)\n                /// @src 1:1771:2179  \"Phone({...\"\n                let expr_204_mpos := allocate_memory_struct_struct_Phone_storage_ptr()\n                write_to_memory_address(add(expr_204_mpos, 0), expr_1)\n                write_to_memory_string(add(expr_204_mpos, 32), expr_191_mpos)\n                write_to_memory_string(add(expr_204_mpos, 64), expr_192_mpos)\n                write_to_memory_string(add(expr_204_mpos, 96), expr_193_mpos)\n                write_to_memory_string(add(expr_204_mpos, 128), expr_194_mpos)\n                write_to_memory_uint256(add(expr_204_mpos, 160), expr_2)\n                write_to_memory_bool(add(expr_204_mpos, 192), expr_3)\n                write_to_memory_bool(add(expr_204_mpos, 224), expr_4)\n                write_to_memory_bool(add(expr_204_mpos, 256), expr_5)\n                write_to_memory_bool(add(expr_204_mpos, 288), expr_6)\n                write_to_memory_address(add(expr_204_mpos, 320), expr_8)\n                /// @src 1:1746:2189  \"phones.push(...\"\n                array_push_from_struct_Phone_to_array_struct_Phone_storage_dyn_ptr(expr_self_slot, expr_204_mpos)\n                /// @src 1:2199:2209  \"userPhones\"\n                let _13_slot := 0x02\n                let expr_207_slot := _13_slot\n                /// @src 1:2210:2220  \"msg.sender\"\n                let expr_9 := caller()\n                /// @src 1:2199:2221  \"userPhones[msg.sender]\"\n                let _2 := mapping_index_access_mapping_address_array_uint256_dyn_storage_of_address(expr_207_slot, expr_9)\n                let _15_slot := _2\n                let expr_210_slot := _15_slot\n                /// @src 1:2199:2226  \"userPhones[msg.sender].push\"\n                let expr_211_self_slot := convert_array_array_uint256_dyn_storage_to_array_uint256_dyn_ptr(expr_210_slot)\n                /// @src 1:2227:2234  \"phoneId\"\n                let _3 := var_phoneId\n                let expr_10 := _3\n                /// @src 1:2199:2235  \"userPhones[msg.sender].push(phoneId)\"\n                array_push_from_uint256_to_array_uint256_dyn_storage_ptr(expr_211_self_slot, expr_10)\n                /// @src 1:2262:2269  \"phoneId\"\n                let _4 := var_phoneId\n                let expr_11 := _4\n                /// @src 1:2271:2281  \"msg.sender\"\n                let expr_12 := caller()\n                /// @src 1:2283:2288  \"price\"\n                let _5 := var_price\n                let expr_13 := _5\n                /// @src 1:2250:2289  \"PhoneListed(phoneId, msg.sender, price)\"\n                let _6 := 0xb462de6624f49030296f623b1f79fa72355a3b4cd6bad1f54f79a201b1b6fa75\n                let _7 := convert_uint256_to_uint256(expr_11)\n                let _8 := convert_address_to_address(expr_12)\n                let _9 := allocate_unbounded()\n                let _10 := abi_encode_uint256(_9, expr_13)\n                log3(_9, sub(_10, _9), _6, _7, _8)\n                /// @src 1:2306:2313  \"phoneId\"\n                let _11 := var_phoneId\n                let expr_14 := _11\n                /// @src 1:2299:2313  \"return phoneId\"\n                var := expr_14\n                leave\n            }\n            /// @src 1:119:5594  \"contract PhoneMarketplace is ReentrancyGuard {...\"\n            function store_literal_in_memory_eddbf2d72f1c1aeaa691f38cccd8071245860212d11dfd29bed2ce840b3960f7(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Phone does not exist\")\n            }\n            function abi_encode_stringliteral_eddb(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 20)\n                store_literal_in_memory_eddbf2d72f1c1aeaa691f38cccd8071245860212d11dfd29bed2ce840b3960f7(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_eddb(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_eddb(tail)\n            }\n            function require_helper_stringliteral_eddb(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_eddb(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_struct_Phone_storage_to_struct_Phone_ptr(value) -> converted\n            { converted := value }\n            function store_literal_in_memory_19b92239caea117bc2140bfa6eab478495d6d9a0b98826562b984df1f7efa281(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Only buyer can confirm\")\n            }\n            function abi_encode_stringliteral_19b9(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 22)\n                store_literal_in_memory_19b92239caea117bc2140bfa6eab478495d6d9a0b98826562b984df1f7efa281(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_19b9(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_19b9(tail)\n            }\n            function require_helper_stringliteral_19b9(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_19b9(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_e89da7455e3f879534345d4b1a39d00494779edb67a469de9425b387da58d1df(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Phone not sold yet\")\n            }\n            function abi_encode_stringliteral_e89da7455e3f879534345d4b1a39d00494779edb67a469de9425b387da58d1df(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 18)\n                store_literal_in_memory_e89da7455e3f879534345d4b1a39d00494779edb67a469de9425b387da58d1df(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_e89d(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_e89da7455e3f879534345d4b1a39d00494779edb67a469de9425b387da58d1df(tail)\n            }\n            function require_helper_stringliteral_e89d(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_e89d(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_63d5be0c8ef3066a5bd4b7a396d73f9b0c761296512b9d36f26f6c11e0a3e1de(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Phone not dispatched yet\")\n            }\n            function abi_encode_stringliteral_63d5be0c8ef3066a5bd4b7a396d73f9b0c761296512b9d36f26f6c11e0a3e1de(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 24)\n                store_literal_in_memory_63d5be0c8ef3066a5bd4b7a396d73f9b0c761296512b9d36f26f6c11e0a3e1de(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_63d5(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_63d5be0c8ef3066a5bd4b7a396d73f9b0c761296512b9d36f26f6c11e0a3e1de(tail)\n            }\n            function require_helper_stringliteral_63d5(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_63d5(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_fd3e2b1cb86077fb543ac8ad4c9a93540a15bb47490a8dc4d1f36123b15b682d(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Already confirmed\")\n            }\n            function abi_encode_stringliteral_fd3e2b1cb86077fb543ac8ad4c9a93540a15bb47490a8dc4d1f36123b15b682d(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 17)\n                store_literal_in_memory_fd3e2b1cb86077fb543ac8ad4c9a93540a15bb47490a8dc4d1f36123b15b682d(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_fd3e(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_fd3e2b1cb86077fb543ac8ad4c9a93540a15bb47490a8dc4d1f36123b15b682d(tail)\n            }\n            function require_helper_stringliteral_fd3e(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_fd3e(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_uint160_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_address_payable(value)\n            }\n            function convert_address_payable_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function revert_forward()\n            {\n                let pos := allocate_unbounded()\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            /// @ast-id 422 @src 1:3299:3905  \"function confirmReceived(uint256 phoneId) external {...\"\n            function fun_confirmReceived(var_phoneId)\n            {\n                /// @src 1:3368:3375  \"phoneId\"\n                let _1 := var_phoneId\n                let expr := _1\n                /// @src 1:3378:3384  \"phones\"\n                let _26_slot := 0x01\n                let expr_358_slot := _26_slot\n                /// @src 1:3378:3391  \"phones.length\"\n                let expr_1 := array_length_array_struct_Phone_storage_dyn(expr_358_slot)\n                /// @src 1:3368:3391  \"phoneId < phones.length\"\n                let expr_2 := lt(cleanup_uint256(expr), cleanup_uint256(expr_1))\n                /// @src 1:3360:3416  \"require(phoneId < phones.length, \\\"Phone does not exist\\\")\"\n                require_helper_stringliteral_eddb(expr_2)\n                /// @src 1:3448:3454  \"phones\"\n                let _27_slot := 0x01\n                let expr_367_slot := _27_slot\n                /// @src 1:3455:3462  \"phoneId\"\n                let _2 := var_phoneId\n                let expr_3 := _2\n                /// @src 1:3448:3463  \"phones[phoneId]\"\n                let _3, _4 := storage_array_index_access_struct_Phone__dyn(expr_367_slot, expr_3)\n                let _31_slot := _3\n                let expr_369_slot := _31_slot\n                /// @src 1:3426:3463  \"Phone storage phone = phones[phoneId]\"\n                let var_phone_366_slot := convert_struct_Phone_storage_to_struct_Phone_ptr(expr_369_slot)\n                /// @src 1:3481:3486  \"phone\"\n                let _32_slot := var_phone_366_slot\n                let expr_372_slot := _32_slot\n                /// @src 1:3481:3492  \"phone.buyer\"\n                let _5 := add(expr_372_slot, 6)\n                let _6 := read_from_storage_split_offset_address(_5)\n                let expr_4 := _6\n                /// @src 1:3496:3506  \"msg.sender\"\n                let expr_5 := caller()\n                /// @src 1:3481:3506  \"phone.buyer == msg.sender\"\n                let expr_6 := eq(cleanup_address(expr_4), cleanup_address(expr_5))\n                /// @src 1:3473:3533  \"require(phone.buyer == msg.sender, \\\"Only buyer can confirm\\\")\"\n                require_helper_stringliteral_19b9(expr_6)\n                /// @src 1:3551:3556  \"phone\"\n                let _35_slot := var_phone_366_slot\n                let expr_381_slot := _35_slot\n                /// @src 1:3551:3563  \"phone.isSold\"\n                let _7 := add(expr_381_slot, 6)\n                let _8 := read_from_storage_split_offset_t_bool(_7)\n                let expr_7 := _8\n                /// @src 1:3543:3586  \"require(phone.isSold, \\\"Phone not sold yet\\\")\"\n                require_helper_stringliteral_e89d(expr_7)\n                /// @src 1:3604:3609  \"phone\"\n                let _38_slot := var_phone_366_slot\n                let expr_387_slot := _38_slot\n                /// @src 1:3604:3622  \"phone.isDispatched\"\n                let _9 := add(expr_387_slot, 6)\n                let _10 := read_from_storage_split_offset_2_bool(_9)\n                let expr_8 := _10\n                /// @src 1:3596:3651  \"require(phone.isDispatched, \\\"Phone not dispatched yet\\\")\"\n                require_helper_stringliteral_63d5(expr_8)\n                /// @src 1:3670:3675  \"phone\"\n                let _41_slot := var_phone_366_slot\n                let expr_393_slot := _41_slot\n                /// @src 1:3670:3686  \"phone.isReceived\"\n                let _11 := add(expr_393_slot, 6)\n                let _12 := read_from_storage_split_offset_3_bool(_11)\n                let expr_9 := _12\n                /// @src 1:3669:3686  \"!phone.isReceived\"\n                let expr_10 := cleanup_bool(iszero(expr_9))\n                /// @src 1:3661:3708  \"require(!phone.isReceived, \\\"Already confirmed\\\")\"\n                require_helper_stringliteral_fd3e(expr_10)\n                /// @src 1:3738:3742  \"true\"\n                let expr_11 := 0x01\n                /// @src 1:3719:3724  \"phone\"\n                let _44_slot := var_phone_366_slot\n                let expr_399_slot := _44_slot\n                /// @src 1:3719:3735  \"phone.isReceived\"\n                let _13 := add(expr_399_slot, 6)\n                /// @src 1:3719:3742  \"phone.isReceived = true\"\n                update_storage_value_offset_3_bool_to_bool(_13, expr_11)\n                /// @src 1:3771:3778  \"phoneId\"\n                let _14 := var_phoneId\n                let expr_12 := _14\n                /// @src 1:3780:3790  \"msg.sender\"\n                let expr_13 := caller()\n                /// @src 1:3757:3791  \"PhoneReceived(phoneId, msg.sender)\"\n                let _15 := 0xb696c5084893a59c676d21e280a51fa4cbb3b216e993b38b65d7811e1efe6ad7\n                let _16 := convert_uint256_to_uint256(expr_12)\n                let _17 := convert_address_to_address(expr_13)\n                let _18 := allocate_unbounded()\n                let _19 := abi_encode_tuple(_18)\n                log3(_18, sub(_19, _18), _15, _16, _17)\n                /// @src 1:3863:3868  \"phone\"\n                let _52_slot := var_phone_366_slot\n                let expr_413_slot := _52_slot\n                /// @src 1:3863:3875  \"phone.seller\"\n                let _20 := add(expr_413_slot, 0)\n                let _21 := read_from_storage_split_offset_t_address(_20)\n                let expr_14 := _21\n                /// @src 1:3855:3876  \"payable(phone.seller)\"\n                let expr_15 := convert_address_to_address_payable(expr_14)\n                /// @src 1:3855:3885  \"payable(phone.seller).transfer\"\n                let expr_address := convert_address_payable_to_address(expr_15)\n                /// @src 1:3886:3891  \"phone\"\n                let _55_slot := var_phone_366_slot\n                let expr_417_slot := _55_slot\n                /// @src 1:3886:3897  \"phone.price\"\n                let _22 := add(expr_417_slot, 5)\n                let _23 := read_from_storage_split_offset_uint256(_22)\n                let expr_16 := _23\n                /// @src 1:3855:3898  \"payable(phone.seller).transfer(phone.price)\"\n                let _24 := 0\n                if iszero(expr_16) { _24 := 2300 }\n                let _25 := call(_24, expr_address, expr_16, 0, 0, 0, 0)\n                if iszero(_25) { revert_forward() }\n            }\n            /// @src 1:119:5594  \"contract PhoneMarketplace is ReentrancyGuard {...\"\n            function zero_value_for_split_address() -> ret\n            { ret := 0 }\n            function zero_value_for_split_string() -> ret\n            { ret := 96 }\n            function zero_value_for_split_bool() -> ret\n            { ret := 0 }\n            function convert_array_string_storage_to_string(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_string(value)\n            }\n            /// @ast-id 553 @src 1:4469:5376  \"function getPhone(...\"\n            function fun_getPhone(var_phoneId) -> var_seller, var_manufacturer_493_mpos, var_modelName_495_mpos, var_modelCode_497_mpos, var_imei_499_mpos, var_price, var_isSold, var_isVerified, var_isDispatched, var_isReceived, var_buyer\n            {\n                /// @src 1:4578:4592  \"address seller\"\n                let zero_address := zero_value_for_split_address()\n                var_seller := zero_address\n                /// @src 1:4606:4632  \"string memory manufacturer\"\n                let zero_string_mpos := zero_value_for_split_string()\n                var_manufacturer_493_mpos := zero_string_mpos\n                /// @src 1:4646:4669  \"string memory modelName\"\n                let zero_t_string_mpos := zero_value_for_split_string()\n                var_modelName_495_mpos := zero_t_string_mpos\n                /// @src 1:4683:4706  \"string memory modelCode\"\n                let zero_t_string_memory_ptr_mpos := zero_value_for_split_string()\n                var_modelCode_497_mpos := zero_t_string_memory_ptr_mpos\n                /// @src 1:4720:4738  \"string memory imei\"\n                let zero_string_memory_ptr_mpos := zero_value_for_split_string()\n                var_imei_499_mpos := zero_string_memory_ptr_mpos\n                /// @src 1:4752:4765  \"uint256 price\"\n                let zero_uint256 := zero_value_for_split_uint256()\n                var_price := zero_uint256\n                /// @src 1:4779:4790  \"bool isSold\"\n                let zero_bool := zero_value_for_split_bool()\n                var_isSold := zero_bool\n                /// @src 1:4804:4819  \"bool isVerified\"\n                let zero_bool_1 := zero_value_for_split_bool()\n                var_isVerified := zero_bool_1\n                /// @src 1:4833:4850  \"bool isDispatched\"\n                let zero_bool_2 := zero_value_for_split_bool()\n                var_isDispatched := zero_bool_2\n                /// @src 1:4864:4879  \"bool isReceived\"\n                let zero_t_bool := zero_value_for_split_bool()\n                var_isReceived := zero_t_bool\n                /// @src 1:4893:4906  \"address buyer\"\n                let zero_t_address := zero_value_for_split_address()\n                var_buyer := zero_t_address\n                /// @src 1:4939:4946  \"phoneId\"\n                let _1 := var_phoneId\n                let expr := _1\n                /// @src 1:4949:4955  \"phones\"\n                let _72_slot := 0x01\n                let expr_515_slot := _72_slot\n                /// @src 1:4949:4962  \"phones.length\"\n                let expr_1 := array_length_array_struct_Phone_storage_dyn(expr_515_slot)\n                /// @src 1:4939:4962  \"phoneId < phones.length\"\n                let expr_2 := lt(cleanup_uint256(expr), cleanup_uint256(expr_1))\n                /// @src 1:4931:4987  \"require(phoneId < phones.length, \\\"Phone does not exist\\\")\"\n                require_helper_stringliteral_eddb(expr_2)\n                /// @src 1:5019:5025  \"phones\"\n                let _73_slot := 0x01\n                let expr_524_slot := _73_slot\n                /// @src 1:5026:5033  \"phoneId\"\n                let _2 := var_phoneId\n                let expr_3 := _2\n                /// @src 1:5019:5034  \"phones[phoneId]\"\n                let _3, _4 := storage_array_index_access_struct_Phone__dyn(expr_524_slot, expr_3)\n                let _77_slot := _3\n                let expr_526_slot := _77_slot\n                /// @src 1:4997:5034  \"Phone storage phone = phones[phoneId]\"\n                let var_phone_523_slot := convert_struct_Phone_storage_to_struct_Phone_ptr(expr_526_slot)\n                /// @src 1:5065:5070  \"phone\"\n                let _78_slot := var_phone_523_slot\n                let expr_528_slot := _78_slot\n                /// @src 1:5065:5077  \"phone.seller\"\n                let _5 := add(expr_528_slot, 0)\n                let _6 := read_from_storage_split_offset_t_address(_5)\n                let expr_4 := _6\n                /// @src 1:5051:5369  \"(...\"\n                let expr_component := expr_4\n                /// @src 1:5091:5096  \"phone\"\n                let _81_slot := var_phone_523_slot\n                let expr_530_slot := _81_slot\n                /// @src 1:5091:5109  \"phone.manufacturer\"\n                let _7 := add(expr_530_slot, 1)\n                let _83_slot := _7\n                let expr_531_slot := _83_slot\n                /// @src 1:5051:5369  \"(...\"\n                let expr_550_component_2_slot := expr_531_slot\n                /// @src 1:5123:5128  \"phone\"\n                let _84_slot := var_phone_523_slot\n                let expr_532_slot := _84_slot\n                /// @src 1:5123:5138  \"phone.modelName\"\n                let _8 := add(expr_532_slot, 2)\n                let _86_slot := _8\n                let expr_533_slot := _86_slot\n                /// @src 1:5051:5369  \"(...\"\n                let expr_component_slot := expr_533_slot\n                /// @src 1:5152:5157  \"phone\"\n                let _87_slot := var_phone_523_slot\n                let expr_534_slot := _87_slot\n                /// @src 1:5152:5167  \"phone.modelCode\"\n                let _9 := add(expr_534_slot, 3)\n                let _89_slot := _9\n                let expr_535_slot := _89_slot\n                /// @src 1:5051:5369  \"(...\"\n                let expr_550_component_4_slot := expr_535_slot\n                /// @src 1:5181:5186  \"phone\"\n                let _90_slot := var_phone_523_slot\n                let expr_536_slot := _90_slot\n                /// @src 1:5181:5191  \"phone.imei\"\n                let _10 := add(expr_536_slot, 4)\n                let _92_slot := _10\n                let expr_537_slot := _92_slot\n                /// @src 1:5051:5369  \"(...\"\n                let expr_550_component_5_slot := expr_537_slot\n                /// @src 1:5205:5210  \"phone\"\n                let _93_slot := var_phone_523_slot\n                let expr_538_slot := _93_slot\n                /// @src 1:5205:5216  \"phone.price\"\n                let _11 := add(expr_538_slot, 5)\n                let _12 := read_from_storage_split_offset_uint256(_11)\n                let expr_5 := _12\n                /// @src 1:5051:5369  \"(...\"\n                let expr_component_1 := expr_5\n                /// @src 1:5230:5235  \"phone\"\n                let _96_slot := var_phone_523_slot\n                let expr_540_slot := _96_slot\n                /// @src 1:5230:5242  \"phone.isSold\"\n                let _13 := add(expr_540_slot, 6)\n                let _14 := read_from_storage_split_offset_t_bool(_13)\n                let expr_6 := _14\n                /// @src 1:5051:5369  \"(...\"\n                let expr_component_2 := expr_6\n                /// @src 1:5256:5261  \"phone\"\n                let _99_slot := var_phone_523_slot\n                let expr_542_slot := _99_slot\n                /// @src 1:5256:5272  \"phone.isVerified\"\n                let _15 := add(expr_542_slot, 6)\n                let _16 := read_from_storage_split_offset_bool(_15)\n                let expr_7 := _16\n                /// @src 1:5051:5369  \"(...\"\n                let expr_component_3 := expr_7\n                /// @src 1:5286:5291  \"phone\"\n                let _102_slot := var_phone_523_slot\n                let expr_544_slot := _102_slot\n                /// @src 1:5286:5304  \"phone.isDispatched\"\n                let _17 := add(expr_544_slot, 6)\n                let _18 := read_from_storage_split_offset_2_bool(_17)\n                let expr_8 := _18\n                /// @src 1:5051:5369  \"(...\"\n                let expr_component_4 := expr_8\n                /// @src 1:5318:5323  \"phone\"\n                let _105_slot := var_phone_523_slot\n                let expr_slot := _105_slot\n                /// @src 1:5318:5334  \"phone.isReceived\"\n                let _19 := add(expr_slot, 6)\n                let _20 := read_from_storage_split_offset_3_bool(_19)\n                let expr_9 := _20\n                /// @src 1:5051:5369  \"(...\"\n                let expr_component_5 := expr_9\n                /// @src 1:5348:5353  \"phone\"\n                let _108_slot := var_phone_523_slot\n                let expr_548_slot := _108_slot\n                /// @src 1:5348:5359  \"phone.buyer\"\n                let _21 := add(expr_548_slot, 6)\n                let _22 := read_from_storage_split_offset_address(_21)\n                let expr_10 := _22\n                /// @src 1:5051:5369  \"(...\"\n                let expr_component_6 := expr_10\n                /// @src 1:5044:5369  \"return (...\"\n                var_seller := expr_component\n                var_manufacturer_493_mpos := convert_array_string_storage_to_string(expr_550_component_2_slot)\n                var_modelName_495_mpos := convert_array_string_storage_to_string(expr_component_slot)\n                var_modelCode_497_mpos := convert_array_string_storage_to_string(expr_550_component_4_slot)\n                var_imei_499_mpos := convert_array_string_storage_to_string(expr_550_component_5_slot)\n                var_price := expr_component_1\n                var_isSold := expr_component_2\n                var_isVerified := expr_component_3\n                var_isDispatched := expr_component_4\n                var_isReceived := expr_component_5\n                var_buyer := expr_component_6\n                leave\n            }\n            /// @ast-id 562 @src 1:5382:5476  \"function getPhoneCount() external view returns (uint256) {...\"\n            function fun_getPhoneCount() -> var\n            {\n                /// @src 1:5430:5437  \"uint256\"\n                let zero_uint256 := zero_value_for_split_uint256()\n                var := zero_uint256\n                /// @src 1:5456:5462  \"phones\"\n                let _112_slot := 0x01\n                let expr_558_slot := _112_slot\n                /// @src 1:5456:5469  \"phones.length\"\n                let expr := array_length_array_struct_Phone_storage_dyn(expr_558_slot)\n                /// @src 1:5449:5469  \"return phones.length\"\n                var := expr\n                leave\n            }\n            /// @src 1:119:5594  \"contract PhoneMarketplace is ReentrancyGuard {...\"\n            function store_literal_in_memory_6cab4984dd8887316b6debe8d9b068a43c3cc15aa3c81fb8e069262757f3bc1f(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Phone already verified\")\n            }\n            function abi_encode_stringliteral_6cab4984dd8887316b6debe8d9b068a43c3cc15aa3c81fb8e069262757f3bc1f(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 22)\n                store_literal_in_memory_6cab4984dd8887316b6debe8d9b068a43c3cc15aa3c81fb8e069262757f3bc1f(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_6cab(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_6cab4984dd8887316b6debe8d9b068a43c3cc15aa3c81fb8e069262757f3bc1f(tail)\n            }\n            function require_helper_stringliteral_6cab(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_6cab(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function array_storeLengthForEncoding_string_nonPadded_inplace(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function abi_encode_string_storage_to_string_nonPadded_inplace(value, pos) -> ret\n            {\n                let slotValue := sload(value)\n                let length := extract_byte_array_length(slotValue)\n                pos := array_storeLengthForEncoding_string_nonPadded_inplace(pos, length)\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(pos, and(slotValue, not(0xff)))\n                    ret := add(pos, mul(length, iszero(iszero(length))))\n                }\n                case 1 {\n                    let dataPos := array_dataslot_string_storage(value)\n                    let i := 0\n                    for { } lt(i, length) { i := add(i, 0x20) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, 1)\n                    }\n                    ret := add(pos, length)\n                }\n            }\n            function abi_encode_packed_string_storage(pos, value0) -> end\n            {\n                pos := abi_encode_string_storage_to_string_nonPadded_inplace(value0, pos)\n                end := pos\n            }\n            function array_dataslot_bytes(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function array_length_bytes(value) -> length\n            { length := mload(value) }\n            function abi_encode_string_memory_ptr(value, pos) -> end\n            {\n                let length := array_length_string(value)\n                pos := array_storeLengthForEncoding_string_nonPadded_inplace(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, length)\n            }\n            function abi_encode_packed_string(pos, value0) -> end\n            {\n                pos := abi_encode_string_memory_ptr(value0, pos)\n                end := pos\n            }\n            function cleanup_bytes32(value) -> cleaned\n            { cleaned := value }\n            function store_literal_in_memory_e9135a48fa48f7b60b7ef976cd8ccd1faf01e1186318f4d5f542c5aee1da81da(memPtr)\n            {\n                mstore(add(memPtr, 0), \"IMEI mismatch\")\n            }\n            function abi_encode_stringliteral_e9135a48fa48f7b60b7ef976cd8ccd1faf01e1186318f4d5f542c5aee1da81da(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 13)\n                store_literal_in_memory_e9135a48fa48f7b60b7ef976cd8ccd1faf01e1186318f4d5f542c5aee1da81da(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_e913(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_e9135a48fa48f7b60b7ef976cd8ccd1faf01e1186318f4d5f542c5aee1da81da(tail)\n            }\n            function require_helper_stringliteral_e913(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_e913(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 486 @src 1:3911:4463  \"function verifyPhone(...\"\n            function fun_verifyPhone(var_phoneId, var_imei_426_mpos) -> var_\n            {\n                /// @src 1:4009:4013  \"bool\"\n                let zero_bool := zero_value_for_split_bool()\n                var_ := zero_bool\n                /// @src 1:4033:4040  \"phoneId\"\n                let _1 := var_phoneId\n                let expr := _1\n                /// @src 1:4043:4049  \"phones\"\n                let _115_slot := 0x01\n                let expr_433_slot := _115_slot\n                /// @src 1:4043:4056  \"phones.length\"\n                let expr_1 := array_length_array_struct_Phone_storage_dyn(expr_433_slot)\n                /// @src 1:4033:4056  \"phoneId < phones.length\"\n                let expr_2 := lt(cleanup_uint256(expr), cleanup_uint256(expr_1))\n                /// @src 1:4025:4081  \"require(phoneId < phones.length, \\\"Phone does not exist\\\")\"\n                require_helper_stringliteral_eddb(expr_2)\n                /// @src 1:4113:4119  \"phones\"\n                let _116_slot := 0x01\n                let expr_442_slot := _116_slot\n                /// @src 1:4120:4127  \"phoneId\"\n                let _2 := var_phoneId\n                let expr_3 := _2\n                /// @src 1:4113:4128  \"phones[phoneId]\"\n                let _3, _4 := storage_array_index_access_struct_Phone__dyn(expr_442_slot, expr_3)\n                let _120_slot := _3\n                let expr_444_slot := _120_slot\n                /// @src 1:4091:4128  \"Phone storage phone = phones[phoneId]\"\n                let var_phone_slot := convert_struct_Phone_storage_to_struct_Phone_ptr(expr_444_slot)\n                /// @src 1:4147:4152  \"phone\"\n                let _121_slot := var_phone_slot\n                let expr_447_slot := _121_slot\n                /// @src 1:4147:4163  \"phone.isVerified\"\n                let _5 := add(expr_447_slot, 6)\n                let _6 := read_from_storage_split_offset_bool(_5)\n                let expr_4 := _6\n                /// @src 1:4146:4163  \"!phone.isVerified\"\n                let expr_5 := cleanup_bool(iszero(expr_4))\n                /// @src 1:4138:4190  \"require(!phone.isVerified, \\\"Phone already verified\\\")\"\n                require_helper_stringliteral_6cab(expr_5)\n                /// @src 1:4248:4253  \"phone\"\n                let _124_slot := var_phone_slot\n                let expr_457_slot := _124_slot\n                /// @src 1:4248:4258  \"phone.imei\"\n                let _7 := add(expr_457_slot, 4)\n                let _126_slot := _7\n                let expr_458_slot := _126_slot\n                /// @src 1:4231:4259  \"abi.encodePacked(phone.imei)\"\n                let expr_459_mpos := allocate_unbounded()\n                let _8 := add(expr_459_mpos, 0x20)\n                let _9 := abi_encode_packed_string_storage(_8, expr_458_slot)\n                mstore(expr_459_mpos, sub(_9, add(expr_459_mpos, 0x20)))\n                finalize_allocation(expr_459_mpos, sub(_9, expr_459_mpos))\n                /// @src 1:4221:4260  \"keccak256(abi.encodePacked(phone.imei))\"\n                let expr_6 := keccak256(array_dataslot_bytes(expr_459_mpos), array_length_bytes(expr_459_mpos))\n                /// @src 1:4307:4311  \"imei\"\n                let _129_mpos := var_imei_426_mpos\n                let expr_mpos := _129_mpos\n                /// @src 1:4290:4312  \"abi.encodePacked(imei)\"\n                let expr_465_mpos := allocate_unbounded()\n                let _10 := add(expr_465_mpos, 0x20)\n                let _11 := abi_encode_packed_string(_10, expr_mpos)\n                mstore(expr_465_mpos, sub(_11, add(expr_465_mpos, 0x20)))\n                finalize_allocation(expr_465_mpos, sub(_11, expr_465_mpos))\n                /// @src 1:4280:4313  \"keccak256(abi.encodePacked(imei))\"\n                let expr_7 := keccak256(array_dataslot_bytes(expr_465_mpos), array_length_bytes(expr_465_mpos))\n                /// @src 1:4221:4313  \"keccak256(abi.encodePacked(phone.imei)) ==...\"\n                let expr_8 := eq(cleanup_bytes32(expr_6), cleanup_bytes32(expr_7))\n                /// @src 1:4200:4352  \"require(...\"\n                require_helper_stringliteral_e913(expr_8)\n                /// @src 1:4382:4386  \"true\"\n                let expr_9 := 0x01\n                /// @src 1:4363:4368  \"phone\"\n                let _132_slot := var_phone_slot\n                let expr_471_slot := _132_slot\n                /// @src 1:4363:4379  \"phone.isVerified\"\n                let _12 := add(expr_471_slot, 6)\n                /// @src 1:4363:4386  \"phone.isVerified = true\"\n                update_storage_value_offset_t_bool_to_t_bool(_12, expr_9)\n                /// @src 1:4415:4422  \"phoneId\"\n                let _13 := var_phoneId\n                let expr_10 := _13\n                /// @src 1:4424:4434  \"msg.sender\"\n                let expr_11 := caller()\n                /// @src 1:4401:4435  \"PhoneVerified(phoneId, msg.sender)\"\n                let _14 := 0xb16d5c957846ab8711242137e57cec165114069027eadfb938d1e7e151914011\n                let _15 := convert_uint256_to_uint256(expr_10)\n                let _16 := convert_address_to_address(expr_11)\n                let _17 := allocate_unbounded()\n                let _18 := abi_encode_tuple(_17)\n                log3(_17, sub(_18, _17), _14, _15, _16)\n                /// @src 1:4452:4456  \"true\"\n                let expr_12 := 0x01\n                /// @src 1:4445:4456  \"return true\"\n                var_ := expr_12\n                leave\n            }\n            /// @src 1:119:5594  \"contract PhoneMarketplace is ReentrancyGuard {...\"\n            function zero_value_for_split_array_uint256_dyn() -> ret\n            { ret := 96 }\n            function array_storeLengthForEncoding_array_uint256_dyn(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function read_from_storage_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function array_nextElement_array_uint256_dyn_storage(ptr) -> next\n            { next := add(ptr, 0x01) }\n            function abi_encode_array_uint256_dyn_storage(value, pos) -> end\n            {\n                let length := array_length_array_uint256_dyn_storage(value)\n                pos := array_storeLengthForEncoding_array_uint256_dyn(pos, length)\n                let baseRef := array_dataslot_array_uint256_dyn_storage(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := read_from_storage_offset_uint256(srcPtr)\n                    pos := abi_encodeUpdatedPos_uint256(elementValue0, pos)\n                    srcPtr := array_nextElement_array_uint256_dyn_storage(srcPtr)\n                }\n                end := pos\n            }\n            function abi_encodeUpdatedPos_array_uint256_dyn_storage(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_array_uint256_dyn_storage(value0, pos)\n            }\n            function copy_array_from_storage_to_memory_array_uint256_dyn(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_array_uint256_dyn_storage(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            function convert_array_array_uint256_dyn_storage_to_array_uint256_dyn(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_array_uint256_dyn(value)\n            }\n            /// @ast-id 574 @src 1:5482:5592  \"function getMyPhones() external view returns (uint256[] memory) {...\"\n            function fun_getMyPhones() -> var_mpos\n            {\n                /// @src 1:5528:5544  \"uint256[] memory\"\n                let zero_array_uint256_dyn_mpos := zero_value_for_split_array_uint256_dyn()\n                var_mpos := zero_array_uint256_dyn_mpos\n                /// @src 1:5563:5573  \"userPhones\"\n                let _141_slot := 0x02\n                let expr_568_slot := _141_slot\n                /// @src 1:5574:5584  \"msg.sender\"\n                let expr := caller()\n                /// @src 1:5563:5585  \"userPhones[msg.sender]\"\n                let _1 := mapping_index_access_mapping_address_array_uint256_dyn_storage_of_address(expr_568_slot, expr)\n                let _143_slot := _1\n                let expr_571_slot := _143_slot\n                /// @src 1:5556:5585  \"return userPhones[msg.sender]\"\n                var_mpos := convert_array_array_uint256_dyn_storage_to_array_uint256_dyn(expr_571_slot)\n                leave\n            }\n            /// @ast-id 32 @src 0:2466:2569  \"modifier nonReentrant() {...\"\n            function modifier_nonReentrant(var_phoneId)\n            {\n                fun_nonReentrantBefore()\n                /// @src 0:2531:2532  \"_\"\n                fun_buyPhone_inner(var_phoneId)\n                fun_nonReentrantAfter()\n            }\n            /// @src 1:119:5594  \"contract PhoneMarketplace is ReentrancyGuard {...\"\n            function store_literal_in_memory_4701c9e4e8ec7de8a8e862a1b647bd45a98c4382c40386aa04e6453c3362aa99(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Phone already sold\")\n            }\n            function abi_encode_stringliteral(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 18)\n                store_literal_in_memory_4701c9e4e8ec7de8a8e862a1b647bd45a98c4382c40386aa04e6453c3362aa99(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_4701(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral(tail)\n            }\n            function require_helper_stringliteral_4701(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_4701(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_bfbf4a43dc8797dc58045960f4d5799ab13505289174807e08a8caca1fcf4100(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Cannot buy your own phone\")\n            }\n            function abi_encode_stringliteral_bfbf4a43dc8797dc58045960f4d5799ab13505289174807e08a8caca1fcf4100(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 25)\n                store_literal_in_memory_bfbf4a43dc8797dc58045960f4d5799ab13505289174807e08a8caca1fcf4100(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_bfbf(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_bfbf4a43dc8797dc58045960f4d5799ab13505289174807e08a8caca1fcf4100(tail)\n            }\n            function require_helper_stringliteral_bfbf(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_bfbf(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_0238b8116a1eedc314d4879ecd6ec3ca04fe72278c7ba7cbb8746c0a4f88d4d8(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Incorrect payment\")\n            }\n            function abi_encode_stringliteral_0238(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 17)\n                store_literal_in_memory_0238b8116a1eedc314d4879ecd6ec3ca04fe72278c7ba7cbb8746c0a4f88d4d8(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_0238(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @src 1:2326:2839  \"function buyPhone(uint256 phoneId) external payable nonReentrant {...\"\n            function fun_buyPhone_inner(var_phoneId)\n            {\n                /// @src 1:2409:2416  \"phoneId\"\n                let _1 := var_phoneId\n                let expr := _1\n                /// @src 1:2419:2425  \"phones\"\n                let _145_slot := 0x01\n                let expr_234_slot := _145_slot\n                /// @src 1:2419:2432  \"phones.length\"\n                let expr_1 := array_length_array_struct_Phone_storage_dyn(expr_234_slot)\n                /// @src 1:2409:2432  \"phoneId < phones.length\"\n                let expr_2 := lt(cleanup_uint256(expr), cleanup_uint256(expr_1))\n                /// @src 1:2401:2457  \"require(phoneId < phones.length, \\\"Phone does not exist\\\")\"\n                require_helper_stringliteral_eddb(expr_2)\n                /// @src 1:2489:2495  \"phones\"\n                let _146_slot := 0x01\n                let expr_243_slot := _146_slot\n                /// @src 1:2496:2503  \"phoneId\"\n                let _2 := var_phoneId\n                let expr_3 := _2\n                /// @src 1:2489:2504  \"phones[phoneId]\"\n                let _3, _4 := storage_array_index_access_struct_Phone__dyn(expr_243_slot, expr_3)\n                let _150_slot := _3\n                let expr_245_slot := _150_slot\n                /// @src 1:2467:2504  \"Phone storage phone = phones[phoneId]\"\n                let var_phone_242_slot := convert_struct_Phone_storage_to_struct_Phone_ptr(expr_245_slot)\n                /// @src 1:2523:2528  \"phone\"\n                let _151_slot := var_phone_242_slot\n                let expr_248_slot := _151_slot\n                /// @src 1:2523:2535  \"phone.isSold\"\n                let _5 := add(expr_248_slot, 6)\n                let _6 := read_from_storage_split_offset_t_bool(_5)\n                let expr_4 := _6\n                /// @src 1:2522:2535  \"!phone.isSold\"\n                let expr_5 := cleanup_bool(iszero(expr_4))\n                /// @src 1:2514:2558  \"require(!phone.isSold, \\\"Phone already sold\\\")\"\n                require_helper_stringliteral_4701(expr_5)\n                /// @src 1:2576:2581  \"phone\"\n                let _154_slot := var_phone_242_slot\n                let expr_255_slot := _154_slot\n                /// @src 1:2576:2588  \"phone.seller\"\n                let _7 := add(expr_255_slot, 0)\n                let _8 := read_from_storage_split_offset_t_address(_7)\n                let expr_6 := _8\n                /// @src 1:2592:2602  \"msg.sender\"\n                let expr_7 := caller()\n                /// @src 1:2576:2602  \"phone.seller != msg.sender\"\n                let expr_8 := iszero(eq(cleanup_address(expr_6), cleanup_address(expr_7)))\n                /// @src 1:2568:2632  \"require(phone.seller != msg.sender, \\\"Cannot buy your own phone\\\")\"\n                require_helper_stringliteral_bfbf(expr_8)\n                /// @src 1:2650:2659  \"msg.value\"\n                let expr_9 := callvalue()\n                /// @src 1:2663:2668  \"phone\"\n                let _157_slot := var_phone_242_slot\n                let expr_266_slot := _157_slot\n                /// @src 1:2663:2674  \"phone.price\"\n                let _9 := add(expr_266_slot, 5)\n                let _10 := read_from_storage_split_offset_uint256(_9)\n                let expr_10 := _10\n                /// @src 1:2650:2674  \"msg.value == phone.price\"\n                let expr_11 := eq(cleanup_uint256(expr_9), cleanup_uint256(expr_10))\n                /// @src 1:2642:2696  \"require(msg.value == phone.price, \\\"Incorrect payment\\\")\"\n                require_helper_stringliteral(expr_11)\n                /// @src 1:2722:2726  \"true\"\n                let expr_12 := 0x01\n                /// @src 1:2707:2712  \"phone\"\n                let _160_slot := var_phone_242_slot\n                let expr_272_slot := _160_slot\n                /// @src 1:2707:2719  \"phone.isSold\"\n                let _11 := add(expr_272_slot, 6)\n                /// @src 1:2707:2726  \"phone.isSold = true\"\n                update_storage_value_offset_bool_to_bool(_11, expr_12)\n                /// @src 1:2750:2760  \"msg.sender\"\n                let expr_13 := caller()\n                /// @src 1:2736:2741  \"phone\"\n                let _162_slot := var_phone_242_slot\n                let expr_278_slot := _162_slot\n                /// @src 1:2736:2747  \"phone.buyer\"\n                let _12 := add(expr_278_slot, 6)\n                /// @src 1:2736:2760  \"phone.buyer = msg.sender\"\n                update_storage_value_offset_t_address_to_t_address(_12, expr_13)\n                /// @src 1:2785:2792  \"phoneId\"\n                let _13 := var_phoneId\n                let expr_14 := _13\n                /// @src 1:2794:2799  \"phone\"\n                let _165_slot := var_phone_242_slot\n                let expr_287_slot := _165_slot\n                /// @src 1:2794:2806  \"phone.seller\"\n                let _14 := add(expr_287_slot, 0)\n                let _15 := read_from_storage_split_offset_t_address(_14)\n                let expr_15 := _15\n                /// @src 1:2808:2818  \"msg.sender\"\n                let expr_16 := caller()\n                /// @src 1:2820:2825  \"phone\"\n                let _slot := var_phone_242_slot\n                let expr_291_slot := _slot\n                /// @src 1:2820:2831  \"phone.price\"\n                let _16 := add(expr_291_slot, 5)\n                let _17 := read_from_storage_split_offset_uint256(_16)\n                let expr_17 := _17\n                /// @src 1:2775:2832  \"PhoneSold(phoneId, phone.seller, msg.sender, phone.price)\"\n                let _18 := 0x821e47e9610b4c76bd2455f6485a1ed35b0bd7ae4dc218cc0fd03b341f0eee29\n                let _19 := convert_uint256_to_uint256(expr_14)\n                let _20 := convert_address_to_address(expr_15)\n                let _21 := convert_address_to_address(expr_16)\n                let _22 := allocate_unbounded()\n                let _23 := abi_encode_uint256(_22, expr_17)\n                log4(_22, sub(_23, _22), _18, _19, _20, _21)\n            }\n            /// @ast-id 296 @src 1:2326:2839  \"function buyPhone(uint256 phoneId) external payable nonReentrant {...\"\n            function fun_buyPhone(var_phoneId)\n            {\n                modifier_nonReentrant(var_phoneId)\n            }\n            /// @src 1:119:5594  \"contract PhoneMarketplace is ReentrancyGuard {...\"\n            function store_literal_in_memory_6504cac5d4365f44982a51bc86ef6d52b9c31afe3b6bab0c1a0d1eadc30a707c(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Only seller can dispatch\")\n            }\n            function abi_encode_stringliteral_6504(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 24)\n                store_literal_in_memory_6504cac5d4365f44982a51bc86ef6d52b9c31afe3b6bab0c1a0d1eadc30a707c(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_6504(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_6504(tail)\n            }\n            function require_helper_stringliteral_6504(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_6504(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_5296692ca7cd10611b401103e80289cedfec15abd4cea9226b9e4f937136f696(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Phone already dispatched\")\n            }\n            function abi_encode_stringliteral_5296(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 24)\n                store_literal_in_memory_5296692ca7cd10611b401103e80289cedfec15abd4cea9226b9e4f937136f696(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_5296(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_5296(tail)\n            }\n            function require_helper_stringliteral_5296(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_5296(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 351 @src 1:2845:3293  \"function dispatchPhone(uint256 phoneId) external {...\"\n            function fun_dispatchPhone(var_phoneId)\n            {\n                /// @src 1:2912:2919  \"phoneId\"\n                let _1 := var_phoneId\n                let expr := _1\n                /// @src 1:2922:2928  \"phones\"\n                let _178_slot := 0x01\n                let expr_303_slot := _178_slot\n                /// @src 1:2922:2935  \"phones.length\"\n                let expr_1 := array_length_array_struct_Phone_storage_dyn(expr_303_slot)\n                /// @src 1:2912:2935  \"phoneId < phones.length\"\n                let expr_2 := lt(cleanup_uint256(expr), cleanup_uint256(expr_1))\n                /// @src 1:2904:2960  \"require(phoneId < phones.length, \\\"Phone does not exist\\\")\"\n                require_helper_stringliteral_eddb(expr_2)\n                /// @src 1:2992:2998  \"phones\"\n                let _179_slot := 0x01\n                let expr_312_slot := _179_slot\n                /// @src 1:2999:3006  \"phoneId\"\n                let _2 := var_phoneId\n                let expr_3 := _2\n                /// @src 1:2992:3007  \"phones[phoneId]\"\n                let _3, _4 := storage_array_index_access_struct_Phone__dyn(expr_312_slot, expr_3)\n                let _183_slot := _3\n                let expr_314_slot := _183_slot\n                /// @src 1:2970:3007  \"Phone storage phone = phones[phoneId]\"\n                let var_phone_311_slot := convert_struct_Phone_storage_to_struct_Phone_ptr(expr_314_slot)\n                /// @src 1:3025:3030  \"phone\"\n                let _184_slot := var_phone_311_slot\n                let expr_317_slot := _184_slot\n                /// @src 1:3025:3037  \"phone.seller\"\n                let _5 := add(expr_317_slot, 0)\n                let _6 := read_from_storage_split_offset_t_address(_5)\n                let expr_4 := _6\n                /// @src 1:3041:3051  \"msg.sender\"\n                let expr_5 := caller()\n                /// @src 1:3025:3051  \"phone.seller == msg.sender\"\n                let expr_6 := eq(cleanup_address(expr_4), cleanup_address(expr_5))\n                /// @src 1:3017:3080  \"require(phone.seller == msg.sender, \\\"Only seller can dispatch\\\")\"\n                require_helper_stringliteral_6504(expr_6)\n                /// @src 1:3098:3103  \"phone\"\n                let _187_slot := var_phone_311_slot\n                let expr_326_slot := _187_slot\n                /// @src 1:3098:3110  \"phone.isSold\"\n                let _7 := add(expr_326_slot, 6)\n                let _8 := read_from_storage_split_offset_t_bool(_7)\n                let expr_7 := _8\n                /// @src 1:3090:3133  \"require(phone.isSold, \\\"Phone not sold yet\\\")\"\n                require_helper_stringliteral_e89d(expr_7)\n                /// @src 1:3152:3157  \"phone\"\n                let _190_slot := var_phone_311_slot\n                let expr_332_slot := _190_slot\n                /// @src 1:3152:3170  \"phone.isDispatched\"\n                let _9 := add(expr_332_slot, 6)\n                let _10 := read_from_storage_split_offset_2_bool(_9)\n                let expr_8 := _10\n                /// @src 1:3151:3170  \"!phone.isDispatched\"\n                let expr_9 := cleanup_bool(iszero(expr_8))\n                /// @src 1:3143:3199  \"require(!phone.isDispatched, \\\"Phone already dispatched\\\")\"\n                require_helper_stringliteral_5296(expr_9)\n                /// @src 1:3231:3235  \"true\"\n                let expr_10 := 0x01\n                /// @src 1:3210:3215  \"phone\"\n                let _193_slot := var_phone_311_slot\n                let expr_338_slot := _193_slot\n                /// @src 1:3210:3228  \"phone.isDispatched\"\n                let _11 := add(expr_338_slot, 6)\n                /// @src 1:3210:3235  \"phone.isDispatched = true\"\n                update_storage_value_offset_2_bool_to_bool(_11, expr_10)\n                /// @src 1:3266:3273  \"phoneId\"\n                let _12 := var_phoneId\n                let expr_11 := _12\n                /// @src 1:3275:3285  \"msg.sender\"\n                let expr_12 := caller()\n                /// @src 1:3250:3286  \"PhoneDispatched(phoneId, msg.sender)\"\n                let _13 := 0x5e6e20ddc8c02a1ca35e832bfc2f43c1a3a43fb1c96f350c2084cc604a4dd9ad\n                let _14 := convert_uint256_to_uint256(expr_11)\n                let _15 := convert_address_to_address(expr_12)\n                let _16 := allocate_unbounded()\n                let _17 := abi_encode_tuple(_16)\n                log3(_16, sub(_17, _16), _13, _14, _15)\n            }\n            /// @src 1:119:5594  \"contract PhoneMarketplace is ReentrancyGuard {...\"\n            function cleanup_t_rational_by_1(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_2_by_1_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by_1(value)))\n            }\n            /// @src 0:1864:1900  \"uint256 private constant ENTERED = 2\"\n            function constant_ENTERED() -> ret\n            {\n                /// @src 0:1899:1900  \"2\"\n                let expr := 0x02\n                let _1 := convert_rational_2_by_1_to_uint256(expr)\n                ret := _1\n            }\n            /// @ast-id 48 @src 0:2575:2882  \"function _nonReentrantBefore() private {...\"\n            function fun_nonReentrantBefore()\n            {\n                /// @src 0:2702:2709  \"_status\"\n                let _1 := read_from_storage_split_offset_uint256(0x00)\n                let expr := _1\n                /// @src 0:2713:2720  \"ENTERED\"\n                let expr_1 := constant_ENTERED()\n                /// @src 0:2702:2720  \"_status == ENTERED\"\n                let expr_2 := eq(cleanup_uint256(expr), cleanup_uint256(expr_1))\n                /// @src 0:2698:2784  \"if (_status == ENTERED) {...\"\n                if expr_2\n                {\n                    /// @src 0:2743:2773  \"ReentrancyGuardReentrantCall()\"\n                    let _2 := 0\n                    mstore(_2, shl(224, 0x3ee5aeb5))\n                    let _3 := abi_encode_tuple(add(_2, 4))\n                    revert(_2, sub(_3, _2))\n                }\n                /// @src 0:2868:2875  \"ENTERED\"\n                let expr_3 := constant_ENTERED()\n                /// @src 0:2858:2875  \"_status = ENTERED\"\n                update_storage_value_offset_uint256_to_uint256(0x00, expr_3)\n            }\n            /// @src 1:119:5594  \"contract PhoneMarketplace is ReentrancyGuard {...\"\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_t_rational_by_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n            }\n            /// @src 0:1818:1858  \"uint256 private constant NOT_ENTERED = 1\"\n            function constant_NOT_ENTERED() -> ret\n            {\n                /// @src 0:1857:1858  \"1\"\n                let expr := 0x01\n                let _1 := convert_t_rational_by_to_t_uint256(expr)\n                ret := _1\n            }\n            /// @ast-id 56 @src 0:2888:3096  \"function _nonReentrantAfter() private {...\"\n            function fun_nonReentrantAfter()\n            {\n                /// @src 0:3078:3089  \"NOT_ENTERED\"\n                let expr := constant_NOT_ENTERED()\n                /// @src 0:3068:3089  \"_status = NOT_ENTERED\"\n                update_storage_value_offset_uint256_to_uint256(0x00, expr)\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122027eb9414a050f5a07fa2cbdf1cd8ccb07529dfd2b9ab9d6d61a93d4490a4adf864736f6c634300081c0033\"\n    }\n}\n",
					"hash": "2c8d245111979007f885648c0fd50ff88f349697f7810f729e32db0be4437612",
					"factoryDependencies": {}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							68
						]
					},
					"id": 69,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:0"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "135:894:0",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n consider using {ReentrancyGuardTransient} instead.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 68,
							"linearizedBaseContracts": [
								68
							],
							"name": "ReentrancyGuard",
							"nameLocation": "1048:15:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 5,
									"mutability": "constant",
									"name": "NOT_ENTERED",
									"nameLocation": "1843:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 68,
									"src": "1818:40:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1818:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 4,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1857:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 8,
									"mutability": "constant",
									"name": "ENTERED",
									"nameLocation": "1889:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 68,
									"src": "1864:36:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 6,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1864:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 7,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1899:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 10,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1923:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 68,
									"src": "1907:23:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 9,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1907:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 11,
										"nodeType": "StructuredDocumentation",
										"src": "1937:52:0",
										"text": " @dev Unauthorized reentrant call."
									},
									"errorSelector": "3ee5aeb5",
									"id": 13,
									"name": "ReentrancyGuardReentrantCall",
									"nameLocation": "2000:28:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2028:2:0"
									},
									"src": "1994:37:0"
								},
								{
									"body": {
										"id": 20,
										"nodeType": "Block",
										"src": "2051:38:0",
										"statements": [
											{
												"expression": {
													"id": 18,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 16,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2061:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 17,
														"name": "NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "2071:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2061:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 19,
												"nodeType": "ExpressionStatement",
												"src": "2061:21:0"
											}
										]
									},
									"id": 21,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2048:2:0"
									},
									"returnParameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2051:0:0"
									},
									"scope": 68,
									"src": "2037:52:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 31,
										"nodeType": "Block",
										"src": "2490:79:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 24,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 48,
														"src": "2500:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 25,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2500:21:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 26,
												"nodeType": "ExpressionStatement",
												"src": "2500:21:0"
											},
											{
												"id": 27,
												"nodeType": "PlaceholderStatement",
												"src": "2531:1:0"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 28,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 56,
														"src": "2542:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 29,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2542:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 30,
												"nodeType": "ExpressionStatement",
												"src": "2542:20:0"
											}
										]
									},
									"documentation": {
										"id": 22,
										"nodeType": "StructuredDocumentation",
										"src": "2095:366:0",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 32,
									"name": "nonReentrant",
									"nameLocation": "2475:12:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2487:2:0"
									},
									"src": "2466:103:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 47,
										"nodeType": "Block",
										"src": "2614:268:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 37,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 35,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2702:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 36,
														"name": "ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "2713:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2702:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 42,
												"nodeType": "IfStatement",
												"src": "2698:86:0",
												"trueBody": {
													"id": 41,
													"nodeType": "Block",
													"src": "2722:62:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 38,
																	"name": "ReentrancyGuardReentrantCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "2743:28:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2743:30:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 40,
															"nodeType": "RevertStatement",
															"src": "2736:37:0"
														}
													]
												}
											},
											{
												"expression": {
													"id": 45,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 43,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2858:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 44,
														"name": "ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "2868:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2858:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 46,
												"nodeType": "ExpressionStatement",
												"src": "2858:17:0"
											}
										]
									},
									"id": 48,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nameLocation": "2584:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2603:2:0"
									},
									"returnParameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2614:0:0"
									},
									"scope": 68,
									"src": "2575:307:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 55,
										"nodeType": "Block",
										"src": "2926:170:0",
										"statements": [
											{
												"expression": {
													"id": 53,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 51,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "3068:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 52,
														"name": "NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "3078:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3068:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 54,
												"nodeType": "ExpressionStatement",
												"src": "3068:21:0"
											}
										]
									},
									"id": 56,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nameLocation": "2897:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 49,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2915:2:0"
									},
									"returnParameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2926:0:0"
									},
									"scope": 68,
									"src": "2888:208:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "3339:42:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 64,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 62,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "3356:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 63,
														"name": "ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "3367:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3356:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 61,
												"id": 65,
												"nodeType": "Return",
												"src": "3349:25:0"
											}
										]
									},
									"documentation": {
										"id": 57,
										"nodeType": "StructuredDocumentation",
										"src": "3102:168:0",
										"text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
									},
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_reentrancyGuardEntered",
									"nameLocation": "3284:23:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3307:2:0"
									},
									"returnParameters": {
										"id": 61,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 60,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "3333:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 59,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3333:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3332:6:0"
									},
									"scope": 68,
									"src": "3275:106:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 69,
							"src": "1030:2353:0",
							"usedErrors": [
								13
							],
							"usedEvents": []
						}
					],
					"src": "109:3275:0"
				}
			},
			"PhoneMarketplace.sol": {
				"id": 1,
				"ast": {
					"absolutePath": "PhoneMarketplace.sol",
					"exportedSymbols": {
						"PhoneMarketplace": [
							575
						],
						"ReentrancyGuard": [
							68
						]
					},
					"id": 576,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 70,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
							"id": 71,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 576,
							"sourceUnit": 69,
							"src": "58:59:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 72,
										"name": "ReentrancyGuard",
										"nameLocations": [
											"148:15:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 68,
										"src": "148:15:1"
									},
									"id": 73,
									"nodeType": "InheritanceSpecifier",
									"src": "148:15:1"
								}
							],
							"canonicalName": "PhoneMarketplace",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 575,
							"linearizedBaseContracts": [
								575,
								68
							],
							"name": "PhoneMarketplace",
							"nameLocation": "128:16:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"functionSelector": "85e1f4d0",
									"id": 76,
									"mutability": "constant",
									"name": "CHAIN_ID",
									"nameLocation": "235:8:1",
									"nodeType": "VariableDeclaration",
									"scope": 575,
									"src": "211:44:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 74,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "211:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343230343230343231",
										"id": 75,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "246:9:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_420420421_by_1",
											"typeString": "int_const 420420421"
										},
										"value": "420420421"
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "f8533c90",
									"id": 79,
									"mutability": "constant",
									"name": "RPC_URL",
									"nameLocation": "284:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 575,
									"src": "261:88:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_memory_ptr",
										"typeString": "string"
									},
									"typeName": {
										"id": 77,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "261:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": {
										"hexValue": "68747470733a2f2f77657374656e642d61737365742d6875622d6574682d7270632e706f6c6b61646f742e696f",
										"id": 78,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "302:47:1",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_ceb6e9fb5218947b7e35f1d062327d84d3e12a460ade7d27142a629d61735c63",
											"typeString": "literal_string \"https://westend-asset-hub-eth-rpc.polkadot.io\""
										},
										"value": "https://westend-asset-hub-eth-rpc.polkadot.io"
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "111ac93b",
									"id": 82,
									"mutability": "constant",
									"name": "EXPLORER_URL",
									"nameLocation": "378:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 575,
									"src": "355:75:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_memory_ptr",
										"typeString": "string"
									},
									"typeName": {
										"id": 80,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "355:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": {
										"hexValue": "68747470733a2f2f61737365746875622d77657374656e642e7375627363616e2e696f",
										"id": 81,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "393:37:1",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_e31cb80247072cc7d0b72ca783d939ce793f72713b5fc69b1844896e55563c86",
											"typeString": "literal_string \"https://assethub-westend.subscan.io\""
										},
										"value": "https://assethub-westend.subscan.io"
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "f76f8d78",
									"id": 85,
									"mutability": "constant",
									"name": "SYMBOL",
									"nameLocation": "459:6:1",
									"nodeType": "VariableDeclaration",
									"scope": 575,
									"src": "436:37:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_memory_ptr",
										"typeString": "string"
									},
									"typeName": {
										"id": 83,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "436:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": {
										"hexValue": "574e44",
										"id": 84,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "468:5:1",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_b76f4eab5125fb8c7f72daa1a454098a7311e3e7788c9a7b7f5fd41d37bb1200",
											"typeString": "literal_string \"WND\""
										},
										"value": "WND"
									},
									"visibility": "public"
								},
								{
									"canonicalName": "PhoneMarketplace.Phone",
									"id": 108,
									"members": [
										{
											"constant": false,
											"id": 87,
											"mutability": "mutable",
											"name": "seller",
											"nameLocation": "511:6:1",
											"nodeType": "VariableDeclaration",
											"scope": 108,
											"src": "503:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 86,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "503:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 89,
											"mutability": "mutable",
											"name": "manufacturer",
											"nameLocation": "534:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 108,
											"src": "527:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 88,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "527:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 91,
											"mutability": "mutable",
											"name": "modelName",
											"nameLocation": "563:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 108,
											"src": "556:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 90,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "556:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 93,
											"mutability": "mutable",
											"name": "modelCode",
											"nameLocation": "589:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 108,
											"src": "582:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 92,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "582:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 95,
											"mutability": "mutable",
											"name": "imei",
											"nameLocation": "615:4:1",
											"nodeType": "VariableDeclaration",
											"scope": 108,
											"src": "608:11:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 94,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "608:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 97,
											"mutability": "mutable",
											"name": "price",
											"nameLocation": "637:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 108,
											"src": "629:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 96,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "629:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 99,
											"mutability": "mutable",
											"name": "isSold",
											"nameLocation": "657:6:1",
											"nodeType": "VariableDeclaration",
											"scope": 108,
											"src": "652:11:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 98,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "652:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 101,
											"mutability": "mutable",
											"name": "isVerified",
											"nameLocation": "678:10:1",
											"nodeType": "VariableDeclaration",
											"scope": 108,
											"src": "673:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 100,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "673:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 103,
											"mutability": "mutable",
											"name": "isDispatched",
											"nameLocation": "703:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 108,
											"src": "698:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 102,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "698:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 105,
											"mutability": "mutable",
											"name": "isReceived",
											"nameLocation": "730:10:1",
											"nodeType": "VariableDeclaration",
											"scope": 108,
											"src": "725:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 104,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "725:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 107,
											"mutability": "mutable",
											"name": "buyer",
											"nameLocation": "758:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 108,
											"src": "750:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 106,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "750:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Phone",
									"nameLocation": "487:5:1",
									"nodeType": "StructDefinition",
									"scope": 575,
									"src": "480:290:1",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "f3730653",
									"id": 112,
									"mutability": "mutable",
									"name": "phones",
									"nameLocation": "791:6:1",
									"nodeType": "VariableDeclaration",
									"scope": 575,
									"src": "776:21:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_struct$_Phone_$108_storage_$dyn_storage",
										"typeString": "struct PhoneMarketplace.Phone[]"
									},
									"typeName": {
										"baseType": {
											"id": 110,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 109,
												"name": "Phone",
												"nameLocations": [
													"776:5:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 108,
												"src": "776:5:1"
											},
											"referencedDeclaration": 108,
											"src": "776:5:1",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
												"typeString": "struct PhoneMarketplace.Phone"
											}
										},
										"id": 111,
										"nodeType": "ArrayTypeName",
										"src": "776:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_struct$_Phone_$108_storage_$dyn_storage_ptr",
											"typeString": "struct PhoneMarketplace.Phone[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "bfa7eec3",
									"id": 117,
									"mutability": "mutable",
									"name": "userPhones",
									"nameLocation": "840:10:1",
									"nodeType": "VariableDeclaration",
									"scope": 575,
									"src": "803:47:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$",
										"typeString": "mapping(address => uint256[])"
									},
									"typeName": {
										"id": 116,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 113,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "811:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "803:29:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$",
											"typeString": "mapping(address => uint256[])"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"baseType": {
												"id": 114,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "822:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"id": 115,
											"nodeType": "ArrayTypeName",
											"src": "822:9:1",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
												"typeString": "uint256[]"
											}
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "b462de6624f49030296f623b1f79fa72355a3b4cd6bad1f54f79a201b1b6fa75",
									"id": 125,
									"name": "PhoneListed",
									"nameLocation": "863:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 119,
												"indexed": true,
												"mutability": "mutable",
												"name": "phoneId",
												"nameLocation": "900:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "884:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "884:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 121,
												"indexed": true,
												"mutability": "mutable",
												"name": "seller",
												"nameLocation": "933:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "917:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 120,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "917:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 123,
												"indexed": false,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "957:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "949:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "949:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "874:94:1"
									},
									"src": "857:112:1"
								},
								{
									"anonymous": false,
									"eventSelector": "821e47e9610b4c76bd2455f6485a1ed35b0bd7ae4dc218cc0fd03b341f0eee29",
									"id": 135,
									"name": "PhoneSold",
									"nameLocation": "980:9:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"indexed": true,
												"mutability": "mutable",
												"name": "phoneId",
												"nameLocation": "1015:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "999:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "999:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"indexed": true,
												"mutability": "mutable",
												"name": "seller",
												"nameLocation": "1048:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "1032:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1032:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"indexed": true,
												"mutability": "mutable",
												"name": "buyer",
												"nameLocation": "1080:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "1064:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 130,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1064:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"indexed": false,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "1103:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "1095:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1095:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "989:125:1"
									},
									"src": "974:141:1"
								},
								{
									"anonymous": false,
									"eventSelector": "b16d5c957846ab8711242137e57cec165114069027eadfb938d1e7e151914011",
									"id": 141,
									"name": "PhoneVerified",
									"nameLocation": "1126:13:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 137,
												"indexed": true,
												"mutability": "mutable",
												"name": "phoneId",
												"nameLocation": "1156:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "1140:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1140:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 139,
												"indexed": true,
												"mutability": "mutable",
												"name": "verifier",
												"nameLocation": "1181:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "1165:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 138,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1165:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1139:51:1"
									},
									"src": "1120:71:1"
								},
								{
									"anonymous": false,
									"eventSelector": "5e6e20ddc8c02a1ca35e832bfc2f43c1a3a43fb1c96f350c2084cc604a4dd9ad",
									"id": 147,
									"name": "PhoneDispatched",
									"nameLocation": "1202:15:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"indexed": true,
												"mutability": "mutable",
												"name": "phoneId",
												"nameLocation": "1234:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "1218:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 142,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1218:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 145,
												"indexed": true,
												"mutability": "mutable",
												"name": "seller",
												"nameLocation": "1259:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "1243:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 144,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1243:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1217:49:1"
									},
									"src": "1196:71:1"
								},
								{
									"anonymous": false,
									"eventSelector": "b696c5084893a59c676d21e280a51fa4cbb3b216e993b38b65d7811e1efe6ad7",
									"id": 153,
									"name": "PhoneReceived",
									"nameLocation": "1278:13:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 149,
												"indexed": true,
												"mutability": "mutable",
												"name": "phoneId",
												"nameLocation": "1308:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "1292:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 148,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1292:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 151,
												"indexed": true,
												"mutability": "mutable",
												"name": "buyer",
												"nameLocation": "1333:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "1317:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1317:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1291:48:1"
									},
									"src": "1272:68:1"
								},
								{
									"body": {
										"id": 164,
										"nodeType": "Block",
										"src": "1360:124:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 160,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 157,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "1391:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 158,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1397:7:1",
																"memberName": "chainid",
																"nodeType": "MemberAccess",
																"src": "1391:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 159,
																"name": "CHAIN_ID",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 76,
																"src": "1408:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1391:25:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50686f6e654d61726b6574706c6163653a20756e737570706f7274656420636861696e",
															"id": 161,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1430:37:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2751e07aca03d7fa57b06192d6a4a43c9c61bb1cdd89fa433093ccb237585ce9",
																"typeString": "literal_string \"PhoneMarketplace: unsupported chain\""
															},
															"value": "PhoneMarketplace: unsupported chain"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2751e07aca03d7fa57b06192d6a4a43c9c61bb1cdd89fa433093ccb237585ce9",
																"typeString": "literal_string \"PhoneMarketplace: unsupported chain\""
															}
														],
														"id": 156,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1370:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 162,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1370:107:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 163,
												"nodeType": "ExpressionStatement",
												"src": "1370:107:1"
											}
										]
									},
									"id": 165,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1357:2:1"
									},
									"returnParameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1360:0:1"
									},
									"scope": 575,
									"src": "1346:138:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 224,
										"nodeType": "Block",
										"src": "1695:625:1",
										"statements": [
											{
												"assignments": [
													181
												],
												"declarations": [
													{
														"constant": false,
														"id": 181,
														"mutability": "mutable",
														"name": "phoneId",
														"nameLocation": "1713:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 224,
														"src": "1705:15:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 180,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1705:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 184,
												"initialValue": {
													"expression": {
														"id": 182,
														"name": "phones",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 112,
														"src": "1723:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_Phone_$108_storage_$dyn_storage",
															"typeString": "struct PhoneMarketplace.Phone storage ref[] storage ref"
														}
													},
													"id": 183,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1730:6:1",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "1723:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1705:31:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 189,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1803:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 190,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1807:6:1",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1803:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 191,
																	"name": "manufacturer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 167,
																	"src": "1845:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"id": 192,
																	"name": "modelName",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 169,
																	"src": "1886:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"id": 193,
																	"name": "modelCode",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 171,
																	"src": "1924:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"id": 194,
																	"name": "imei",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 173,
																	"src": "1957:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"id": 195,
																	"name": "price",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 175,
																	"src": "1986:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "66616c7365",
																	"id": 196,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2017:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																{
																	"hexValue": "66616c7365",
																	"id": 197,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2052:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																{
																	"hexValue": "66616c7365",
																	"id": 198,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2089:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																{
																	"hexValue": "66616c7365",
																	"id": 199,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2124:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																{
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 202,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2162:1:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 201,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2154:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 200,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2154:7:1",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 203,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2154:10:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 188,
																"name": "Phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 108,
																"src": "1771:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_struct$_Phone_$108_storage_ptr_$",
																	"typeString": "type(struct PhoneMarketplace.Phone storage pointer)"
																}
															},
															"id": 204,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "structConstructorCall",
															"lValueRequested": false,
															"nameLocations": [
																"1795:6:1",
																"1831:12:1",
																"1875:9:1",
																"1913:9:1",
																"1951:4:1",
																"1979:5:1",
																"2009:6:1",
																"2040:10:1",
																"2075:12:1",
																"2112:10:1",
																"2147:5:1"
															],
															"names": [
																"seller",
																"manufacturer",
																"modelName",
																"modelCode",
																"imei",
																"price",
																"isSold",
																"isVerified",
																"isDispatched",
																"isReceived",
																"buyer"
															],
															"nodeType": "FunctionCall",
															"src": "1771:408:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Phone_$108_memory_ptr",
																"typeString": "struct PhoneMarketplace.Phone memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Phone_$108_memory_ptr",
																"typeString": "struct PhoneMarketplace.Phone memory"
															}
														],
														"expression": {
															"id": 185,
															"name": "phones",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 112,
															"src": "1746:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Phone_$108_storage_$dyn_storage",
																"typeString": "struct PhoneMarketplace.Phone storage ref[] storage ref"
															}
														},
														"id": 187,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1753:4:1",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "1746:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Phone_$108_storage_$dyn_storage_ptr_$_t_struct$_Phone_$108_storage_$returns$__$attached_to$_t_array$_t_struct$_Phone_$108_storage_$dyn_storage_ptr_$",
															"typeString": "function (struct PhoneMarketplace.Phone storage ref[] storage pointer,struct PhoneMarketplace.Phone storage ref)"
														}
													},
													"id": 205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1746:443:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 206,
												"nodeType": "ExpressionStatement",
												"src": "1746:443:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 212,
															"name": "phoneId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 181,
															"src": "2227:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"baseExpression": {
																"id": 207,
																"name": "userPhones",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 117,
																"src": "2199:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$",
																	"typeString": "mapping(address => uint256[] storage ref)"
																}
															},
															"id": 210,
															"indexExpression": {
																"expression": {
																	"id": 208,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2210:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 209,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2214:6:1",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2210:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2199:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																"typeString": "uint256[] storage ref"
															}
														},
														"id": 211,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2222:4:1",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "2199:27:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
															"typeString": "function (uint256[] storage pointer,uint256)"
														}
													},
													"id": 213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2199:36:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 214,
												"nodeType": "ExpressionStatement",
												"src": "2199:36:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 216,
															"name": "phoneId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 181,
															"src": "2262:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 217,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2271:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 218,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2275:6:1",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2271:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 219,
															"name": "price",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 175,
															"src": "2283:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 215,
														"name": "PhoneListed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "2250:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (uint256,address,uint256)"
														}
													},
													"id": 220,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2250:39:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 221,
												"nodeType": "EmitStatement",
												"src": "2245:44:1"
											},
											{
												"expression": {
													"id": 222,
													"name": "phoneId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 181,
													"src": "2306:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 179,
												"id": 223,
												"nodeType": "Return",
												"src": "2299:14:1"
											}
										]
									},
									"functionSelector": "054e2b32",
									"id": 225,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "listPhone",
									"nameLocation": "1499:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "manufacturer",
												"nameLocation": "1532:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "1518:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 166,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1518:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "modelName",
												"nameLocation": "1568:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "1554:23:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 168,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1554:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "modelCode",
												"nameLocation": "1601:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "1587:23:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 170,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1587:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "imei",
												"nameLocation": "1634:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "1620:18:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 172,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1620:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "1656:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "1648:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 174,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1648:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1508:159:1"
									},
									"returnParameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "1686:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1686:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1685:9:1"
									},
									"scope": 575,
									"src": "1490:830:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 295,
										"nodeType": "Block",
										"src": "2391:448:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 236,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 233,
																"name": "phoneId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 227,
																"src": "2409:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 234,
																	"name": "phones",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 112,
																	"src": "2419:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Phone_$108_storage_$dyn_storage",
																		"typeString": "struct PhoneMarketplace.Phone storage ref[] storage ref"
																	}
																},
																"id": 235,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2426:6:1",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "2419:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2409:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50686f6e6520646f6573206e6f74206578697374",
															"id": 237,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2434:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_eddbf2d72f1c1aeaa691f38cccd8071245860212d11dfd29bed2ce840b3960f7",
																"typeString": "literal_string \"Phone does not exist\""
															},
															"value": "Phone does not exist"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_eddbf2d72f1c1aeaa691f38cccd8071245860212d11dfd29bed2ce840b3960f7",
																"typeString": "literal_string \"Phone does not exist\""
															}
														],
														"id": 232,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2401:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 238,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2401:56:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 239,
												"nodeType": "ExpressionStatement",
												"src": "2401:56:1"
											},
											{
												"assignments": [
													242
												],
												"declarations": [
													{
														"constant": false,
														"id": 242,
														"mutability": "mutable",
														"name": "phone",
														"nameLocation": "2481:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 295,
														"src": "2467:19:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
															"typeString": "struct PhoneMarketplace.Phone"
														},
														"typeName": {
															"id": 241,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 240,
																"name": "Phone",
																"nameLocations": [
																	"2467:5:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 108,
																"src": "2467:5:1"
															},
															"referencedDeclaration": 108,
															"src": "2467:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																"typeString": "struct PhoneMarketplace.Phone"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 246,
												"initialValue": {
													"baseExpression": {
														"id": 243,
														"name": "phones",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 112,
														"src": "2489:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_Phone_$108_storage_$dyn_storage",
															"typeString": "struct PhoneMarketplace.Phone storage ref[] storage ref"
														}
													},
													"id": 245,
													"indexExpression": {
														"id": 244,
														"name": "phoneId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 227,
														"src": "2496:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2489:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Phone_$108_storage",
														"typeString": "struct PhoneMarketplace.Phone storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2467:37:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 250,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "2522:13:1",
															"subExpression": {
																"expression": {
																	"id": 248,
																	"name": "phone",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 242,
																	"src": "2523:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																		"typeString": "struct PhoneMarketplace.Phone storage pointer"
																	}
																},
																"id": 249,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2529:6:1",
																"memberName": "isSold",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 99,
																"src": "2523:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50686f6e6520616c726561647920736f6c64",
															"id": 251,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2537:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4701c9e4e8ec7de8a8e862a1b647bd45a98c4382c40386aa04e6453c3362aa99",
																"typeString": "literal_string \"Phone already sold\""
															},
															"value": "Phone already sold"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4701c9e4e8ec7de8a8e862a1b647bd45a98c4382c40386aa04e6453c3362aa99",
																"typeString": "literal_string \"Phone already sold\""
															}
														],
														"id": 247,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2514:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2514:44:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 253,
												"nodeType": "ExpressionStatement",
												"src": "2514:44:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 259,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 255,
																	"name": "phone",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 242,
																	"src": "2576:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																		"typeString": "struct PhoneMarketplace.Phone storage pointer"
																	}
																},
																"id": 256,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2582:6:1",
																"memberName": "seller",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 87,
																"src": "2576:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"expression": {
																	"id": 257,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2592:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 258,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2596:6:1",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2592:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2576:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616e6e6f742062757920796f7572206f776e2070686f6e65",
															"id": 260,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2604:27:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_bfbf4a43dc8797dc58045960f4d5799ab13505289174807e08a8caca1fcf4100",
																"typeString": "literal_string \"Cannot buy your own phone\""
															},
															"value": "Cannot buy your own phone"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_bfbf4a43dc8797dc58045960f4d5799ab13505289174807e08a8caca1fcf4100",
																"typeString": "literal_string \"Cannot buy your own phone\""
															}
														],
														"id": 254,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2568:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2568:64:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 262,
												"nodeType": "ExpressionStatement",
												"src": "2568:64:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 268,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 264,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2650:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 265,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2654:5:1",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "2650:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 266,
																	"name": "phone",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 242,
																	"src": "2663:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																		"typeString": "struct PhoneMarketplace.Phone storage pointer"
																	}
																},
																"id": 267,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2669:5:1",
																"memberName": "price",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 97,
																"src": "2663:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2650:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e636f7272656374207061796d656e74",
															"id": 269,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2676:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0238b8116a1eedc314d4879ecd6ec3ca04fe72278c7ba7cbb8746c0a4f88d4d8",
																"typeString": "literal_string \"Incorrect payment\""
															},
															"value": "Incorrect payment"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0238b8116a1eedc314d4879ecd6ec3ca04fe72278c7ba7cbb8746c0a4f88d4d8",
																"typeString": "literal_string \"Incorrect payment\""
															}
														],
														"id": 263,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2642:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2642:54:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 271,
												"nodeType": "ExpressionStatement",
												"src": "2642:54:1"
											},
											{
												"expression": {
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 272,
															"name": "phone",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 242,
															"src": "2707:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																"typeString": "struct PhoneMarketplace.Phone storage pointer"
															}
														},
														"id": 274,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2713:6:1",
														"memberName": "isSold",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 99,
														"src": "2707:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 275,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2722:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2707:19:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 277,
												"nodeType": "ExpressionStatement",
												"src": "2707:19:1"
											},
											{
												"expression": {
													"id": 283,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 278,
															"name": "phone",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 242,
															"src": "2736:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																"typeString": "struct PhoneMarketplace.Phone storage pointer"
															}
														},
														"id": 280,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2742:5:1",
														"memberName": "buyer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 107,
														"src": "2736:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 281,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "2750:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 282,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2754:6:1",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "2750:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2736:24:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 284,
												"nodeType": "ExpressionStatement",
												"src": "2736:24:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 286,
															"name": "phoneId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 227,
															"src": "2785:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 287,
																"name": "phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 242,
																"src": "2794:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																	"typeString": "struct PhoneMarketplace.Phone storage pointer"
																}
															},
															"id": 288,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2800:6:1",
															"memberName": "seller",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 87,
															"src": "2794:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 289,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2808:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 290,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2812:6:1",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2808:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 291,
																"name": "phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 242,
																"src": "2820:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																	"typeString": "struct PhoneMarketplace.Phone storage pointer"
																}
															},
															"id": 292,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2826:5:1",
															"memberName": "price",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 97,
															"src": "2820:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 285,
														"name": "PhoneSold",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 135,
														"src": "2775:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (uint256,address,address,uint256)"
														}
													},
													"id": 293,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2775:57:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 294,
												"nodeType": "EmitStatement",
												"src": "2770:62:1"
											}
										]
									},
									"functionSelector": "bacca2ea",
									"id": 296,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 230,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 229,
												"name": "nonReentrant",
												"nameLocations": [
													"2378:12:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 32,
												"src": "2378:12:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2378:12:1"
										}
									],
									"name": "buyPhone",
									"nameLocation": "2335:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "phoneId",
												"nameLocation": "2352:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 296,
												"src": "2344:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2344:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2343:17:1"
									},
									"returnParameters": {
										"id": 231,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2391:0:1"
									},
									"scope": 575,
									"src": "2326:513:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 350,
										"nodeType": "Block",
										"src": "2894:399:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 305,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 302,
																"name": "phoneId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 298,
																"src": "2912:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 303,
																	"name": "phones",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 112,
																	"src": "2922:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Phone_$108_storage_$dyn_storage",
																		"typeString": "struct PhoneMarketplace.Phone storage ref[] storage ref"
																	}
																},
																"id": 304,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2929:6:1",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "2922:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2912:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50686f6e6520646f6573206e6f74206578697374",
															"id": 306,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2937:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_eddbf2d72f1c1aeaa691f38cccd8071245860212d11dfd29bed2ce840b3960f7",
																"typeString": "literal_string \"Phone does not exist\""
															},
															"value": "Phone does not exist"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_eddbf2d72f1c1aeaa691f38cccd8071245860212d11dfd29bed2ce840b3960f7",
																"typeString": "literal_string \"Phone does not exist\""
															}
														],
														"id": 301,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2904:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 307,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2904:56:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 308,
												"nodeType": "ExpressionStatement",
												"src": "2904:56:1"
											},
											{
												"assignments": [
													311
												],
												"declarations": [
													{
														"constant": false,
														"id": 311,
														"mutability": "mutable",
														"name": "phone",
														"nameLocation": "2984:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 350,
														"src": "2970:19:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
															"typeString": "struct PhoneMarketplace.Phone"
														},
														"typeName": {
															"id": 310,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 309,
																"name": "Phone",
																"nameLocations": [
																	"2970:5:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 108,
																"src": "2970:5:1"
															},
															"referencedDeclaration": 108,
															"src": "2970:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																"typeString": "struct PhoneMarketplace.Phone"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 315,
												"initialValue": {
													"baseExpression": {
														"id": 312,
														"name": "phones",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 112,
														"src": "2992:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_Phone_$108_storage_$dyn_storage",
															"typeString": "struct PhoneMarketplace.Phone storage ref[] storage ref"
														}
													},
													"id": 314,
													"indexExpression": {
														"id": 313,
														"name": "phoneId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 298,
														"src": "2999:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2992:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Phone_$108_storage",
														"typeString": "struct PhoneMarketplace.Phone storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2970:37:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 321,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 317,
																	"name": "phone",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 311,
																	"src": "3025:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																		"typeString": "struct PhoneMarketplace.Phone storage pointer"
																	}
																},
																"id": 318,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3031:6:1",
																"memberName": "seller",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 87,
																"src": "3025:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 319,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3041:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 320,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3045:6:1",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3041:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3025:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f6e6c792073656c6c65722063616e206469737061746368",
															"id": 322,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3053:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6504cac5d4365f44982a51bc86ef6d52b9c31afe3b6bab0c1a0d1eadc30a707c",
																"typeString": "literal_string \"Only seller can dispatch\""
															},
															"value": "Only seller can dispatch"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6504cac5d4365f44982a51bc86ef6d52b9c31afe3b6bab0c1a0d1eadc30a707c",
																"typeString": "literal_string \"Only seller can dispatch\""
															}
														],
														"id": 316,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3017:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 323,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3017:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 324,
												"nodeType": "ExpressionStatement",
												"src": "3017:63:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 326,
																"name": "phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 311,
																"src": "3098:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																	"typeString": "struct PhoneMarketplace.Phone storage pointer"
																}
															},
															"id": 327,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3104:6:1",
															"memberName": "isSold",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 99,
															"src": "3098:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50686f6e65206e6f7420736f6c6420796574",
															"id": 328,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3112:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e89da7455e3f879534345d4b1a39d00494779edb67a469de9425b387da58d1df",
																"typeString": "literal_string \"Phone not sold yet\""
															},
															"value": "Phone not sold yet"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e89da7455e3f879534345d4b1a39d00494779edb67a469de9425b387da58d1df",
																"typeString": "literal_string \"Phone not sold yet\""
															}
														],
														"id": 325,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3090:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3090:43:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "3090:43:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 334,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "3151:19:1",
															"subExpression": {
																"expression": {
																	"id": 332,
																	"name": "phone",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 311,
																	"src": "3152:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																		"typeString": "struct PhoneMarketplace.Phone storage pointer"
																	}
																},
																"id": 333,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3158:12:1",
																"memberName": "isDispatched",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 103,
																"src": "3152:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50686f6e6520616c72656164792064697370617463686564",
															"id": 335,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3172:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5296692ca7cd10611b401103e80289cedfec15abd4cea9226b9e4f937136f696",
																"typeString": "literal_string \"Phone already dispatched\""
															},
															"value": "Phone already dispatched"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5296692ca7cd10611b401103e80289cedfec15abd4cea9226b9e4f937136f696",
																"typeString": "literal_string \"Phone already dispatched\""
															}
														],
														"id": 331,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3143:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3143:56:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 337,
												"nodeType": "ExpressionStatement",
												"src": "3143:56:1"
											},
											{
												"expression": {
													"id": 342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 338,
															"name": "phone",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 311,
															"src": "3210:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																"typeString": "struct PhoneMarketplace.Phone storage pointer"
															}
														},
														"id": 340,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3216:12:1",
														"memberName": "isDispatched",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 103,
														"src": "3210:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 341,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3231:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "3210:25:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 343,
												"nodeType": "ExpressionStatement",
												"src": "3210:25:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 345,
															"name": "phoneId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 298,
															"src": "3266:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 346,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3275:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 347,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3279:6:1",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3275:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 344,
														"name": "PhoneDispatched",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 147,
														"src": "3250:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (uint256,address)"
														}
													},
													"id": 348,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3250:36:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 349,
												"nodeType": "EmitStatement",
												"src": "3245:41:1"
											}
										]
									},
									"functionSelector": "bdee3037",
									"id": 351,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "dispatchPhone",
									"nameLocation": "2854:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 299,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 298,
												"mutability": "mutable",
												"name": "phoneId",
												"nameLocation": "2876:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 351,
												"src": "2868:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 297,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2868:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2867:17:1"
									},
									"returnParameters": {
										"id": 300,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2894:0:1"
									},
									"scope": 575,
									"src": "2845:448:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 421,
										"nodeType": "Block",
										"src": "3350:555:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 357,
																"name": "phoneId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 353,
																"src": "3368:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 358,
																	"name": "phones",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 112,
																	"src": "3378:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Phone_$108_storage_$dyn_storage",
																		"typeString": "struct PhoneMarketplace.Phone storage ref[] storage ref"
																	}
																},
																"id": 359,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3385:6:1",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "3378:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3368:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50686f6e6520646f6573206e6f74206578697374",
															"id": 361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3393:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_eddbf2d72f1c1aeaa691f38cccd8071245860212d11dfd29bed2ce840b3960f7",
																"typeString": "literal_string \"Phone does not exist\""
															},
															"value": "Phone does not exist"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_eddbf2d72f1c1aeaa691f38cccd8071245860212d11dfd29bed2ce840b3960f7",
																"typeString": "literal_string \"Phone does not exist\""
															}
														],
														"id": 356,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3360:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3360:56:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 363,
												"nodeType": "ExpressionStatement",
												"src": "3360:56:1"
											},
											{
												"assignments": [
													366
												],
												"declarations": [
													{
														"constant": false,
														"id": 366,
														"mutability": "mutable",
														"name": "phone",
														"nameLocation": "3440:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 421,
														"src": "3426:19:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
															"typeString": "struct PhoneMarketplace.Phone"
														},
														"typeName": {
															"id": 365,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 364,
																"name": "Phone",
																"nameLocations": [
																	"3426:5:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 108,
																"src": "3426:5:1"
															},
															"referencedDeclaration": 108,
															"src": "3426:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																"typeString": "struct PhoneMarketplace.Phone"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 370,
												"initialValue": {
													"baseExpression": {
														"id": 367,
														"name": "phones",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 112,
														"src": "3448:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_Phone_$108_storage_$dyn_storage",
															"typeString": "struct PhoneMarketplace.Phone storage ref[] storage ref"
														}
													},
													"id": 369,
													"indexExpression": {
														"id": 368,
														"name": "phoneId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 353,
														"src": "3455:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3448:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Phone_$108_storage",
														"typeString": "struct PhoneMarketplace.Phone storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3426:37:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 376,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 372,
																	"name": "phone",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 366,
																	"src": "3481:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																		"typeString": "struct PhoneMarketplace.Phone storage pointer"
																	}
																},
																"id": 373,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3487:5:1",
																"memberName": "buyer",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 107,
																"src": "3481:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 374,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3496:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 375,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3500:6:1",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3496:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3481:25:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f6e6c792062757965722063616e20636f6e6669726d",
															"id": 377,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3508:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_19b92239caea117bc2140bfa6eab478495d6d9a0b98826562b984df1f7efa281",
																"typeString": "literal_string \"Only buyer can confirm\""
															},
															"value": "Only buyer can confirm"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_19b92239caea117bc2140bfa6eab478495d6d9a0b98826562b984df1f7efa281",
																"typeString": "literal_string \"Only buyer can confirm\""
															}
														],
														"id": 371,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3473:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3473:60:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 379,
												"nodeType": "ExpressionStatement",
												"src": "3473:60:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 381,
																"name": "phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 366,
																"src": "3551:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																	"typeString": "struct PhoneMarketplace.Phone storage pointer"
																}
															},
															"id": 382,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3557:6:1",
															"memberName": "isSold",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 99,
															"src": "3551:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50686f6e65206e6f7420736f6c6420796574",
															"id": 383,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3565:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e89da7455e3f879534345d4b1a39d00494779edb67a469de9425b387da58d1df",
																"typeString": "literal_string \"Phone not sold yet\""
															},
															"value": "Phone not sold yet"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e89da7455e3f879534345d4b1a39d00494779edb67a469de9425b387da58d1df",
																"typeString": "literal_string \"Phone not sold yet\""
															}
														],
														"id": 380,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3543:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 384,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3543:43:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 385,
												"nodeType": "ExpressionStatement",
												"src": "3543:43:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 387,
																"name": "phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 366,
																"src": "3604:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																	"typeString": "struct PhoneMarketplace.Phone storage pointer"
																}
															},
															"id": 388,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3610:12:1",
															"memberName": "isDispatched",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 103,
															"src": "3604:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50686f6e65206e6f74206469737061746368656420796574",
															"id": 389,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3624:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_63d5be0c8ef3066a5bd4b7a396d73f9b0c761296512b9d36f26f6c11e0a3e1de",
																"typeString": "literal_string \"Phone not dispatched yet\""
															},
															"value": "Phone not dispatched yet"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_63d5be0c8ef3066a5bd4b7a396d73f9b0c761296512b9d36f26f6c11e0a3e1de",
																"typeString": "literal_string \"Phone not dispatched yet\""
															}
														],
														"id": 386,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3596:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 390,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3596:55:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 391,
												"nodeType": "ExpressionStatement",
												"src": "3596:55:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 395,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "3669:17:1",
															"subExpression": {
																"expression": {
																	"id": 393,
																	"name": "phone",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 366,
																	"src": "3670:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																		"typeString": "struct PhoneMarketplace.Phone storage pointer"
																	}
																},
																"id": 394,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3676:10:1",
																"memberName": "isReceived",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 105,
																"src": "3670:16:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416c726561647920636f6e6669726d6564",
															"id": 396,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3688:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fd3e2b1cb86077fb543ac8ad4c9a93540a15bb47490a8dc4d1f36123b15b682d",
																"typeString": "literal_string \"Already confirmed\""
															},
															"value": "Already confirmed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fd3e2b1cb86077fb543ac8ad4c9a93540a15bb47490a8dc4d1f36123b15b682d",
																"typeString": "literal_string \"Already confirmed\""
															}
														],
														"id": 392,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3661:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 397,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3661:47:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 398,
												"nodeType": "ExpressionStatement",
												"src": "3661:47:1"
											},
											{
												"expression": {
													"id": 403,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 399,
															"name": "phone",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 366,
															"src": "3719:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																"typeString": "struct PhoneMarketplace.Phone storage pointer"
															}
														},
														"id": 401,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3725:10:1",
														"memberName": "isReceived",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 105,
														"src": "3719:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 402,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3738:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "3719:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 404,
												"nodeType": "ExpressionStatement",
												"src": "3719:23:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 406,
															"name": "phoneId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 353,
															"src": "3771:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 407,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3780:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3784:6:1",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3780:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 405,
														"name": "PhoneReceived",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 153,
														"src": "3757:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (uint256,address)"
														}
													},
													"id": 409,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3757:34:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 410,
												"nodeType": "EmitStatement",
												"src": "3752:39:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 417,
																"name": "phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 366,
																"src": "3886:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																	"typeString": "struct PhoneMarketplace.Phone storage pointer"
																}
															},
															"id": 418,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3892:5:1",
															"memberName": "price",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 97,
															"src": "3886:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 413,
																		"name": "phone",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 366,
																		"src": "3863:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																			"typeString": "struct PhoneMarketplace.Phone storage pointer"
																		}
																	},
																	"id": 414,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3869:6:1",
																	"memberName": "seller",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 87,
																	"src": "3863:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 412,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3855:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 411,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3855:8:1",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 415,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3855:21:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 416,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3877:8:1",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "3855:30:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3855:43:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 420,
												"nodeType": "ExpressionStatement",
												"src": "3855:43:1"
											}
										]
									},
									"functionSelector": "27dac36d",
									"id": 422,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "confirmReceived",
									"nameLocation": "3308:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "phoneId",
												"nameLocation": "3332:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "3324:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 352,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3324:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3323:17:1"
									},
									"returnParameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3350:0:1"
									},
									"scope": 575,
									"src": "3299:606:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 485,
										"nodeType": "Block",
										"src": "4015:448:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 435,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 432,
																"name": "phoneId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 424,
																"src": "4033:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 433,
																	"name": "phones",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 112,
																	"src": "4043:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Phone_$108_storage_$dyn_storage",
																		"typeString": "struct PhoneMarketplace.Phone storage ref[] storage ref"
																	}
																},
																"id": 434,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4050:6:1",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4043:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4033:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50686f6e6520646f6573206e6f74206578697374",
															"id": 436,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4058:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_eddbf2d72f1c1aeaa691f38cccd8071245860212d11dfd29bed2ce840b3960f7",
																"typeString": "literal_string \"Phone does not exist\""
															},
															"value": "Phone does not exist"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_eddbf2d72f1c1aeaa691f38cccd8071245860212d11dfd29bed2ce840b3960f7",
																"typeString": "literal_string \"Phone does not exist\""
															}
														],
														"id": 431,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4025:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4025:56:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 438,
												"nodeType": "ExpressionStatement",
												"src": "4025:56:1"
											},
											{
												"assignments": [
													441
												],
												"declarations": [
													{
														"constant": false,
														"id": 441,
														"mutability": "mutable",
														"name": "phone",
														"nameLocation": "4105:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 485,
														"src": "4091:19:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
															"typeString": "struct PhoneMarketplace.Phone"
														},
														"typeName": {
															"id": 440,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 439,
																"name": "Phone",
																"nameLocations": [
																	"4091:5:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 108,
																"src": "4091:5:1"
															},
															"referencedDeclaration": 108,
															"src": "4091:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																"typeString": "struct PhoneMarketplace.Phone"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 445,
												"initialValue": {
													"baseExpression": {
														"id": 442,
														"name": "phones",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 112,
														"src": "4113:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_Phone_$108_storage_$dyn_storage",
															"typeString": "struct PhoneMarketplace.Phone storage ref[] storage ref"
														}
													},
													"id": 444,
													"indexExpression": {
														"id": 443,
														"name": "phoneId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 424,
														"src": "4120:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4113:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Phone_$108_storage",
														"typeString": "struct PhoneMarketplace.Phone storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4091:37:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 449,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "4146:17:1",
															"subExpression": {
																"expression": {
																	"id": 447,
																	"name": "phone",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 441,
																	"src": "4147:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																		"typeString": "struct PhoneMarketplace.Phone storage pointer"
																	}
																},
																"id": 448,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4153:10:1",
																"memberName": "isVerified",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 101,
																"src": "4147:16:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50686f6e6520616c7265616479207665726966696564",
															"id": 450,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4165:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6cab4984dd8887316b6debe8d9b068a43c3cc15aa3c81fb8e069262757f3bc1f",
																"typeString": "literal_string \"Phone already verified\""
															},
															"value": "Phone already verified"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6cab4984dd8887316b6debe8d9b068a43c3cc15aa3c81fb8e069262757f3bc1f",
																"typeString": "literal_string \"Phone already verified\""
															}
														],
														"id": 446,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4138:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 451,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4138:52:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 452,
												"nodeType": "ExpressionStatement",
												"src": "4138:52:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 467,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 457,
																					"name": "phone",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 441,
																					"src": "4248:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																						"typeString": "struct PhoneMarketplace.Phone storage pointer"
																					}
																				},
																				"id": 458,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "4254:4:1",
																				"memberName": "imei",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 95,
																				"src": "4248:10:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_storage",
																					"typeString": "string storage ref"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_string_storage",
																					"typeString": "string storage ref"
																				}
																			],
																			"expression": {
																				"id": 455,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4231:3:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 456,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "4235:12:1",
																			"memberName": "encodePacked",
																			"nodeType": "MemberAccess",
																			"src": "4231:16:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 459,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4231:28:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 454,
																	"name": "keccak256",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967288,
																	"src": "4221:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																		"typeString": "function (bytes memory) pure returns (bytes32)"
																	}
																},
																"id": 460,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4221:39:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 464,
																				"name": "imei",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 426,
																				"src": "4307:4:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_memory_ptr",
																					"typeString": "string memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_string_memory_ptr",
																					"typeString": "string memory"
																				}
																			],
																			"expression": {
																				"id": 462,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4290:3:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 463,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "4294:12:1",
																			"memberName": "encodePacked",
																			"nodeType": "MemberAccess",
																			"src": "4290:16:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 465,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4290:22:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 461,
																	"name": "keccak256",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967288,
																	"src": "4280:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																		"typeString": "function (bytes memory) pure returns (bytes32)"
																	}
																},
																"id": 466,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4280:33:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "4221:92:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "494d4549206d69736d61746368",
															"id": 468,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4327:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e9135a48fa48f7b60b7ef976cd8ccd1faf01e1186318f4d5f542c5aee1da81da",
																"typeString": "literal_string \"IMEI mismatch\""
															},
															"value": "IMEI mismatch"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e9135a48fa48f7b60b7ef976cd8ccd1faf01e1186318f4d5f542c5aee1da81da",
																"typeString": "literal_string \"IMEI mismatch\""
															}
														],
														"id": 453,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4200:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 469,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4200:152:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 470,
												"nodeType": "ExpressionStatement",
												"src": "4200:152:1"
											},
											{
												"expression": {
													"id": 475,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 471,
															"name": "phone",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 441,
															"src": "4363:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																"typeString": "struct PhoneMarketplace.Phone storage pointer"
															}
														},
														"id": 473,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "4369:10:1",
														"memberName": "isVerified",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 101,
														"src": "4363:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 474,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4382:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "4363:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 476,
												"nodeType": "ExpressionStatement",
												"src": "4363:23:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 478,
															"name": "phoneId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 424,
															"src": "4415:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 479,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4424:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 480,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4428:6:1",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4424:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 477,
														"name": "PhoneVerified",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "4401:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (uint256,address)"
														}
													},
													"id": 481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4401:34:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 482,
												"nodeType": "EmitStatement",
												"src": "4396:39:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 483,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4452:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 430,
												"id": 484,
												"nodeType": "Return",
												"src": "4445:11:1"
											}
										]
									},
									"functionSelector": "99b4bc9f",
									"id": 486,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyPhone",
									"nameLocation": "3920:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 424,
												"mutability": "mutable",
												"name": "phoneId",
												"nameLocation": "3949:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 486,
												"src": "3941:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 423,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3941:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 426,
												"mutability": "mutable",
												"name": "imei",
												"nameLocation": "3980:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 486,
												"src": "3966:18:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 425,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3966:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3931:59:1"
									},
									"returnParameters": {
										"id": 430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 486,
												"src": "4009:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 428,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4009:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4008:6:1"
									},
									"scope": 575,
									"src": "3911:552:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 552,
										"nodeType": "Block",
										"src": "4921:455:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 517,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 514,
																"name": "phoneId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 488,
																"src": "4939:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 515,
																	"name": "phones",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 112,
																	"src": "4949:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Phone_$108_storage_$dyn_storage",
																		"typeString": "struct PhoneMarketplace.Phone storage ref[] storage ref"
																	}
																},
																"id": 516,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4956:6:1",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4949:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4939:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "50686f6e6520646f6573206e6f74206578697374",
															"id": 518,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4964:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_eddbf2d72f1c1aeaa691f38cccd8071245860212d11dfd29bed2ce840b3960f7",
																"typeString": "literal_string \"Phone does not exist\""
															},
															"value": "Phone does not exist"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_eddbf2d72f1c1aeaa691f38cccd8071245860212d11dfd29bed2ce840b3960f7",
																"typeString": "literal_string \"Phone does not exist\""
															}
														],
														"id": 513,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4931:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 519,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4931:56:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 520,
												"nodeType": "ExpressionStatement",
												"src": "4931:56:1"
											},
											{
												"assignments": [
													523
												],
												"declarations": [
													{
														"constant": false,
														"id": 523,
														"mutability": "mutable",
														"name": "phone",
														"nameLocation": "5011:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 552,
														"src": "4997:19:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
															"typeString": "struct PhoneMarketplace.Phone"
														},
														"typeName": {
															"id": 522,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 521,
																"name": "Phone",
																"nameLocations": [
																	"4997:5:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 108,
																"src": "4997:5:1"
															},
															"referencedDeclaration": 108,
															"src": "4997:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																"typeString": "struct PhoneMarketplace.Phone"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 527,
												"initialValue": {
													"baseExpression": {
														"id": 524,
														"name": "phones",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 112,
														"src": "5019:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_Phone_$108_storage_$dyn_storage",
															"typeString": "struct PhoneMarketplace.Phone storage ref[] storage ref"
														}
													},
													"id": 526,
													"indexExpression": {
														"id": 525,
														"name": "phoneId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 488,
														"src": "5026:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5019:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Phone_$108_storage",
														"typeString": "struct PhoneMarketplace.Phone storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4997:37:1"
											},
											{
												"expression": {
													"components": [
														{
															"expression": {
																"id": 528,
																"name": "phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 523,
																"src": "5065:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																	"typeString": "struct PhoneMarketplace.Phone storage pointer"
																}
															},
															"id": 529,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5071:6:1",
															"memberName": "seller",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 87,
															"src": "5065:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 530,
																"name": "phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 523,
																"src": "5091:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																	"typeString": "struct PhoneMarketplace.Phone storage pointer"
																}
															},
															"id": 531,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5097:12:1",
															"memberName": "manufacturer",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 89,
															"src": "5091:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														},
														{
															"expression": {
																"id": 532,
																"name": "phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 523,
																"src": "5123:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																	"typeString": "struct PhoneMarketplace.Phone storage pointer"
																}
															},
															"id": 533,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5129:9:1",
															"memberName": "modelName",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 91,
															"src": "5123:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														},
														{
															"expression": {
																"id": 534,
																"name": "phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 523,
																"src": "5152:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																	"typeString": "struct PhoneMarketplace.Phone storage pointer"
																}
															},
															"id": 535,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5158:9:1",
															"memberName": "modelCode",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 93,
															"src": "5152:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														},
														{
															"expression": {
																"id": 536,
																"name": "phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 523,
																"src": "5181:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																	"typeString": "struct PhoneMarketplace.Phone storage pointer"
																}
															},
															"id": 537,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5187:4:1",
															"memberName": "imei",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 95,
															"src": "5181:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														},
														{
															"expression": {
																"id": 538,
																"name": "phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 523,
																"src": "5205:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																	"typeString": "struct PhoneMarketplace.Phone storage pointer"
																}
															},
															"id": 539,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5211:5:1",
															"memberName": "price",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 97,
															"src": "5205:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 540,
																"name": "phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 523,
																"src": "5230:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																	"typeString": "struct PhoneMarketplace.Phone storage pointer"
																}
															},
															"id": 541,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5236:6:1",
															"memberName": "isSold",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 99,
															"src": "5230:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"expression": {
																"id": 542,
																"name": "phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 523,
																"src": "5256:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																	"typeString": "struct PhoneMarketplace.Phone storage pointer"
																}
															},
															"id": 543,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5262:10:1",
															"memberName": "isVerified",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 101,
															"src": "5256:16:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"expression": {
																"id": 544,
																"name": "phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 523,
																"src": "5286:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																	"typeString": "struct PhoneMarketplace.Phone storage pointer"
																}
															},
															"id": 545,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5292:12:1",
															"memberName": "isDispatched",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 103,
															"src": "5286:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"expression": {
																"id": 546,
																"name": "phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 523,
																"src": "5318:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																	"typeString": "struct PhoneMarketplace.Phone storage pointer"
																}
															},
															"id": 547,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5324:10:1",
															"memberName": "isReceived",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 105,
															"src": "5318:16:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"expression": {
																"id": 548,
																"name": "phone",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 523,
																"src": "5348:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Phone_$108_storage_ptr",
																	"typeString": "struct PhoneMarketplace.Phone storage pointer"
																}
															},
															"id": 549,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5354:5:1",
															"memberName": "buyer",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 107,
															"src": "5348:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"id": 550,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5051:318:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_string_storage_$_t_string_storage_$_t_string_storage_$_t_string_storage_$_t_uint256_$_t_bool_$_t_bool_$_t_bool_$_t_bool_$_t_address_$",
														"typeString": "tuple(address,string storage ref,string storage ref,string storage ref,string storage ref,uint256,bool,bool,bool,bool,address)"
													}
												},
												"functionReturnParameters": 512,
												"id": 551,
												"nodeType": "Return",
												"src": "5044:325:1"
											}
										]
									},
									"functionSelector": "2e7d44b5",
									"id": 553,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPhone",
									"nameLocation": "4478:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 488,
												"mutability": "mutable",
												"name": "phoneId",
												"nameLocation": "4504:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "4496:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 487,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4496:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4486:31:1"
									},
									"returnParameters": {
										"id": 512,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 491,
												"mutability": "mutable",
												"name": "seller",
												"nameLocation": "4586:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "4578:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 490,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4578:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "manufacturer",
												"nameLocation": "4620:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "4606:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 492,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4606:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "modelName",
												"nameLocation": "4660:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "4646:23:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 494,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4646:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "modelCode",
												"nameLocation": "4697:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "4683:23:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 496,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4683:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "imei",
												"nameLocation": "4734:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "4720:18:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 498,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4720:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "4760:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "4752:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 500,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4752:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "isSold",
												"nameLocation": "4784:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "4779:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 502,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4779:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "isVerified",
												"nameLocation": "4809:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "4804:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 504,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4804:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 507,
												"mutability": "mutable",
												"name": "isDispatched",
												"nameLocation": "4838:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "4833:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 506,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4833:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 509,
												"mutability": "mutable",
												"name": "isReceived",
												"nameLocation": "4869:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "4864:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 508,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4864:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 511,
												"mutability": "mutable",
												"name": "buyer",
												"nameLocation": "4901:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "4893:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 510,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4893:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4564:352:1"
									},
									"scope": 575,
									"src": "4469:907:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 561,
										"nodeType": "Block",
										"src": "5439:37:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 558,
														"name": "phones",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 112,
														"src": "5456:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_Phone_$108_storage_$dyn_storage",
															"typeString": "struct PhoneMarketplace.Phone storage ref[] storage ref"
														}
													},
													"id": 559,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "5463:6:1",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "5456:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 557,
												"id": 560,
												"nodeType": "Return",
												"src": "5449:20:1"
											}
										]
									},
									"functionSelector": "6132d789",
									"id": 562,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPhoneCount",
									"nameLocation": "5391:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 554,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5404:2:1"
									},
									"returnParameters": {
										"id": 557,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 556,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "5430:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 555,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5430:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5429:9:1"
									},
									"scope": 575,
									"src": "5382:94:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 573,
										"nodeType": "Block",
										"src": "5546:46:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 568,
														"name": "userPhones",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 117,
														"src": "5563:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$",
															"typeString": "mapping(address => uint256[] storage ref)"
														}
													},
													"id": 571,
													"indexExpression": {
														"expression": {
															"id": 569,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "5574:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 570,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5578:6:1",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "5574:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5563:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
														"typeString": "uint256[] storage ref"
													}
												},
												"functionReturnParameters": 567,
												"id": 572,
												"nodeType": "Return",
												"src": "5556:29:1"
											}
										]
									},
									"functionSelector": "af118963",
									"id": 574,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getMyPhones",
									"nameLocation": "5491:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 563,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5502:2:1"
									},
									"returnParameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "5528:16:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 564,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5528:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 565,
													"nodeType": "ArrayTypeName",
													"src": "5528:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5527:18:1"
									},
									"scope": 575,
									"src": "5482:110:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 576,
							"src": "119:5475:1",
							"usedErrors": [
								13
							],
							"usedEvents": [
								125,
								135,
								141,
								147,
								153
							]
						}
					],
					"src": "32:5563:1"
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": null,
				"formattedMessage": "\nWarning: It looks like you are using '<address payable>.send/transfer(<X>)'.\nUsing '<address payable>.send/transfer(<X>)' is deprecated and strongly discouraged!\nThe resolc compiler uses a heuristic to detect '<address payable>.send/transfer(<X>)' calls,\nwhich disables call re-entrancy and supplies all remaining gas instead of the 2300 gas stipend.\nHowever, detection is not guaranteed. You are advised to carefully test this, employ\nre-entrancy guards or use the withdrawal pattern instead!\nLearn more on https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy\nand https://docs.soliditylang.org/en/latest/common-patterns.html#withdrawal-from-contracts\n\n--> PhoneMarketplace.sol\n",
				"message": "\nWarning: It looks like you are using '<address payable>.send/transfer(<X>)'.\nUsing '<address payable>.send/transfer(<X>)' is deprecated and strongly discouraged!\nThe resolc compiler uses a heuristic to detect '<address payable>.send/transfer(<X>)' calls,\nwhich disables call re-entrancy and supplies all remaining gas instead of the 2300 gas stipend.\nHowever, detection is not guaranteed. You are advised to carefully test this, employ\nre-entrancy guards or use the withdrawal pattern instead!\nLearn more on https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy\nand https://docs.soliditylang.org/en/latest/common-patterns.html#withdrawal-from-contracts\n",
				"severity": "warning",
				"sourceLocation": {
					"file": "1",
					"start": 3855,
					"end": 3898
				},
				"type": "Warning"
			}
		],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}